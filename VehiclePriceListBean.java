package dms.sales.model.applicationModule;


//import dms.sales.model.view.readonly.SmVChargesTVOImpl;
import dms.sales.model.applicationModule.common.SalesModuleAM;
import dms.sales.model.view.entity.AmTermConditionsVOImpl;
import dms.sales.model.view.entity.ChargesDetailsVOImpl;
import dms.sales.model.view.entity.DeliveryNoteGmVinVOImpl;
import dms.sales.model.view.entity.GatePassVOImpl;
import dms.sales.model.view.entity.GmCalndrVOImpl;
import dms.sales.model.view.entity.GmFacultyMaterVOImpl;
import dms.sales.model.view.entity.GmGropdVOImpl;
import dms.sales.model.view.entity.GmGrophVOImpl;
import dms.sales.model.view.entity.LMSCalUpdPrgmVOImpl;
import dms.sales.model.view.entity.LMSCalUpdPrgmVORowImpl;
import dms.sales.model.view.entity.ReceiptEOViewImpl;
import dms.sales.model.view.entity.ReceiptEOViewRowImpl;
import dms.sales.model.view.entity.SalesInvoiceVORowImpl;
import dms.sales.model.view.entity.SdCompFollowUpVOImpl;
import dms.sales.model.view.entity.SdGrnAllotmentVOImpl;
import dms.sales.model.view.entity.SdGrnVOImpl;
import dms.sales.model.view.entity.SdInvChargesEOViewImpl;
import dms.sales.model.view.entity.SdLoyltyExchClaimEOViewImpl;
import dms.sales.model.view.entity.SdMgaBookingVOImpl;
import dms.sales.model.view.entity.SdPreInvChargesVOImpl;
import dms.sales.model.view.entity.SdReceiptsVOImpl;
import dms.sales.model.view.entity.ShComplaintsVOImpl;
import dms.sales.model.view.entity.ShGrnVOImpl;
import dms.sales.model.view.entity.ShInvSchemeVOImpl;
import dms.sales.model.view.entity.ShInvoiceEOViewImpl;
import dms.sales.model.view.entity.ShLeaseCinVOImpl;
import dms.sales.model.view.entity.ShLeaseCinVORowImpl;
import dms.sales.model.view.entity.ShOrdBookAmendmentVOImpl;
import dms.sales.model.view.entity.ShOrdbookMainVOImpl;
import dms.sales.model.view.entity.ShPreInvoiceVOImpl;
import dms.sales.model.view.entity.ShPreInvoiceVORowImpl;
import dms.sales.model.view.entity.ShReceiptsVOImpl;
import dms.sales.model.view.entity.SmDlrStkyrdEOViewImpl;
import dms.sales.model.view.entity.StAllotEOViewImpl;
import dms.sales.model.view.entity.StBookFollowVOImpl;
import dms.sales.model.view.entity.StIndentVORowImpl;
import dms.sales.model.view.entity.StStktrIssVORowImpl;
import dms.sales.model.view.entity.StSuppVOImpl;
import dms.sales.model.view.entity.TempSMSchemeMasterVOImpl;
import dms.sales.model.view.lov.CountVINForSdGrnLOVImpl;
import dms.sales.model.view.lov.DefaultPrntCreditNoteLOVImpl;
import dms.sales.model.view.lov.DetailsForSdGrnLOVImpl;
import dms.sales.model.view.lov.GroupMasterYNLOVImpl;
import dms.sales.model.view.lov.GstSTImpl;
import dms.sales.model.view.lov.LOV_OkDamageSTImpl;
import dms.sales.model.view.lov.OrderBookCustCdLOVImpl;
import dms.sales.model.view.lov.PartyDetailsALOVImpl;
import dms.sales.model.view.lov.PartyDetailsILOVImpl;
import dms.sales.model.view.lov.StiSearchResultLOVImpl;
import dms.sales.model.view.lov.StockyardCreationLOVImpl;
import dms.sales.model.view.lov.VehicleChargeTypeLOVImpl;
import dms.sales.model.view.lov.salesInv.OldCarDetailsPopUpVOImpl;
import dms.sales.model.view.lov.salesInv.PreferredSRVDealerPopupVORowImpl;
import dms.sales.model.view.readonly.AmTermConditionsROImpl;
import dms.sales.model.view.readonly.AttendanceMgMtDualVOImpl;
import dms.sales.model.view.readonly.BonusMasterClosureSTRowImpl;
import dms.sales.model.view.readonly.BonusMasterSearchRORowImpl;
import dms.sales.model.view.readonly.BookingFollowupVOImpl;
import dms.sales.model.view.readonly.BookingPriceSTRowImpl;
import dms.sales.model.view.readonly.ComClaimDclrRVOImpl;
import dms.sales.model.view.readonly.CommercialClaimDocDualRVOImpl;
import dms.sales.model.view.readonly.CommercialClaimDualRVOImpl;
import dms.sales.model.view.readonly.CommercialCliamInoviceDetailsDualRVOImpl;
import dms.sales.model.view.readonly.ComplaintRegistrationSTImpl;
import dms.sales.model.view.readonly.CoomercialClaimDocDtlDualRVOImpl;
import dms.sales.model.view.readonly.CorporateGroupMasterUploadDetailsRVOImpl;
import dms.sales.model.view.readonly.CorporateGroupMasterUploadErrorRVOImpl;
import dms.sales.model.view.readonly.CorporateGroupMasterUploadRVOImpl;
import dms.sales.model.view.readonly.CorporateGroupMasterUploadStatusRVOImpl;
import dms.sales.model.view.readonly.CustomerDeclarationAckSTImpl;
import dms.sales.model.view.readonly.CustomerDeclarationAckSTRowImpl;
import dms.sales.model.view.readonly.DeliveryNoteSearchROImpl;
import dms.sales.model.view.readonly.DlvryNoteAMChannelROImpl;
import dms.sales.model.view.readonly.DlvryNoteCancelChallanROImpl;
import dms.sales.model.view.readonly.ExchangeBusinessReportTVOImpl;
import dms.sales.model.view.readonly.ExchangeTradeInTVOImpl;
import dms.sales.model.view.readonly.FmCardSTImpl;
import dms.sales.model.view.readonly.FmCardSearchSTImpl;
import dms.sales.model.view.readonly.FmPartyMasterRVOImpl;
import dms.sales.model.view.readonly.FmPartyMasterSTImpl;
import dms.sales.model.view.readonly.FmPartyMasterSTRowImpl;
import dms.sales.model.view.readonly.GRNSearchResultsROImpl;
import dms.sales.model.view.readonly.GatePassROImpl;
import dms.sales.model.view.readonly.GdFacultyScoreRVOImpl;
import dms.sales.model.view.readonly.GmSchemeMasterTVOImpl;
import dms.sales.model.view.readonly.GmVinChassisNumRVOImpl;
import dms.sales.model.view.readonly.GmVinFetchDetailsROImpl;
import dms.sales.model.view.readonly.GmVinFetchDetailsRORowImpl;
import dms.sales.model.view.readonly.GmVinFetchLocROImpl;
import dms.sales.model.view.readonly.GmVinFetchLocRORowImpl;
import dms.sales.model.view.readonly.GmVinFetchROImpl;
import dms.sales.model.view.readonly.GmVinFetchRORowImpl;
import dms.sales.model.view.readonly.GmVinFetchSchemeROImpl;
import dms.sales.model.view.readonly.GmVinFetchSchemeRORowImpl;
import dms.sales.model.view.readonly.GmVinSTImpl;
import dms.sales.model.view.readonly.GmVinSearchROImpl;
import dms.sales.model.view.readonly.InvoiceCancelApprovalROImpl;
import dms.sales.model.view.readonly.InvoiceCancelApprovalSTImpl;
import dms.sales.model.view.readonly.LMSCalAgencyMasterROImpl;
import dms.sales.model.view.readonly.LMSCalCityROImpl;
import dms.sales.model.view.readonly.LMSCalUploadErrorLogROImpl;
import dms.sales.model.view.readonly.LMSCalenderMasterROImpl;
import dms.sales.model.view.readonly.LMSCalenderUpdationSearchROImpl;
import dms.sales.model.view.readonly.LMSCalenderUploadDualROImpl;
import dms.sales.model.view.readonly.OrderBookingChargesROImpl;
import dms.sales.model.view.readonly.OrderBookingROImpl;
import dms.sales.model.view.readonly.ReceiptSearchTVOImpl;
import dms.sales.model.view.readonly.SaleRowImpl;
import dms.sales.model.view.readonly.SalesCertificateDetailsRVOImpl;
import dms.sales.model.view.readonly.SalesCertificateDualRVOImpl;
import dms.sales.model.view.readonly.SchemeMasterClosureDetailsRVOImpl;
import dms.sales.model.view.readonly.SchemeMasterClosureDualVOImpl;
import dms.sales.model.view.readonly.SchemeMasterUploadSTImpl;
import dms.sales.model.view.readonly.ShOrdPreBookingROImpl;
import dms.sales.model.view.readonly.ShOrdReceiptDetailROImpl;
import dms.sales.model.view.readonly.SmVChargesTVOImpl;
import dms.sales.model.view.readonly.TempSmSchemeMasterROImpl;
import dms.sales.model.view.readonly.TrainerMasterDualVOImpl;
import dms.sales.model.view.readonly.ZonalApprvRejectSchemeSearchROImpl;
import dms.sales.model.view.readonly.ZonalApprvRejectSmAddBonusMasterROImpl;
import dms.sales.model.view.readonly.ZonalApprvRejectSmBonusMasterROImpl;
import dms.sales.model.view.readonly.ZonalApprvRejectSmBonusStklMasterImpl;
import dms.sales.model.view.readonly.reports.ClaimDocumentLoadingStatusReportNVLCheckROImpl;
import dms.sales.model.view.readonly.reports.DealerQueryROImpl;
import dms.sales.model.view.readonly.reports.HSRPDetailReportStaffTOImpl;
import dms.sales.model.view.readonly.reports.HSRPDetailReportTOImpl;
import dms.sales.model.view.readonly.reports.HSRPSummaryReportStaffTOImpl;
import dms.sales.model.view.readonly.reports.HSRPSummaryReportTOImpl;
import dms.sales.model.view.readonly.reports.HSRPUploadTOImpl;
import dms.sales.model.view.readonly.reports.OutletQueryROImpl;
import dms.sales.model.view.readonly.reports.ReportsQueryROImpl;
import dms.sales.model.view.readonly.reports.VehiclePriceListDealerROImpl;

import java.math.BigDecimal;
import java.math.MathContext;
import java.math.RoundingMode;

import java.sql.CallableStatement;
import java.sql.Connection;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.sql.Timestamp;
import java.sql.Types;

import java.text.DateFormat;
import java.text.ParseException;
import java.text.SimpleDateFormat;

import java.util.ArrayList;
import java.util.Calendar;
import java.util.HashMap;
import java.util.Locale;
import java.util.Map;

import javax.el.ELContext;
import javax.el.ValueExpression;

import oracle.adf.share.ADFContext;
import oracle.adf.share.logging.ADFLogger;

import oracle.jbo.JboException;
import oracle.jbo.Row;
import oracle.jbo.RowSetIterator;
import oracle.jbo.VariableValueManager;
import oracle.jbo.ViewCriteria;
import oracle.jbo.ViewCriteriaManager;
import oracle.jbo.ViewObject;
import oracle.jbo.domain.Date;
import oracle.jbo.format.DefaultDateFormatter;
import oracle.jbo.server.ApplicationModuleImpl;
import oracle.jbo.server.DBTransaction;
import oracle.jbo.server.DBTransactionImpl;
import oracle.jbo.server.ViewLinkImpl;
import oracle.jbo.server.ViewObjectImpl;

import oracle.jdbc.OracleTypes;
// ---------------------------------------------------------------------
// ---    File generated by Oracle ADF Business Components Design Time.
// ---    Sat Oct 31 16:14:02 IST 2020
// ---    Custom code may be added to this class.
// ---    Warning: Do not modify method signatures of generated methods.
// ---------------------------------------------------------------------
public class SalesModuleAMImpl extends ApplicationModuleImpl implements SalesModuleAM {

    /**
     * This is the ADFLogger Declaration
     */
    private static final ADFLogger LOGGER = ADFLogger.createADFLogger(SalesModuleAMImpl.class);

    /**
     * This is the default constructor (do not remove).
     */
    public SalesModuleAMImpl() {
    }
	
	 	public String SpInsertStBookFollow(HashMap map){
			System.out.println("SpInsertStBookFollow");
	    String SEZ = "Y";
	    try{
		DBTransaction trx = (DBTransaction) getTransaction();
        CallableStatement st = null;
			String message = null;
		Map session = ADFContext.getCurrent().getSessionScope();
		ViewObjectImpl vo = this.getShOrdbookMainVO1();
        Row r = vo.getCurrentRow();
		 String comp = session.get("compCode").toString();
	
	
	ViewObject v1 = this.getStBookFollowVO1();
	Row rr = v1.getCurrentRow();
	String Followupdone = "N";
	if(rr != null){
	String BookFollowactnactl  = (String)rr.getAttribute("BookFollowactnactl");
	if(BookFollowactnactl!=null){
		Followupdone = "Y";
	}
	}
	
	
		String loc = session.get("locCd").toString();
		Integer dealer = Integer.parseInt(session.get("dealerMapCd").toString());
		String parent = session.get("parentGroupCd").toString();
         Integer pmc = Integer.parseInt(session.get("principalMapCd").toString());
		    String EnqNum = (String)r.getAttribute("EnqNum");
			String OrderNum = (String)r.getAttribute("OrderNum");
		String SalesManCd = (String)r.getAttribute("SalesManCd");
		String OrderStatus = (String)r.getAttribute("OrderStatus");
		if(null == OrderStatus){
			OrderStatus="B";
		}
		Integer errcode=0;
	
	System.out.println("SalesManCd value : "+SalesManCd);
	oracle.jbo.domain.Date maxDt = new oracle.jbo.domain.Date();
                oracle.jbo.domain.Date currentDt1 =(oracle.jbo.domain.Date) maxDt.getCurrentDate();
                DateFormat dateFormat = new SimpleDateFormat("dd-MM-yyyy");
                String DateVal = dateFormat.format(currentDt1.getValue());
	System.out.println("INSERT :::::"+(String)map.get("Insert"));
	System.out.println("Followupdone ::::"+Followupdone);
				if(((String)map.get("Insert")).equalsIgnoreCase("Y")){
					
					
					if(Followupdone.equalsIgnoreCase("Y")){
			String stmt = "begin PKG_BOOKING_FOLLOWUP.SP_INSERT_ST_BOOK_FOLLOW(?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?); end;";
                                st = trx.createCallableStatement(stmt, 0);
								st.setString(1, parent);
								st.setInt(2, dealer);
								st.setString(3, loc);
								st.setString(4, comp);
								st.setString(5, EnqNum);
								st.setString(6, OrderNum);
								st.setString(7, SalesManCd);
								st.setObject(8, map.get("date"));
								st.setObject(9, map.get("time"));
								st.setString(10, OrderStatus);
								st.setObject(11, map.get("followby"));
								st.setObject(12, map.get("bkstageactual"));
								st.setObject(13, map.get("actionactual"));
								st.setObject(14, map.get("nsdate"));
								st.setObject(15, map.get("nstime"));
								st.setString(16, null);
								st.setString(17, null);
								st.setString(18, "");
								st.setString(19, "");
								st.setObject(20, map.get("nsactionactual"));
								st.setObject(21, map.get("nsbkstageactual"));
								st.setString(22, session.get("userCode").toString());
                                
								st.registerOutParameter(23, Types.VARCHAR);
								st.registerOutParameter(24, Types.NUMERIC);
                                st.executeUpdate();
			
			
									 errcode = st.getInt(24);
		                			message = st.getString(23);
									
									System.out.println("count errcode"+errcode+message+SEZ);
								if(errcode.compareTo(0)>0){
									return message;
								}
								
					}
					else{
						String stmt = "begin PKG_BOOKING_FOLLOWUP.SP_INSERT_ST_BOOK_FOLLOW(?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?); end;";
                                st = trx.createCallableStatement(stmt, 0);
								st.setString(1, parent);
								st.setInt(2, dealer);
								st.setString(3, loc);
								st.setString(4, comp);
								st.setString(5, EnqNum);
								st.setString(6, OrderNum);
								st.setString(7, SalesManCd);
								st.setObject(8,  DateVal);
								st.setDouble(9,10.30);
								st.setString(10, OrderStatus);
								st.setObject(11,SalesManCd);
								st.setObject(12, null);
								st.setObject(13, null);
								st.setObject(14, null);
								st.setDouble(15, 10.30);
								st.setString(16, null);
								st.setString(17, null);
								st.setString(18, "Z");
								st.setString(19, "T");
								st.setObject(20, map.get("nsactionactual"));
								st.setObject(21, map.get("nsbkstageactual"));
								st.setString(22, session.get("userCode").toString());
                                
								st.registerOutParameter(23, Types.VARCHAR);
								st.registerOutParameter(24, Types.NUMERIC);
                                st.executeUpdate();
			
			
									 errcode = st.getInt(24);
		                			message = st.getString(23);
									
									System.out.println("count errcode"+errcode+message+SEZ);
								if(errcode.compareTo(0)>0){
									return message;
								}
					}
								
				}
				else{
					if(Followupdone.equalsIgnoreCase("Y")){
					String stmt = "begin PKG_BOOKING_FOLLOWUP.SP_INSERT_ST_BOOK_FOLLOW(?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?); end;";
                                st = trx.createCallableStatement(stmt, 0);
								st.setString(1, parent);
								st.setInt(2, dealer);
								st.setString(3, loc);
								st.setString(4, comp);
								st.setString(5, EnqNum);
								st.setString(6, OrderNum);
								st.setString(7, SalesManCd);
								st.setObject(8, map.get("date"));
								st.setObject(9, map.get("time"));
								st.setString(10, OrderStatus);
								st.setObject(11, map.get("followby"));
								st.setObject(12, map.get("bkstageactual"));
								st.setObject(13, map.get("actionactual"));
								st.setObject(14, map.get("nsdate"));
								st.setObject(15, map.get("nstime"));
								st.setString(16, null);
								st.setString(17, null);
								st.setString(18, "");
								st.setString(19, "");
								st.setObject(20, map.get("nsactionactual"));
								st.setObject(21, map.get("nsbkstageactual"));
								st.setString(22, session.get("userCode").toString());
                                
								st.registerOutParameter(23, Types.VARCHAR);
								st.registerOutParameter(24, Types.NUMERIC);
                                st.executeUpdate();
			
			
									 errcode = st.getInt(24);
		                			message = st.getString(23);
									
									System.out.println("count errcode"+errcode+message+SEZ);
								if(errcode.compareTo(0)>0){
									return message;
								}
					}
					
				}
								
								
										
	}
	catch(Exception e){
		e.printStackTrace();
	}
	
	return SEZ;
	}
	
	
	 public String otpSendAndResendOnMobileOrderTracking(String mobile_num,String dealer_mapcode,String loc_code,String parent_groupcd)
    {
        String return_msg=null;
    System.out.println("**************optSendAndResendOnMobileOrdTracking***********");
    System.out.println("mobile_num::::"+mobile_num+" dealer_mapcode::::"+dealer_mapcode+" loc_code::::"+loc_code+"parent_groupcd::::"+parent_groupcd);
	
	String stmt = "begin DMS2_PSS_ENQ_TRAC_OTP(?,?,?,?,?,?);commit; end;";
        DBTransaction dbtxn = (DBTransaction) getTransaction();
        CallableStatement cs = dbtxn.createCallableStatement(stmt.toString(), 1);
        try {
            cs.setObject(1, mobile_num);
            cs.setObject(2, dealer_mapcode);
            cs.setObject(3, loc_code);
            cs.setObject(4, parent_groupcd);
            cs.registerOutParameter(5, OracleTypes.NUMERIC);
            cs.registerOutParameter(6, OracleTypes.VARCHAR);
            cs.execute();
            System.out.println("Error code is:::::"+cs.getInt(5));
            System.out.println("Error Message is:::::"+cs.getString(6));
            if(cs.getString(6)!=null)
            {
            return_msg=cs.getString(6);
            }
            
        } catch (SQLException sqle) {
            // TODO: Add catch code
            sqle.printStackTrace();
        }
        finally{
            try {
                cs.close();
            } catch (SQLException sqle) {
                // TODO: Add catch code
                sqle.printStackTrace();
		}}
		 System.out.println("********************End of optSendAndResendOnMobileOrdTracking*********************");
    return return_msg;
	}
	
	 public String checkOtpOnSaveOrderTracking(String dealer_mapCode,String parent_groupcode,String loc_code,String comp_fa,String enq_type,String enq_num,Integer verify_opt,String mobile_num)
    {
        
        System.out.println("********************************checkOptOnSaveEnqTracking******************************");
        System.out.println("dealer_mapCode::::"+dealer_mapCode+" parent_groupcode::::"+parent_groupcode+" loc_code::::"+loc_code+" comp_fa::::"+comp_fa+" enq_type::::"+enq_type+" enq_num::::"+enq_num+" verify_opt::::"+verify_opt+" mobile_num::::"+mobile_num);
        System.out.println("-----------------First-------------------------");
        Integer lv_cnt=0, lv_opt=null,lv_etype_cd=0;
        String lv_cnt_query="SELECT COUNT(*) lv_cnt FROM AM_DEALER_LOC WHERE PRINCIPAL_MAP_CD = 2 AND PARENT_GROUP = '"+parent_groupcode+"' AND LOC_CD ='"+loc_code+"' AND DEALER_MAP_CD ='"+dealer_mapCode+"' AND NVL(MSIL_TERMINATED_DATE, SYSDATE) >= SYSDATE AND DEALER_TYPE IN ('S','3S','ASSC')";
        String lv_etype_query="select COUNT(*) LV_ETYPE_CD FROM RH_ENQ RE WHERE DEALER_MAP_CD ='"+dealer_mapCode+"' AND LOC_CD ='"+loc_code+"' AND PARENT_GROUP ='"+parent_groupcode+"' and comp_fa ='"+comp_fa+"' AND ENQ_num ='"+enq_num+"' and ETYPE_CD NOT IN ('DCV','WLK','WKE')";
        String lv_otp_query="SELECT otp FROM SMIPL_SMS_OTP_LOG WHERE mobile_num = '"+mobile_num+"' and process_code = 'ENQUIRY_SMIPL' AND sysdate between sent_date_time and valid_upto_date_time";
        System.out.println("-----------------Second-------------------------");
        System.out.println("lv_cnt_query---------->"+lv_cnt_query);
        System.out.println("lv_etype_query---------->"+lv_etype_query);
        System.out.println("lv_otp_query---------->"+lv_otp_query);
        System.out.println("-----------------Third-------------------------");
        ResultSet rs=null,rs1=null,rs2=null;
        System.out.println("-----------------Four-------------------------");
        try {
            System.out.println("-----------------five-------------------------");
            rs = getDBTransaction().createStatement(0).executeQuery(lv_cnt_query);
            if (rs.next()) {
                lv_cnt = rs.getInt(1);
                System.out.println("lv_cnt::::::::::::"+lv_cnt);
            }
            rs.close();
        } catch (SQLException sqle) {
            // TODO: Add catch code
            sqle.printStackTrace();
        }
    
        try {
            System.out.println("-----------------Six-------------------------");
            rs1 = getDBTransaction().createStatement(0).executeQuery(lv_etype_query);
            if (rs1.next()) {
                lv_etype_cd = rs1.getInt(1);
                System.out.println("lv_etype_cd------------->"+lv_etype_cd);
            }
            rs1.close();
        } catch (SQLException sqle) {
            // TODO: Add catch code
            sqle.printStackTrace();
        }

        System.out.println("-----------------Seven-------------------------");
    if(lv_cnt>0 && (enq_num==null || lv_etype_cd==1)) // && (enq_type.equalsIgnoreCase("DCV") || enq_type.equalsIgnoreCase("WLK") || enq_type.equalsIgnoreCase("WKE")))
    {
        if(verify_opt==null)
        {
         System.out.println("Please enter OTP to verify");
         return "NP";   
        }
        
        try {
            rs2 = getDBTransaction().createStatement(0).executeQuery(lv_otp_query);
            if (rs2.next()) {
                lv_opt = rs2.getInt(1);
                System.out.println("lv_opt::::::::::::::::::"+lv_opt);
            }
            rs2.close();
        } catch (SQLException sqle) {
            // TODO: Add catch code
            sqle.printStackTrace();
        }
        System.out.println("lv_opt::::::::::"+lv_opt+" verify_opt:::::::"+verify_opt);
        try {
                if (lv_opt.compareTo(verify_opt) != 0) {
                    System.out.println("Invalid OTP, please use Send and Resend Option");
                    System.out.println("********************End of checkOptOnSaveEnqTracking*********************");
                    return "NI";
                } else {
                    System.out.println("********************End of checkOptOnSaveEnqTracking*********************");
                    System.out.println("In case of Y");
                    return "Y";
                }
            } catch (NullPointerException e) {
                System.out.println("ERROR:::Invalid OTP, please use Send and Resend Option");
                return "NI";
            }        
    }
    return null;
    }
	
	
	  public Integer visibleConditionOfOtpOrderTracking(String parent_groupcode,String loc_code,String dealer_mapCode)
{
System.out.println("parent_groupcode---->"+parent_groupcode+" loc_code----->"+loc_code+"  dealer_mapCode----->"+dealer_mapCode);    
Integer lv_cnt=0;    
String lv_cnt_query="SELECT COUNT(*) lv_cnt FROM AM_DEALER_LOC WHERE PRINCIPAL_MAP_CD = 2 AND PARENT_GROUP = '"+parent_groupcode+"' AND LOC_CD ='"+loc_code+"' AND DEALER_MAP_CD ='"+dealer_mapCode+"' AND NVL(MSIL_TERMINATED_DATE, SYSDATE) >= SYSDATE AND DEALER_TYPE IN ('S','3S','ASSC')";    
System.out.println("lv_cnt_query---------->"+lv_cnt_query);
try {
            ResultSet rs = getDBTransaction().createStatement(0).executeQuery(lv_cnt_query);
            if (rs.next()) {
                lv_cnt = rs.getInt(1);
                System.out.println("lv_cnt::::::::::::" + lv_cnt);
            }
            rs.close();
        } catch (SQLException sqle) {
            lv_cnt=0;
            sqle.printStackTrace();
        }
System.out.println("Return value is:::::"+lv_cnt);
    return lv_cnt;
}

public String getModelDetailForDelayFlg()
{
//System.out.println("parent_groupcode---->"+parent_groupcode+" loc_code----->"+loc_code+"  dealer_mapCode----->"+dealer_mapCode);
Map session = ADFContext.getCurrent().getSessionScope();
		
ViewObjectImpl vo = this.getOrderBookingEnquiryRO1();
        Row r = vo.getCurrentRow();
    String ModelCd = (String)r.getAttribute("ModelCd");
String list_code=null;    
String list_codeqry="SELECT list_code FROM am_list WHERE LIST_NAME = DECODE( '"+session.get("channelType")+"','NRM','DELAY_FLAG_NRM_MODEL','EXC','DELAY_FLAG_EXC_MODEL') AND LIST_CODE= '"+ModelCd+"'";    
System.out.println("list_code ---------->"+list_codeqry);
try {
            ResultSet rs = getDBTransaction().createStatement(0).executeQuery(list_codeqry);
            if (rs.next()) {
                list_code = rs.getString(1);
                System.out.println("list_code ::::::::::::" + list_code);
            }
            rs.close();
        } catch (SQLException sqle) {
            list_code=null;
            sqle.printStackTrace();
        }
System.out.println("Return value is:::::"+list_code);
    return list_code;
}
 
	
	public String OrderBcrPrintUpload(String OrderNum){
			System.out.println("SpInsertStBookFollow");
	    String SEZ = "Y";
	    try{
		DBTransaction trx = (DBTransaction) getTransaction();
        CallableStatement st = null;
			String message = null;
		Map session = ADFContext.getCurrent().getSessionScope();
		 String comp = session.get("compCode").toString();
       
		String loc = session.get("locCd").toString();
		Integer dealer = Integer.parseInt(session.get("dealerMapCd").toString());
		String parent = session.get("parentGroupCd").toString();
         Integer pmc = Integer.parseInt(session.get("principalMapCd").toString());
		    
		Integer errcode=0;
		
				        
               
				
			String stmt = "begin sp_ordbook_bcr_print_upd(?,?,?,?,?,?,?); end;";
                                st = trx.createCallableStatement(stmt, 0);
								st.setString(1, parent);
								st.setInt(2, dealer);
								st.setString(3, loc);
								st.setString(4, comp);
								st.setString(5, OrderNum);
								
                                st.registerOutParameter(6, Types.NUMERIC);
                                
								st.registerOutParameter(7, Types.VARCHAR);
								st.executeUpdate();
			
			
									 errcode = st.getInt(6);
		                			message = st.getString(7);
									
									System.out.println("count errcode"+errcode+message+SEZ);
								if(errcode.compareTo(0)>0){
									return message;
								}
								
								
								
								
										
	}
	catch(Exception e){
		e.printStackTrace();
	}
	
	return SEZ;
	}
	
	
	
		public String returnGstStateMessage(){
			System.out.println("returnGstStateMessage");
	    String SEZ = "Y";
	    try{
		DBTransaction trx = (DBTransaction) getTransaction();
        CallableStatement st = null;
			String message = null;
		Map session = ADFContext.getCurrent().getSessionScope();
		ViewObjectImpl vo = this.getShOrdbookMainVO1();
        Row r = vo.getCurrentRow();
		 String comp = session.get("compCode").toString();
       
		String loc = session.get("locCd").toString();
		Integer dealer = Integer.parseInt(session.get("dealerMapCd").toString());
		String parent = session.get("parentGroupCd").toString();
         Integer pmc = Integer.parseInt(session.get("principalMapCd").toString());
		    String CustCd = (String)r.getAttribute("CustCd");
		ResultSet rs;
        String q1 = null;
		Integer errcode=0;
				Integer count = 0;
			  q1 = " select count(1) from gm_cin gm where gm.cust_cd = '"+CustCd+"' and gm.principal_map_cd = "+pmc+" and cust_sez='Y'";
		  rs = getDBTransaction().createStatement(0).executeQuery(q1);
            if (rs.next()) {
                   count = rs.getInt(1);          
                }
				
				System.out.println("count Message"+count);
			String stmtPrice = "begin SP_GET_GST_STATE(?,?,?,?,?,?,?,?,?,?,?); end;";
                                st = trx.createCallableStatement(stmtPrice, 0);
                                st.setInt(1, pmc);
								st.setString(2, CustCd);
								st.setInt(3, dealer);
								st.setString(4, parent);
                                st.setString(5, loc);
                                
                                st.registerOutParameter(6, Types.VARCHAR);
                                st.registerOutParameter(7, Types.VARCHAR);
								st.registerOutParameter(8, Types.VARCHAR);
								st.registerOutParameter(9, Types.VARCHAR);
								st.registerOutParameter(10, Types.VARCHAR);
								st.registerOutParameter(11, Types.NUMERIC);
                                st.executeUpdate();
			
			
									 errcode = st.getInt(11);
		                			message = st.getString(10);
									
									System.out.println("count errcode"+errcode+message+SEZ);
								if(errcode.compareTo(0)>0){
									return message;
								}
								String P_CUST_STATE_CODE = st.getString(6);
								String P_GST_STATE_CODE = st.getString(7);
                r.setAttribute("CustGstState", P_CUST_STATE_CODE);
                r.setAttribute("DealerGstState", P_GST_STATE_CODE);
				System.out.println("CustGstState"+P_CUST_STATE_CODE);
				System.out.println("DealerGstState"+P_GST_STATE_CODE);
								if(count>0){
								r.setAttribute("GstApplyTrans","C");
								System.out.println("count in 1");
								return "1";
								}
								else{
								if(!P_CUST_STATE_CODE.equalsIgnoreCase(P_GST_STATE_CODE)){
										System.out.println("count in 2");
									return "2";
								}									
								}
										
	}
	catch(Exception e){
		e.printStackTrace();
	}
	
	return SEZ;
	}
	
	public String returnOrderAvailDate(){
			System.out.println("returnOrderAvailDate");
	    String SEZ = "Y";
	    try{
		DBTransaction trx = (DBTransaction) getTransaction();
        CallableStatement st = null;
			String message = null;
		Map session = ADFContext.getCurrent().getSessionScope();
		ViewObjectImpl vo = this.getShOrdbookMainVO1();
        Row r = vo.getCurrentRow();
		 String comp = session.get("compCode").toString();
       
		String loc = session.get("locCd").toString();
		Integer dealer = Integer.parseInt(session.get("dealerMapCd").toString());
		String parent = session.get("parentGroupCd").toString();
         Integer pmc = Integer.parseInt(session.get("principalMapCd").toString());
		    String VariantCd = (String)r.getAttribute("VariantCd");
			String FirstEcolorCd = (String)r.getAttribute("FirstEcolorCd");
		
		ResultSet rs;
        String q1 = null;
		Integer errcode=0;
				
				
				System.out.println("SP_CALC_APPROX_AVAIL: "+VariantCd+","+FirstEcolorCd+","+dealer+parent+comp+loc);
			String stmtPrice = "begin SP_CALC_APPROX_AVAIL(?,?,?,?,?,?,?); end;";
                                st = trx.createCallableStatement(stmtPrice, 0);
                                st.setString(1, VariantCd);
								st.setString(2, FirstEcolorCd);
								st.setInt(3, dealer);
								st.setString(4, parent);
                                st.setString(5, comp);
                                
                                st.registerOutParameter(6, Types.VARCHAR);
                                st.setString(7, loc);
                                st.executeUpdate();
			
			
									 //errcode = st.getInt(11);
		                			message = st.getString(6);
									System.out.println("message :"+message);
									
							if(message.equalsIgnoreCase("I")){ SEZ = "Immediate"; }
							else if(message.equalsIgnoreCase("B")){ SEZ = "Before"; }
							else if(message.equalsIgnoreCase("A")){ SEZ = "After1"; }
							else if(message.equalsIgnoreCase("M")){ SEZ = "After2"; }
							else{ SEZ = "Y"; }
										
	}
	catch(Exception e){
		e.printStackTrace();
	}
	
	return SEZ;
	}
	
	/* need to uncomment this and add insert statement for customer sms from order booking - do not delte this mt */
	public String smsToCustomerFromOrder(String OrderNum) {
        Map session = ADFContext.getCurrent().getSessionScope();
        System.out.println("smsToCustomerFromOrder"+session.get("channelType"));
        String SEZ = "Y";
        try {
            //Channel If Starts
            if (session.get("channelType")
                       .toString()
                       .equalsIgnoreCase("EXC")) {
                System.out.println(" smsToCustomerFromOrder EXC ");
                DBTransaction trx = (DBTransaction) getTransaction();
                CallableStatement st = null;
                String message = null;

                ViewObjectImpl vo = this.getShOrdbookMainVO1();
                Row r = vo.getCurrentRow();
                String comp = session.get("compCode").toString();

                String loc = session.get("locCd").toString();
                Integer dealer = Integer.parseInt(session.get("dealerMapCd").toString());
                String parent = session.get("parentGroupCd").toString();
                Integer pmc = Integer.parseInt(session.get("principalMapCd").toString());
                String CustCd = (String) r.getAttribute("CustCd");

                Integer count = 0;
                String query = null;
                ResultSet rs;

                String regionCd = null, muldelaercd = null, mulforcd = null, city_cd = null;
                Integer ln_pmc = null;

                query =
                    "SELECT AM.REGION_CD, AM.MUL_DEALER_CD, AM.FOR_CD, AM.PRINCIPAL_MAP_CD, AM.CITY_CD  " +
                    "   FROM AM_DEALER_LOC AM " + " WHERE AM.PARENT_GROUP = '" + parent + "' " +
                    "  AND AM.DEALER_MAP_CD = '" + dealer + "' " + " AND AM.LOC_CD = '" + loc + "'";

                rs = getDBTransaction().createStatement(0).executeQuery(query);
                if (rs.next()) {
                    regionCd = rs.getString("REGION_CD");
                    muldelaercd = rs.getString("MUL_DEALER_CD");
                    mulforcd = rs.getString("FOR_CD");
                    city_cd = rs.getString("CITY_CD");
                    ln_pmc = rs.getInt("PRINCIPAL_MAP_CD");
                }
                rs.close();
                System.out.println("fetchSchemeDataDisplay Region Query " + regionCd + " " + muldelaercd + " " +
                                   mulforcd + " " + city_cd);
                //
                String query2 = null;
                ResultSet rs2;
                String mobile = null;
                query2 =
                    "select mobile from gm_emp where dealer_map_cd = " + dealer + " and emp_cd = '" +
                    r.getAttribute("SalesManCd") + "'";
                rs2 = getDBTransaction().createStatement(0).executeQuery(query2);
                if (rs2.next()) {
                    mobile = rs2.getString(1);
                }
                rs2.close();


                String email = null;
                String query3 =
                    "SELECT EMAIL_Id FROM AM_REGIONAL_MGR WHERE SYSDATE BETWEEN START_DATE AND NVL(END_DATE,sysdate) AND region= '" +
                    regionCd + "' AND CHANNEL='" + session.get("channelType").toString() + "'";
                 ResultSet rs3 = getDBTransaction().createStatement(0).executeQuery(query3);
                if (rs3.next()) {
                    email = rs3.getString(1);
                }
                rs3.close();
                
                String lv_unique_qry = "SELECT DMS_SMS_UNIQUE_NO.NEXTVAL Seq_Val FROM DUAL";
                System.out.println(" lv_unique_qry "+lv_unique_qry);
                String lv_unique = null;
                ResultSet rs4 = getDBTransaction().createStatement(0).executeQuery(lv_unique_qry);
                if (rs4.next()) {
                   lv_unique = rs4.getString(1);
                }
                rs4.close();
                System.out.println(" lv_unique "+lv_unique);
                
                String city_desc = getCityDescFunc(city_cd, pmc);

                String lv_msg =
                    "Dear Customer, ref. to your booking no. " + OrderNum + " at NEXA Outlet " + muldelaercd + " - " +
                    mulforcd + ", " + city_desc + ", your Relationship Manager is " +
                    r.getAttribute("DummySalesCdTemp") + " ; " + mobile +
                    "  . For any feedbacks to Maruti Suzuki NEXA, you may contact at " + email +
                    " . Quote your booking no. , outlet and city.";

                String custSmsStatusInsertion =
                    "Insert into GM_SMS_STATUS (UNIQUE_NUMBER,PARENT_GROUP, DEALER_MAP_CD,LOC_CD,PROCESS_CODE,DOCUMENT_TYPE,DOCUMENT_NO,SMS_TYPE,MOBILE_NO," +
                    "SMS_CONTENT,CREATED_DATE,CREATED_BY,STATUS,SENT_DATE,REMARKS,SRL_NO) VALUES (" + lv_unique + ",'" +
                    parent + "'," + dealer + ",'" + loc + "','DMS_EXC_OBK'," + lv_unique + ",'" + OrderNum + "','T','91" +
                    r.getAttribute("Mobile") + "','" + lv_msg + "',Sysdate,'ADMIN',1,null,null,1)";
                
                System.out.println(" custSmsStatusInsertion "+custSmsStatusInsertion);
//
                st = trx.createCallableStatement(custSmsStatusInsertion, 0);
                st.executeUpdate();


            } //Channel IF end					
        } catch (Exception e) {
            e.printStackTrace();
        }

        return SEZ;
    }
        
    public String getCityDescFunc(String city_cd , Number pmc){
        Object result = callStoredFunction(Types.VARCHAR, "Sf_City_Desc(?,?)", new Object[] { city_cd,pmc });
        String cityDesc = result != null ? result.toString() : null;
        return cityDesc;
    }
	
	
	public String setCgstIgstGstApply(){
		System.out.println("setCgstIgstGstApply");
	    String GST = "Y";
	    try{
		DBTransaction trx = (DBTransaction) getTransaction();
        CallableStatement st = null;
			
		Map session = ADFContext.getCurrent().getSessionScope();
		ViewObjectImpl vo = this.getShOrdbookMainVO1();
        Row r = vo.getCurrentRow();
		 String comp = session.get("compCode").toString();
       
		String OrderNum = (String)r.getAttribute("OrderNum");
		String loc = session.get("locCd").toString();
		Integer dealer = Integer.parseInt(session.get("dealerMapCd").toString());
		String parent = session.get("parentGroupCd").toString();
         Integer pmc = Integer.parseInt(session.get("principalMapCd").toString());
		    String CustCd = (String)r.getAttribute("CustCd");
		ResultSet rs;
		ResultSet rs2;
        String q1 = null;
		 String q2 = null;
		Integer errcode=0;
				Integer countcgs = 0;
			  q1 = "select count(1)  from sh_ord_charges sc where sc.dealer_map_cd= "+dealer+" and  sc.loc_cd= '"+loc+
                    "' and sc.comp_fa= '" +comp+"' and  sc.ord_num= '"+OrderNum+"' and sc.parent_group= '"+ parent +
                    "' AND charge_type in ('CGS','SGS')";
		      rs = getDBTransaction().createStatement(0).executeQuery(q1);
            if (rs.next()) {
                   countcgs = rs.getInt(1);          
                }
				
				Integer countigs = 0;
			  q2 = "select count(1)  from sh_ord_charges sc where sc.dealer_map_cd= "+dealer+" and  sc.loc_cd= '"+loc+
                    "' and sc.comp_fa= '" +comp+"' and  sc.ord_num= '"+OrderNum+"' and sc.parent_group= '"+ parent +
                    "' AND charge_type in ('IGS')";
		      rs2 = getDBTransaction().createStatement(0).executeQuery(q2);
            if (rs2.next()) {
                   countigs = rs2.getInt(1);          
                }
				
				if(countcgs>0){
					r.setAttribute("GstApplyTrans","L");
					GST = "N";
				}
				
				if(countigs>0){
					r.setAttribute("GstApplyTrans","C");
					GST = "N";
				}
				
			
										
	}
	catch(Exception e){
		e.printStackTrace();
	}
	
	return GST;
	}
	
	
			public String returnsellPrice(){
	    String EBK = "Y";
	    try{
		DBTransaction trx = (DBTransaction) getTransaction();
                CallableStatement st = null;
			
		Map session = ADFContext.getCurrent().getSessionScope();
		ViewObjectImpl vo = this.getShOrdbookMainVO1();
        Row r = vo.getCurrentRow();
		String message = null;
		String loc = session.get("locCd").toString();
		Integer dealer = Integer.parseInt(session.get("dealerMapCd").toString());
		String VariantCd = (String)r.getAttribute("VariantCd");
		String areaCode = (String)r.getAttribute("AreaCd");
		String prebookingNum = (String)r.getAttribute("PreBookingNum");
		String parent = session.get("parentGroupCd").toString();
        String salesType = (String)r.getAttribute("SalesType");
			
		String ColorCd = (String)r.getAttribute("FirstEcolorCd");
		    //String SecondColorCd = (String)rr.getAttribute("SecondEcolorCd");
			String StateCd = (String)r.getAttribute("StateCd");
			String gstStateCd = this.returnGstCustStateCd(StateCd);
			Object OrderDate = r.getAttribute("OrderDate");
			
		
        //Row r = vo.getCurrentRow();
		Integer pmc = Integer.parseInt(session.get("principalMapCd").toString());
		
		//String loc = session.get("locCd").toString();
		//Integer dealer = Integer.parseInt(session.get("dealerMapCd").toString());
		BigDecimal P_SELL_PRICE = new BigDecimal(0.0);
		BigDecimal P_ACC_PRICE = new BigDecimal(0.0);
		BigDecimal P_NET_DLR_PRICE = new BigDecimal(0.0);
		ResultSet rs;
        String q1 = null;
		Integer errcode=0;
							System.out.println("getsellprice params: "+ColorCd+"----"+gstStateCd+"----"+salesType+"----"+OrderDate);
			String stmtPrice = "begin SP_GET_PRICE_DETAILS(?,?,?,?,?,?,?,?,?,?,?,?,?,?); end;";
                                st = trx.createCallableStatement(stmtPrice, 0);
                                st.setInt(1, dealer);
								st.setInt(2, pmc);
								st.setString(3, loc);
                                st.setString(4, parent);
                                st.setString(5, VariantCd);
								st.setString(6, ColorCd);
                                st.setString(7, gstStateCd);
                                st.setObject(8, OrderDate);
								st.setString(9, salesType);
                                st.registerOutParameter(10, Types.NUMERIC);
                                st.registerOutParameter(11, Types.NUMERIC);
								st.registerOutParameter(12, Types.NUMERIC);
								st.registerOutParameter(13, Types.VARCHAR);
								st.registerOutParameter(14, Types.NUMERIC);
                                st.executeUpdate();
			
			
            P_SELL_PRICE =
                new BigDecimal(st.getObject(10).toString()) == null ? new BigDecimal(0.0) :
                new BigDecimal(st.getObject(10).toString());
            P_ACC_PRICE =
                new BigDecimal(st.getObject(11).toString()) == null ? new BigDecimal(0.0) :
                new BigDecimal(st.getObject(11).toString());
            P_NET_DLR_PRICE =
                new BigDecimal(st.getObject(12).toString()) == null ? new BigDecimal(0.0) :
                new BigDecimal(st.getObject(12).toString());
		                			 errcode = st.getInt(14);
		                			message = st.getString(13);
									
									r.setAttribute("DummySellingPrice",P_SELL_PRICE.setScale(2, RoundingMode.HALF_EVEN));
            r.setAttribute("NbAccessoryPrice", P_ACC_PRICE);
            r.setAttribute("NbNdp", P_NET_DLR_PRICE);
									System.out.println("message selling price"+message);
								if(errcode.compareTo(0)>0){
									return message;
								}
								
								r.setAttribute("DummyBalanceAmt",P_SELL_PRICE.setScale(2, RoundingMode.HALF_EVEN));
								
								
								if(null != VariantCd && null == prebookingNum){
									System.out.println("00--");
									String stmt2 =
                                    "begin SP_GET_BOOKING_AMT(?,?,?,?,?,?,?,?); end;";
                                st = trx.createCallableStatement(stmt2, 0);
								st.setInt(1, dealer);
                                st.setString(2, loc);
                                st.setString(3, VariantCd);
								st.setString(4, areaCode);
                                st.setObject(5, OrderDate);
                                st.registerOutParameter(6, Types.NUMERIC);
								st.registerOutParameter(7, Types.VARCHAR);
								st.registerOutParameter(8, Types.NUMERIC);
                                st.executeUpdate();

		                			 errcode = st.getInt(8);
		                			message = st.getString(7);
									System.out.println("errcode"+errcode);
									System.out.println("message"+message);
								if(errcode.compareTo(0)>0){
									System.out.println("0---");
									r.setAttribute("BookingAmt",new BigDecimal(0.0));
									//return message; this message need to be displayed only and continue from bean
								}
								else{
									System.out.println("0--");
									r.setAttribute("BookingAmt",st.getObject(6));
								}
								
								
								
								}
								
								
						if(null != VariantCd && null != prebookingNum){
			  q1 = "SELECT nvl(booking_amount,0) FROM muldms.sd_pre_book_data WHERE status='S' AND parent= '"+parent+
			   "'  AND dealer_map_cd="+dealer +" AND loc_cd='" +loc+"' AND pre_booking_num= '"+prebookingNum+"'";
		  rs = getDBTransaction().createStatement(0).executeQuery(q1);
            if (rs.next()) {
                               r.setAttribute("BookingAmt",rs.getObject(1));
                }
		  //:b_sh_ordbook.RECD_AMT:=nvl(:parameter.p_tot_receipt_amt,0); 	
		  BigDecimal RecdAmt = (BigDecimal) r.getAttribute("RecdAmt") == null ? new BigDecimal(0.0) : (BigDecimal)r.getAttribute("RecdAmt") ;
			BigDecimal Balance = P_SELL_PRICE.subtract(RecdAmt);
			System.out.println("Balance"+Balance);
			r.setAttribute("DummyBalanceAmt",Balance.setScale(2, RoundingMode.HALF_EVEN));
		  //:B_SH_ORDBOOK.NB_BALANCE := P_SELL_PRICE - NVL(:B_SH_ORDBOOK.RECD_AMT,0); 
						}
								
								
								
	}
	catch(Exception e){
		e.printStackTrace();
	}
	
	return EBK;
	}
	
	public void updateCustFromOrder(){

	    CallableStatement st = null;
	    try{
		DBTransaction trx = (DBTransaction) getTransaction();
			
		Map session = ADFContext.getCurrent().getSessionScope();
		ViewObjectImpl vo = this.getShOrdbookMainVO1();
        Row r = vo.getCurrentRow();
		String message = null;
		String DummyOccnCd = null;
		String dummyNominee = null;
		String loc = session.get("locCd").toString();
		Integer dealer = Integer.parseInt(session.get("dealerMapCd").toString());
		String VariantCd = (String)r.getAttribute("VariantCd");
		String areaCode = (String)r.getAttribute("AreaCd");
		String prebookingNum = (String)r.getAttribute("PreBookingNum");
		String parent = session.get("parentGroupCd").toString();
        if(null != r.getAttribute("DummyOccnCd")){
		DummyOccnCd = "'"+(String)r.getAttribute("DummyOccnCd")+"'";
		}
		if(null != r.getAttribute("dummyNominee")){
		dummyNominee = "'"+(String)r.getAttribute("dummyNominee")+"'";
		}
		String userCode = (String) session.get("userCode");
		String CityCd = (String)r.getAttribute("CityCd");
		String StateCd = (String)r.getAttribute("StateCd");
		String District = (String)r.getAttribute("District");
		String TehsilCd = (String)r.getAttribute("TehsilCd");
		String VillageCd = (String)r.getAttribute("VillageCd");
		String CustCd = (String)r.getAttribute("CustCd");
			
		
		
        //Row r = vo.getCurrentRow();
		Integer pmc = Integer.parseInt(session.get("principalMapCd").toString());
		
		
		ResultSet rs;
        String q1 = null;
		Integer errcode=0;
		String Dob = null;
		String Doa = null;
		
					if(null !=r.getAttribute("dummyDob")){
					Dob = "to_date(substr( '"+r.getAttribute("dummyDob")+"' ,0,19),'yyyy/mm/dd hh24:mi:ss')";
					}
					if(  null != r.getAttribute("dummyDoa")){
					Doa = "to_date(substr( '" +r.getAttribute("dummyDoa")+ "'  ,0,19),'yyyy/mm/dd hh24:mi:ss')";
					}
					
					String rdEnq =
                        "UPDATE GM_CIN SET DOB = "+Dob+" , DOA = "+Doa+" , OCCN_CD = "+DummyOccnCd+" , "+ 
			            " NOMINEE = "+ dummyNominee +" , MODIFIED_BY = '"+userCode+"' , MODIFIED_DATE = SYSDATE,"+
			            " CITY_CD= '"+CityCd+"' , STATE_CD= '"+StateCd+"' , DISTRICT= '"+District+"',"+
			            " TEHSIL_CD= '"+TehsilCd+"', VILLAGE_CD= '"+VillageCd+"' WHERE CUST_CD = '"+CustCd+
		                "' AND PRINCIPAL_MAP_CD = "+pmc;
						System.out.println("update Cust Query + "+rdEnq);
                    st = trx.createCallableStatement(rdEnq, 0);
                    st.executeUpdate();
				
                                	
                                        
					}
	    catch (SQLException e) {
	               e.printStackTrace();
	           } finally {
	               try {
	                   if (st != null) {
	                       st.close();
	                   }
	               } catch (Exception e) {
	               }
	           }
	
	
	}
	
	
	
	
	
	public String returnEBKcount(){
	    String EBK = "Y";
	try{
		
		 Map session = ADFContext.getCurrent().getSessionScope();
		ViewObjectImpl vo = this.getShOrdbookMainVO1();
        Row r = vo.getCurrentRow();
		
		String loc = session.get("locCd").toString();
		Integer dealer = Integer.parseInt(session.get("dealerMapCd").toString());
		
		ResultSet rs;
        String q1 = null;
							
							
			q1 = "select count(*) from rh_enq rh,rd_enq rd where rh.dealer_map_cd= "+dealer+" and	rh.loc_cd= '"+ loc +"' and	rh.enq_date>=trunc(sysdate-60)"+
			            " and	rh.enq_date<trunc(sysdate) and	rh.etype_cd='EBK' and	rh.enq_salesman_cd is null and	rd.dealer_map_cd=rh.dealer_map_cd and	rd.loc_cd=rh.loc_cd"+
			            " and	rd.parent_group=rh.parent_group and	rd.comp_fa=rh.comp_fa and	rd.enq_num=rh.enq_num and	rd.enq_var_srl=1 and rd.enq_status not in ('L','D','C','O','R')";   	
				Integer count = 0;
			rs = getDBTransaction().createStatement(0).executeQuery(q1);
            if (rs.next()) {
                                count =  rs.getInt(1);
                }
				
				if(count.compareTo(1)>0){
					return "N";
				}	
	}
	catch(Exception e){
		e.printStackTrace();
	}
	
	return EBK;
	}
	
	 public String getEcolorVarDescOrdBook(String scndEclrCd, String VariantCd){
        Map session = ADFContext.getCurrent().getSessionScope();
        Object pmc = session.get("principalMapCd");
        
        String areaNm = null;
        String stmt = "begin sp_get_ecolor_var_desc(?,?,?,?,?,?); end;";
        DBTransaction dbtxn = (DBTransaction) getTransaction();
        CallableStatement cs = dbtxn.createCallableStatement(stmt.toString(), 1);
        Row ordRw = this.getShOrdBookAmendmentVO1().getCurrentRow();
        try {
            cs.setObject(1, pmc);
            cs.setObject(2, scndEclrCd);
            cs.registerOutParameter(3, OracleTypes.VARCHAR);
            cs.setObject(4, VariantCd);
            cs.registerOutParameter(5, OracleTypes.VARCHAR);
            cs.registerOutParameter(6, OracleTypes.NUMERIC);
            cs.execute();
            if(cs.getInt(6)>0){
                areaNm = cs.getInt(6) + cs.getString(5);
            }else{
                areaNm = cs.getInt(6) + cs.getString(3);
            }
            System.out.println("areaNm Value----" + areaNm);
        } catch (SQLException sqlerr) {
            throw new JboException(sqlerr);
        } finally {
            try {
                if (cs != null) {
                    cs.close();
                }
            } catch (Exception e) {
            }
        }
        return areaNm;
    }
	
	public String callPackageLoyalityForOrder(String cardNum, BigDecimal redmPnts) {
        String errMsg = "Y";
        DBTransaction trx = (DBTransaction) getTransaction();
        CallableStatement st = null;

        try {

            Map session = ADFContext.getCurrent().getSessionScope();
            ViewObjectImpl vo = this.getShOrdbookMainVO1();
            Row r = vo.getCurrentRow();
            String message = null;
            String parent = session.get("parentGroupCd").toString();
            String comp = session.get("compCode").toString();
            String user = session.get("userCode").toString();
            Integer pmc = Integer.parseInt(session.get("principalMapCd").toString());

            String loc = session.get("locCd").toString();
            Integer dealer = Integer.parseInt(session.get("dealerMapCd").toString());
            String OrderNum = (String) r.getAttribute("OrderNum");
            Timestamp timestamp = new Timestamp(System.currentTimeMillis());

            Object OrderDate = r.getAttribute("OrderDate");


            String stmt2 = "begin PKG_LOYALTY.sp_ins_loyalty_transactions(?,?,?,?,?,?,?,?,?,?,?,?,?,?,?); end;";
            st = trx.createCallableStatement(stmt2, 0);
            st.setString(1, cardNum); //atul add parameter here);
            st.setString(2, null);
            st.setString(3, "SINV");
            st.setObject(4, OrderDate);
            st.setString(5, OrderNum);
            st.setString(6, null);
            st.setString(7, parent);
            st.setInt(8, dealer);
            st.setString(9, loc);
            st.setInt(10, 0);
            st.setBigDecimal(11, redmPnts); //atul add parameter here);
            st.setString(12, "D");
            st.setString(13, (String) session.get("userCode"));
            st.registerOutParameter(14, Types.INTEGER);
            st.registerOutParameter(15, Types.VARCHAR);
            st.executeUpdate();
            errMsg = st.getString(15);
            Integer errCd = st.getInt(14);
            if (errMsg != null) {
                return errMsg;
            }


        } catch (Exception e) {
            e.printStackTrace();
        } finally {
            try {
                if (st != null) {
                    st.close();
                }
            } catch (Exception e) {
            }
        }

        return errMsg;


    }
	
	public String callPkgFDI(){
	    String errMsg = "Y";
		DBTransaction trx = (DBTransaction) getTransaction();
                CallableStatement st = null;
			
	try{
		
		 Map session = ADFContext.getCurrent().getSessionScope();
		ViewObjectImpl vo = this.getShOrdbookMainVO1();
        Row r = vo.getCurrentRow();
		String message = null;
		String parent = session.get("parentGroupCd").toString();
        String comp = session.get("compCode").toString();
        String user = session.get("userCode").toString();
        Integer pmc = Integer.parseInt(session.get("principalMapCd").toString());
		
		String loc = session.get("locCd").toString();
		Integer dealer = Integer.parseInt(session.get("dealerMapCd").toString());
		String OrderNum = (String) r.getAttribute("OrderNum");
		  Timestamp timestamp = new Timestamp(System.currentTimeMillis());
           if(null == r.getAttribute("OrderDate")){
		   r.setAttribute("OrderDate",timestamp);
		   }               
				Object OrderDate = r.getAttribute("OrderDate");
		
							
			String sqls =
                "select 'Y' from am_dealer_loc_param where PARENT_GROUP = '" + parent + "' and DEALER_MAP_CD = " +
                dealer + " and LOC_CD = '" + loc + "' and nvl(fin_data_yn, 'N') = 'Y'";
            ResultSet rss = getDBTransaction().createStatement(0).executeQuery(sqls);
            String fin_data_yn = "N";
            if (rss.next()) {
                fin_data_yn = rss.getString(1);
            }
			System.out.println("fin_data_yn ordbk"+fin_data_yn);
            // code call for package FDI
            if (fin_data_yn.equalsIgnoreCase("Y")) {
                String stmt9 = "begin PKG_FDI.SP_INS_ORDB_FDI(?,?,?,?,?,?,?,?); end;";
                st = trx.createCallableStatement(stmt9, 0);
                st.setString(1, parent);
                st.setInt(2, dealer);
                st.setString(3, loc);
                st.setString(4, comp);
                st.setString(5, OrderNum);
				st.setString(6, "ORDBK");
                st.registerOutParameter(7, Types.INTEGER);
                st.registerOutParameter(8, Types.VARCHAR);
                st.executeUpdate();
                errMsg = st.getString(8);
				System.out.println("errMsg ordbk FDI"+errMsg);
            
                if (errMsg != "" && errMsg != null) {
                    return errMsg;
                }
            }
			
	}
	catch(Exception e){
		e.printStackTrace();
	}finally {
            try {
                if (st != null) {
                    st.close();
                }
            } catch (Exception e) {
            }
        }
		
		return errMsg;
	
	
	}
	
	public String returnBookingAmount(){
	    String ret = "Y";
		DBTransaction trx = (DBTransaction) getTransaction();
                CallableStatement st = null;
				
	try{
		
		 Map session = ADFContext.getCurrent().getSessionScope();
		ViewObjectImpl vo = this.getShOrdbookMainVO1();
        Row r = vo.getCurrentRow();
		String message = null;
		String loc = session.get("locCd").toString();
		Integer dealer = Integer.parseInt(session.get("dealerMapCd").toString());
		String VariantCd = (String)r.getAttribute("VariantCd");
		String areaCode = (String)r.getAttribute("AreaCd");
		String prebookingNum = (String)r.getAttribute("PreBookingNum");
		
if(null ==  r.getAttribute("OrderDate")){		 
		  Timestamp timestamp = new Timestamp(System.currentTimeMillis());
		  
           r.setAttribute("OrderDate",timestamp);
}            
			Object OrderDate = r.getAttribute("OrderDate");
		
							
			if(null != VariantCd && null == prebookingNum){
									System.out.println("00--");
									String stmt2 =
                                    "begin SP_GET_BOOKING_AMT(?,?,?,?,?,?,?,?); end;";
                                st = trx.createCallableStatement(stmt2, 0);
								st.setInt(1, dealer);
                                st.setString(2, loc);
                                st.setString(3, VariantCd);
								st.setString(4, areaCode);
                                st.setObject(5, OrderDate);
                                st.registerOutParameter(6, Types.NUMERIC);
								st.registerOutParameter(7, Types.VARCHAR);
								st.registerOutParameter(8, Types.NUMERIC);
                                st.executeUpdate();
			
			
									//BigDecimal P_SELL_PRICE = new BigDecimal(st.getObject(10).toString());
		                			//BigDecimal P_ACC_PRICE = new BigDecimal(st.getObject(11).toString());
		                			//BigDecimal P_NET_DLR_PRICE = new BigDecimal(st.getObject(12).toString());
		                			Integer errcode = st.getInt(8);
		                			message = st.getString(7);
									System.out.println("errcode"+errcode);
									System.out.println("message"+message);
								if(errcode.compareTo(0)>0){
									System.out.println("0---");
									return message;// this message need to be displayed only and continue from bean
								}
			}
			
	}
	catch(Exception e){
		e.printStackTrace();
	}finally {
            try {
                if (st != null) {
                    st.close();
                }
            } catch (Exception e) {
            }
        }
	
	return ret;
	}
	
	public String returnEnqCreateCustomer(){
	    String EBK = "Y";
	try{
		
		 Map session = ADFContext.getCurrent().getSessionScope();
		ViewObjectImpl vo = this.getShOrdbookMainVO1();
        Row r = vo.getCurrentRow();
		
		String parent = session.get("parentGroupCd").toString();
        String comp = session.get("compCode").toString();
        String user = session.get("userCode").toString();
        Integer pmc = Integer.parseInt(session.get("principalMapCd").toString());
		Object OrderDate = r.getAttribute("OrderDate");
		
		String loc = session.get("locCd").toString();
		Integer dealer = Integer.parseInt(session.get("dealerMapCd").toString());
		
		ResultSet rs;
        String q1 = null;
							
        				if(null != OrderDate){
					
			q1 = "select count(*) from gm_schem where  to_date(substr('"  + OrderDate +
                            "' ,0,19),'yyyy/mm/dd hh24:mi:ss') BETWEEN SCHEM_STAR_DT AND SCHEM_END_DT"+
        " and SCHEM_TYPE = 'RL' and (schem_corp_grp_Cd = (select grop_Code from gm_gropd gm where gm.cp_code = '"+r.getAttribute("Corporate")+
               "' and cp_Actv_yn = 'Y' and PRINCIPAL_MAP_CD = "+pmc+" ) or schem_corp_Cd = '"+r.getAttribute("Corporate")+"')";	
				Integer count = 0;
			rs = getDBTransaction().createStatement(0).executeQuery(q1);
            if (rs.next()) {
                                count =  rs.getInt(1);
                }
						
				String Email = null;
				if(count.compareTo(1)>0){
				String q2 = 	"SELECT EMAIL FROM GM_CIN WHERE CUST_CD = '"+r.getAttribute("CustCd")+"' AND PRINCIPAL_MAP_CD = "+pmc; 
				ResultSet rs2 = getDBTransaction().createStatement(0).executeQuery(q2);
				if (rs2.next()) {
                      Email =  rs2.getString(1);
					  if(null == Email){
						  return "N";
					  }
                }
				
						}	}
	}
	catch(Exception e){
		e.printStackTrace();
	}
	
	return EBK;
	}

	
	    public String returnEnqTypOrdCan(){
	    String etype_cd = null;
	try{
		
		 Map session = ADFContext.getCurrent().getSessionScope();
		ViewObjectImpl vo = this.getShOrdBookCanVO1();
        Row r = vo.getCurrentRow();
		
		//String OrderId = r.getAttribute("OrderId").toString();
		String loc = session.get("locCd").toString();
        String parent = session.get("parentGroupCd").toString();
        String comp = session.get("compCode").toString();
        String user = session.get("userCode").toString();
        Integer pmc = Integer.parseInt(session.get("principalMapCd").toString());
		Integer dealer = Integer.parseInt(session.get("dealerMapCd").toString());
		String LV_ENQ_NUM = (String)  r.getAttribute("EnqNum");
		
		ResultSet rs;
        //Integer LN_TOT_AMT = 0;
		String q1 = null;
							
							//"select ST.GST_STATE_CD from gm_state st where st.state_Cd = '"+StateCd+
                           //"' and st.principal_map_cd = "+pmc;  
						   	
							
			q1 = "select etype_cd from rh_enq where DEALER_MAP_CD = "+dealer+" AND LOC_CD = '" + loc +
			                "' AND COMP_FA = '"+ comp+"' AND PARENT_GROUP = '" +parent+ "' and	enq_num = '" + LV_ENQ_NUM+"'";
			
			rs = getDBTransaction().createStatement(0).executeQuery(q1);
            if (rs.next()) {
                                etype_cd =  rs.getString(1);
                }
				
				
		
	}
	catch(Exception e){
		e.printStackTrace();
	}
	
	return etype_cd;
	}




    public void updatePrintCreditNote() {
        try {
            ViewObjectImpl detailsFor = this.getDefaultPrntCreditNoteLOV1();
            detailsFor.executeQuery();
            Row[] r = detailsFor.getAllRowsInRange();
            if (r.length > 0) {
                String Flag = (String) r[0].getAttribute("ExShPriceYn");
                if (Flag.equalsIgnoreCase("Y")) {
                    this.getShInvoiceEOView1()
                        .getCurrentRow()
                        .setAttribute("PrintCreditNote", "D");
                } else {
                    this.getShInvoiceEOView1()
                        .getCurrentRow()
                        .setAttribute("PrintCreditNote", null);
                }
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
    }
    
	public BigDecimal returnTotalAmtExDepri(){
	    BigDecimal amount = new BigDecimal(0.0);
        try{
		
		 Map session = ADFContext.getCurrent().getSessionScope();
		ViewObjectImpl vo = this.getOrderBookingRO1();
        Row r = vo.getCurrentRow();
		
        String OrderId = r.getAttribute("OrderId")==null? null:r.getAttribute("OrderId").toString();
		String loc = session.get("locCd").toString();
        String parent = session.get("parentGroupCd").toString();
        String comp = session.get("compCode").toString();
        String user = session.get("userCode").toString();
        Integer pmc = Integer.parseInt(session.get("principalMapCd").toString());
		Integer dealer = Integer.parseInt(session.get("dealerMapCd").toString());
		
		
		ResultSet rs;
        //Integer LN_TOT_AMT = 0;
		String q1 = null;
							
			q1 = "SELECT nvl(SUM(CHARGE_AMT),0) FROM SH_ORD_CHARGES WHERE ORD_NUM = '"+OrderId+"' AND CHARGE_TYPE NOT IN('DIS','DEP')"+
			                    "AND DEALER_MAP_CD = " +dealer+ " AND LOC_CD = '" + loc+ "' AND PARENT_GROUP = '"+parent+"' AND COMP_FA = '"+comp+"'";
			
			rs = getDBTransaction().createStatement(0).executeQuery(q1);
           
            if (rs.next()) {
				Object CHARGE_AMT= rs.getObject(1);
                                  amount =  new BigDecimal(CHARGE_AMT.toString());
                }
				
				
		
	}
	catch(Exception e){
		e.printStackTrace();
	}
	
	return amount;
	}
	
    public String returnGstCustStateCd(String StateCd){
	    String P_GST_CUST_STATE_CD = null;
	try{
		
		 Map session = ADFContext.getCurrent().getSessionScope();
		ViewObjectImpl vo = this.getOrderBookingRO1();
        Row r = vo.getCurrentRow();
		
		//String OrderId = r.getAttribute("OrderId").toString();
		String loc = session.get("locCd").toString();
        String parent = session.get("parentGroupCd").toString();
        String comp = session.get("compCode").toString();
        String user = session.get("userCode").toString();
        Integer pmc = Integer.parseInt(session.get("principalMapCd").toString());
		Integer dealer = Integer.parseInt(session.get("dealerMapCd").toString());
		
		
		ResultSet rs;
        //Integer LN_TOT_AMT = 0;
		String q1 = null;
							
							//"select ST.GST_STATE_CD from gm_state st where st.state_Cd = '"+StateCd+
                           //"' and st.principal_map_cd = "+pmc;  
							
			q1 = "select ST.GST_STATE_CD from gm_state st where st.state_Cd = '"+StateCd+
                            "' and st.principal_map_cd = "+pmc;  
			
			rs = getDBTransaction().createStatement(0).executeQuery(q1);
            if (rs.next()) {
                                P_GST_CUST_STATE_CD =  (new BigDecimal(rs.getInt(1)).toString());
                }
				
				
		
	}
	catch(Exception e){
		e.printStackTrace();
	}
	
	return P_GST_CUST_STATE_CD;
	}
	
		public BigDecimal returnTotalAmtDepri(){
                    BigDecimal amount = new BigDecimal(0.0);
	try{
		//BigDecimal amount = new BigDecimal(0.0);
		 Map session = ADFContext.getCurrent().getSessionScope();
		ViewObjectImpl vo = this.getOrderBookingRO1();
        Row r = vo.getCurrentRow();
		
		String OrderId = r.getAttribute("OrderId").toString();
		
		String loc = session.get("locCd").toString();
        String parent = session.get("parentGroupCd").toString();
        String comp = session.get("compCode").toString();
        String user = session.get("userCode").toString();
        Integer pmc = Integer.parseInt(session.get("principalMapCd").toString());
		Integer dealer = Integer.parseInt(session.get("dealerMapCd").toString());
		
		
		ResultSet rs;
        //BigDecimal LN_TOT_AMT = 0;
		String q1 = null;
							
			q1 = "SELECT nvl(SUM(CHARGE_AMT),0) FROM SH_ORD_CHARGES WHERE ORD_NUM = '"+OrderId+"' AND CHARGE_TYPE  IN('DIS','DEP')"+
			                    "AND DEALER_MAP_CD = " +dealer+ " AND LOC_CD = '" + loc+ "' AND PARENT_GROUP = '"+parent+"' AND COMP_FA = '"+comp+"'";
			
			rs = getDBTransaction().createStatement(0).executeQuery(q1);
            if (rs.next()) {
                                amount =  new BigDecimal(rs.getObject(1).toString());
                }
				
				
		
	}
	catch(Exception e){
		e.printStackTrace();
	}
	
	return amount;
	}
	
	
	public String returnCancelAppr(){
	    String apprFlag = "X";
	try{
		
		 Map session = ADFContext.getCurrent().getSessionScope();
		ViewObjectImpl vo = this.getOrderBookingRO1();
        Row r = vo.getCurrentRow();
		
		String OrderId = r.getAttribute("OrderId").toString();
		
		String loc = session.get("locCd").toString();
        String parent = session.get("parentGroupCd").toString();
        String comp = session.get("compCode").toString();
        String user = session.get("userCode").toString();
        Integer pmc = Integer.parseInt(session.get("principalMapCd").toString());
		Integer dealer = Integer.parseInt(session.get("dealerMapCd").toString());
		
		
		ResultSet rs;
        //BigDecimal LN_TOT_AMT = 0;
		String q1 = null;
							
			q1 = "SELECT NVL(CANCEL_APPROVAL, 'X') as CANCEL_APPROVAL from SH_ORDBOOK WHERE ORDER_NUM = '"+OrderId+"'"+
			                    "AND DEALER_MAP_CD = " +dealer+ " AND LOC_CD = '" + loc+ "' AND PARENT_GROUP = '"+parent+"' AND COMP_FA = '"+comp+"'";
			
			rs = getDBTransaction().createStatement(0).executeQuery(q1);
            if (rs.next()) {
                                apprFlag =  rs.getString(1);
                }	
		
	}
	catch(Exception e){
		e.printStackTrace();
	}
	
	return apprFlag;
	}
	
	public String returnInvoiceName(){
	    String name = "X";
	try{
		
		 Map session = ADFContext.getCurrent().getSessionScope();
		ViewObjectImpl vo = this.getOrderBookingRO1();
        Row r = vo.getCurrentRow();
		
		String OrderId = r.getAttribute("OrderId").toString();
		
		String loc = session.get("locCd").toString();
        String parent = session.get("parentGroupCd").toString();
        String comp = session.get("compCode").toString();
        String user = session.get("userCode").toString();
        Integer pmc = Integer.parseInt(session.get("principalMapCd").toString());
		Integer dealer = Integer.parseInt(session.get("dealerMapCd").toString());
		
		
		ResultSet rs;
        //BigDecimal LN_TOT_AMT = 0;
		String q1 = null;
							
			q1 = "SELECT INV_PARTY_CD from FROM SH_INVOICE WHERE ORDER_NUM = '"+OrderId+"'"+
			                    "AND DEALER_MAP_CD = " +dealer+ " AND LOC_CD = '" + loc+ "' AND PARENT_GROUP = '"+parent+"' AND COMP_FA = '"+comp+
								"' AND INV_STATUS = 'I' AND (BILL_NATURE = 'V' OR BILL_NATURE = 'VC')";
								
			
			rs = getDBTransaction().createStatement(0).executeQuery(q1);
            if (rs.next()) {
                                name =  rs.getString(1);
                }	
		
	}
	catch(Exception e){
		e.printStackTrace();
	}
	
	return name;
	}
	
	
	
	
	
    public String customerDetailFetch(String custCode){
		String message = "success";
        LOGGER.info("inside cust detail");
        System.out.println("inside customer detail");
                Map session = ADFContext.getCurrent().getSessionScope();
                ViewObjectImpl vo = this.getShOrdbookMainVO1();
                Row r = vo.getCurrentRow();
                
        String loc = session.get("locCd").toString();
        String parent = session.get("parentGroupCd").toString();
        String comp = session.get("compCode").toString();
        String user = session.get("userCode").toString();
		String CustCd = (String)r.getAttribute("CustCd");
        Integer pmc = Integer.parseInt(session.get("principalMapCd").toString());
		Integer dealer = Integer.parseInt(session.get("dealerMapCd").toString());
		DBTransaction trx = (DBTransaction) getTransaction();
                CallableStatement st = null;
                String errMsg = "";
//                java.sql.Date currdate = sysdate.dateValue();
//                DateFormat dateFormat = new SimpleDateFormat("dd-mm-yyyy hh:mm:ss");
//                String currentDate = dateFormat.format(currdate);
        try{
			
			if(null != custCode){
			
				CustCd = custCode;
          System.out.println("inside customerDetailFetch"+CustCd);
        // r.setAttribute("OrderStatus","B");
		//	r.setAttribute("DummyStatusDesc","Booked");
                                String stmt =
                                    "begin PK_GET_CUST_DETAILS.SP_VALIDATE_CIN(?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?); end;";
                                st = trx.createCallableStatement(stmt, 0);
                                st.setString(1, CustCd);
                                st.setString(2, parent);
                                st.setInt(3, pmc);
                                st.setInt(4, dealer);
                                st.setString(5, loc);
                                st.registerOutParameter(6, Types.VARCHAR);
                                st.registerOutParameter(7, Types.VARCHAR);
								st.registerOutParameter(8, Types.VARCHAR);
								st.registerOutParameter(9, Types.VARCHAR);
								st.registerOutParameter(10, Types.VARCHAR);
								st.registerOutParameter(11, Types.VARCHAR);
								st.registerOutParameter(12, Types.VARCHAR);
								st.registerOutParameter(13, Types.VARCHAR);
								st.registerOutParameter(14, Types.VARCHAR);
								st.registerOutParameter(15, Types.VARCHAR);
								st.registerOutParameter(16, Types.VARCHAR);
								st.registerOutParameter(17, Types.VARCHAR);
								st.registerOutParameter(18, Types.VARCHAR);
								st.registerOutParameter(19, Types.VARCHAR);
								st.registerOutParameter(20, Types.VARCHAR);
								st.registerOutParameter(21, Types.VARCHAR);
								st.registerOutParameter(22, Types.VARCHAR);
								st.registerOutParameter(23, Types.VARCHAR);
								st.registerOutParameter(24, Types.VARCHAR);
								st.registerOutParameter(25, Types.VARCHAR);
								st.registerOutParameter(26, Types.VARCHAR);
								st.registerOutParameter(27, Types.VARCHAR);
								st.registerOutParameter(28, Types.VARCHAR);
								st.registerOutParameter(29, Types.VARCHAR);
								st.registerOutParameter(30, Types.VARCHAR);
								st.registerOutParameter(31, Types.DATE);
								st.registerOutParameter(32, Types.DATE);
								st.registerOutParameter(33, Types.VARCHAR);
								st.registerOutParameter(34, Types.VARCHAR);
								st.registerOutParameter(35, Types.VARCHAR);
								st.registerOutParameter(36, Types.VARCHAR);
                                st.executeUpdate();
								
									String LV_CUST_TYPE = st.getString(6);
		                			String NB_TITLE_CD = st.getString(7);
		                			String NB_COMMUNICATION_IND = st.getString(8);
		                			String NB_FULL_NAME = st.getString(9);
		                			String LV_RADDR1 = st.getString(10);
		                			String LV_RADDR2 = st.getString(11);
		                			String LV_RADDR3 = st.getString(12);
		                			String LV_RCITY = st.getString(13);
		                			String LV_RCITY_DESC = st.getString(14);
		                			String LV_RPIN = st.getString(15);
		                			String LV_OADDR1 = st.getString(16);
		                			String LV_OADDR2 = st.getString(17);
		                			String LV_OADDR3 = st.getString(18);
		                			String LV_OCITY = st.getString(19);
		                			String LV_OCITY_DESC = st.getString(20);
		                			String LV_OPIN = st.getString(21);
		                			String PRE_RES_PHONE = st.getString(22);
		                			String PRE_MOB_PHONE = st.getString(23);
		                			String PRE_OFF_PHONE = st.getString(24);
		                			String LV_PREFAX = st.getString(25);
		                			String RES_PHONE = st.getString(26);
		                			String MOBILE = st.getString(27);
		                			String LV_EMAIL = st.getString(28);
		                			String OFF_PHONE = st.getString(29);
		                			String LV_FAX = st.getString(30);
		                			String NB_DOB = st.getString(31);
		                			String NB_DOA = st.getString(32);
		                			String NB_NOMINEE = st.getString(33);
		                			String NB_OCCN_CD = st.getString(34);
		                			String PAN_NUM = st.getString(35);
		                			 message = st.getString(36);
								
if(null != message){
	return message;
}
if(null != NB_FULL_NAME){
r.setAttribute("DummyFullName",NB_FULL_NAME.replaceAll("^\\s+",""));	
}
r.setAttribute("PreResPhone",PRE_RES_PHONE);	
r.setAttribute("PreMobPhone",PRE_MOB_PHONE);
r.setAttribute("PreOffPhone",PRE_OFF_PHONE);
r.setAttribute("ResPhone",RES_PHONE);	
r.setAttribute("Mobile",MOBILE);
r.setAttribute("OffPhone",OFF_PHONE);		
r.setAttribute("dummyDob",NB_DOB);		
r.setAttribute("dummyDoa",NB_DOA);
r.setAttribute("dummyNominee",NB_NOMINEE);
r.setAttribute("PanNum",PAN_NUM);	
r.setAttribute("SalesType","IND");
r.setAttribute("DummyOccnCd",NB_OCCN_CD);
                                //errMsg = st.getString(36);
                                //LOGGER.info("errMsg+" + errMsg);
                                //if (errMsg != "" && errMsg!=null) {System.out.println("check data"); return errMsg;}
        if(null != NB_COMMUNICATION_IND){
					if(NB_COMMUNICATION_IND.equalsIgnoreCase("O")){
					r.setAttribute("BillAddress1",LV_OADDR1);
                    r.setAttribute("BillAddress2",LV_OADDR2);		
                    r.setAttribute("BillAddress3",LV_OADDR3);		
                    r.setAttribute("CityCd",LV_OCITY);
                    r.setAttribute("CityDescT",LV_OCITY_DESC);
                    r.setAttribute("BillPin",LV_OPIN);		
					}
					else{
					r.setAttribute("BillAddress1",LV_RADDR1);
                    r.setAttribute("BillAddress2",LV_RADDR2);		
                    r.setAttribute("BillAddress3",LV_RADDR3);		
                    r.setAttribute("CityCd",LV_RCITY);
                    r.setAttribute("CityDescT",LV_RCITY_DESC);
                    r.setAttribute("BillPin",LV_RPIN);	
					}
		}	
		System.out.println("inside customerDetailFetch 1");
		if(null != r.getAttribute("BillPin")){
		 String stmt2 = "begin SP_GET_PIN_DESC(?,?,?,?,?); end;";
                    st = trx.createCallableStatement(stmt2, 0);
                    st.setInt(1, pmc);
                    st.setString(2,(String)r.getAttribute("BillPin"));
                    st.registerOutParameter(3, Types.VARCHAR);
					st.registerOutParameter(4, Types.VARCHAR);
					st.registerOutParameter(5, Types.INTEGER);
                    st.executeUpdate();
		Integer errCd = st.getInt(5);
		if(errCd.compareTo(0)!=0){
                 message = st.getString(4);
		return message;}
		else{
		r.setAttribute("PinCodeDescT",st.getString(3));
		}
		}
		
		System.out.println("inside customerDetailFetch 2");
		
		if(null != NB_OCCN_CD){
                           ResultSet rs;
		    String LIST_DESC=null;
                           String  q1 =
                                " SELECT LIST_DESC  FROM AM_LIST WHERE LIST_NAME='NATURE_OF_PROF'" +
                                " AND LIST_CODE='" + NB_OCCN_CD + "'" + " AND PRINCIPAL_MAP_CD= "+pmc;

                            rs = getDBTransaction().createStatement(0).executeQuery(q1);
                            if (rs.next()) {
                                LIST_DESC= rs.getString(1);
                            }
                            r.setAttribute("dummyOccupDesc", LIST_DESC);
		}
		
                        ResultSet rs2;
                     String q2 =
                            " select am.act_profession_desc from gm_act_prof am,gm_cin gm" +
                            " where am.profession_cd=gm.occn_cd  and am.act_profession_cd=gm.act_prof_cd " +
                            " and am.principal_map_cd=gm.principal_map_cd and gm.cust_cd='" + CustCd + "' " +
                            " and gm.principal_map_cd = "+pmc;

                        rs2 = getDBTransaction().createStatement(0).executeQuery(q2);
                        if (rs2.next()) {
                           String profession_desc = rs2.getString(1);
                            r.setAttribute("dummyProfession", profession_desc);
                        }
						
						
		System.out.println("inside customerDetailFetch 3");
                        ResultSet rs3;
                        String q3 =
                            "  select am.list_desc from am_list am,gm_cin gm where am.list_name='DESIGNATION'  " +
                            " and am.list_code=gm.designation and am.principal_map_cd=gm.principal_map_cd   " +
                            " and gm.cust_cd='" + CustCd + "' " + " and gm.principal_map_cd ="+pmc;

                        rs3 = getDBTransaction().createStatement(0).executeQuery(q3);
                        if (rs3.next()) {
                            String income_desc = rs3.getString(1);
                            r.setAttribute("dummyIncome", income_desc);
                        }
						
						
						
		System.out.println("inside customerDetailFetch 4");
						String q4 = null;
                    ResultSet rs4;
                    String state_cd = null;
                    String district = null;
                    String tehsil = null;
                    String village = null;
                    q4 =
                        " select gm.state_cd,gm.district,gm.tehsil_cd,gm.village_cd  from gm_cin gm where gm.cust_cd = '" +
                        CustCd + "'  and gm.principal_map_cd = "+pmc;

                    rs4 = getDBTransaction().createStatement(0).executeQuery(q4);
                    if (rs4.next()) {
                        if (null != rs4.getString("district")) {
							
						district = rs4.getString("district");}
							state_cd = rs4.getString("state_cd");
							tehsil = rs4.getString("tehsil_cd");
							village = rs4.getString("village_cd");
							System.out.println("Value of State "+state_cd);
                            r.setAttribute("District", district);
							r.setAttribute("StateCd", state_cd);
							r.setAttribute("TehsilCd", tehsil);
							r.setAttribute("VillageCd", village);
                        }
						
						
		System.out.println("inside customerDetailFetch 5");
						 if (null != state_cd) {
                            String query8 = null;
                            ResultSet rs8;
                            String state_desc = null;
                            String gst_State_Cd =null;
                            query8 =
                                "  select st.state_desc,ST.GST_STATE_CD from gm_state st where st.state_Cd ='" +
                                state_cd + "' and st.principal_map_cd = "+pmc;

                            
                            rs8 = getDBTransaction().createStatement(0).executeQuery(query8);
                            if (rs8.next()) {
                                state_desc = rs8.getString(1);
                                gst_State_Cd = rs8.getString("GST_STATE_CD");
								System.out.println("Value of State desc"+state_desc);
                                r.setAttribute("dummyStateDesc", state_desc);

                            }
                        }

                        if (null != tehsil) {
                            String query9 = null;
                            ResultSet rs9;
                            String tehsil_desc = null;
                            query9 =
                                "  select th.tehsil_desc from gm_tehsil th where th.tehsil_cd = '" + tehsil +
                                "' and th.principal_map_cd = "+pmc;

                            rs9 = getDBTransaction().createStatement(0).executeQuery(query9);
                            if (rs9.next()) {
                                tehsil_desc = rs9.getString(1);
                                r.setAttribute("dummyTehsilDesc", tehsil_desc);

                            }

                        }
                        if (null != village) {
                            String query10 = null;
                            ResultSet rs10;
                            String village_desc = null;
                            query10 =
                                "   select vl.village_name from gm_village vl where vl.village_Cd ='" + village +
                                "' and vl.principal_map_cd = "+pmc;

                            rs10 = getDBTransaction().createStatement(0).executeQuery(query10);
                            if (rs10.next()) {
								village_desc = rs10.getString(1);
                                r.setAttribute("dummyVillageDesc", village_desc);
                            }
                        }
						
						
						String query11 = null;
                    ResultSet rs11;
                    String shipaddr1 = null, shipaddr2 = null, shipaddr3 = null, shipcityCd = null, shipPin =
                        null, shipDistrict = null, shiptehsil = null, shipVillage = null, shipState = null, shipPan =
                        null, shipFullName = null, shipGstNum = null, shipuin = null, gstNum = null, uin = null;
                    query11 =
                        " select gm.SHIP_ADDRESS1,gm.SHIP_ADDRESS2,gm.SHIP_ADDRESS3,gm.SHIP_CITY_CD,gm.SHIP_PIN,gm.SHIP_DISTRICT, gm.SHIP_TEHSIL,gm.SHIP_VILLAGE,gm.SHIP_STATE,gm.SHIP_PAN,gm.SHIP_FULL_NAME,gm.ship_gst_num,gm.ship_uin,gm.GST_NUM,GM.UIN" +
                        " from gm_cin gm" + " where gm.cust_cd = '" + CustCd + "'" + " and gm.principal_map_cd = "+pmc;

                    rs11 = getDBTransaction().createStatement(0).executeQuery(query11);
                    if (rs11.next()) {
						 if (null != rs11.getString("SHIP_ADDRESS1")) {
                            r.setAttribute("ShipAddress1", rs11.getString("SHIP_ADDRESS1"));
                        }
                        if (null != rs11.getString("SHIP_ADDRESS2")) {
                            shipaddr2 = rs11.getString("SHIP_ADDRESS2");
                            r.setAttribute("ShipAddress2", shipaddr2);
                        }
                        if (null != rs11.getString("SHIP_ADDRESS3")) {
                            shipaddr3 = rs11.getString("SHIP_ADDRESS3");
                            r.setAttribute("ShipAddress3", shipaddr3);
                        }
                        if (null != rs11.getString("SHIP_PIN")) {
                            shipPin = rs11.getString("SHIP_PIN");
                           r.setAttribute("ShipPin", shipPin);
                        }
						if (null != rs11.getString("SHIP_CITY_CD")) {
                            shipcityCd = rs11.getString("SHIP_CITY_CD");
                           r.setAttribute("ShipCityCd", shipcityCd);
                        }
                        if (null != rs11.getString("SHIP_DISTRICT")) {
                            shipDistrict = rs11.getString("SHIP_DISTRICT");
                            r.setAttribute("ShipDistrict", shipDistrict);
                        }
                        if (null != rs11.getString("SHIP_PAN")) {
                            shipPan = rs11.getString("SHIP_PAN");
                            r.setAttribute("ShipPan", shipPan);
                        }
                        if (null != rs11.getString("SHIP_FULL_NAME")) {
                            shipFullName = rs11.getString("SHIP_FULL_NAME");
                           r.setAttribute("ShipFullName", shipFullName);
                        }
                        if (null != rs11.getString("ship_gst_num")) {
                            shipGstNum = rs11.getString("ship_gst_num");
                           r.setAttribute("ShipGstNum", shipGstNum);
                        }
                        if (null != rs11.getString("ship_uin")) {
                            shipuin = rs11.getString("ship_uin");
                            r.setAttribute("ShipUin", shipuin);
                        }
                        if (null != rs11.getString("GST_NUM")) {
                            gstNum = rs11.getString("GST_NUM");
                            r.setAttribute("CustGstNum", gstNum);
                        }
                        if (null != rs11.getString("UIN")) {
                            uin = rs11.getString("UIN");
                           r.setAttribute("CustUin", uin);
                        }
						
						if (null != rs11.getString("SHIP_STATE")) {
                            String query12 = null;
                            ResultSet rs12;
                            String shipstate_desc = null;
                            query12 =
                                "       SELECT state_desc FROM gm_state WHERE PRINCIPAL_MAP_CD = "+pmc+"  AND state_Cd ='" +
                                rs11.getString("SHIP_STATE") + "'";

                            rs12 = getDBTransaction().createStatement(0).executeQuery(query12);
                            if (rs12.next()) {
                                shipstate_desc = rs12.getString(1);
                                this.getShOrdbookMainVO1()
                                    .getCurrentRow()
                                    .setAttribute("ShipState", rs11.getString("SHIP_STATE"));
                                this.getShOrdbookMainVO1()
                                    .getCurrentRow()
                                    .setAttribute("dummyshipStateDesc", shipstate_desc);
                            }
                        }

                        if (null != rs11.getString("SHIP_CITY_CD")) {
                            String query13 = null;
                            ResultSet rs13;
                            String shipcity_desc = null;
                            query13 =
                                " select t.city_desc from gm_city t where t.principal_map_cd= "+pmc+" and t.city_cd='" +
                                rs11.getString("SHIP_CITY_CD") + "'";

                            rs13 = getDBTransaction().createStatement(0).executeQuery(query13);
                            if (rs13.next()) {
                                shipcity_desc = rs13.getString(1);
                                r.setAttribute("ShipCityCd", rs11.getString("SHIP_CITY_CD"));
                                r.setAttribute("dummyShipCitydesc", shipcity_desc);
                            }
                        }

                        if (null != rs11.getString("SHIP_TEHSIL")) {
                            String query14 = null;
                            ResultSet rs14;
                            String shiptehsil_desc = null;
                            query14 =
                                "SELECT tehsil_desc FROM gm_tehsil      WHERE PRINCIPAL_MAP_CD = "+pmc+" AND tehsil_cd = '" +
                                rs11.getString("SHIP_TEHSIL") + "'";

                            rs14 = getDBTransaction().createStatement(0).executeQuery(query14);
                            if (rs14.next()) {
                                shiptehsil_desc = rs14.getString(1);
                                r.setAttribute("ShipTehsil", rs11.getString("SHIP_TEHSIL"));
                                r.setAttribute("dummyShipTehsil", shiptehsil_desc);
                            }
                        }

                        if (null != rs11.getString("SHIP_VILLAGE")) {
                            String query15 = null;
                            ResultSet rs15;
                            String shipvillage_desc = null;
                            query15 =
                                "       SELECT village_name FROM gm_village WHERE PRINCIPAL_MAP_CD = "+pmc+" AND village_Cd = '" +
                                rs11.getString("SHIP_VILLAGE") + "'";

                            rs15 = getDBTransaction().createStatement(0).executeQuery(query15);
                            if (rs15.next()) {
                                shipvillage_desc = rs15.getString(1);
                                r.setAttribute("ShipVillage", rs11.getString("SHIP_VILLAGE"));
                                r.setAttribute("dummyShipVillage", shipvillage_desc);
                            }
                        }

					}
						
		
                if(null != shipcityCd){
                 String stmt2 = "begin SP_GET_CITY_DESC(?,?,?,?,?); end;";
                    st = trx.createCallableStatement(stmt2, 0);
                    st.setInt(1, pmc);
                    st.setString(2, shipcityCd);
                    st.registerOutParameter(3, Types.VARCHAR);
                                        st.registerOutParameter(4, Types.VARCHAR);
                                        st.registerOutParameter(5, Types.INTEGER);
                    st.executeUpdate();
                Integer errCd = (Integer)st.getInt(5);
                if(errCd.compareTo(0)!=0){
                 message = st.getString(4);
                return message;}
                else{
                r.setAttribute("dummyShipCitydesc",st.getString(3));
                }
                }
            } // end of condition cust cd != null here
		
		
		String query30 = null;
                    ResultSet rs30;
                    String channel = null;
                    query30 =
                        "  SELECT CHANNEL " + "  FROM am_dealer_loc " + " WHERE DEALER_MAP_CD = '" + dealer +
                        "' " + "  AND PARENT_GROUP ='" + parent + "' " + "  AND LOC_CD ='" + loc + "'";

                    rs30 = getDBTransaction().createStatement(0).executeQuery(query30);
                    if (rs30.next()) {
                        channel = rs30.getString(1);
                    }
                    r.setAttribute("dummyDealerChannel", channel);

                        
		
        }
        catch(Exception e){
            e.printStackTrace();
        }
        finally {
                    try {
                        if (st != null) {
                            st.close();
                        }
                    } catch (Exception e) {
                        e.printStackTrace();
                        LOGGER.log(LOGGER.ERROR, e.getMessage());
                        return errMsg;

                    }
                }
        System.out.println("message value"+message);
        return message;
    }

    public String checkChargeCodeTrigger(String ChargeType) {
        try {
            Map session = ADFContext.getCurrent().getSessionScope();
            String dealer = session.get("dealerMapCd").toString();
            String loc = (String) session.get("locCd");
            System.out.println("ChargeCd : " + ChargeType);
            ViewObjectImpl voo = this.getSmVchargesVO1();
            Row rp = voo.getCurrentRow();
            ViewObjectImpl vo1 = this.getChargeLOVVO1();
            System.out.println(vo1.getQuery());
            vo1.applyViewCriteria(vo1.getViewCriteria("filterByCodeVC"));
            vo1.setNamedWhereClauseParam("bind_ChrgeCode", ChargeType);

            vo1.executeQuery();
            System.out.println("12");
            Row r[] = vo1.getAllRowsInRange();
            String desc = null;
            if (r != null && r.length > 0) {
                desc = (String) r[0].getAttribute("ChargeType");
            }

            ViewObjectImpl vo = this.getVehicleChargeTypeLOV1();
            vo.setNamedWhereClauseParam("bindDealerCd", dealer);
            vo.setNamedWhereClauseParam("bindLocCd", loc);
            vo.setNamedWhereClauseParam("bindChargeType", desc);
            vo.executeQuery();
            Row r1[] = vo.getAllRowsInRange();
            if (r1.length > 0) {
                if (r1.length > 1) {
                    //  rp.setAttribute("ChargeCd", null);
                    return "More than one description found for the charge type " + desc;
                }
                return "success";
            }

            else {
                // rp.setAttribute("ChargeCd", null);
                return "Description not found for the charge type " + desc;
            }
        } catch (Exception e) {
            e.printStackTrace();
            return "error";
        }
    }

	public String OrderCancellationMtd(){
		String errMsg = "success";
                String message = "success";
		Map session = ADFContext.getCurrent().getSessionScope();
		Integer dealer = new Integer(session.get("dealerMapCd").toString());
        Integer pmc = new Integer(session.get("principalMapCd").toString());
        String comp = session.get("compCode").toString();
        String loc = (String) session.get("locCd");
		String user = (String) session.get("userCode");
		String parent = (String)  session.get("parentGroupCd");
		java.sql.Timestamp datetime = new java.sql.Timestamp(System.currentTimeMillis());
        oracle.jbo.domain.Date daTime = new oracle.jbo.domain.Date(datetime);
		
		ViewObjectImpl voo = this.getShOrdBookCanVO1();
        Row rp = voo.getCurrentRow();
        ViewObjectImpl vo1 = this.getSdOrdReasonsVO1();
        Row rs = vo1.getCurrentRow();
        DBTransaction trx = (DBTransaction) getTransaction();
        CallableStatement st = null;
		
		Integer LN_FLW_SRL = 0;
		String LV_ENQ_NUM = "";
		String LV_FOLLOW_MODE = null;
		String mobile  = null;
		String cardType = null;
		Integer redeemPoint = 0;
		
		String OrderDate = rp.getAttribute("OrderDate").toString();
		String SalesManCd = (String) rp.getAttribute("SalesManCd");
		String OrderNum = (String) rp.getAttribute("OrderNum");
		String reasonCd = (String) rs.getAttribute("ReasonCd");
		
		try{
		
		if(null != OrderNum && null != reasonCd){
			
			String sql33 = "SELECT count(*) from SH_CANCEL_BOOK_APPR sa, am_dealer_loc al WHERE sa.REGION_CD = al.region_cd AND sa.CHANNEL = al.channel and dealer_map_cd = "+dealer+" and PARENT_GROUP = '"+(String) session.get("parentGroupCd")+"' and loc_cd = '"+loc+"' and approval_req = 'Y'";
                        ResultSet rs33 = trx.createStatement(0).executeQuery(sql33);
                        Integer cnt = 0;
                        if (rs33.next()) {
                            cnt = rs33.getInt(1);
                        }
                        System.out.println("check1234" + sql33+"count of select"+cnt);
                        if (cnt == 0) {
                          
                        
        if(pmc.compareTo(2)==0){
			rp.setAttribute("OrderStatus","C");
        }
        else{
			
			
		rp.setAttribute("OrderStatus","C");
        }
		
		rp.setAttribute("CancelDate",daTime);
		rp.setAttribute("ModifiedDate",daTime);
		rp.setAttribute("ModifiedBy",user);
		rs.setAttribute("CreatedDate",daTime);
		rs.setAttribute("CreatedBy",user);
		
         //Insert Follow up code start
		 
		 String sql1 =
                    "SELECT ENQ_NUM  FROM SH_ORDBOOK WHERE ORDER_NUM = '" + (String) rp.getAttribute("OrderNum") +
                    "' AND DEALER_MAP_CD = " + dealer + " and  LOC_CD = '" + loc + "' AND PARENT_GROUP = '" + parent +
                    "' AND COMP_FA = '" + comp + "'";
                ResultSet rs1 = trx.createStatement(0).executeQuery(sql1);
                
                if (rs1.next()) {
                    LV_ENQ_NUM = rs1.getString(1);
                }
                if (null != LV_ENQ_NUM && !LV_ENQ_NUM.equalsIgnoreCase("")) {
					
					try{
					String rdEnq =
                        "UPDATE RD_ENQ SET ENQ_STATUS = 'H',STATUS_DATE=null  WHERE ENQ_NUM = '" + LV_ENQ_NUM + "' AND ENQ_VAR_SRL = 1 " +
                        " and DEALER_MAP_CD = " + dealer + " and  LOC_CD = '" + loc + "' AND PARENT_GROUP = '" + parent +
                        "' AND COMP_FA = '" + comp + "'";
                    st = trx.createCallableStatement(rdEnq, 0);
                    st.executeUpdate();
					}
					catch(Exception e){
						e.printStackTrace();
						return "Execution Failed while updating the Enquiry Status.";
					}
					
					try{
					String rhEnq =
                        "UPDATE RH_ENQ SET ENQ_STATUS = 'H'  WHERE ENQ_NUM = '" + LV_ENQ_NUM + "' AND DEALER_MAP_CD = " + dealer + " and  LOC_CD = '" + loc + "' AND PARENT_GROUP = '" + parent +
                        "' AND COMP_FA = '" + comp + "'";
                    st = trx.createCallableStatement(rhEnq, 0);
                    st.executeUpdate();
					}
					catch(Exception e){
							e.printStackTrace();
							return "Execution Failed while updating the Enquiry Status.";
					}
					
					 String sql2 =
                    "SELECT MAX(ENQ_FOLLOWSLNO + 1)  FROM RD_ENQFOLLOW WHERE ENQ_NUM = '" + LV_ENQ_NUM +
                    "' AND DEALER_MAP_CD = " + dealer + " and  LOC_CD = '" + loc + "' AND PARENT_GROUP = '" + parent +
                    "' AND COMP_FA = '" + comp + "'";
                ResultSet rs2 = trx.createStatement(0).executeQuery(sql2);
                
                if (rs2.next()) {
                    LN_FLW_SRL = rs2.getInt(1);
                }
				
				if(pmc.compareTo(1)==0){
			
                
				String sql =  "SELECT FOLLOW_MODE  FROM (SELECT FOLLOW_MODE FROM RD_ENQFOLLOW WHERE ENQ_NUM = '" + LV_ENQ_NUM +
					            "' AND DEALER_MAP_CD = " + dealer + " and  LOC_CD = '" + loc + "' AND PARENT_GROUP = '" + parent +
                    "' AND COMP_FA = '" + comp + "' AND ENQ_VAR_SRL = 1 ORDER BY ENQ_FOLLOWSLNO DESC) WHERE ROWNUM = 1";  	
				
				 ResultSet rs22 = trx.createStatement(0).executeQuery(sql);
                
                if (rs22.next()) {
                    LV_FOLLOW_MODE = rs22.getString(1);
                }
				
				}
				
				if(LN_FLW_SRL.compareTo(0)>0){
					
					try{
				String sqlIns1 = "INSERT INTO RD_ENQFOLLOW(DEALER_MAP_CD,LOC_CD, COMP_FA,ENQ_NUM, ENQ_FOLLOWSLNO,PARENT_GROUP, ENQ_FOLLOWDATE,  ENQ_FOLLOWSTATUS,ENQ_FOLLOWEDBY,"+
                "ENQ_FOLLOWACTNPLN, ENQ_FOLLOWACTNACTL, ENQ_FOLLOW_SU,CREATED_BY,CREATED_DATE,REMARKS,ENQ_FOLLOW_ACT_DATE,ENQ_VAR_SRL, ENQ_ACTIONPLN,ENQ_ACTIONACTL,"+
                "FOLLOW_MODE) VALUES(" +dealer+ ", '"+ loc +"' , '" + comp  + "' , '" + LV_ENQ_NUM + "' , " +  LN_FLW_SRL + 
                " , '" + parent +"' , to_date(SUBSTR('" + OrderDate + "',0,10),'yyyy/mm/dd') ,  'H', '"+ SalesManCd + "' , 'T', 'N','S', '" +
                user + "' ,SYSDATE, '"+ OrderNum +"  -  " + OrderDate + " - Cancelled', SYSDATE,1, 'V','V', '" + LV_FOLLOW_MODE+"')";
				
				st = trx.createCallableStatement(sqlIns1, 0);
                        st.executeUpdate();
					}
					catch(Exception e){
						e.printStackTrace();
						return "Execution Failed while inserting Followup Details.";
					}
					
					try{
				Integer LN_FLW_SRL1=LN_FLW_SRL+1;
				String sqlIns2 = "INSERT INTO RD_ENQFOLLOW(DEALER_MAP_CD,LOC_CD, COMP_FA,ENQ_NUM, ENQ_FOLLOWSLNO,PARENT_GROUP, ENQ_FOLLOWDATE,  ENQ_FOLLOWSTATUS,ENQ_FOLLOWEDBY,"+
                "ENQ_FOLLOWACTNPLN, ENQ_FOLLOWACTNACTL, ENQ_FOLLOW_SU,CREATED_BY,CREATED_DATE,REMARKS,ENQ_FOLLOW_ACT_DATE,ENQ_VAR_SRL, ENQ_ACTIONPLN,ENQ_ACTIONACTL"+
                ") VALUES(" +dealer+ ", '"+ loc +"' , '" + comp  + "' , '" + LV_ENQ_NUM + "' , " +  LN_FLW_SRL1 + 
                " , '" + parent +"' ,  SYSDATE+1  ,  'H',null , 'T', null , null , '" +
                user + "' ,SYSDATE, null, null,1, 'T',null)";
				
				st = trx.createCallableStatement(sqlIns2, 0);
                        st.executeUpdate();
					}
					catch(Exception e){
						e.printStackTrace();
						return "Execution Failed while inserting Followup Details.";
					}
						
				}
					
				}
				
		 //Insert Follow up code end
		try{
		  String sqlupdate1v= "UPDATE ST_BOOK_FOLLOW X SET BOOK_FOLLOWSTAGE = 'L' WHERE X.DEALER_MAP_CD = "+dealer+" AND X.PARENT_GROUP = '"+ parent +
			                   "' AND X.LOC_CD = '" + loc + "' AND X.COMP_FA = '"+ comp +"' AND X.ORDER_NUM = '"+OrderNum+"'  AND X.BOOK_FOLLOWSLNO = (SELECT MAX(Y.BOOK_FOLLOWSLNO)"+
			                   " FROM ST_BOOK_FOLLOW Y WHERE X.DEALER_MAP_CD = Y.DEALER_MAP_CD AND X.PARENT_GROUP = Y.PARENT_GROUP AND X.LOC_CD = Y.LOC_CD"+
			                   " AND X.COMP_FA = Y.COMP_FA AND X.ORDER_NUM = Y.ORDER_NUM)";
		
		st = trx.createCallableStatement(sqlupdate1v, 0);
                    st.executeUpdate();
		}
		catch(Exception e){
		e.printStackTrace();
		}
		
		String selectSql  = "select mobile, ref_card_type, loyl_redeem_pts from sh_ordbook where order_num= '"+OrderNum+"' and PARENT_GROUP= '"+parent +
					   "' and DEALER_MAP_CD= '" +dealer + "' and loc_cd= '"+loc + "' and comp_fa= '"+comp+"'";
					
		ResultSet rs3 = trx.createStatement(0).executeQuery(selectSql);
                
                if (rs3.next()) {
                    mobile  = rs3.getString(1);
					cardType = rs3.getString(2);
					redeemPoint = rs3.getInt(3);
                }
				
				String cardnum = null;
			if(null != mobile && null != cardType && redeemPoint.compareTo(0)>0){
				String cardnumq ="select card_num from gd_loyalty_enrol where reg_mobile= '"+mobile+"' and card_type= '"+ cardType +
							   "' and card_status not in ('C', 'S')";
			
			ResultSet rs4 = trx.createStatement(0).executeQuery(cardnumq);
                
                if (rs4.next()) {
                    cardnum  = rs4.getString(1);
                }
				System.out.println("cardnumq"+cardnumq+"cardnum"+cardnum);
				if(null != cardnum){
				 try {
                             System.out.println("inisde cardnum not null value 12"+cardnum+OrderDate+OrderNum+parent+dealer+loc);
                                String stmt2 =
                                    "begin PKG_LOYALTY.sp_ins_loyalty_transactions(?,?,?,?,?,?,?,?,?,?,?,?,?,?,?); end;";
                                st = trx.createCallableStatement(stmt2, 0);
                                st.setString(1, cardnum);
                                st.setString(2, null);
                                st.setString(3, "SINVC");
                                st.setString(4, OrderDate);
                                st.setString(5, OrderNum);
                                st.setString(6, null);
                                st.setString(7, parent);
                                st.setInt(8, dealer);
                                st.setString(9, loc);
                                st.setInt(10, 0);
                                st.setInt(11, 0);
                                st.setString(12, "C");
                                st.setString(13, (String) session.get("userCode"));
                                st.registerOutParameter(14, Types.INTEGER);
                                st.registerOutParameter(15, Types.VARCHAR);
                                st.executeUpdate();
								System.out.println("value 123"+st.getInt(14));
                                errMsg = st.getString(15);
								Integer errCd = st.getInt(14);
								if(errCd.compareTo(1)==0){
									return "Unable to revert loyalty transaction: "+errMsg;
								}
                                
                                LOGGER.info("errMsg+" + errMsg);
                                //if (errMsg != "" && errMsg!=null) {System.out.println("check data"); return errMsg;}
                            } catch (Exception e) {
                                e.printStackTrace();
                            }

				}
			}
//            else{
//	        return "Card not exists against the order loyalty card";
//           }

           	
		}	// when count =0			
		else{
			try{
				System.out.println("inisde count : "+cnt);
			 String sqlupdate1v2= "UPDATE SH_ORDBOOK X SET CANCEL_APPROVAL = 'P' WHERE X.DEALER_MAP_CD = "+dealer+" AND X.PARENT_GROUP = '"+parent+
			       "' AND X.LOC_CD = '" +loc+ "' AND X.COMP_FA = '"+comp+"' AND X.ORDER_NUM = '" + OrderNum + "'";
		
		st = trx.createCallableStatement(sqlupdate1v2, 0);
                    st.executeUpdate();
					return "success1";
			}
			catch(Exception e){
				e.printStackTrace();
			}
			
			
			
		}
		
		}	// when ordernum and reason cd not null
		this.getTransaction().commit();
			String sqls =
                "select 'Y' from am_dealer_loc_param where PARENT_GROUP = '" + parent + "' and DEALER_MAP_CD = " +
                dealer + " and LOC_CD = '" + loc + "' and nvl(fin_data_yn, 'N') = 'Y'";
            ResultSet rss = getDBTransaction().createStatement(0).executeQuery(sqls);
            String fin_data_yn = "N";
            if (rss.next()) {
                fin_data_yn = rss.getString(1);
            }
            // code call for package FDI
            if (fin_data_yn.equalsIgnoreCase("Y")) {
                String stmt9 = "begin PKG_FDI.SP_INS_ORDB_FDI(?,?,?,?,?,?,?,?); end;";
                st = trx.createCallableStatement(stmt9, 0);
                st.setString(1, parent);
                st.setInt(2, dealer);
                st.setString(3, loc);
                st.setString(4, comp);
                st.setString(5, (String) rp.getAttribute("OrderNum"));
				st.setString(6, "ORDBC");
                st.registerOutParameter(7, Types.INTEGER);
                st.registerOutParameter(8, Types.VARCHAR);
                st.executeUpdate();
                errMsg = st.getString(8);
                if (errMsg != "" && errMsg != null) {
                    return errMsg;
                }
            }

            

			return errMsg;
		}
		catch(Exception e){
			e.printStackTrace();
			return "error";
		}
		finally {
            try {
                if (st != null) {
                    st.close();
                }
            } catch (Exception e) {
            }
        }
		
	}
	
	
    public String fetchOrderCancelFieldValues() {
        String errMsg = "";
        try {
            Map session = ADFContext.getCurrent().getSessionScope();
            Integer dealer = new Integer(session.get("dealerMapCd").toString());
        Integer pmc = new Integer(session.get("principalMapCd").toString());
        String comp = session.get("compCode").toString();
            String loc = (String) session.get("locCd");
            //System.out.println("ChargeCd : " + ChargeType);
            ViewObjectImpl voo = this.getShOrdBookCanVO1();
            Row rp = voo.getCurrentRow();
            ViewObjectImpl vo1 = this.getSdOrdReasonsVO1();
            Row rs = vo1.getCurrentRow();
            DBTransaction trx = (DBTransaction) getTransaction();
            CallableStatement st = null;
            
            
            LOGGER.info("inside ote chk 5");
            String stmt = "begin SP_GET_ORDER_BOOK_QUERY(?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?); end;";
            String nominee = "";
    
            try {
                
                    String CustCd = rp.getAttribute("CustCd")==null?null:rp.getAttribute("CustCd").toString();
                    String FirstEcolorCd = rp.getAttribute("FirstEcolorCd")==null?null:rp.getAttribute("FirstEcolorCd").toString();
                    String SecondEcolorCd = rp.getAttribute("SecondEcolorCd")==null?null:rp.getAttribute("SecondEcolorCd").toString();
                    String AreaCd = rp.getAttribute("AreaCd")==null?null:rp.getAttribute("AreaCd").toString();
                    String OrderNum = rp.getAttribute("OrderNum")==null?null:rp.getAttribute("OrderNum").toString();
                    String VariantCd = rp.getAttribute("VariantCd")==null?null:rp.getAttribute("VariantCd").toString();
                    
                
                st = trx.createCallableStatement(stmt, 0);
                st.setInt(1, dealer);
                st.setString(2, loc);
                st.setInt(3, pmc);
                st.setString(4, comp);
                st.setString(5, CustCd);
                st.setString(6, VariantCd);
                st.setString(7, FirstEcolorCd);
                st.setString(8, SecondEcolorCd);
                st.setString(9, AreaCd);
                st.setString(10, OrderNum);       
                st.registerOutParameter(11, Types.VARCHAR);
                st.registerOutParameter(12, Types.VARCHAR);
                st.registerOutParameter(13, Types.VARCHAR);
                st.registerOutParameter(14, Types.VARCHAR);
                st.registerOutParameter(15, Types.VARCHAR);
                st.registerOutParameter(16, Types.VARCHAR);
                st.registerOutParameter(17, Types.VARCHAR);
                st.registerOutParameter(18, Types.VARCHAR);
                st.registerOutParameter(19, Types.NUMERIC);
                st.registerOutParameter(20, Types.VARCHAR);
                st.registerOutParameter(21, Types.NUMERIC);
                st.executeUpdate();
                rp.setAttribute("CustNameT", st.getString(11));
                   nominee = st.getString(12);
                rp.setAttribute("SuffixDescT", st.getString(13));
                rp.setAttribute("FeColorDesc", st.getString(14));
                rp.setAttribute("SeColorDesc", st.getString(15));
                String areaDesc =  st.getString(16);
                rp.setAttribute("ModelCd", st.getString(17));
                rp.setAttribute("ModelDescT", st.getString(18));
                Integer count = st.getInt(19);
                errMsg = st.getString(20);
                Integer errcode = st.getInt(21);
                           
                //errMsg = st.getString(9);
                LOGGER.info("Msg value poCardType  -errMsg" +
                            errMsg);
                if (errMsg != "" && errMsg != null) {
                    return errMsg;
                }}
            
            
            catch (Exception e) {
                        e.printStackTrace();
                        return "error";
                    }
            
            String DelInd = rp.getAttribute("DeliveryInd") == null ? null:rp.getAttribute("DeliveryInd").toString();
			if(null != DelInd && DelInd.equalsIgnoreCase("H")){
				rp.setAttribute("DelIndDescT","AT HOME");
			}
			else{
				rp.setAttribute("DelIndDescT","AT SHOWROOM");
			}
			
			String SalesManCd = rp.getAttribute("SalesManCd").toString();
			if(null != SalesManCd){
             stmt = "begin SP_GET_DSE_NAME(?,?,?,?,?,?); end;";
            
            try {
                st = trx.createCallableStatement(stmt, 0);
                st.setInt(1, dealer);
                st.setString(2, loc);
                st.setString(3, SalesManCd);
                st.registerOutParameter(4, Types.VARCHAR);
                st.registerOutParameter(5, Types.VARCHAR);
                st.registerOutParameter(6, Types.NUMERIC);
                st.executeUpdate();
                rp.setAttribute("SalesNameT", st.getString(4));
                String errmsg = st.getString(5);
                Integer errcode = st.getInt(6);
                           
                //errMsg = st.getString(9);
                LOGGER.info("Msg value poCardType  2 -errMsg" +
                            errMsg);
                if (errMsg != "" && errMsg != null) {
                    return errMsg;
                }}
				catch (Exception e) {
                        e.printStackTrace();
                        return "error";
                    }
			}
			
            if(null == rp.getAttribute("RecdAmt")){
                    rp.setAttribute("RecdAmt",0);
            }                               
            errMsg = "success";		
        
        } catch (Exception e) {
            e.printStackTrace();
            return "error";
        }
		return errMsg;
    }

    public Date convertToDateValue(Date value) {
        try {
            DefaultDateFormatter ddf = new DefaultDateFormatter();
            String val = ddf.format("dd-MM-yyyy", value);
            SimpleDateFormat formatter = new SimpleDateFormat("dd-MM-yyyy");
            java.util.Date date = formatter.parse(val);
            java.sql.Date sqlDate = new java.sql.Date(date.getTime());
            value = new oracle.jbo.domain.Date(sqlDate);
        } catch (Exception e) {
            e.printStackTrace();

        }
        return value;
    }

    public void dataToVmCharge() {
        String message = null;
        DBTransaction trx = (DBTransaction) getTransaction();
        CallableStatement st = null;
        SimpleDateFormat sdf1 = new SimpleDateFormat("dd-mm-yyyy");
        try {
            Map session = ADFContext.getCurrent().getSessionScope();
            ViewObjectImpl vo = this.getSmVchargesVO1();
            Row r[] = vo.getAllRowsInRange();
            System.out.println("length of row : " + r.length);
            if (r.length > 0) {
                for (int i = 0; i < r.length; i++) {
System.out.println("val of i " + i + r[i].getAttribute("ChargeType"));
                    String dealer = session.get("dealerMapCd").toString();
                    String loc = (String) session.get("locCd");
                    String parent = (String) session.get("parentGroupCd");
                    String comp = (String) session.get("compCode");
                    String variant = (String) r[i].getAttribute("VariantCd");
                    String area = (String) r[i].getAttribute("AreaCd");
                    Object frmdate = convertToDateValue((Date) r[i].getAttribute("FromDate"));
                    String chargeType = (String) r[i].getAttribute("ChargeType");
                    String commanInd = (String) r[i].getAttribute("CommonInd");
                    Integer Chargesal = (Integer) r[i].getAttribute("ChargeSrl");
                    String Chargecd = (String) r[i].getAttribute("ChargeCd");
                    String chargeind = (String) r[i].getAttribute("ChargeInd");
                    Object Chargeval = r[i].getAttribute("ChargeValue");
                    String latestyn = (String) r[i].getAttribute("LatestYn");
                    String createdby = (String) r[i].getAttribute("CreatedBy");
                    Object createddate =  r[i].getAttribute("CreatedDate");
                    String modifyby = (String) r[i].getAttribute("ModifiedBy");
                    //   Object modifydate =  sdf1.parse(r[i].getAttribute("ModifiedDate").toString());
                    String customertype = (String) r[i].getAttribute("CustomerType");
                    String colorind = (String) r[i].getAttribute("ColorInd");
                    String chgflg = (String) r[i].getAttribute("ChgFlag");
                    if (null != chgflg) {
                        chgflg =  "'"+chgflg+"'" ;
                    }
					if(null == chgflg){
							chgflg = "'"+"N"+"'";
						}
                    if (null != area) {
                        area = "'"+area+"'";
                        System.out.println("area area"+area);
                    }

                    //String errorMsg = null;
                    String flag = "Y";

                    String count =
                        "select count(*) from sm_vcharges where dealer_map_cd = " + dealer + " and variant_cd = '" +
                        variant + "' and area_cd = " + area + " and from_date = to_date('" + frmdate +
                        "','yyyy/mm/dd') and charge_cd = '" + Chargecd + "' and loc_cd = '" + loc +
                        "' and parent_group = '" + parent + "' and customer_type = '" + customertype +
                        "' and color_ind = '" + colorind + "'";
                    ResultSet rs;
					ResultSet rs1;
                    Integer cnt = null;
                    try {
                        rs = getDBTransaction().createStatement(0).executeQuery(count);
                        if (rs.next()) {
                            cnt = rs.getInt(1);
                            System.out.println("cnt" + cnt);
                            if (cnt > 0) {
                                
								
								
								
								//if(cnt.compareTo(r.length)!=0){
								
								
                                String shStkup =
                                                         "update sm_vcharges set CHG_FLAG = " + chgflg + " , modified_by = '" + createdby + "' , modified_date = to_date(substr('"  + createddate +
                            "' ,0,19),'yyyy/mm/dd hh24:mi:ss') , to_date = null where dealer_map_cd = " + dealer + " and variant_cd = '" +
                                                     variant + "' and area_cd = " + area + " and from_date = to_date('" + frmdate +
                                                     "','yyyy/mm/dd') and charge_cd = '" + Chargecd + "' and loc_cd = '" + loc +
                                                     "' and parent_group = '" + parent + "' and customer_type = '" + customertype +
                                                     "' and color_ind = '" + colorind + "'";
                                                     st = trx.createCallableStatement(shStkup, 0);
                                                     st.executeUpdate();
													  flag = "N";
								//}
								
								/*else{
									System.out.println("inside else");
							String dbchgflg = null;
								String ChrgFlag =
                        "select CHG_FLAG from sm_vcharges where dealer_map_cd = " + dealer + " and variant_cd = '" +
                        variant + "' and area_cd = " + area + " and from_date = to_date('" + frmdate +
                        "','yyyy/mm/dd') and charge_cd = '" + Chargecd + "' and loc_cd = '" + loc +
                        "' and parent_group = '" + parent + "' and customer_type = '" + customertype +
                        "' and color_ind = '" + colorind + "'";
						rs1 = getDBTransaction().createStatement(0).executeQuery(ChrgFlag);
                        if (rs1.next()) {
                            dbchgflg = rs1.getString(1);
						}
						System.out.println("inside else -- if before "+dbchgflg+);
								if(!dbchgflg.equalsIgnoreCase(chgflg)){
									System.out.println("inside else -- if");
									String shStkup2 =
                                                         "update sm_vcharges set CHG_FLAG = " + chgflg + " modified_by = '" + createdby + "' , modified_date = to_date(substr('"  + createddate +
                            "' ,0,19),'yyyy/mm/dd hh24:mi:ss')  where dealer_map_cd = " + dealer + " and variant_cd = '" +
                                                     variant + "' and area_cd = " + area + " and from_date = to_date('" + frmdate +
                                                     "','yyyy/mm/dd') and charge_cd = '" + Chargecd + "' and loc_cd = '" + loc +
                                                     "' and parent_group = '" + parent + "' and customer_type = '" + customertype +
                                                     "' and color_ind = '" + colorind + "'";
                                                     st = trx.createCallableStatement(shStkup2, 0);
                                                     st.executeUpdate();
													  flag = "N";
								}
								//flag = "N";
                                }*/
                               
                            }

                        }
                    } catch (SQLException e) {
                        e.printStackTrace();
                    }
System.out.println("value of flag"+flag);
                    if (flag.equalsIgnoreCase("Y")) {
						
                        System.out.println("System print :"+chargeType);
						if(null == chgflg){
							chgflg = "'"+"N"+"'";
						}
						
                        String shStkInv =
                            "insert into sm_vcharges(DEALER_MAP_CD,VARIANT_CD,AREA_CD,FROM_DATE,TO_DATE,CHARGE_TYPE,COMMON_IND,CHARGE_SRL,CHARGE_CD,CHARGE_IND,CHARGE_VALUE,LATEST_YN,CREATED_BY,CREATED_DATE,MODIFIED_BY," +
                            "MODIFIED_DATE,LOC_CD,CUSTOMER_TYPE,PARENT_GROUP,COLOR_IND,CHG_FLAG)values('" + dealer +
                            "','" + variant + "', " + area + ",to_date('" + frmdate + "','yyyy/mm/dd') ,null,'" +
                            chargeType + "','" + commanInd + "'," + Chargesal + ",'" + Chargecd + "','" + chargeind +
                            "','" + Chargeval + "','" + latestyn + "','" + createdby + "',to_date(substr('"  + createddate +
                            "' ,0,19),'yyyy/mm/dd hh24:mi:ss') ,null,null,'" + loc + "','" + customertype + "','" + parent + "','" +
                            colorind + "'," + chgflg + ")";
							System.out.println("shStkInv"+shStkInv);
                        st = trx.createCallableStatement(shStkInv, 0);
                        st.executeUpdate();
                        r[i].remove();
                    }

                }

            }
            vo.executeEmptyRowSet();
            getTransaction().commit();
        }


        catch (Exception e) {
            e.printStackTrace();
            getTransaction().rollback();
        } finally {
            try {
                if (st != null) {
                    st.close();
                }
            } catch (Exception e) {
            }
        }

    }


    public Map<String, String> getResourceBundle(String locale) {
        Map<String, String> bundle = new HashMap<String, String>();
        ViewObjectImpl vo = this.getResourceBundleEntriesVO();
        vo.applyViewCriteria(vo.getViewCriteria("findByLocale"));
        vo.setNamedWhereClauseParam("bindLocale", locale);
        vo.executeQuery();

        if (vo.getEstimatedRowCount() > 0) {
            RowSetIterator rst = vo.createRowSetIterator(null);
            while (rst.hasNext()) {
                Row r = rst.next();
                bundle.put((String) r.getAttribute("ResourceKey"), (String) r.getAttribute("ResourceValue"));
            }
            rst.closeRowSetIterator();
        }

        LOGGER.info("resource keys count DB" + bundle.values().size());
        return bundle;
    }


    public String executeSYNC_RESOURCE_KEYS(String[] vars) {
        Object result = callStoredFunction(Types.VARCHAR, "FN_SYNC_RESOURCE_KEYS(?,?,?,?,?)", vars);
        String status = result != null ? result.toString() : "";
        return status;
    }

    /**
     * Container's getter for DealerDetailsLOV1.
     * @return DealerDetailsLOV1
     */
    public ViewObjectImpl getDealerDetailsLOV1() {
        return (ViewObjectImpl) findViewObject("DealerDetailsLOV1");
    }

    /**
     * Container's getter for CustomerIdLOV1.
     * @return CustomerIdLOV1
     */
    public ViewObjectImpl getCustomerIdLOV1() {
        return (ViewObjectImpl) findViewObject("CustomerIdLOV1");
    }


    /**
     * Container's getter for DestinationLOV1.
     * @return DestinationLOV1
     */
    public ViewObjectImpl getDestinationLOV1() {
        return (ViewObjectImpl) findViewObject("DestinationLOV1");
    }

    /**
     * Container's getter for ExchangeStatusLOV1.
     * @return ExchangeStatusLOV1
     */
    public ViewObjectImpl getExchangeStatusLOV1() {
        return (ViewObjectImpl) findViewObject("ExchangeStatusLOV1");
    }

    /**
     * Container's getter for OldCarBuyingCategoryLOV1.
     * @return OldCarBuyingCategoryLOV1
     */
    public ViewObjectImpl getOldCarBuyingCategoryLOV1() {
        return (ViewObjectImpl) findViewObject("OldCarBuyingCategoryLOV1");
    }

    /**
     * Container's getter for OldCarModelLOV1.
     * @return OldCarModelLOV1
     */
    public ViewObjectImpl getOldCarModelLOV1() {
        return (ViewObjectImpl) findViewObject("OldCarModelLOV1");
    }

    /**
     * Container's getter for OldCarVariantLOV1.
     * @return OldCarVariantLOV1
     */
    public ViewObjectImpl getOldCarVariantLOV1() {
        return (ViewObjectImpl) findViewObject("OldCarVariantLOV1");
    }

    /**
     * Container's getter for OutletDetailsLOV1.
     * @return OutletDetailsLOV1
     */
    public ViewObjectImpl getOutletDetailsLOV1() {
        return (ViewObjectImpl) findViewObject("OutletDetailsLOV1");
    }

    /**
     * Container's getter for TvOutletLOV1.
     * @return TvOutletLOV1
     */
    public ViewObjectImpl getTvOutletLOV1() {
        return (ViewObjectImpl) findViewObject("TvOutletLOV1");
    }

    /**
     * Container's getter for ExchangeTradeInTVO1.
     * @return ExchangeTradeInTVO1
     */
    public ExchangeTradeInTVOImpl getExchangeTradeInTVO1() {
        return (ExchangeTradeInTVOImpl) findViewObject("ExchangeTradeInTVO1");
    }

    /**
     * Container's getter for ExchangeBusinessReportTVO1.
     * @return ExchangeBusinessReportTVO1
     */
    public ExchangeBusinessReportTVOImpl getExchangeBusinessReportTVO1() {
        return (ExchangeBusinessReportTVOImpl) findViewObject("ExchangeBusinessReportTVO1");
    }

    /**
     * Container's getter for IndentEColorLOV1.
     * @return IndentEColorLOV1
     */
    public ViewObjectImpl getIndentEColorLOV1() {
        return (ViewObjectImpl) findViewObject("IndentEColorLOV1");
    }

    /**
     * Container's getter for IndentModelLOV1.
     * @return IndentModelLOV1
     */
    public ViewObjectImpl getIndentModelLOV1() {
        return (ViewObjectImpl) findViewObject("IndentModelLOV1");
    }

    /**
     * Container's getter for IndentVariantLOV1.
     * @return IndentVariantLOV1
     */
    public ViewObjectImpl getIndentVariantLOV1() {
        return (ViewObjectImpl) findViewObject("IndentVariantLOV1");
    }

    /**
     * Container's getter for IndentVinLOV1.
     * @return IndentVinLOV1
     */
    public ViewObjectImpl getIndentVinLOV1() {
        return (ViewObjectImpl) findViewObject("IndentVinLOV1");
    }

    /**
     * Container's getter for IndentModelExtLOV1.
     * @return IndentModelExtLOV1
     */
    public ViewObjectImpl getIndentModelExtLOV1() {
        return (ViewObjectImpl) findViewObject("IndentModelExtLOV1");
    }

    /**
     * Container's getter for StIndentVO1.
     * @return StIndentVO1
     */
    public ViewObjectImpl getStIndentVO1() {
        return (ViewObjectImpl) findViewObject("StIndentVO1");
    }

    /**
     * Container's getter for BookingFollowupVO1.
     * @return BookingFollowupVO1
     */
    public BookingFollowupVOImpl getBookingFollowupVO1() {
        return (BookingFollowupVOImpl) findViewObject("BookingFollowupVO1");
    }

    /**
     * Container's getter for IndentVariantExtLOV1.
     * @return IndentVariantExtLOV1
     */
    public ViewObjectImpl getIndentVariantExtLOV1() {
        return (ViewObjectImpl) findViewObject("IndentVariantExtLOV1");
    }

    /**
     * Container's getter for SmDlrStkyrdEOView1.
     * @return SmDlrStkyrdEOView1
     */
    public SmDlrStkyrdEOViewImpl getSmDlrStkyrdEOView1() {
        return (SmDlrStkyrdEOViewImpl) findViewObject("SmDlrStkyrdEOView1");
    }

    /**
     * Container's getter for AmTermConditionsVO1.
     * @return AmTermConditionsVO1
     */
    public AmTermConditionsVOImpl getAmTermConditionsVO1() {
        return (AmTermConditionsVOImpl) findViewObject("AmTermConditionsVO1");
    }

    /**
     * Container's getter for AmTermConditionsRO1.
     * @return AmTermConditionsRO1
     */
    public AmTermConditionsROImpl getAmTermConditionsRO1() {
        return (AmTermConditionsROImpl) findViewObject("AmTermConditionsRO1");
    }

    /**
     * Container's getter for TermsAndConditionsST1.
     * @return TermsAndConditionsST1
     */
    public ViewObjectImpl getTermsAndConditionsST1() {
        return (ViewObjectImpl) findViewObject("TermsAndConditionsST1");
    }

    /**
     * Container's getter for IndentDealerLOV1.
     * @return IndentDealerLOV1
     */
    public ViewObjectImpl getIndentDealerLOV1() {
        return (ViewObjectImpl) findViewObject("IndentDealerLOV1");
    }

    /**
     * Container's getter for StockyardNextValVO1.
     * @return StockyardNextValVO1
     */
    public ViewObjectImpl getStockyardNextValVO1() {
        return (ViewObjectImpl) findViewObject("StockyardNextValVO1");
    }

    /**
     * Container's getter for StockyardTVO1.
     * @return StockyardTVO1
     */
    public ViewObjectImpl getStockyardTVO1() {
        return (ViewObjectImpl) findViewObject("StockyardTVO1");
    }

    /**
     * Container's getter for StockyardSearchRVO1.
     * @return StockyardSearchRVO1
     */
    public ViewObjectImpl getStockyardSearchRVO1() {
        return (ViewObjectImpl) findViewObject("StockyardSearchRVO1");
    }

    /**
     * Container's getter for IndentStatusLOV1.
     * @return IndentStatusLOV1
     */
    public ViewObjectImpl getIndentStatusLOV1() {
        return (ViewObjectImpl) findViewObject("IndentStatusLOV1");
    }

    /**
     * Container's getter for IndentSearchRO1.
     * @return IndentSearchRO1
     */
    public ViewObjectImpl getIndentSearchRO1() {
        return (ViewObjectImpl) findViewObject("IndentSearchRO1");
    }


    /**

     * This method is used for search in the Indent form search fields on search button
     */
    public void indentSearchForm(int toDealer, String indentNo, Date fromDate, Date toDate) {
        try {
            ViewObjectImpl vo = this.getIndentSearchRO1();
            // System.out.println(vo.getQuery());
            ViewCriteria vc = vo.getViewCriteria("filterSearchVC");
            vo.applyViewCriteria(vc);
            //  System.out.println(fromDate);
            //            SimpleDateFormat DateFor = new SimpleDateFormat("dd/MM/yyyy");
            ////           // Date fromD = DateFgor.format(d);
            ////            String fD= DateFor.format(fromDate);
            ////            String tD= DateFor.format(toDate);
            ////              java.sql.Date fromDate1 = fromDate.dateValue();
            ////            java.sql.Date toDate1 = toDate.dateValue();
            ////            Date date = DateFor.parse(fD);
            ////            System.out.println(date);
            vo.setNamedWhereClauseParam("bind_ToDlr", toDealer);
            vo.setNamedWhereClauseParam("bind_IndentNum", indentNo);
            vo.setNamedWhereClauseParam("bindFromDate", fromDate);
            vo.setNamedWhereClauseParam("bindToDate", toDate);
            //   System.out.println(vo.getQuery());
            vo.executeQuery();
        } catch (Exception e) {
            // TODO: Add catch code
            e.printStackTrace();
        }
    }


    /**
     * This method is used for reset the Indent form search fields on reset button
     */
    public void indentFormReset() {
        try {
            ViewObjectImpl vo = this.getIndentSearchRO1();
            // System.out.println(vo.getQuery());
            ViewCriteria vc = vo.getViewCriteria("filterSearchVC");
            vo.applyViewCriteria(vc);
            vo.setNamedWhereClauseParam("bind_ToDlr", null);
            vo.setNamedWhereClauseParam("bind_IndentNum", null);
            //  System.out.println(vo.getQuery());
            // vo.removeViewCriteria("filterSearchVC");
            vo.executeQuery();
        } catch (Exception e) {
            // TODO: Add catch code
            e.printStackTrace();
        }

    }

    /**
     * Container's getter for ShComplaintsVO1.
     * @return ShComplaintsVO1
     */
    public ShComplaintsVOImpl getShComplaintsVO1() {
        return (ShComplaintsVOImpl) findViewObject("ShComplaintsVO1");
    }

    /**
     * Container's getter for SdComplaintsVO1.
     * @return SdComplaintsVO1
     */
    public ViewObjectImpl getSdComplaintsVO1() {
        return (ViewObjectImpl) findViewObject("SdComplaintsVO1");
    }


    /**

     * This method is used for reset the Complaint registration search fields on reset button
     */
    public void resetComplField() {
        this.getComplaintRegistrationST1().executeQuery();
        //ViewObjectImpl voSearch = this.getComplaintRegistrationST1();
        //        ComplaintRegistrationSTRowImpl rwSearch = (ComplaintRegistrationSTRowImpl) voSearch.getCurrentRow();
        //        rwSearch.setAttribute("RegNum", null);
        //        rwSearch.setAttribute("ComplType", null);
        //        rwSearch.setAttribute("AssignedTo", null);
        //        rwSearch.setAttribute("ComplStatus", null);
        //        rwSearch.setAttribute("ComplFromDate", null);
        //        rwSearch.setAttribute("ComplToDate", null);
        //        rwSearch.setAttribute("ComplNumber", null);
    }

    /**
     * Container's getter for ReceiptTVO1.
     * @return ReceiptTVO1
     */
    public ViewObjectImpl getReceiptTVO1() {
        return (ViewObjectImpl) findViewObject("ReceiptTVO1");
    }

    /**
     * Container's getter for ReceiptEOView1.
     * @return ReceiptEOView1
     */
    public ReceiptEOViewImpl getReceiptEOView1() {
        return (ReceiptEOViewImpl) findViewObject("ReceiptEOView1");
    }

    /**
     * Container's getter for ReceiptSearchTVO1.
     * @return ReceiptSearchTVO1
     */
    public ReceiptSearchTVOImpl getReceiptSearchTVO1() {
        return (ReceiptSearchTVOImpl) findViewObject("ReceiptSearchTVO1");
    }

    /**
     * Container's getter for SdDealerInfraVO1.
     * @return SdDealerInfraVO1
     */
    public ViewObjectImpl getSdDealerInfraVO1() {
        return (ViewObjectImpl) findViewObject("SdDealerInfraVO1");
    }


    /**

     * This method is used for generating indent number in stock indent form.
     */
    public String exeGenNextNum(int dealerMapCd, String principalMapCd, String locCd, String compFa, String docType,
                                int finYear) {

        DBTransaction trx = (DBTransaction) getTransaction();
        CallableStatement st = null;
        String docNum = null;

        try {
            // 1. Define the PL/SQL block for the statement to invoke
            String stmt = "begin Generate_Next_Num (?,?,?,?,?,?,?,?,?); end;";
            // 2. Create the CallableStatement for the PL/SQL block
            st = trx.createCallableStatement(stmt, 0);
            // 3. Register the positions and types of the OUT parameters

            // 4. Set the bind values of the IN parameters
            st.setInt(1, dealerMapCd);
            st.setString(2, principalMapCd);
            st.setString(3, locCd);
            st.setString(4, compFa);
            st.setString(5, docType);
            st.registerOutParameter(6, Types.VARCHAR);
            st.registerOutParameter(7, Types.VARCHAR);
            st.registerOutParameter(8, Types.INTEGER);
            st.setInt(9, finYear);
            // 5. Execute the statement
            st.executeUpdate();
            docNum = st.getString(6);
            String error_msg = st.getString(7);
            int err = st.getInt(8);
            System.out.println(docNum+"err--"+err+"==="+error_msg);
            if(err==1){
                    getDBTransaction().rollback();
                }
        } catch (Exception sqle) {
            // TODO: Add catch code
            
            sqle.printStackTrace();
        } finally {
            try {
                if (st != null) {
                    st.close();
                }
            } catch (Exception e) {
            }
        }

        return docNum;


    }


    /**
     * Container's getter for SdComplaintsVO2.
     * @return SdComplaintsVO2
     */
    public ViewObjectImpl getSdComplaintsVO2() {
        return (ViewObjectImpl) findViewObject("SdComplaintsVO2");
    }

    /**
     * Container's getter for ShComplaintsLK1.
     * @return ShComplaintsLK1
     */
    public ViewLinkImpl getShComplaintsLK1() {
        return (ViewLinkImpl) findViewLink("ShComplaintsLK1");
    }

    /**
     * Container's getter for ShComplaintsVO2.
     * @return ShComplaintsVO2
     */
    public ShComplaintsVOImpl getShComplaintsVO2() {
        return (ShComplaintsVOImpl) findViewObject("ShComplaintsVO2");
    }

    /**
     * Container's getter for SdComplaintsVO3.
     * @return SdComplaintsVO3
     */
    public ViewObjectImpl getSdComplaintsVO3() {
        return (ViewObjectImpl) findViewObject("SdComplaintsVO3");
    }

    /**
     * Container's getter for ShComplaintsLK2.
     * @return ShComplaintsLK2
     */
    public ViewLinkImpl getShComplaintsLK2() {
        return (ViewLinkImpl) findViewLink("ShComplaintsLK2");
    }

    /**
     * Container's getter for IndentSearchTVO1.
     * @return IndentSearchTVO1
     */
    public ViewObjectImpl getIndentSearchTVO1() {
        return (ViewObjectImpl) findViewObject("IndentSearchTVO1");
    }

    /**
     * Container's getter for SearchIndentNumLOV1.
     * @return SearchIndentNumLOV1
     */
    public ViewObjectImpl getSearchIndentNumLOV1() {
        return (ViewObjectImpl) findViewObject("SearchIndentNumLOV1");
    }

    /**
     * Container's getter for IndentReqdByLOV1.
     * @return IndentReqdByLOV1
     */
    public ViewObjectImpl getIndentReqdByLOV1() {
        return (ViewObjectImpl) findViewObject("IndentReqdByLOV1");
    }

    /**
     * Container's getter for ReqdByRO1.
     * @return ReqdByRO1
     */
    public ViewObjectImpl getReqdByRO1() {
        return (ViewObjectImpl) findViewObject("ReqdByRO1");
    }

    /**
     * Container's getter for LOV_OkDamageST1.
     * @return LOV_OkDamageST1
     */
    public LOV_OkDamageSTImpl getLOV_OkDamageST1() {
        return (LOV_OkDamageSTImpl) findViewObject("LOV_OkDamageST1");
    }

    public String UpdateGrnAlot(String Dealer, String Parent, String CompFa, String Loc, String User, String Vin,
                                String Status) {
        
        System.out.println("--------------UpdateGrnAlot Method--------");
        System.out.println("DEALER:::"+Dealer+" Parent::"+Parent+" CompFa::::"+CompFa+" Loc :::::"+Loc+" Vin:::"+Vin+" Status:::"+Status);

        String stmt = "begin SP_UPDATE_GRN_ALLOT(?,?,?,?,?,?,?,?,?);commit; end;";
        DBTransaction dbtxn = (DBTransaction) getTransaction();
        CallableStatement cs = dbtxn.createCallableStatement(stmt.toString(), 1);
        String flag = "";
        try {
            cs.setObject(1, Dealer);
            cs.setObject(2, Parent);
            cs.setObject(3, CompFa);
            cs.setObject(4, Loc);
            cs.setObject(5, User);
            cs.setObject(6, Vin);
            cs.setObject(7, Status);
            cs.registerOutParameter(8, OracleTypes.VARCHAR);
            cs.registerOutParameter(9, OracleTypes.VARCHAR);
            cs.execute();
            flag = cs.getString(9);
            System.out.println("vCLVal--------------------->" + flag);
            return flag;
        } catch (SQLException sqlerr) {
            throw new JboException(sqlerr);
        } finally {
            try {
                if (cs != null) {
                    cs.close();
                }
            } catch (Exception e) {
            }
        }
    }


    /**
     * Container's getter for ComplaintRegistrationST1.
     * @return ComplaintRegistrationST1
     */
    public ComplaintRegistrationSTImpl getComplaintRegistrationST1() {
        return (ComplaintRegistrationSTImpl) findViewObject("ComplaintRegistrationST1");
    }

    /**
     * method for generating the complaint number based on channel type
     * @return ComplaintNumber
     */
    public String complaintNumGen(int dealerMapCd, String principalMapCd, String locCd, String compFa,
                                  String channelType, int finYear) {

        DBTransaction trx = (DBTransaction) getTransaction();
        CallableStatement st = null;
        String complNumber = null;
        try {
            if (this.getShComplaintsVO1()
                    .getCurrentRow()
                    .getAttribute("ComplNum") == null) {
                // 1. Define the PL/SQL block for the statement to invoke
                String stmt = "begin Generate_Next_Num (?,?,?,?,?,?,?,?,?); end;";
                // 2. Create the CallableStatement for the PL/SQL block
                st = trx.createCallableStatement(stmt, 0);
                // 3. Register the positions and types of the OUT parameters

                // 4. Set the bind values of the IN parameters
                st.setInt(1, dealerMapCd);
                st.setString(2, principalMapCd);
                st.setString(3, locCd);
                st.setString(4, compFa);
                st.setString(5, channelType);
                st.registerOutParameter(6, Types.VARCHAR);
                st.registerOutParameter(7, Types.VARCHAR);
                st.registerOutParameter(8, Types.INTEGER);
                st.setInt(9, finYear);
                // 5. Execute the statement
                st.execute();

                complNumber = st.getString(6);
                if (complNumber != null) {
                    this.getShComplaintsVO1()
                        .getCurrentRow()
                        .setAttribute("ComplNum", complNumber);
                }
                String error_msg = st.getString(7);
                int err = st.getInt(8);
            } else {
                complNumber = "S";
            }
        } catch (Exception sqle) {
            sqle.printStackTrace();
        } finally {
            try {
                if (st != null) {
                    st.close();
                }
            } catch (Exception e) {
            }
        }

        return complNumber;


    }


    //    public void setVehDetails() {
    //        this.getSdComplaintsVO1()
    //            .getCurrentRow()
    //            .setAttribute("VehicleIdT", null);
    //        this.getSdComplaintsVO1()
    //            .getCurrentRow()
    //            .setAttribute("VariantT", null);
    //        this.getSdComplaintsVO1()
    //            .getCurrentRow()
    //            .setAttribute("ModelT", null);
    //        this.getSdComplaintsVO1()
    //            .getCurrentRow()
    //            .setAttribute("ColorT", null);
    //    }

    //    public String getVehicleDetailsCMS(String Pmc, String Regnum, String Vin, String Variant, String Model,
    //                                       String Color, String CustomerID, String CustomerName, String Address1,
    //                                       String Address2, String Address3, String Pin, String City, String Phone,
    //                                       String Email, String Fax, String DocNum, String DocDate) {
    //        //        ViewObjectImpl poHdr = this.getSdComplaintsVO1();
    //
    //
    //        String stmt = "begin SP_GET_REG_DETAILS(?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?); end;";
    //        DBTransaction dbtxn = (DBTransaction) getTransaction();
    //        CallableStatement cs = dbtxn.createCallableStatement(stmt.toString(), 1);
    //        String flag = "";
    //        try {
    //            cs.setObject(1, Pmc);
    //            cs.setObject(2, Regnum);
    //            cs.setObject(3, Vin);
    //            cs.setObject(4, Variant);
    //            cs.setObject(5, Model);
    //            cs.setObject(6, Color);
    //            cs.setObject(7, CustomerID);
    //            cs.setObject(8, CustomerName);
    //            cs.setObject(9, Address1);
    //            cs.setObject(10, Address2);
    //            cs.setObject(11, Address3);
    //            cs.setObject(12, Pin);
    //            cs.setObject(13, City);
    //            cs.setObject(14, Phone);
    //            cs.setObject(15, Email);
    //            cs.setObject(16, Fax);
    //            cs.setObject(17, DocNum);
    //            cs.setObject(18, DocDate);
    //            cs.registerOutParameter(19, OracleTypes.VARCHAR);
    //            cs.registerOutParameter(20, OracleTypes.VARCHAR);
    //
    //            cs.execute();
    //            flag = cs.getString(20);
    //            return flag;
    //        } catch (SQLException sqlerr) {
    //            throw new JboException(sqlerr);
    //        } finally {
    //            try {
    //                if (cs != null) {
    //                    cs.close();
    //                }
    //            } catch (Exception e) {
    //            }
    //        }
    //    }

    /**
     * Container's getter for ShPreInvoiceVO1.
     * @return ShPreInvoiceVO1
     */
    public ShPreInvoiceVOImpl getShPreInvoiceVO1() {
        return (ShPreInvoiceVOImpl) findViewObject("ShPreInvoiceVO1");
    }

    /**
     * Container's getter for PreInvoiceST1.
     * @return PreInvoiceST1
     */
    public ViewObjectImpl getPreInvoiceST1() {
        return (ViewObjectImpl) findViewObject("PreInvoiceST1");
    }

    /**
     * Container's getter for LoyaltyCardRefRO1.
     * @return LoyaltyCardRefRO1
     */
    public ViewObjectImpl getLoyaltyCardRefRO1() {
        return (ViewObjectImpl) findViewObject("LoyaltyCardRefRO1");
    }

    /**
     * Container's getter for LoyaltyCardRefTVO1.
     * @return LoyaltyCardRefTVO1
     */
    public ViewObjectImpl getLoyaltyCardRefTVO1() {
        return (ViewObjectImpl) findViewObject("LoyaltyCardRefTVO1");
    }

    /**

     * This is a generic method to call stored function.
     */
    public Object callStoredFunction(int sqlReturnType, String stmt, Object[] bindVars) {
        CallableStatement cst = null;
        try {
            //Creating sql statement
            cst = this.getDBTransaction().createCallableStatement("begin ? := " + stmt + ";end;", 0);
            //Register dataType for return value
            cst.registerOutParameter(1, sqlReturnType);
            //Pass input parameters value
            if (bindVars != null) {
                for (int z = 0; z < bindVars.length; z++) {
                    cst.setObject(z + 2, bindVars[z]);
                }
            }
            cst.executeUpdate();
            //Finally get returned value
            return cst.getObject(1);
        } catch (Exception e) {
            throw new JboException(e.getMessage());
        } finally {
            if (cst != null) {
                try {
                    cst.close();
                } catch (Exception e) {
                    e.printStackTrace();
                }
            }
        }
    }

    /**

     * This method is used for calling fnc_verify_mobile function in loyalty card referral form.
     */
    public String exeFncVerifyMobile(String refMobileNo) {
        String error = null;
        Object errMsg = callStoredFunction(Types.VARCHAR, "fnc_verif_mobile(?)", new Object[] { refMobileNo });
        if (errMsg != null) {
            error = errMsg.toString();
        }
        return error;
    }

    /**

     * This method is used for calling pkg_loyalty.sp_card_type procedure in loyalty card referral form.
     */
    public String[] exeSpCardType(String refMobileNo, String cardType) {
        DBTransaction trx = (DBTransaction) getTransaction();
        CallableStatement st = null;
        String cardType1 = null;
        // int errCd;
        String errMsg = null;
        try {
            String stmt = "begin pkg_loyalty.sp_card_type (?,?,?,?); end;";
            st = trx.createCallableStatement(stmt, 0);
            st.setString(1, refMobileNo);
            st.registerOutParameter(2, Types.VARCHAR);
            st.setString(2, cardType);
            st.registerOutParameter(3, Types.INTEGER);
            st.registerOutParameter(4, Types.VARCHAR);
            st.executeUpdate();
            cardType1 = st.getString(2);
            //errCd=st.getInt(3);
            errMsg = st.getString(4);
            //            ViewObjectImpl vo1 = this.getLoyaltyCardRefRO1();// this code is to populate refered by field
            //            Row row = vo1.getCurrentRow();
            //            row.setAttribute("RefCardType", cardType1);
        } catch (SQLException sqle) {
            // TODO: Add catch code
            sqle.printStackTrace();
        } finally {
            try {
                if (st != null) {
                    st.close();
                }
            } catch (Exception e) {
            }
        }

        return new String[] { cardType1, errMsg };

    }

    /**
     * Container's getter for ReferredByRO1.
     * @return ReferredByRO1
     */
    public ViewObjectImpl getReferredByRO1() {
        return (ViewObjectImpl) findViewObject("ReferredByRO1");
    }

    /**
     * Container's getter for RefCardTypeLOV1.
     * @return RefCardTypeLOV1
     */
    public ViewObjectImpl getRefCardTypeLOV1() {
        return (ViewObjectImpl) findViewObject("RefCardTypeLOV1");
    }

    public String exeSpSendOTP(String cardNumber, String transType, int awardPts) {
        DBTransaction trx = (DBTransaction) getTransaction();
        CallableStatement st = null;
        String errMsg = null;
        //   System.out.println("inside exeSpSendOTP");
        String stmt = "begin pkg_loyalty.sp_send_sms (?,?,?,?,?,?); end;";
        try {
            st = trx.createCallableStatement(stmt, 0);
            st.setString(1, transType);
            st.setString(2, cardNumber);
            st.setInt(3, awardPts);
            st.setObject(4, null);
            st.registerOutParameter(5, Types.INTEGER);
            st.registerOutParameter(6, Types.VARCHAR);
            st.executeUpdate();
            errMsg = st.getString(6);
        } catch (SQLException sqle) {
            // TODO: Add catch code
            sqle.printStackTrace();
        } finally {
            try {
                if (st != null) {
                    st.close();
                }
            } catch (Exception e) {
            }
        }
        return errMsg;
    }

    /**
     * Container's getter for GdLoyaltyEnrolRO1.
     * @return GdLoyaltyEnrolRO1
     */
    public ViewObjectImpl getGdLoyaltyEnrolRO1() {
        return (ViewObjectImpl) findViewObject("GdLoyaltyEnrolRO1");
    }

    /**
     * Container's getter for GdLoyOtpLogRO1.
     * @return GdLoyOtpLogRO1
     */
    public ViewObjectImpl getGdLoyOtpLogRO1() {
        return (ViewObjectImpl) findViewObject("GdLoyOtpLogRO1");
    }

    /**
     * Container's getter for GmLoyaltyMasterRO1.
     * @return GmLoyaltyMasterRO1
     */
    public ViewObjectImpl getGmLoyaltyMasterRO1() {
        return (ViewObjectImpl) findViewObject("GmLoyaltyMasterRO1");
    }

    public String exeSpInsLoyaltyTransactions(String cardNum, String vin, String transType, Date sysdate,
                                              String transNum, String prntGrp, int dlr, String locCd, int referralPts,
                                              String drCrFlag, String userId) {

        DBTransaction trx = (DBTransaction) getTransaction();
        CallableStatement st = null;
        String errMsg = null;
        try {
            String stmt = "begin pkg_loyalty.sp_ins_loyalty_transactions (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?); end;";
            st = trx.createCallableStatement(stmt, 0);
            st.setString(1, cardNum);
            st.setString(2, vin);
            st.setString(3, transType);
            java.sql.Date currdate = sysdate.dateValue();
            st.setDate(4, currdate); // SYSDATE
            st.setString(5, transNum); //inv num
            st.setString(6, null);
            st.setString(7, prntGrp); //PARENT GRP
            st.setInt(8, dlr); //DLR
            st.setString(9, locCd); //LOC CD
            st.setInt(10, referralPts);
            st.setObject(11, null);
            st.setString(12, "C");
            st.setString(13, userId); // USERNAME OR USER ID
            st.registerOutParameter(14, Types.INTEGER);
            st.registerOutParameter(15, Types.VARCHAR);
            st.executeUpdate();
            errMsg = st.getString(15);
        } catch (SQLException sqle) {
            sqle.printStackTrace();
        } finally {
            try {
                if (st != null) {
                    st.close();
                }
            } catch (Exception e) {
            }
        }
        return errMsg;
    }


    /**

     * This method is used for generating Issue Number in stock transfer issue form.
     */
    public void genIssueNum(int dealerMapCd, String principalMapCd, String locCd, String compFa, String docType,
                            int finYear) {

        DBTransaction trx = (DBTransaction) getTransaction();
        CallableStatement st = null;
        String docNum = null;

        try {
            // 1. Define the PL/SQL block for the statement to invoke
            String stmt = "begin Generate_Next_Num (?,?,?,?,?,?,?,?,?); end;";
            // 2. Create the CallableStatement for the PL/SQL block
            st = trx.createCallableStatement(stmt, 0);
            // 3. Register the positions and types of the OUT parameters

            // 4. Set the bind values of the IN parameters
            st.setInt(1, dealerMapCd);
            st.setString(2, principalMapCd);
            st.setString(3, locCd);
            st.setString(4, compFa);
            st.setString(5, docType);
            st.registerOutParameter(6, Types.VARCHAR);
            st.registerOutParameter(7, Types.VARCHAR);
            st.registerOutParameter(8, Types.INTEGER);
            st.setInt(9, finYear);
            // 5. Execute the statement
            st.executeUpdate();
            docNum = st.getString(6);
            String error_msg = st.getString(7);
            int err = st.getInt(8);


        } catch (Exception sqle) {
            // TODO: Add catch code
            sqle.printStackTrace();
        } finally {
            try {
                if (st != null) {
                    st.close();
                }
            } catch (Exception e) {
            }
        }

        ViewObjectImpl stStktrIss = this.getStStktrIssVO1();
        Row stStktrIssR = stStktrIss.getCurrentRow();
        stStktrIssR.setAttribute("StktrIssNum", docNum);


    }

    /**
     * Container's getter for LvRefreLoyaltyRO1.
     * @return LvRefreLoyaltyRO1
     */
    public ViewObjectImpl getLvRefreLoyaltyRO1() {
        return (ViewObjectImpl) findViewObject("LvRefreLoyaltyRO1");
    }

    /**
     * Container's getter for GatePassRO1.
     * @return GatePassRO1
     */
    public GatePassROImpl getGatePassRO1() {
        return (GatePassROImpl) findViewObject("GatePassRO1");
    }

    /**
     * Container's getter for GatePassVO1.
     * @return GatePassVO1
     */
    public GatePassVOImpl getGatePassVO1() {
        return (GatePassVOImpl) findViewObject("GatePassVO1");
    }

    /**



     * This method is used for generating Issue Number in stock transfer issue form.
     */
    public String genGpNum(String dealerMapCd, String parentGroupCd, String principalMapCd, String locCd, String compFa,
                           String docType, int finYear) {


        DBTransaction trx = (DBTransaction) getTransaction();
        CallableStatement st = null;
        String docNum = null;
        Integer i = new Integer(dealerMapCd);
        Integer j = new Integer(principalMapCd);
        String errorMessage = "";


        try {
            // 1. Define the PL/SQL block for the statement to invoke
            String stmt = "begin Generate_Next_Num (?,?,?,?,?,?,?,?,?); end;";
            // 2. Create the CallableStatement for the PL/SQL block
            st = trx.createCallableStatement(stmt, 0);
            // 3. Register the positions and types of the OUT parameters


            // 4. Set the bind values of the IN parameters

            st.setInt(1, i.intValue());
            st.setInt(2, j.intValue());
            st.setString(3, locCd);
            st.setString(4, compFa);
            st.setString(5, docType);
            st.registerOutParameter(6, Types.VARCHAR);
            st.registerOutParameter(7, Types.VARCHAR);
            st.registerOutParameter(8, Types.INTEGER);
            st.setInt(9, finYear);
            // 5. Execute the statement
            st.executeUpdate();
            docNum = st.getString(6);
            errorMessage = st.getString(7);
            int err = st.getInt(8);


        } catch (Exception sqle) {
            // TODO: Add catch code
            sqle.printStackTrace();
            docNum = "GP Num not generated";
        } finally {
            try {
                if (st != null) {
                    st.close();
                }
            } catch (Exception e) {
            }
        }

        ViewObjectImpl gatePass = this.getGatePassVO1();
        Row gatePassR = gatePass.getCurrentRow();
        gatePassR.setAttribute("GpNum", docNum);
        gatePassR.setAttribute("ParentGroup", parentGroupCd);
        gatePassR.setAttribute("DealerMapCd", i);
        gatePassR.setAttribute("CompFa", compFa);
        gatePassR.setAttribute("LocCd", locCd);
        System.out.println("DOC NUM" + docNum);
        return errorMessage;
    }

    public void populateVehicleDtls(int P_DEALER, int P_PRINCIPAL, String P_PARENT, String P_LOC_CD, String P_COMP_FA,
                                    String P_CHASSIS, String P_MODEL_CD, String P_GP_TYPE, String P_VIN) {


        DBTransaction trx = (DBTransaction) getTransaction();
        CallableStatement st = null;
        String RegNo = null;
        String InvNum = null;
        java.sql.Date InvDate = null;
        oracle.jbo.domain.Date jboDate = null;
        String orderNum = null;
        java.sql.Date OrderDate = null;
        java.sql.Date AllotDate = null;
        String CustCd = null;
        String CustName = null;
        String ComAddr1 = null;
        String ComAddr2 = null;
        String ComAddr3 = null;
        String Phone = null;
        String Mobile = null;
        String ComCity = null;
        String Email = null;
        String VarrientCd = null;
        String VarrientDesc = null;
        String ColorCd = null;
        String ColorDesc = null;
        String ModelDesc = null;
        SimpleDateFormat tmpLocalFormat = new SimpleDateFormat();
        SimpleDateFormat tmpLocalFormat2 = new SimpleDateFormat();
        String fromattedFromDt = null, fromattedToDt = null, AllottmentDate = null;

        //  oracle.jbo.domain.Date fromDate = (oracle.jbo.domain.Date)this.getfromDate().getValue();
        // oracle.jbo.domain.Date toDate = (oracle.jbo.domain.Date)this.gettoDate().getValue();


        try {
            // 1. Define the PL/SQL block for the statement to invoke
            String stmt =
                "begin SP_GET_GP_CUST_VEH_DET(?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?); end;";
            // 2. Create the CallableStatement for the PL/SQL block
            st = trx.createCallableStatement(stmt, 0);
            // 3. Register the positions and types of the OUT parameters


            // 4. Set the bind values of the IN parameters
            st.setInt(1, P_DEALER);
            st.setInt(2, P_PRINCIPAL);
            st.setString(3, P_PARENT);
            st.setString(4, P_LOC_CD);
            st.setString(5, P_COMP_FA);
            st.setString(6, P_CHASSIS);
            st.setString(7, P_MODEL_CD);
            st.setString(8, P_GP_TYPE);
            // st.setString(9, P_REG_NUM);
            st.registerOutParameter(9, Types.VARCHAR);
            st.setString(10, P_VIN);
            st.registerOutParameter(11, Types.VARCHAR);
            st.registerOutParameter(12, Types.DATE); //Invoice Date
            st.registerOutParameter(13, Types.VARCHAR);
            st.registerOutParameter(14, Types.DATE);
            st.registerOutParameter(15, Types.DATE);
            st.registerOutParameter(16, Types.VARCHAR);
            st.registerOutParameter(17, Types.VARCHAR);
            st.registerOutParameter(18, Types.VARCHAR);
            st.registerOutParameter(19, Types.VARCHAR);
            st.registerOutParameter(20, Types.VARCHAR);
            st.registerOutParameter(21, Types.VARCHAR);
            st.registerOutParameter(22, Types.VARCHAR);
            st.registerOutParameter(23, Types.VARCHAR);
            st.registerOutParameter(24, Types.VARCHAR);
            st.registerOutParameter(25, Types.VARCHAR);
            st.registerOutParameter(26, Types.VARCHAR);
            st.registerOutParameter(27, Types.VARCHAR);
            st.registerOutParameter(28, Types.VARCHAR);
            st.registerOutParameter(29, Types.VARCHAR);
            st.registerOutParameter(30, Types.VARCHAR);
            st.registerOutParameter(31, Types.INTEGER);

            // 5. Execute the statement
            st.executeUpdate();
            RegNo = st.getString(9);
            InvNum = st.getString(11);
            InvDate = st.getDate(12);
            orderNum = st.getString(13);
            OrderDate = st.getDate(14);
            AllotDate = st.getDate(15);
            CustCd = st.getString(16);
            CustName = st.getString(17);
            ComAddr1 = st.getString(18);
            System.out.println("SP_GET_GP_CUST_VEH_DET" + ComAddr1 + "ComAddr2" + ComAddr2 + "ComAddr3" + ComAddr3);
            ComAddr2 = st.getString(19);
            ComAddr3 = st.getString(20);
            Phone = st.getString(21);
            Mobile = st.getString(22);
            ComCity = st.getString(23);
            Email = st.getString(24);
            ModelDesc = st.getString(25);
            VarrientCd = st.getString(26);
            VarrientDesc = st.getString(27);
            ColorCd = st.getString(28);
            ColorDesc = st.getString(29);

            DateFormat outputFormat = new SimpleDateFormat("dd/MM/yyyy", Locale.US);
            DateFormat inputFormat = new SimpleDateFormat("yyyy-MM-dd", Locale.US);
            String error_msg = st.getString(30);
            int err = st.getInt(31);


        } catch (Exception sqle) {
            // TODO: Add catch code
            sqle.printStackTrace();
        } finally {
            try {
                if (st != null) {
                    st.close();
                }
            } catch (Exception e) {
            }
        }
        //  System.out.println("RegNo" + RegNo);
        // System.out.println("InvNum" + InvNum);

        ViewObjectImpl gatePass = this.getGatePassVO1();
        Row gatePassR = gatePass.getCurrentRow();
        gatePassR.setAttribute("RegNo", RegNo);
        gatePassR.setAttribute("InvNum", InvNum);
        gatePassR.setAttribute("InvDate", InvDate);
        LOGGER.info("Order Date in String () : " + fromattedToDt + " Order date in Date format : " + OrderDate);
        gatePassR.setAttribute("OrderNum", orderNum);
        gatePassR.setAttribute("OrderDate", OrderDate);
        gatePassR.setAttribute("AllotDate", AllotDate);
        gatePassR.setAttribute("CustCd", CustCd);
        gatePassR.setAttribute("CustName", CustName);
        gatePassR.setAttribute("ComAddr1", ComAddr1);
        gatePassR.setAttribute("ComAddr2", ComAddr2);
        gatePassR.setAttribute("ComAddr3", ComAddr3);
        gatePassR.setAttribute("Phone", Phone);
        gatePassR.setAttribute("Mobile", Mobile);
        gatePassR.setAttribute("ComCity", ComCity);
        gatePassR.setAttribute("Email", Email);
        gatePassR.setAttribute("VariantCd", VarrientCd);
        gatePassR.setAttribute("VarientDesc", VarrientDesc);
        gatePassR.setAttribute("ColorCd", ColorDesc);
        gatePassR.setAttribute("ColorDesc", ColorCd);
        gatePassR.setAttribute("ModelDesc", ModelDesc);


    }


    /**
     * Populate Grn details from Invoice Number in Goods Receipt Note form.
     * */
    public void populateGRNForm(Integer dealerMapCd, String locCd, String parentGroupCd, String invoiceNum,
                                String finCntNum, String invType) {
        DBTransaction trx = (DBTransaction) getTransaction();
        CallableStatement st = null;
        Map session = ADFContext.getCurrent().getSessionScope();
        Object principalMapCd = session.get("principalMapCd");
        Integer principalMapCdi = new Integer(principalMapCd.toString());
        try {
            ViewObjectImpl shGrn = this.getShGrnVO1();
    //            Row shGrnR = shGrn.getCurrentRow();
                Row shGrnR = shGrn.createRow();
                System.out.println(shGrnR+"shGrnR---");
            String stmt = "begin Sp_Get_Grn_Header(?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?); end;";
            st = trx.createCallableStatement(stmt, 0);
            st.setInt(1, dealerMapCd);
            st.setString(2, locCd);
            st.setString(3, parentGroupCd);
            st.setString(4, invoiceNum);
            st.setString(5, finCntNum);
            st.setString(6, invType);
            st.registerOutParameter(7, Types.DATE);
            st.registerOutParameter(8, Types.VARCHAR);
            st.registerOutParameter(9, Types.VARCHAR);
            st.registerOutParameter(10, Types.VARCHAR);
            st.registerOutParameter(11, Types.VARCHAR);
            st.registerOutParameter(12, Types.VARCHAR);
            st.registerOutParameter(13, Types.VARCHAR);
            st.registerOutParameter(14, Types.NUMERIC);
            st.registerOutParameter(15, Types.VARCHAR);
            st.registerOutParameter(16, Types.NUMERIC);
            st.registerOutParameter(17, Types.VARCHAR);
            st.registerOutParameter(18, Types.VARCHAR);
            st.registerOutParameter(19, Types.NUMERIC);
            st.registerOutParameter(20, Types.VARCHAR);
            st.executeUpdate();
            /*Populate GRN details form*/
            shGrnR.setAttribute("InvoiceDate", st.getDate(7));
            shGrnR.setAttribute("GrnDate", st.getDate(7));
            shGrnR.setAttribute("GrnDtT", st.getDate(7));
            shGrnR.setAttribute("Plant", st.getString(8));
                System.out.println(st.getString(8)+"plant---");
                System.out.println(shGrnR.getAttribute("Plant")+"setting in plant from popproc");
            shGrnR.setAttribute("LrNum", st.getString(9));
            shGrnR.setAttribute("TripNum", st.getString(10));
            shGrnR.setAttribute("TransporterCd", st.getString(11));
            shGrnR.setAttribute("RegNum", st.getString(12));
            shGrnR.setAttribute("ModeOfTransport", st.getString(13));
            shGrnR.setAttribute("InvoiceAmt", st.getBigDecimal(14));
            shGrnR.setAttribute("Category", st.getString(15));
            shGrnR.setAttribute("BasicCostT", st.getBigDecimal(16));
            shGrnR.setAttribute("AccType", st.getString(17));
            shGrnR.setAttribute("InvhFncrName", st.getString(18));
                shGrnR.setAttribute("FinCntNum", (String)finCntNum);
                shGrnR.setAttribute("InvoiceNum", (String)invoiceNum);
    //            shGrnR.setAttribute("TransporterCd", st.getString(18));
                shGrnR.setAttribute("InvType", (String)invType);
            shGrnR.setAttribute("TranRecd", "T");
            shGrnR.setAttribute("InvPrefix", "TVDH");
    //            return;
            Map<Integer, Object> map = new HashMap<Integer, Object>();
            map.put(1, principalMapCdi);
            map.put(2, dealerMapCd);
            map.put(3, locCd);
            map.put(4, parentGroupCd);
            map.put(5, invoiceNum);
            map.put(6, invType);
            map.put(7, finCntNum);
            map.put(8, st.getBigDecimal(14)); //Invoice Amount
            map.put(9, st.getBigDecimal(16)); //basic Cost
            map.put(10, st.getDate(7)); //Invoice date
            map.put(11, st.getBigDecimal(16)); //Basic Cost
                shGrn.insertRow(shGrnR);
            fetchDtlsForSdGrn(map);
        } catch (Exception e) {
            e.printStackTrace();
        } finally {
            try {
                if (st != null) {
                    st.close();
                }
            } catch (Exception e) {
            }
        }
    }

    /**This method is used to populate vehicle details in Goods Receipt Note form.
     * */
    public void fetchDtlsForSdGrn(Map<Integer, Object> map) {
        try {
            ViewObjectImpl detailsForSdGrn = this.getDetailsForSdGrnLOV1();
            detailsForSdGrn.setNamedWhereClauseParam("bindPrincipalMapCd", map.get(1));
            detailsForSdGrn.setNamedWhereClauseParam("bindInvoiceNum", map.get(5));
            detailsForSdGrn.setNamedWhereClauseParam("bindInvoiceType", map.get(6));
            detailsForSdGrn.setNamedWhereClauseParam("bindFinControlNum", map.get(7));
            detailsForSdGrn.executeQuery();


            RowSetIterator detSdGrnRsi = detailsForSdGrn.createRowSetIterator(null);
            Integer grnSrl = new Integer(0);
            while (detSdGrnRsi.hasNext()) {
                grnSrl++;
                Row detSdGrnRw = detSdGrnRsi.next();
                map.put(12, detSdGrnRw.getAttribute("InvdVariantCd"));
                map.put(13, detSdGrnRw.getAttribute("InvdVehColor"));
                map.put(14, detSdGrnRw.getAttribute("InvdVin"));
                map.put(15, detSdGrnRw.getAttribute("InvdKeyNum"));
                map.put(16, detSdGrnRw.getAttribute("InvdChassisNum"));
                map.put(17, detSdGrnRw.getAttribute("InvdEngNum"));
                map.put(18, detSdGrnRw.getAttribute("InvdMulindNum"));
                map.put(19, detSdGrnRw.getAttribute("InvdMulRefNum"));
                map.put(20, detSdGrnRw.getAttribute("InvhSrlNum"));
                map.put(21, detSdGrnRw.getAttribute("InvhMfgDt"));
                map.put(22, detSdGrnRw.getAttribute("InvdEngPrefix"));
                map.put(23, detSdGrnRw.getAttribute("Hsn"));
                map.put(24, detSdGrnRw.getAttribute("OctgCode"));
                map.put(25, detSdGrnRw.getAttribute("BasicAmt"));
                map.put(26, detSdGrnRw.getAttribute("CgstAmt"));
                map.put(27, detSdGrnRw.getAttribute("SgstAmt"));
                map.put(28, detSdGrnRw.getAttribute("IgstAmt"));
                map.put(29, detSdGrnRw.getAttribute("CessAmt"));
                map.put(30, grnSrl);
                map.put(31, detailsForSdGrn.getRowCount());
                map.put(32, detSdGrnRw.getAttribute("InvdFameFlag"));
                populateSdGrnVO(detSdGrnRw, map);
            }
            detSdGrnRsi.closeRowSetIterator();
        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    /**Populate details for SD_GRN in Goods Receipt Note form.
     * */
    public void populateSdGrnVO(Row detSdGrnRw, Map<Integer, Object> map) {
            Map session = ADFContext.getCurrent().getSessionScope();
            System.out.println("MAP VALUES " + map.toString());
            ViewObjectImpl modelVO = this.getModelCodeLOVForGRN1();
            modelVO.setNamedWhereClauseParam("p_principal",session.get("principalMapCd"));
            modelVO.setNamedWhereClauseParam("p_variant_cd",(String)map.get(12));
            modelVO.executeQuery();
            Row modelRow = modelVO.first();
            ViewObjectImpl sdGrnVO = this.getSdGrnVO2();
            Row createSdGrn = sdGrnVO.createRow();
            createSdGrn.setAttribute("DealerMapCd", map.get(2));
            createSdGrn.setAttribute("ParentGroup", map.get(4));
            createSdGrn.setAttribute("LocCd", map.get(3));
            createSdGrn.setAttribute("CompFa", session.get("compCode").toString());
    //        createSdGrn.setAttribute("CreatedDate", new Timestamp(System.currentTimeMillis()));
    //        createSdGrn.setAttribute("CreatedBy", session.get("userCode").toString());
            createSdGrn.setAttribute("AvlDlrCd", map.get(2));
            createSdGrn.setAttribute("AvlLocCd", map.get(3));
            createSdGrn.setAttribute("AvlParentGroup", map.get(4));
            createSdGrn.setAttribute("AvlCompFa", session.get("compCode").toString());
//            createSdGrn.setAttribute("GrnNum", this.getShGrnVO1()
//                                                   .getCurrentRow()
//                                                   .getAttribute("GrnNum"));
            createSdGrn.setAttribute("MasterKeyNumber", detSdGrnRw.getAttribute("InvdKeyNum"));
            createSdGrn.setAttribute("PoSrl", new Integer(1));
            createSdGrn.setAttribute("NetDealerPrice", new BigDecimal(0));
            if (map.get(6)
                   .toString()
                   .equalsIgnoreCase("D")) {
                createSdGrn.setAttribute("AllotNum", map.get(5));
                createSdGrn.setAttribute("AllotDate", map.get(10));
                createSdGrn.setAttribute("InvNum", map.get(5));
                createSdGrn.setAttribute("InvDate", map.get(10));
            }
            createSdGrn.setAttribute("LandedCost", calcLandedCost(map));
            createSdGrn.setAttribute("BasicCost", calcBasicCost(map));
            createSdGrn.setAttribute("GrnSrl", map.get(30));
            createSdGrn.setAttribute("VariantCd", map.get(12));
            createSdGrn.setAttribute("ModelCd", modelRow.getAttribute("ModelCd"));
            createSdGrn.setAttribute("EcolorCd", map.get(13));
            createSdGrn.setAttribute("Vin", map.get(14));
            createSdGrn.setAttribute("PdiYn", pdiVal(map));
            createSdGrn.setAttribute("KeyNum", map.get(15));
            createSdGrn.setAttribute("ChassisNum", map.get(16));
            createSdGrn.setAttribute("EngineNum", map.get(17));
            createSdGrn.setAttribute("MulIndentNum", map.get(18));
            createSdGrn.setAttribute("MulRefNum", map.get(19));
            createSdGrn.setAttribute("MulSrlNum", map.get(20));
            createSdGrn.setAttribute("MfgDate", map.get(21));
            createSdGrn.setAttribute("EnginePf", map.get(22));
            createSdGrn.setAttribute("Hsn", map.get(23));
            createSdGrn.setAttribute("OctgCode", map.get(24));
            createSdGrn.setAttribute("Damage", "O");
            createSdGrn.setAttribute("InvdFameFlag", map.get(32));

            sdGrnVO.insertRow(createSdGrn);

        }

    /**Method to calculate Landed Cost in Goods Receipt Note form.
     * */
    public Object calcLandedCost(Map<Integer, Object> map) {
        Object landedCost = new Object();
        Object sdGrnLandedCost = new Object();
        Object invoiceAmt = map.get(8);
        Object basicAmt = map.get(25);
        Object cgstAmt = map.get(26);
        Object sgstAmt = map.get(27);
        Object igstAmt = map.get(28);
        Object cessAmt = map.get(29);
        if (invoiceAmt != null) {
            BigDecimal invoiceAmtB = new BigDecimal(invoiceAmt.toString());
            BigDecimal rowCount = new BigDecimal(map.get(31).toString());
            landedCost = invoiceAmtB.divide(rowCount);
        }
        if (Integer.parseInt(map.get(1).toString()) == 2 && basicAmt != null) {
            BigDecimal basicAmtB = new BigDecimal(basicAmt.toString());
            BigDecimal cgstAmtB = new BigDecimal((cgstAmt == null) ? "0" : cgstAmt.toString());
            BigDecimal sgstAmtB = new BigDecimal((sgstAmt == null) ? "0" : sgstAmt.toString());
            BigDecimal igstAmtB = new BigDecimal((igstAmt == null) ? "0" : igstAmt.toString());
            BigDecimal cessAmtB = new BigDecimal((cessAmt == null) ? "0" : cessAmt.toString());
            sdGrnLandedCost = (basicAmtB).add(cgstAmtB)
                                         .add(sgstAmtB)
                                         .add(igstAmtB)
                                         .add(cessAmtB);
        } else {
            sdGrnLandedCost = landedCost;
        }

        return sdGrnLandedCost;
    }

    /**Method to calculate Basic Cost in Goods Receipt Note form.
     * */
    public Object calcBasicCost(Map<Integer, Object> map) {
        Object sdGrnBasicCost = new Object();
        Object basicAmt = map.get(25);
        Object shGrnBasicCost = map.get(11);
        if (Integer.parseInt(map.get(1).toString()) == 2 && basicAmt != null) {
            BigDecimal basicAmtB = new BigDecimal(basicAmt.toString());
            sdGrnBasicCost = basicAmtB;
        } else {
            BigDecimal shGrnBasicCostB = new BigDecimal((shGrnBasicCost == null) ? "0" : shGrnBasicCost.toString());
            BigDecimal rowCount = new BigDecimal(map.get(30).toString());
            sdGrnBasicCost = shGrnBasicCostB.divide(rowCount);
        }
        return sdGrnBasicCost;
    }


    /**Method to calculate PDI YN in Goods Receipt Note form.
     * */
    public Object pdiVal(Map<Integer, Object> map) {
        Object pdiVal = new Object();
        Object cnt = new Object();
        ViewObjectImpl countVIN = this.getCountVINForSdGrnLOV1();
        countVIN.setNamedWhereClauseParam("bindSdGrnVIN", map.get(14));
        countVIN.executeQuery();
        RowSetIterator rsi = countVIN.createRowSetIterator(null);
        while (rsi.hasNext()) {
            Row r = rsi.next();
            cnt = r.getAttribute("Rcount");
        }
        rsi.closeRowSetIterator();

        if (Integer.parseInt(cnt.toString()) > 0) {
            pdiVal = "Y";
        } else {
            pdiVal = "N";
        }
        return pdiVal;
    }

    /**
     * This method is used for generating GRN Number in Goods Receipt Note form.
     */
    public void genGRNNum(String dealerMapCd, String principalMapCd, String locCd, String compFa, String docType,
                          int finYear) {
        DBTransaction trx = (DBTransaction) getTransaction();
        CallableStatement st = null;
        String docNum = null;
        Integer dealerMapCdi = new Integer(dealerMapCd);
        Integer principalMapCdi = new Integer(principalMapCd);
        try {
            // 1. Define the PL/SQL block for the statement to invoke
            String stmt = "begin Generate_Next_Num (?,?,?,?,?,?,?,?,?); end;";
            // 2. Create the CallableStatement for the PL/SQL block
            st = trx.createCallableStatement(stmt, 0);
            // 3. Register the positions and types of the OUT parameters
            // 4. Set the bind values of the IN parameters
            st.setInt(1, dealerMapCdi.intValue());
            st.setInt(2, principalMapCdi.intValue());
            st.setString(3, locCd);
            st.setString(4, compFa);
            st.setString(5, docType);
            st.registerOutParameter(6, Types.VARCHAR);
            st.registerOutParameter(7, Types.VARCHAR);
            st.registerOutParameter(8, Types.INTEGER);
            st.setInt(9, finYear);
            // 5. Execute the statement
            st.executeUpdate();
            docNum = st.getString(6);
            String error_msg = st.getString(7);
            int err = st.getInt(8);
            ViewObjectImpl shGrnVO = this.getShGrnVO1();
            Row shGrnRow = shGrnVO.getCurrentRow();
            shGrnRow.setAttribute("GrnNum", docNum);


        } catch (Exception sqle) {
            // TODO: Add catch code
            sqle.printStackTrace();

        } finally {
            try {
                if (st != null) {
                    st.close();
                }
            } catch (Exception e) {
            }
        }

    }

    /**
     * Container's getter for GatePassVO2.
     * @return GatePassVO2
     */
    public GatePassVOImpl getGatePassVO2() {
        return (GatePassVOImpl) findViewObject("GatePassVO2");
    }

    /** Container's getter for StiSearchDualRO1.
     * @return StiSearchDualRO1
     */
    public ViewObjectImpl getStiSearchDualRO1() {
        return (ViewObjectImpl) findViewObject("StiSearchDualRO1");
    }

    /**
     * Container's getter for StiSearchResultLOV1.
     * @return StiSearchResultLOV1
     */
    public StiSearchResultLOVImpl getStiSearchResultLOV1() {
        return (StiSearchResultLOVImpl) findViewObject("StiSearchResultLOV1");
    }

    /**
     * Container's getter for StStktrIssVO1.
     * @return StStktrIssVO1
     */
    public ViewObjectImpl getStStktrIssVO1() {
        return (ViewObjectImpl) findViewObject("StStktrIssVO1");
    }

    /** Container's getter for GmVarRO1.
     * @return GmVarRO1
     */
    public ViewObjectImpl getGmVarRO1() {
        return (ViewObjectImpl) findViewObject("GmVarRO1");
    }

    /**
     * Container's getter for GmModRO1.
     * @return GmModRO1
     */
    public ViewObjectImpl getGmModRO1() {
        return (ViewObjectImpl) findViewObject("GmModRO1");
    }

    /**
     * Container's getter for ReferredByLOV1.
     * @return ReferredByLOV1
     */
    public ViewObjectImpl getReferredByLOV1() {
        return (ViewObjectImpl) findViewObject("ReferredByLOV1");
    }

    /**
     * Container's getter for ShInvoiceEOView1.
     * @return ShInvoiceEOView1
     */
    public ShInvoiceEOViewImpl getShInvoiceEOView1() {
        return (ShInvoiceEOViewImpl) findViewObject("ShInvoiceEOView1");
    }

    /**
     * Container's getter for SdInvChargesEOView1.
     * @return SdInvChargesEOView1
     */
    public SdInvChargesEOViewImpl getSdInvChargesEOView1() {
        return (SdInvChargesEOViewImpl) findViewObject("SdInvChargesEOView1");
    }


    /**
     * Container's getter for OldVehicleRO1.
     * @return OldVehicleRO1
     */
    public ViewObjectImpl getOldVehicleRO1() {
        return (ViewObjectImpl) findViewObject("OldVehicleRO1");
    }

    /**
     * Container's getter for CustomerDeclarationAckST1.
     * @return CustomerDeclarationAckST1
     */
    public CustomerDeclarationAckSTImpl getCustomerDeclarationAckST1() {
        return (CustomerDeclarationAckSTImpl) findViewObject("CustomerDeclarationAckST1");
    }

    /**
     * Container's getter for SalesInvoiceCancellationRO1.
     * @return SalesInvoiceCancellationRO1
     */
    public ViewObjectImpl getSalesInvoiceCancellationRO1() {
        return (ViewObjectImpl) findViewObject("SalesInvoiceCancellationRO1");
    }


    /**
     * Container's getter for InvoiceNoLOV1.
     * @return InvoiceNoLOV1
     */
    public ViewObjectImpl getInvoiceNoLOV1() {
        return (ViewObjectImpl) findViewObject("InvoiceNoLOV1");

    }

    /**
     * Container's getter for BillNatureST1.
     * @return BillNatureST1
     */
    public ViewObjectImpl getBillNatureST1() {
        return (ViewObjectImpl) findViewObject("BillNatureST1");
    }

    /**
     * Container's getter for ShGrnVO1.
     * @return ShGrnVO1
     */
    public ShGrnVOImpl getShGrnVO1() {
        return (ShGrnVOImpl) findViewObject("ShGrnVO1");
    }

    /**
     * Container's getter for SalesmanCodeRO1.
     * @return SalesmanCodeRO1
     */
    public ViewObjectImpl getSalesmanCodeRO1() {
        return (ViewObjectImpl) findViewObject("SalesmanCodeRO1");
    }

    /**
     * Container's getter for OtherInvoiceRO1.
     * @return OtherInvoiceRO1
     */
    public ViewObjectImpl getOtherInvoiceRO1() {
        return (ViewObjectImpl) findViewObject("OtherInvoiceRO1");
    }

    /**
     * Container's getter for BillTypeRO1.
     * @return BillTypeRO1
     */
    public ViewObjectImpl getBillTypeRO1() {
        return (ViewObjectImpl) findViewObject("BillTypeRO1");
    }

    /**
     * Container's getter for TCSFlagST1.
     * @return TCSFlagST1
     */
    public ViewObjectImpl getTCSFlagST1() {
        return (ViewObjectImpl) findViewObject("TCSFlagST1");
    }

    /**
     * Container's getter for FinancierRO1.
     * @return FinancierRO1
     */
    public ViewObjectImpl getFinancierRO1() {
        return (ViewObjectImpl) findViewObject("FinancierRO1");
    }


    public void ProgramWiseOverdue(Date fromDate, Date toDate, String regionCd, String dealerName, String locCd,
                                   String parent, String programCd) {
        LOGGER.info("program wise over due report in am class");
        String stmt = "begin DMS2_Pkg_Lms_Reports.Pr_Overdue(?,?,?,?,?,?,?); end;";
        DBTransaction dbtxn = (DBTransaction) getTransaction();
        CallableStatement cstmt = dbtxn.createCallableStatement(stmt.toString(), 1);
        try {
            cstmt.setObject(1, fromDate);
            cstmt.setObject(2, toDate);
            cstmt.setObject(3, regionCd);
            cstmt.setObject(4, dealerName);
            cstmt.setObject(5, locCd);
            cstmt.setObject(6, parent);
            cstmt.setObject(7, programCd);
            cstmt.execute();
            LOGGER.info("After execution of the statement in am class");
        } catch (SQLException sqlerr) {
            throw new JboException(sqlerr);
        } finally {
            try {
                if (cstmt != null) {
                    cstmt.close();
                }
            } catch (Exception e) {
            }
        }

    }

    /**
     * This method SalesInvoiceCancellationDataProcedure use for getting data from Procedure.
     * @return Datas
     */

    public String SalesInvoiceCancellationDataProcedure(String Principal, String Dealer, String Loca, String Compa,
                                                        String Parent, String OrderNum, String AllotNum, String Variant,
                                                        String FiCd) {
        System.out.println("proc call");
        String stmt = "begin SP_GET_INV_DET(?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?); end;";
        DBTransaction dbtxn = (DBTransaction) getTransaction();
        CallableStatement cs = dbtxn.createCallableStatement(stmt.toString(), 1);
        String flag = "";
        try {
            System.out.println("proc call try");
            cs.setObject(1, Principal);
            cs.setObject(2, Dealer);
            cs.setObject(3, Loca);
            cs.setObject(4, Compa);
            cs.setObject(5, Parent);
            cs.setObject(6, OrderNum);
            cs.setObject(7, AllotNum);
            cs.setObject(8, Variant);
            cs.setObject(9, FiCd);
            cs.registerOutParameter(10, OracleTypes.VARCHAR);
            cs.registerOutParameter(11, OracleTypes.VARCHAR);
            cs.registerOutParameter(12, OracleTypes.VARCHAR);
            cs.registerOutParameter(13, OracleTypes.VARCHAR);
            cs.registerOutParameter(14, OracleTypes.VARCHAR);
            cs.registerOutParameter(15, OracleTypes.VARCHAR);
            cs.registerOutParameter(16, OracleTypes.VARCHAR);
            cs.registerOutParameter(17, OracleTypes.DATE);
            cs.registerOutParameter(18, OracleTypes.VARCHAR);
            cs.registerOutParameter(19, OracleTypes.VARCHAR);
            cs.registerOutParameter(20, OracleTypes.VARCHAR);
            cs.execute();
            flag = cs.getString(18);
            System.out.println("proc call exec");
            ViewObjectImpl vo = this.getShInvoiceEOView1();
            Row r = vo.getCurrentRow();
            r.setAttribute("BillingAddress1", cs.getString(10));
            r.setAttribute("BillingAddress2", cs.getString(11));
            r.setAttribute("BillingAddress3", cs.getString(12));
            r.setAttribute("City", cs.getString(13));
            r.setAttribute("CityDesc", cs.getString(14));
            r.setAttribute("PinCode", cs.getString(15));
            r.setAttribute("ModelCode", cs.getString(16));
            r.setAttribute("AllotDate", cs.getString(17));
            r.setAttribute("CancelTcsFlag", "N");

            //System.out.println("vCLVal--------------------->" + flag);
            return flag;

        } catch (SQLException sqlerr) {
            throw new JboException(sqlerr);
        } finally {
            try {
                if (cs != null) {
                    cs.close();
                }
            } catch (Exception e) {
            }
        }
    }

    /**
     * Container's getter for ModelNameRO1.
     * @return ModelNameRO1
     */
    public ViewObjectImpl getModelNameRO1() {
        return (ViewObjectImpl) findViewObject("ModelNameRO1");
    }

    /**
     * Container's getter for VariantNameRO1.
     * @return VariantNameRO1
     */
    public ViewObjectImpl getVariantNameRO1() {
        return (ViewObjectImpl) findViewObject("VariantNameRO1");
    }

    /**
     * Container's getter for ColorNameRO1.
     * @return ColorNameRO1
     */
    public ViewObjectImpl getColorNameRO1() {
        return (ViewObjectImpl) findViewObject("ColorNameRO1");
    }

    /**
     * Container's getter for CancelOptionST1.
     * @return CancelOptionST1
     */
    public ViewObjectImpl getCancelOptionST1() {
        return (ViewObjectImpl) findViewObject("CancelOptionST1");
    }

    /**
     * Container's getter for CreditNoteST1.
     * @return CreditNoteST1
     */
    public ViewObjectImpl getCreditNoteST1() {
        return (ViewObjectImpl) findViewObject("CreditNoteST1");
    }

    /**
     * This method ServiceCancel use for checking data in table
     */

    public String ServiceCancel() {
        String flag = "N";
        ViewObjectImpl vo = this.getShInvoiceEOView1();
        String s = (String) vo.getCurrentRow().getAttribute("Vin");
        String sql =
            "SELECT COUNT(*) FROM vh_Ro WHERE VIN = '" + s +
            "' AND RCATEG_CD  IN (select LIST_CODE  from am_list where list_name = 'INVC' AND PRINCIPAL_MAP_CD =1) AND RO_STATUS <> 20";
        ResultSet rs;
        Integer cnt = null;
        try {
            rs = getDBTransaction().createStatement(0).executeQuery(sql);
            if (rs.next()) {
                cnt = rs.getInt(1);
                System.out.println("cnt" + cnt);
                if (cnt > 0) {
                    flag = "Y";
                }

            }
        } catch (SQLException e) {
            e.printStackTrace();
        }
        return flag;
    }

    /**
     * This method SalesIncoiveCancelledNumber use for generating Cancelled No.
     */
    public String SalesIncoiveCancelledNumber(String Dealer, String Principal, String Loc, String CompFa,
                                              String docType, int finYear) {

        String stmt = "begin Generate_Next_Num(?,?,?,?,?,?,?,?,?); end;";
        DBTransaction dbtxn = (DBTransaction) getTransaction();
        CallableStatement cs = dbtxn.createCallableStatement(stmt.toString(), 1);
        String flag = "";
        try {
            cs.setObject(1, Dealer);
            cs.setObject(2, Principal);
            cs.setObject(3, Loc);
            cs.setObject(4, CompFa);
            cs.setObject(5, docType);
            cs.registerOutParameter(6, OracleTypes.VARCHAR);
            cs.registerOutParameter(7, OracleTypes.VARCHAR);
            cs.registerOutParameter(8, OracleTypes.VARCHAR);
            cs.setObject(9, finYear);
            cs.execute();
            flag = cs.getString(6);
            //System.out.println("vCLVal--------------------->" + flag);
            ViewObjectImpl vo = this.getShInvoiceEOView1();
            Row r = vo.getCurrentRow();
            r.setAttribute("InvcNum", cs.getString(6));

            return flag;
        } catch (SQLException sqlerr) {
            throw new JboException(sqlerr);
        } finally {
            try {
                if (cs != null) {
                    cs.close();
                }
            } catch (Exception e) {
            }
        }
    }

    /**
     * This method SalesIncoiveCancellationNumber use for generating Cancellation No.
     */
    public String SalesIncoiveCancellationNumber(String Dealer, String Principal, String Loc, String CompFa,
                                                 String docType, int finYear) {

        String stmt = "begin Generate_Next_Num(?,?,?,?,?,?,?,?,?); end;";
        DBTransaction dbtxn = (DBTransaction) getTransaction();
        CallableStatement cs = dbtxn.createCallableStatement(stmt.toString(), 1);
        String flag = "";
        try {
            cs.setObject(1, Dealer);
            cs.setObject(2, Principal);
            cs.setObject(3, Loc);
            cs.setObject(4, CompFa);
            cs.setObject(5, docType);
            cs.registerOutParameter(6, OracleTypes.VARCHAR);
            cs.registerOutParameter(7, OracleTypes.VARCHAR);
            cs.registerOutParameter(8, OracleTypes.VARCHAR);
            cs.setObject(9, finYear);
            cs.execute();
            flag = cs.getString(6);
            //System.out.println("vCLVal--------------------->" + flag);
            ViewObjectImpl vo = this.getShInvoiceEOView1();
            Row r = vo.getCurrentRow();
            r.setAttribute("CanNum", cs.getString(6));
            r.setAttribute("InvStatus", "C");
            r.setAttribute("InvcNum", r.getAttribute("InvNum"));
            return flag;
        } catch (SQLException sqlerr) {
            throw new JboException(sqlerr);
        } finally {
            try {
                if (cs != null) {
                    cs.close();
                }
            } catch (Exception e) {
            }
        }
    }

    /**
     * This method UpdateShEInvoice use for inserting row in SH_EINVOICE table
     */
    public String UpdateShEInvoice(String Parent, String Dealer, String Loc, String CanNum, int InvAmount,
                                   String UserCode, Date sysdate) {
        DBTransaction trx = (DBTransaction) getTransaction();
        CallableStatement st = null;
        String errMsg = null;
        java.sql.Date currdate = sysdate.dateValue();

        try {
            if (CanNum.equalsIgnoreCase("1")) {
                ViewObjectImpl vo = this.getShInvoiceEOView1();
                Row r = vo.getCurrentRow();
                r.setAttribute("ExchangeFlag", "C");
                // r.setAttribute("InvStatus","I");
                CanNum = null;
            } else {
                // 1. Define the PL/SQL block for the statement to invoke
                String stmt =
                    "insert into SH_EINVOICE(inv_module,inv_type,inv_cust_type,parent_group,dealer_map_cd,loc_cd,inv_num,inv_date,inv_value,item_count,hsn,buyer_gstin,irn,irn_date,status,err_desc,created_by,created_date)values(?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)";
                // 2. Create the CallableStatement for the PL/SQL block
                st = trx.createCallableStatement(stmt, 0);
                // 3. Register the positions and types of the OUT parameters

                // 4. Set the bind values of the IN parameters
                st.setString(1, "SL");
                st.setString(2, "NCR");
                st.setString(3, "B2C");
                st.setString(4, Parent);
                st.setString(5, Dealer);
                st.setString(6, Loc);
                st.setString(7, CanNum);
                st.setDate(8, currdate);
                st.setInt(9, InvAmount);
                st.setInt(10, 1);
                st.setString(11, "NOHSN");
                st.setString(12, "GSTUNREGISTERED");
                st.setString(13, null);
                st.setString(14, null);
                st.setString(15, "I");
                st.setString(16, null);
                st.setString(17, UserCode);
                st.setDate(18, currdate);
                // 5. Execute the statement
                st.executeUpdate();
            }
            getTransaction().commit();
            errMsg = "Success";
        } catch (Exception sqle) {
            // TODO: Add catch code
            sqle.printStackTrace();
        } finally {
            try {
                if (st != null) {
                    st.close();
                }
            } catch (Exception e) {
            }
        }
        return errMsg;
    }


    /**
     * This method UpdateOtehrActivties use for Update row in different table
     */
    public String UpdateOtehrActivties(String Parent, String Dealer, String Loc, String Comp, String UserCode,
                                       Date sysdate, String CanNum, int InvAmount) {
        LOGGER.info("inside ote");
        Map session = ADFContext.getCurrent().getSessionScope();
        ViewObjectImpl vo = this.getShInvoiceEOView1();
        Row r = vo.getCurrentRow();
        String Coupan = r.getAttribute("FscCoupon") == null ? null : r.getAttribute("FscCoupon").toString();
        String Vin = r.getAttribute("Vin").toString();
        String InvoiceNum = r.getAttribute("InvNum").toString();
        String type = r.getAttribute("InvType").toString();
        String dealer = Dealer;
        String loca = Loc;
        String parent = Parent;
        String comp = Comp;
        String user = UserCode;
        String buyid = r.getAttribute("PocBuyId") == null ? "0" : r.getAttribute("PocBuyId").toString();

        DBTransaction trx = (DBTransaction) getTransaction();
        CallableStatement st = null;
        String errMsg = "";
        java.sql.Date currdate = sysdate.dateValue();
        DateFormat dateFormat = new SimpleDateFormat("dd-mm-yyyy hh:mm:ss");
        String currentDate = dateFormat.format(currdate);

        //Update sh_einvoice included here

        try {
            if (CanNum.equalsIgnoreCase("1")) {
                ViewObjectImpl voo = this.getShInvoiceEOView1();
                Row ro = voo.getCurrentRow();
                ro.setAttribute("ExchangeFlag", "C");
                // r.setAttribute("InvStatus","I");
                CanNum = null;
            } else {
                // 1. Define the PL/SQL block for the statement to invoke
                /*String stmt =
                "insert into SH_EINVOICE(inv_module,inv_type,inv_cust_type,parent_group,dealer_map_cd,loc_cd,inv_num,inv_date,inv_value,item_count,hsn,buyer_gstin,irn,irn_date,status,err_desc,created_by,created_date)values(?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)";
            // 2. Create the CallableStatement for the PL/SQL block
            st = trx.createCallableStatement(stmt, 0);
            // 3. Register the positions and types of the OUT parameters

            // 4. Set the bind values of the IN parameters
            st.setString(1, "SL");
            st.setString(2, "NCR");
            st.setString(3, "B2C");
            st.setString(4, Parent);
            st.setString(5, Dealer);
            st.setString(6, Loc);
            st.setString(7, CanNum);
            st.setDate(8, currdate);
            st.setInt(9, InvAmount);
            st.setInt(10, 1);
            st.setString(11, "NOHSN");
            st.setString(12, "GSTUNREGISTERED");
            st.setString(13, null);
            st.setString(14, null);
            st.setString(15, "I");
            st.setString(16, null);
            st.setString(17, UserCode);
            st.setDate(18, currdate);
            // 5. Execute the statement
            st.executeUpdate(); }
            //getTransaction().commit();
            //errMsg = "Success";*/
            }
        } catch (Exception sqle) {
            // TODO: Add catch code
            sqle.printStackTrace();
            return "Error while Inserting data for EINVOICE";
        }

        //

        try {
            // 1. Define the PL/SQL block for the statement to invoke
            if (((String) r.getAttribute("CancelOption")).equalsIgnoreCase("I")) {
                oracle.jbo.domain.Date vDate = new oracle.jbo.domain.Date(oracle.jbo
                                                                                .domain
                                                                                .Date
                                                                                .getCurrentDate());
                LOGGER.info("errMsg4" + errMsg + user + vDate);
                r.setAttribute("CancelDate", vDate);
                r.setAttribute("ModifiedBy", user);
                r.setAttribute("ModifiedDate", vDate);
                r.setAttribute("ExchCancBy", user);
                r.setAttribute("ExchCancDate", vDate);
                r.setAttribute("ExchCancType", "DLR");
                r.setAttribute("ExchangeFlag", "C");
                r.setAttribute("InvStatus", "C");
                r.setAttribute("CanNum", CanNum);
                r.setAttribute("InvcNum", InvoiceNum);
                if (Coupan != null) {
                    try {
                        String CoupanUpdate =
                            "UPDATE vm_fsc_num_gen XX SET XX.avl_flag = 'N' WHERE XX.fsc_num=" + Coupan;
                        // 2. Create the CallableStatement for the PL/SQL block
                        st = trx.createCallableStatement(CoupanUpdate, 0);
                        st.executeUpdate();
                    } catch (Exception e) {
                        e.printStackTrace();
                    }
                    //getTransaction().commit();
                }
                LOGGER.info("inside ote chk");
                String CountExist =
                    "SELECT COUNT(*) FROM MWAR_EXTE WHERE EXTE_VIN_NO ='" + Vin + "' AND EXTE_CANCEL_FLAG = 'N'";
                ResultSet rs1;
                int flag1 = 0;
                try {
                    rs1 = getDBTransaction().createStatement(0).executeQuery(CountExist);
                    if (rs1.next()) {
                        flag1 = rs1.getInt(1);
                        //System.out.println(flag1);
                    }
                } catch (Exception e) {
                    e.printStackTrace();
                }
                //this.getTransaction().rollback();
                LOGGER.info("inside ote chk 2" + flag1 + Vin);
                if (flag1 > 0) {
                    String sql1 =
                        "SELECT EXTE_WARR_TYPE ,EXTE_POLICY_NO FROM MWAR_EXTE WHERE EXTE_VIN_NO ='" + Vin +
                        "' AND EXTE_CANCEL_FLAG = 'N'";
                    String extWarrType = "";
                    String extPolicyNo = "";
                    try {
                        ResultSet rs2 = getDBTransaction().createStatement(0).executeQuery(sql1);

                        if (rs2.next()) {
                            extWarrType = rs2.getString(1);
                            extPolicyNo = rs2.getString(2);
                        }
                    } catch (Exception e) {
                        e.printStackTrace();
                    }
                    LOGGER.info("extWarrType + " + extWarrType);
                    LOGGER.info("extPolicyNo + " + extPolicyNo);
                    String flagUpdate =
                        "UPDATE MWAR_EXTE SET EXTE_CANCEL_FLAG = 'Y', EXTE_CANCEL_DT=SYSDATE, EXTE_MODIFIED_DATE=SYSDATE WHERE EXTE_VIN_NO ='" +
                        Vin + "' AND EXTE_CANCEL_FLAG = 'N'";
                    // 2. Create the CallableStatement for the PL/SQL block
                    try {
                        st = trx.createCallableStatement(flagUpdate, 0);
                        st.executeUpdate();
                        LOGGER.info("inside ote chk 4 - update to mwar_exte EXTE_CANCEL_FLAG = Y success");
                    } catch (Exception e) {
                        e.printStackTrace();
                        return "Error while updating data for Extended Warranty";
                    }
                    try {
                        String vehicleUpdate =
                            "UPDATE GM_VIN SET EXT_WARRANTY_YN = 'N', MODIFIED_DATE=SYSDATE WHERE VIN ='" + Vin + "'";
                        // 2. Create the CallableStatement for the PL/SQL block
                        st = trx.createCallableStatement(vehicleUpdate, 0);
                        st.executeUpdate();
                    } catch (Exception e) {
                        e.printStackTrace();
                    }
                    LOGGER.info("inside ote chk 5");
                    String stmt = "begin PKG_LOYALTY.SP_GET_VIN_LOYALTY_DTL(?,?,?,?,?,?,?,?,?); end;";
                    String poCardType = "";
                    String poCardNum = "";
                    String poRegMob = "";
                    Integer poBalPoint = 0;
                    Integer poBalRs = 0;
                    try {
                        st = trx.createCallableStatement(stmt, 0);
                        st.setInt(1, 1);
                        st.setString(2, Vin);
                        st.registerOutParameter(3, Types.VARCHAR);
                        st.registerOutParameter(4, Types.VARCHAR);
                        st.registerOutParameter(5, Types.VARCHAR);
                        st.registerOutParameter(6, Types.NUMERIC);
                        st.registerOutParameter(7, Types.NUMERIC);
                        st.registerOutParameter(8, Types.NUMERIC);
                        st.registerOutParameter(9, Types.VARCHAR);
                        st.executeUpdate();
                        poCardType = st.getString(3);
                        poCardNum = st.getString(4);
                        poRegMob = st.getString(5);
                        poBalPoint = st.getInt(6);
                        poBalRs = st.getInt(7);
                        errMsg = st.getString(9);
                        LOGGER.info("Msg value poCardType" + poCardType + " -poCardNum" + poCardNum + " -poRegMob" +
                                    poRegMob + " -poBalPoint" + poBalPoint + " -poBalRs" + poBalRs + " -errMsg" +
                                    errMsg);
                        if (errMsg != "" && errMsg != null) {
                            return errMsg;
                        }
                    } catch (SQLException e) {
                        e.printStackTrace();

                    }


                    String sql2 =
                        "select exte_parent_group, exte_dealer_map_cd, exte_loc_cd from dmsd_ew_sale where exte_policy_no = '" +
                        extPolicyNo + "' and exte_tran_type in ('N') union " +
                        " select exte_conv_parent_group, exte_conv_dealer_map_cd, exte_conv_loc_cd from dmsd_ew_sale where exte_policy_no = '" +
                        extPolicyNo + "' and exte_tran_type in ('U','X')";
                    LOGGER.info("data" + poCardNum + Vin + currentDate + extPolicyNo);
                    LOGGER.info("sql2 union extended warranty" + sql2);
                    try {
                        ResultSet rs3 = getDBTransaction().createStatement(0).executeQuery(sql2);

                        while (rs3.next()) {
                            try {
                                LOGGER.info("data rs3" + poCardNum + "-" + Vin + "-" + extPolicyNo + "-" +
                                            rs3.getString(1) + rs3.getInt(2) + rs3.getString(3) +
                                            (String) session.get("userCode"));

                                String stmt2 =
                                    "begin PKG_LOYALTY.sp_ins_loyalty_transactions(?,?,?,?,?,?,?,?,?,?,?,?,?,?,?); end;";
                                st = trx.createCallableStatement(stmt2, 0);
                                st.setString(1, poCardNum);
                                st.setString(2, Vin);
                                st.setString(3, "EWC");
                                st.setString(4, currentDate);
                                st.setString(5, extPolicyNo);
                                st.setString(6, "Extended Warranty Cancellation");
                                st.setString(7, rs3.getString(1));
                                st.setInt(8, rs3.getInt(2));
                                st.setString(9, rs3.getString(3));
                                st.setInt(10, 0);
                                st.setInt(11, 0);
                                st.setString(12, null);
                                st.setString(13, (String) session.get("userCode"));
                                st.registerOutParameter(14, Types.INTEGER);
                                st.registerOutParameter(15, Types.VARCHAR);
                                st.executeUpdate();
                                errMsg = st.getString(15);
                                LOGGER.info("errMsg+" + errMsg);
                                //if (errMsg != "" && errMsg!=null) {System.out.println("check data"); return errMsg;}
                            } catch (Exception e) {
                                e.printStackTrace();
                            }

                        }
                    } catch (Exception e) {
                        e.printStackTrace();
                        LOGGER.info("check data loop");
                    }
                    LOGGER.info("check data 1");
                    try {
                        String stmt3 = "begin sp_push_ewc_fdi_data(?,?,?,?,?); end;";
                        st = trx.createCallableStatement(stmt3, 0);
                        st.setInt(1, Integer.parseInt((String) session.get("principalMapCd")));
                        st.setString(2, extPolicyNo);
                        st.setString(3, extWarrType);
                        st.registerOutParameter(4, Types.INTEGER);
                        st.registerOutParameter(5, Types.VARCHAR);
                        st.executeUpdate();
                        errMsg = st.getString(5);
                        //if (errMsg != "" && errMsg!=null) {return errMsg;}

                    } catch (Exception e) {
                        e.printStackTrace();
                    }
                }

                LOGGER.info("Extended warranty cancelled successfully");
                BigDecimal ChargeAmount = new BigDecimal(r.getAttribute("ChargeAmt").toString());
                BigDecimal InvAmt = new BigDecimal(r.getAttribute("InvAmt").toString());
                BigDecimal Roundoff = new BigDecimal(r.getAttribute("RoundOff").toString());
                BigDecimal sumInvRound = InvAmt.add(Roundoff);
                BigDecimal flag = null;
                try {
                    String chargeInv =
                        "SELECT St.CHARGE_AMT FROM sd_inv_charges ST WHERE INV_NUM ='" + InvoiceNum +
                        "' AND INV_TYPE ='" + type + "' AND DEALER_MAP_CD = " + dealer + " AND LOC_CD ='" + loca +
                        "' AND PARENT_GROUP ='" + parent + "' AND COMP_FA ='" + comp +
                        "' and CHARGE_TYPE IN ('THP', 'TFN', 'TFP', 'THN')";
                    ResultSet rs;
                    flag = new BigDecimal(0);
                    rs = getDBTransaction().createStatement(0).executeQuery(chargeInv);

                    if (rs.next()) {
                        flag = rs.getBigDecimal(1);
                        //System.out.println(flag);
                    }


                    BigDecimal cancelchargeamount = ChargeAmount.subtract(flag);
                    BigDecimal b = sumInvRound.subtract(flag);
                    BigDecimal cancelroundoff = b.setScale(0, BigDecimal.ROUND_HALF_UP).subtract(b);
                    BigDecimal cancelInvAmount = b.setScale(0, BigDecimal.ROUND_HALF_UP);
                    //System.out.println(cancelchargeamount + " " + cancelroundoff + " " + cancelInvAmount);
                    r.setAttribute("CancelChargeAmt", cancelchargeamount);
                    r.setAttribute("CancelRoundOff", cancelroundoff);
                    r.setAttribute("CancelInvAmt", cancelInvAmount);
                    //  if(((String)r.getAttribute("CancelOption")).equalsIgnoreCase("E")){
                    // r.setAttribute("InvStatus","I");

                    //           }
                    // else{
                    //}
                    r.setAttribute("FscCoupon", null);
                    r.setAttribute("EwBookletNo", null);
                    r.setAttribute("FastagFlag", null);
                } catch (Exception e) {
                    e.printStackTrace();
                }

                try {
                    String stmt4 = "begin Sp_update_nexa_dtl(?,?,?,?,?,?,?,?,?,?,?,?,?); end;";
                    st = trx.createCallableStatement(stmt4, 0);
                    st.setString(1, Vin);
                    st.setString(2, null);
                    st.setString(3, null);
                    st.setInt(4, 0);
                    st.setString(5, null);
                    st.setString(6, null);
                    st.setString(7, null);
                    st.setInt(8, 0);
                    st.setString(9, null);
                    st.setString(10, "C");
                    st.setString(11, (String) r.getAttribute("OrderPartyCd"));
                    st.registerOutParameter(12, Types.INTEGER);
                    st.registerOutParameter(13, Types.VARCHAR);
                    st.executeUpdate();
                    errMsg = st.getString(13);
                    if (errMsg != "" && errMsg != null) {
                        return errMsg;
                    }


                    String stmt5 = "begin sp_update_outstanding_amt(?,?,?,?,?,?,?,?,?,?,?,?); end;";
                    st = trx.createCallableStatement(stmt5, 0);
                    st.setString(1, parent);
                    st.setInt(2, Integer.parseInt(dealer));
                    st.setString(3, loca);
                    st.setString(4, comp);
                    st.setString(5, "CU");
                    st.setObject(6, null);
                    st.setObject(7, null);
                    st.setString(8, (String) r.getAttribute("OrderPartyCd"));
                    st.setBigDecimal(9, (BigDecimal) r.getAttribute("InvAmt"));
                    st.setDate(10, currdate);
                    st.registerOutParameter(11, OracleTypes.VARCHAR);
                    st.registerOutParameter(12, OracleTypes.VARCHAR);
                    st.executeUpdate();
                    errMsg = st.getString(12);
                    if (errMsg != "" && errMsg != null) {
                        return errMsg;
                    }
                } catch (Exception e) {
                    e.printStackTrace();
                }
                //                String message = this.updateOtherInvCancellation(st,trx);
                //                if(!message.equalsIgnoreCase("success")){
                //                    errMsg =  message;
                //                }
                //start data posting

                String BillNature = (String) r.getAttribute("BillNature");
                String orderPartyCd = (String) r.getAttribute("OrderPartyCd");
                String vin = (String) r.getAttribute("Vin");
                String loc = (String) session.get("locCd");
                String invNo = (String) r.getAttribute("InvNum");
                String invType = (String) r.getAttribute("InvType");
                String message = null;
                if (null != BillNature && (BillNature.equalsIgnoreCase("VC") || BillNature.equalsIgnoreCase("C"))) {
                    message = "Error in updating the Order Status";
                    LOGGER.info("check11");
                    try {
                        String orderStatus =
                            "UPDATE SH_ORDBOOK SET ORDER_STATUS = 'A',MODIFIED_BY = '" + session.get("userCode") +
                            "',MODIFIED_DATE = SYSDATE" + " WHERE ORDER_NUM = '" + (String) r.getAttribute("OrderNum") +
                            "' AND DEALER_MAP_CD = '" + dealer + "' AND LOC_CD = '" + loc + "' AND PARENT_GROUP = '" +
                            parent + "' AND COMP_FA = '" + comp + "'";
                        // 2. Create the CallableStatement for the PL/SQL block
                        st = trx.createCallableStatement(orderStatus, 0);
                        st.executeUpdate();
                        LOGGER.info("check12");

                    } catch (Exception e) {
                        e.printStackTrace();
                        return "Error in updating the Order Status";
                    }

                    try {
                        String gmVin =
                            "UPDATE GM_VIN SET INV_NUM = NULL, INV_DATE = NULL,PARTY_CD = NULL,MODIFIED_BY = null ," +
                            " MODIFIED_DATE = SYSDATE,SELLING_DEALER_CD = NULL,SELLING_LOC_CD = NULL," +
                            " SELLING_PARENT_GROUP = NULL,SMIL_FSC_COUPON=NULL  WHERE VIN = '" + vin + "'";
                        LOGGER.info("query gm vin: " + gmVin);

                        st = trx.createCallableStatement(gmVin, 0);
                        st.executeUpdate();
                    } catch (Exception e) {
                        return "Error in updating the Vehicle Master";
                    }
                    LOGGER.info("check other 1");

                    String sql1 =
                        "SELECT ENQ_NUM  FROM SH_ORDBOOK WHERE ORDER_NUM = '" + (String) r.getAttribute("OrderNum") +
                        "' AND DEALER_MAP_CD = " + dealer + " and  LOC_CD = '" + loc + "' AND PARENT_GROUP = '" +
                        parent + "' AND COMP_FA = '" + comp + "'";
                    LOGGER.info("RD SH_ORDBOOK QUERY" + sql1);
                    ResultSet rs12 = trx.createStatement(0).executeQuery(sql1);
                    String LV_ENQ_NUM = "";
                    if (rs12.next()) {
                        LV_ENQ_NUM = rs12.getString(1);
                    }
                    if (null != LV_ENQ_NUM && !LV_ENQ_NUM.equalsIgnoreCase("")) {
                        LOGGER.info("check other 2");
                        String sql2 =
                            "SELECT ENQ_VAR_SRL,REMARKS FROM RD_ENQFOLLOW WHERE ENQ_NUM = '" + LV_ENQ_NUM +
                            "' AND REMARKS LIKE '%'|| '" + invNo + "' || '%' AND DEALER_MAP_CD = " + dealer +
                            " AND LOC_CD = '" + loc + "'  AND PARENT_GROUP = '" + parent + "' AND COMP_FA = '" + comp +
                            "' AND ENQ_VAR_SRL=1";
                        LOGGER.info("RD ENQFOLLOW QUERY" + sql2);
                        ResultSet rs2 = trx.createStatement(0).executeQuery(sql2);
                        Integer ENQ_VAR_SRL = 1;
                        String REMARKS = "";
                        if (rs2.next()) {
                            ENQ_VAR_SRL = rs2.getInt(1);
                            REMARKS = rs2.getString(2);
                        }


                        LOGGER.info("check other 3");
                        try {
                            String rdEnq =
                                "UPDATE RD_ENQ SET ENQ_STATUS = 'O', MODIFIED_BY = '" +
                                (String) session.get("userCode") + "', MODIFIED_DATE = SYSDATE WHERE ENQ_NUM = '" +
                                LV_ENQ_NUM + "' AND ENQ_VAR_SRL = 1 " + " and DEALER_MAP_CD = " + dealer +
                                " and  LOC_CD = '" + loc + "' AND PARENT_GROUP = '" + parent + "' AND COMP_FA = '" +
                                comp + "'";
                            System.out.println("RD update rdEnq QUERY" + rdEnq);
                            st = trx.createCallableStatement(rdEnq, 0);
                            st.executeUpdate();
                        } catch (Exception e) {
                            return "Error in updating the Enquiry Status";
                        }
                        //message = "Error in updating the Followup row";
                        try {
                            LOGGER.info("check other 4");
                            String rdEnqFollow =
                                "UPDATE RD_ENQFOLLOW SET ENQ_FOLLOWSTATUS = 'O', REMARKS = '" + REMARKS +
                                "' || '- Cancelled on ' || '-' ||  SYSDATE, ENQ_FOLLOW_ACT_DATE = SYSDATE " +
                                " WHERE ENQ_NUM = '" + LV_ENQ_NUM + "' AND ENQ_VAR_SRL = 1 AND ENQ_FOLLOWSTATUS = 'C'" +
                                " and DEALER_MAP_CD = " + dealer + " and  LOC_CD = '" + loc + "' AND PARENT_GROUP = '" +
                                parent + "' AND COMP_FA = '" + comp + "'";
                            LOGGER.info("RD update RD_ENQFOLLOW QUERY" + rdEnqFollow);
                            st = trx.createCallableStatement(rdEnqFollow, 0);
                            st.executeUpdate();
                        } catch (Exception e) {
                            e.printStackTrace();
                            return "Error in updating the Followup row";
                        }
                    }
                    try {
                        //message = "Error in updating data";
                        LOGGER.info("check other 5");
                        String shSsi =
                            "UPDATE SH_SSI SET VALID_YN = 'N' WHERE VIN = '" + vin + "' and DOC_NUM='" + invNo +
                            "' and " + " DEALER_MAP_CD = " + dealer + " and  LOC_CD = '" + loc +
                            "' AND PARENT_GROUP = '" + parent + "' AND COMP_FA = '" + comp + "'";
                        st = trx.createCallableStatement(shSsi, 0);
                        st.executeUpdate();
                    } catch (Exception e) {
                        return "Error in updating data for SSI";
                    }
                    //message = "Error in updating data";
                    LOGGER.info("check other 6");
                    try {
                        String shPop =
                            "UPDATE SH_POP SET VALID_YN = 'N' WHERE VIN = '" + vin + "' and" + " DEALER_MAP_CD = " +
                            dealer + " and  LOC_CD = '" + loc + "' AND PARENT_GROUP = '" + parent +
                            "' AND COMP_FA = '" + comp + "'";
                        st = trx.createCallableStatement(shPop, 0);
                        st.executeUpdate();
                    } catch (Exception e) {
                        return "Error in updating data for POP";
                    }
                    // message = "Error in deleting PSF/OMR rows";
                    LOGGER.info("check other 7");
                    try {
                        String delVhPsf =
                            " DELETE FROM VH_PSF WHERE VIN = '" + vin + "' and PSF_TYPE IN ('PSF','OMR') and" +
                            " DEALER_MAP_CD = " + dealer + " and  LOC_CD = '" + loc + "'";
                        st = trx.createCallableStatement(delVhPsf, 0);
                        st.executeUpdate();
                    } catch (Exception e) {
                        return "Error in deleting PSF/OMR rows";
                    }
                    //message = "Execution failed for insertion of RIPS data";
                    LOGGER.info("check other 8");
                    try {
                        String ins1 =
                            " INSERT INTO SI_RIPS(RIPS_DEALER_CD,RIPS_LOC_CD,RIPS_INV_NUM,RIPS_INV_TYPE,RIPS_PARENT_GROUP,RIPS_COMP_FA,RIPS_TIMESTAMP,RIPS_BATCHPICKED_FLAG,RIPS_INV_STATUS)" +
                            " VALUES( " + dealer + ", '" + loc + "' , '" + invNo + "' , '" + invType + "' , '" +
                            parent + "' , '" + comp + "' ,  sysdate , 'N' , 'C')";
                        st = trx.createCallableStatement(ins1, 0);
                        st.executeUpdate();
                    } catch (Exception e) {
                        return "Execution failed for insertion of RIPS data";
                    }


                }

                if (null != BillNature && BillNature.equalsIgnoreCase("C")) {
                    //message = "error while updating data";
                    try {
                        LOGGER.info("check other 9");
                        String preInvC =
                            "UPDATE sh_pre_invoice SET ORG_INV_NUM=NULL where  PARENT_GROUP = '" + parent +
                            "' and DEALER_MAP_CD= '" + dealer + "and  LOC_CD = '" + loc + "' AND COMP_FA = '" + comp +
                            "' and ORDER_NUM='" + (String) r.getAttribute("OrderNum") + "'  and VIN= '" + vin +
                            "' AND INV_STATUS='I' AND BILL_NATURE= '" + BillNature + "'";
                        st = trx.createCallableStatement(preInvC, 0);
                        st.executeUpdate();
                    } catch (Exception e) {
                        return "error while updating data for Pre Invoice";
                    }
                }


                if (null != BillNature && BillNature.equalsIgnoreCase("V")) {
                    //message = "error while updating data";
                    try {
                        LOGGER.info("check other 10");
                        String preInvV =
                            "UPDATE sh_pre_invoice SET ORG_INV_NUM=NULL where PARENT_GROUP = '" + parent +
                            "' and DEALER_MAP_CD= '" + dealer + "and  LOC_CD = '" + loc + "' AND COMP_FA = '" + comp +
                            "' and ORDER_NUM='" + (String) r.getAttribute("OrderNum") + "'  and VIN= '" + vin +
                            "' AND INV_STATUS='I' AND BILL_NATURE= '" + BillNature + "'";
                        st = trx.createCallableStatement(preInvV, 0);
                        st.executeUpdate();
                    } catch (Exception e) {
                        return "error while updating data for pre invoice";
                    }
                }

                if (null != BillNature && BillNature.equalsIgnoreCase("VC")) {
                    //message = "error while updating data";
                    try {
                        LOGGER.info("check other 11");
                        String preInvVC =
                            "UPDATE sh_pre_invoice SET ORG_INV_NUM=NULL where PARENT_GROUP = '" + parent +
                            "' and DEALER_MAP_CD= " + dealer + " and  LOC_CD = '" + loc + "' AND COMP_FA = '" + comp +
                            "' and ORDER_NUM='" + (String) r.getAttribute("OrderNum") + "'  and VIN= '" + vin +
                            "' AND INV_STATUS='I'";
                        st = trx.createCallableStatement(preInvVC, 0);
                        st.executeUpdate();
                    } catch (Exception e) {
                        return "error while updating data";
                    }
                }

                if (null != BillNature && (BillNature.equalsIgnoreCase("VC") || BillNature.equalsIgnoreCase("C"))) {
                    //  message = "Error in updating the Order Status";
                    try {
                        message = "Execution failed while updating the stock";

                        LOGGER.info("check123");
                        String sql =
                            "select COUNT(1) as cnt FROM sh_grn sh,sd_grn sd WHERE sd.AVL_PARENT_GROUP ='" + parent +
                            "' AND sd.AVL_DLR_CD =" + dealer + " AND sd.AVL_LOC_CD ='" + loc +
                            "' AND sd.AVL_COMP_FA ='" + comp + "' AND sd.VIN = '" + vin +
                            "' and sh.DEALER_MAP_CD=SD.DEALER_MAP_CD and sh.LOC_CD= SD.LOC_CD" +
                            " and sh.COMP_FA= SD.COMP_FA and sh.GRN_NUM= SD.GRN_NUM and sh.PARENT_GROUP=SD.PARENT_GROUP";
                        ResultSet rs3 = trx.createStatement(0).executeQuery(sql);
                        Integer cnt = 0;
                        if (rs3.next()) {
                            cnt = rs3.getInt(1);
                        }
                        LOGGER.info("check1234" + sql);
                        if (cnt == 0) {
                            message = "Execution failed while updating the stock";
                        } else {
                            LOGGER.info("check other 13");
                            String sqlQ =
                                "SELECT SD.PARENT_GROUP,SD.DEALER_MAP_CD,SD.LOC_CD,SD.COMP_FA FROM sh_grn sh,sd_grn sd WHERE sd.AVL_PARENT_GROUP ='" +
                                parent + "' AND sd.AVL_DLR_CD =" + dealer + " AND sd.AVL_LOC_CD ='" + loc +
                                "' AND sd.AVL_COMP_FA ='" + comp + "' AND sd.VIN ='" + vin +
                                "' AND sh.DEALER_MAP_CD=SD.DEALER_MAP_CD AND sh.LOC_CD= SD.LOC_CD AND sh.COMP_FA= SD.COMP_FA" +
                                " AND sh.GRN_NUM= SD.GRN_NUM AND sh.PARENT_GROUP=SD.PARENT_GROUP";
                            ResultSet rs4 = trx.createStatement(0).executeQuery(sqlQ);
                            String sdParent = null;
                            String sdDealerMapCd = null;
                            String sdLocCd = null;
                            String sdCompFa = null;
                            if (rs4.next()) {
                                sdParent = rs4.getString(1);
                                sdDealerMapCd = rs4.getString(2);
                                sdLocCd = rs4.getString(3);
                                sdCompFa = rs4.getString(4);
                            }

                            String sqlQ1 =
                                "SELECT MAX(STK_SRL_NUM)  FROM SH_STOCK WHERE STK_IN_DOC_NUM='" + invNo +
                                "' and DEALER_MAP_CD = " + dealer + " and  LOC_CD = '" + loc +
                                "' AND PARENT_GROUP = '" + parent + "' AND COMP_FA = '" + comp + "'";
                            ResultSet rs5 = trx.createStatement(0).executeQuery(sqlQ1);
                            Integer LV_MAX_SNO = 0;

                            if (rs5.next()) {
                                LV_MAX_SNO = rs5.getInt(1);
                            }
                            LOGGER.info("check other 14");
                            String shStkInv =
                                "insert into sh_stock(PARENT_GROUP, DEALER_MAP_CD, LOC_CD, COMP_FA, STK_IN_DOC_NUM, STK_SRL_NUM, STK_IN_DATE,CHASSIS_STATUS, CHASSIS_NUM, ENGINE_NUM, " +
                                "VIN, MODEL_CD, VARIANT_CD, COLOR_CD, GRN_DATE, STK_IN_DOC_TYPE, GRN_NUM, AVL_PARENT_GROUP, AVL_DEALER_MAP_CD, AVL_LOC_CD, AVL_COMP_FA, " +
                                "CREATED_DATE, CREATED_BY) (select SD.PARENT_GROUP,SD.DEALER_MAP_CD,SD.LOC_CD,SD.COMP_FA, '" +
                                invNo + "' ,nvl( '" + LV_MAX_SNO + "' ,0)+1,SYSDATE, " +
                                "SD.DAMAGE,sd.CHASSIS_NUM,sd.ENGINE_NUM,sd.vin,sd.MODEL_CD,sd.VARIANT_CD,sd.ECOLOR_CD,sh.GRN_DATE,'VSL',SD.GRN_NUM,'" +
                                parent + "', " + dealer + "," + "'" + loc + "' ,'" + comp + "',SYSDATE,'" +
                                session.get("userCode") + "' FROM sh_grn sh,sd_grn sd WHERE sd.AVL_PARENT_GROUP = '" +
                                parent + "'" + " AND sd.AVL_DLR_CD = '" + dealer + "' AND sd.AVL_LOC_CD ='" + loc +
                                "' AND sd.AVL_COMP_FA ='" + comp + "' AND sd.VIN = '" + vin + "'" +
                                " and sh.DEALER_MAP_CD=SD.DEALER_MAP_CD and sh.LOC_CD= SD.LOC_CD and sh.COMP_FA= SD.COMP_FA and sh.GRN_NUM= SD.GRN_NUM and sh.PARENT_GROUP=SD.PARENT_GROUP)";
                            LOGGER.info("shStkInv query: " + shStkInv);
                            st = trx.createCallableStatement(shStkInv, 0);
                            st.executeUpdate();
                        }

                    } catch (Exception e) {
                        return message;
                    }
                }


                //end data posting

                if (null != session.get("tallyIntegration") &&
                    ((String) session.get("tallyIntegration")).equalsIgnoreCase("Y")) {
                    try {
                        String stmttally =
                            "begin PK_FINC_TRNS_INTERFACE.SALS_INVC_CANCL(?,?,?,?,?,?,?,?,?,?,?,?); end;";
                        st = trx.createCallableStatement(stmttally, 0);
                        st.setInt(1, Integer.parseInt(session.get("principalMapCd").toString()));
                        st.setString(2, parent);
                        st.setInt(3, Integer.parseInt(dealer));
                        st.setString(4, loca);
                        st.setString(5, comp);
                        st.setString(6, "Dms Credit Note");
                        st.setString(7, invNo);
                        st.setString(8, (String) session.get("userCode"));
                        st.setDate(9, currdate);
                        st.setString(10, "O");
                        st.registerOutParameter(11, Types.BOOLEAN);
                        st.registerOutParameter(12, Types.VARCHAR);
                        st.executeUpdate();
                        errMsg = st.getString(12);
                    } catch (Exception e) {
                        e.printStackTrace();
                    }
                    // if (errMsg != "" && errMsg!=null) {return errMsg;} }

                }


                String sqlREFC =
                    "SELECT /*+ INDEX(INV SYS_C004975) */ ge.card_num FROM gd_loyalty_trans gd,gd_loyalty_enrol ge,sh_invoice inv" +
                    " WHERE gd.trans_num='" + (String) r.getAttribute("InvNum") + "' AND inv.parent_group= '" + parent +
                    "' AND inv.dealer_map_cd= " + dealer + " AND inv.loc_cd= '" + loca + "' AND inv.COMP_FA = '" +
                    comp + "'" + " AND inv.parent_group=org_parent_group  AND inv.dealer_map_cd=org_dlr_map_cd" +
                    " AND Card_issu_parent = inv.parent_group and Card_issu_dlr_map_cd = inv.dealer_map_cd and card_issu_loc_cd = inv.loc_cd " +
                    " AND inv.loc_cd= org_loc_cd  AND gd.trans_type='REFF' AND gd.trans_num=inv.inv_num AND ge.card_num=gd.card_num AND rownum=1";

                LOGGER.info("sql6 slow" + sqlREFC);
                ResultSet rsREFC = getDBTransaction().createStatement(0).executeQuery(sqlREFC);
                String cardNumREFC = "";
                if (rsREFC.next()) {
                    cardNumREFC = rsREFC.getString(1);
                }
                if (cardNumREFC != null && !cardNumREFC.equalsIgnoreCase("")) {
                    LOGGER.info("after other 1");
                    String stmt7 = "begin PKG_LOYALTY.sp_ins_loyalty_transactions(?,?,?,?,?,?,?,?,?,?,?,?,?,?,?); end;";
                    st = trx.createCallableStatement(stmt7, 0);
                    st.setString(1, cardNumREFC);
                    st.setString(2, null);
                    st.setString(3, "REFC");
                    st.setString(4, currentDate);
                    st.setString(5, (String) r.getAttribute("InvNum"));
                    st.setString(6, null);
                    st.setString(7, parent);
                    st.setInt(8, Integer.parseInt(dealer));
                    st.setString(9, loca);
                    st.setInt(10, 0);
                    st.setInt(11, 0);
                    st.setString(12, "C");
                    st.setString(13, (String) session.get("userCode"));
                    st.registerOutParameter(14, Types.INTEGER);
                    st.registerOutParameter(15, Types.VARCHAR);
                    st.executeUpdate();
                    errMsg = st.getString(15);
                    if (errMsg != "" && errMsg != null) {
                        return errMsg;
                    }
                }


                String sqlLACB =
                    "SELECT /*+ INDEX(INV SYS_C004975) */ ge.card_num FROM gd_loyalty_trans gd,gd_loyalty_enrol ge,sh_invoice inv" +
                    " WHERE gd.trans_num='" + (String) r.getAttribute("InvNum") + "' AND inv.parent_group= '" + parent +
                    "' AND inv.dealer_map_cd= " + dealer + " AND inv.loc_cd= '" + loca + "' AND inv.COMP_FA = '" +
                    comp + "'" + " AND inv.parent_group=org_parent_group  AND inv.dealer_map_cd=org_dlr_map_cd" +
                    " AND Card_issu_parent = inv.parent_group and Card_issu_dlr_map_cd = inv.dealer_map_cd and card_issu_loc_cd = inv.loc_cd " +
                    " AND inv.loc_cd= org_loc_cd  AND gd.trans_type='LACB' AND gd.trans_num=inv.inv_num AND ge.card_num=gd.card_num AND rownum=1";

                LOGGER.info("sql6 slow" + sqlLACB);
                ResultSet rsLACB = getDBTransaction().createStatement(0).executeQuery(sqlLACB);
                String cardNumLACB = "";
                if (rsLACB.next()) {
                    cardNumLACB = rsLACB.getString(1);
                }
                if (cardNumLACB != null && !cardNumLACB.equalsIgnoreCase("")) {
                    LOGGER.info("after other 1");
                    String stmt7 = "begin PKG_LOYALTY.sp_ins_loyalty_transactions(?,?,?,?,?,?,?,?,?,?,?,?,?,?,?); end;";
                    st = trx.createCallableStatement(stmt7, 0);
                    st.setString(1, cardNumLACB);
                    st.setString(2, null);
                    st.setString(3, "LACBC");
                    st.setString(4, currentDate);
                    st.setString(5, (String) r.getAttribute("InvNum"));
                    st.setString(6, null);
                    st.setString(7, parent);
                    st.setInt(8, Integer.parseInt(dealer));
                    st.setString(9, loca);
                    st.setInt(10, 0);
                    st.setInt(11, 0);
                    st.setString(12, "C");
                    st.setString(13, (String) session.get("userCode"));
                    st.registerOutParameter(14, Types.INTEGER);
                    st.registerOutParameter(15, Types.VARCHAR);
                    st.executeUpdate();
                    errMsg = st.getString(15);
                    if (errMsg != "" && errMsg != null) {
                        return errMsg;
                    }
                }

                //LEXB


                LOGGER.info("after other");
                String sql6 =
                    "SELECT /*+ INDEX(INV SYS_C004975) */ ge.card_num FROM gd_loyalty_trans gd,gd_loyalty_enrol ge,sh_invoice inv" +
                    " WHERE gd.trans_num='" + (String) r.getAttribute("InvNum") + "' AND inv.parent_group= '" + parent +
                    "' AND inv.dealer_map_cd= " + dealer + " AND inv.loc_cd= '" + loca + "' AND inv.COMP_FA = '" +
                    comp + "'" + " AND inv.parent_group=org_parent_group  AND inv.dealer_map_cd=org_dlr_map_cd" +
                    " AND Card_issu_parent = inv.parent_group and Card_issu_dlr_map_cd = inv.dealer_map_cd and card_issu_loc_cd = inv.loc_cd " +
                    " AND inv.loc_cd= org_loc_cd  AND gd.trans_type='LEXB' AND gd.trans_num=inv.inv_num AND ge.card_num=gd.card_num AND rownum=1";

                LOGGER.info("sql6 slow" + sql6);
                ResultSet rs6 = getDBTransaction().createStatement(0).executeQuery(sql6);
                String cardNum = "";
                if (rs6.next()) {
                    cardNum = rs6.getString(1);
                }
                if (cardNum != null && !cardNum.equalsIgnoreCase("")) {
                    LOGGER.info("after other 1");
                    String stmt7 = "begin PKG_LOYALTY.sp_ins_loyalty_transactions(?,?,?,?,?,?,?,?,?,?,?,?,?,?,?); end;";
                    st = trx.createCallableStatement(stmt7, 0);
                    st.setString(1, cardNum);
                    st.setString(2, null);
                    st.setString(3, "LEXBC");
                    st.setString(4, currentDate);
                    st.setString(5, (String) r.getAttribute("InvNum"));
                    st.setString(6, null);
                    st.setString(7, parent);
                    st.setInt(8, Integer.parseInt(dealer));
                    st.setString(9, loca);
                    st.setInt(10, 0);
                    st.setInt(11, 0);
                    st.setString(12, "C");
                    st.setString(13, (String) session.get("userCode"));
                    st.registerOutParameter(14, Types.INTEGER);
                    st.registerOutParameter(15, Types.VARCHAR);
                    st.executeUpdate();
                    errMsg = st.getString(15);
                    if (errMsg != "" && errMsg != null) {
                        return errMsg;
                    }
                }
                LOGGER.info("after other 2");
                String sql7 =
                    "SELECT /*+ INDEX(INV SYS_C004975) */  ge.card_num FROM gd_loyalty_trans gd,gd_loyalty_enrol ge,sh_invoice inv" +
                    " WHERE gd.trans_num='" + (String) r.getAttribute("InvNum") + "' AND inv.parent_group= '" + parent +
                    "' AND inv.dealer_map_cd= " + dealer + " AND inv.loc_cd= '" + loca + "' AND inv.COMP_FA = '" +
                    comp + "'" + " AND inv.parent_group=org_parent_group  AND inv.dealer_map_cd=org_dlr_map_cd" +
                    " AND Card_issu_parent = inv.parent_group and Card_issu_dlr_map_cd = inv.dealer_map_cd and card_issu_loc_cd = inv.loc_cd " +
                    " AND inv.loc_cd= org_loc_cd  AND gd.trans_type='REFRE' AND gd.trans_num=inv.inv_num AND ge.card_num=gd.card_num AND rownum=1";
                ResultSet rs7 = getDBTransaction().createStatement(0).executeQuery(sql7);
                String cardNum2 = "";
                if (rs7.next()) {
                    cardNum2 = rs7.getString(1);
                }
                if (cardNum2 != null && !cardNum2.equalsIgnoreCase("")) {
                    LOGGER.info("after other 3");
                    String stmt8 = "begin PKG_LOYALTY.sp_ins_loyalty_transactions(?,?,?,?,?,?,?,?,?,?,?,?,?,?,?); end;";
                    st = trx.createCallableStatement(stmt8, 0);
                    st.setString(1, cardNum2);
                    st.setString(2, null);
                    st.setString(3, "REFRC");
                    st.setString(4, currentDate);
                    st.setString(5, (String) r.getAttribute("InvNum"));
                    st.setString(6, null);
                    st.setString(7, parent);
                    st.setInt(8, Integer.parseInt(dealer));
                    st.setString(9, loca);
                    st.setInt(10, 0);
                    st.setInt(11, 0);
                    st.setString(12, "C");
                    st.setString(13, (String) session.get("userCode"));
                    st.registerOutParameter(14, Types.INTEGER);
                    st.registerOutParameter(15, Types.VARCHAR);
                    st.executeUpdate();
                    errMsg = st.getString(15);
                    if (errMsg != "" && errMsg != null) {
                        return errMsg;
                    }
                }

                LOGGER.info("after other 4");
                String sql8 =
                    "SELECT ge.card_num FROM gd_loyalty_enrol ge,gd_loyalty_card_vin_map vm WHERE vm.card_num=ge.card_num" +
                    " AND vm.mapped_yn='Y' AND vm.card_vin= '" + Vin + "'  AND rownum=1";
                ResultSet rs8 = getDBTransaction().createStatement(0).executeQuery(sql8);
                String cardNum3 = "";
                if (rs8.next()) {
                    cardNum3 = rs8.getString(1);
                }
                LOGGER.info("after other 5");
                String loyalityCardUpdate =
                    "update gd_loyalty_card_vin_map set mapped_yn='N', mapped_yn_date=sysdate ,modified_by='" +
                    (String) session.get("userCode") + "' ,modified_date=sysdate  where card_num= '" + cardNum3 +
                    "' and card_vin= '" + Vin + "' and mapped_yn='Y'";
                st = trx.createCallableStatement(loyalityCardUpdate, 0);
                st.executeUpdate();
                LOGGER.info("after other 6");
                String sql9 =
                    "select count(*) from  gd_loyalty_card_vin_map vm where card_num='" + cardNum3 +
                    "' and mapped_yn='Y'";
                ResultSet rs9 = getDBTransaction().createStatement(0).executeQuery(sql9);
                Integer count = 0;
                if (rs9.next()) {
                    count = rs9.getInt(1);
                }
                LOGGER.info("after other 7");
                if (count.equals(0)) {
                    String loyalityEnrolUpdate =
                        "update gd_loyalty_enrol set card_status='C' , modified_date=sysdate ,modified_by= '" +
                        (String) session.get("userCode") + "' where card_num='" + cardNum3 + "'";
                    st = trx.createCallableStatement(loyalityEnrolUpdate, 0);
                    st.executeUpdate();
                }


            } else {
                //
                oracle.jbo.domain.Date vDate = new oracle.jbo.domain.Date(oracle.jbo
                                                                                .domain
                                                                                .Date
                                                                                .getCurrentDate());
                LOGGER.info("errMsg5" + errMsg + user + vDate);
                r.setAttribute("CancelDate", vDate);
                r.setAttribute("ModifiedBy", user);
                r.setAttribute("ModifiedDate", vDate);
                r.setAttribute("ExchCancBy", user);
                r.setAttribute("ExchCancDate", vDate);
                r.setAttribute("ExchCancType", "DLR");
                r.setAttribute("ExchangeFlag", "C");
                String sql7 =
                    "SELECT /*+ INDEX(INV SYS_C004975) */ ge.card_num FROM gd_loyalty_trans gd,gd_loyalty_enrol ge,sh_invoice inv" +
                    " WHERE gd.trans_num='" + (String) r.getAttribute("InvNum") + "' AND inv.parent_group= '" + parent +
                    "' AND inv.dealer_map_cd= " + dealer + " AND inv.loc_cd= '" + loca + "' AND inv.COMP_FA = '" +
                    comp + "'" + " AND inv.parent_group=org_parent_group  AND inv.dealer_map_cd=org_dlr_map_cd" +
                    " AND Card_issu_parent = inv.parent_group and Card_issu_dlr_map_cd = inv.dealer_map_cd and card_issu_loc_cd = inv.loc_cd " +
                    " AND inv.loc_cd= org_loc_cd  AND gd.trans_type='LEXB' AND gd.trans_num=inv.inv_num AND ge.card_num=gd.card_num AND rownum=1";
                ResultSet rs7 = getDBTransaction().createStatement(0).executeQuery(sql7);
                String cardNum = "";
                if (rs7.next()) {
                    cardNum = rs7.getString(1);
                }

                if (cardNum != null && !cardNum.equalsIgnoreCase("")) {
                    String stmt8 = "begin PKG_LOYALTY.sp_ins_loyalty_transactions(?,?,?,?,?,?,?,?,?,?,?,?,?,?,?); end;";
                    st = trx.createCallableStatement(stmt8, 0);
                    st.setString(1, cardNum);
                    st.setString(2, null);
                    st.setString(3, "LEXBC");
                    st.setString(4, currentDate);
                    st.setString(5, (String) r.getAttribute("InvNum"));
                    st.setString(6, null);
                    st.setString(7, parent);
                    st.setInt(8, Integer.parseInt(dealer));
                    st.setString(9, loca);
                    st.setInt(10, 0);
                    st.setInt(11, 0);
                    st.setString(12, "C");
                    st.setString(13, (String) session.get("userCode"));
                    st.registerOutParameter(14, Types.INTEGER);
                    st.registerOutParameter(15, Types.VARCHAR);
                    st.executeUpdate();
                    errMsg = st.getString(15);
                    if (errMsg != "" && errMsg != null) {
                        return errMsg;
                    }
                }

            }

            String eval =
                "UPDATE MULDMS.SH_TV_EVAL XX SET XX.EXCH_FLAG = 'C',XX.EXCH_PARENT_GROUP ='',XX.EXCH_DEALER_MAP_CD ='',XX.EXCH_LOC_CD ='',XX.EXCH_COMP_FA ='',XX.EXCH_INV_NUM ='',XX.MODIFIED_BY ='" +
                user + "', XX.MODIFIED_DATE =sysdate WHERE XX.EXCH_DEALER_MAP_CD =" + dealer +
                " AND XX.EXCH_PARENT_GROUP ='" + parent + "' AND XX.EXCH_LOC_CD ='" + loca +
                "' AND XX.EXCH_COMP_FA ='" + comp + "' AND XX.EXCH_INV_NUM ='" + InvoiceNum + "' AND XX.BUYING_NUM ='" +
                buyid + "' AND NVL(XX.EXCH_FLAG, 'X') = 'Y'";
            // 2. Create the CallableStatement for the PL/SQL block
            LOGGER.info("SH_TV_EVAL query: " + eval);
            st = trx.createCallableStatement(eval, 0);
            st.executeUpdate();


            String sql =
                "select 'Y' from am_dealer_loc_param where PARENT_GROUP = '" + Parent + "' and DEALER_MAP_CD = " +
                dealer + " and LOC_CD = '" + loca + "' and nvl(fin_data_yn, 'N') = 'Y'";
            ResultSet rs = getDBTransaction().createStatement(0).executeQuery(sql);
            String fin_data_yn = "N";
            if (rs.next()) {
                fin_data_yn = rs.getString(1);
            }
            // code call for package FDI
            if (fin_data_yn.equalsIgnoreCase("Y")) {
                String stmt9 = "begin PKG_FDI.SP_INS_INV_FDI(?,?,?,?,?,?,?); end;";
                st = trx.createCallableStatement(stmt9, 0);
                st.setString(1, parent);
                st.setInt(2, Integer.parseInt(dealer));
                st.setString(3, loca);
                st.setString(4, comp);
                st.setString(5, (String) r.getAttribute("InvNum"));
                st.registerOutParameter(6, Types.INTEGER);
                st.registerOutParameter(7, Types.VARCHAR);
                st.executeUpdate();
                errMsg = st.getString(7);
                if (errMsg != "" && errMsg != null) {
                    return errMsg;
                }
            }


            //Envoice code call


            //errMsg = "Success";

            getTransaction().commit();
            errMsg = "Success";
            LOGGER.info("errMsg2" + errMsg);
            return errMsg;
        } catch (Exception sqle) {
            // TODO: Add catch code
            sqle.printStackTrace();
            LOGGER.log(LOGGER.ERROR, sqle.getMessage());
            return errMsg;

        } finally {
            try {
                if (st != null) {
                    st.close();
                }
            } catch (Exception e) {
                e.printStackTrace();
                LOGGER.log(LOGGER.ERROR, e.getMessage());
                return errMsg;

            }
        }
        // System.out.println("errMsg 123"+errMsg);
        //                if(!errMsg.equalsIgnoreCase("Success")){
        //                                try{
        //                                 System.out.println("errMsg 123 cc"+errMsg);
        //                   // this.getTransaction().rollback();
        //                                 System.out.println("errMsg 123 dd"+errMsg);
        //                   // r.setAttribute("CanNum", null);
        //                   // r.setAttribute("InvStatus", "I");
        //                   // r.setAttribute("InvcNum", null);
        //                    //this.getTransaction().commit();
        //                                }
        //                                catch(Exception e){
        //                                        e.printStackTrace();
        //                }}
        //  return errMsg;

    }

    public String eInvoiceCheck() {
        String errMsg = "success";
        Map session = ADFContext.getCurrent().getSessionScope();
        System.out.println("check 1");
        //Object I = 1;
        //String dealer1 = (String)I;
        Integer dealer = new Integer(session.get("dealerMapCd").toString());

        String loca = (String) session.get("locCd");
        String parent = (String) session.get("parentGroupCd");
        String comp = (String) session.get("compCode");
        ViewObjectImpl vo = this.getShInvoiceEOView1();
        Row r = vo.getCurrentRow();
        String InvoiceNum = r.getAttribute("InvNum").toString();
        String type = r.getAttribute("InvType").toString();
        DBTransaction trx = (DBTransaction) getTransaction();
        CallableStatement st = null;
        System.out.println("check 2");
        try {
            System.out.println("check 3");
            String sql2 =
                "select SALES_STOCK_YARD_YN  , DEALER_TYPE from AM_DEALER_LOC  where dealer_map_cd= " + dealer +
                " and loc_cd='" + loca + "'";
            ResultSet rs2 = getDBTransaction().createStatement(0).executeQuery(sql2);
            String SALES_STOCK_YARD_YN = "";
            String DEALER_TYPE = "";
            System.out.println("check 4");
            if (rs2.next()) {
                System.out.println("check 5");
                SALES_STOCK_YARD_YN = rs2.getString(1);
                DEALER_TYPE = rs2.getString(2);
                System.out.println("check 6");
            }
            if (SALES_STOCK_YARD_YN.equalsIgnoreCase("Y") &&
                (DEALER_TYPE.equalsIgnoreCase("S") || DEALER_TYPE.equalsIgnoreCase("3S"))) {
                System.out.println("check 7");
                String sql3 =
                    "SELECT NVL(AP.EINV_500_YN, 'N') FROM AM_DEALER_LOC_PARAM AP WHERE AP.PARENT_GROUP = '" + parent +
                    "' AND AP.DEALER_MAP_CD = " + dealer + " AND AP.LOC_CD = '" + loca + "'";
                ResultSet rs3 = getDBTransaction().createStatement(0).executeQuery(sql3);
                String LV_GET_500 = "N";
                if (rs3.next()) {
                    System.out.println("check 8");
                    LV_GET_500 = rs3.getString(1);
                }
                System.out.println("check 9");
                String sql4 =
                    "SELECT SO.CUST_GST_NUM, AP.GST_NUM, AP.EINV_500_YN, AL.DLR_SEQ  FROM SH_ORDBOOK SO, SH_INVOICE SH, AM_DEALER_LOC AL, AM_DEALER_LOC_PARAM AP WHERE SH.PARENT_GROUP = SO.PARENT_GROUP " +
                    "      AND SH.DEALER_MAP_CD = SO.DEALER_MAP_CD AND SH.LOC_CD = SO.LOC_CD AND SH.COMP_FA = SO.COMP_FA AND SH.ORDER_NUM = SO.ORDER_NUM AND SH.PARENT_GROUP = AL.PARENT_GROUP AND SH.DEALER_MAP_CD = AL.DEALER_MAP_CD  " +
                    "      AND SH.LOC_CD = AL.LOC_CD AND SH.PARENT_GROUP = AP.PARENT_GROUP AND SH.DEALER_MAP_CD = AP.DEALER_MAP_CD AND SH.LOC_CD = AP.LOC_CD AND SH.PARENT_GROUP = '" +
                    parent + "' " + "      AND SH.DEALER_MAP_CD = " + dealer + " AND SH.LOC_CD = '" + loca +
                    "' AND SH.COMP_FA = '" + comp + "' AND SH.INV_NUM = '" + InvoiceNum + "' AND SH.INV_TYPE= '" +
                    type + "'";
                ResultSet rs4 = getDBTransaction().createStatement(0).executeQuery(sql4);
                String CUST_GST_NUM = "";
                if (rs4.next()) {
                    System.out.println("check 10");
                    CUST_GST_NUM = rs4.getString(1);
                }

                if (!LV_GET_500.equalsIgnoreCase("Y") || CUST_GST_NUM.equalsIgnoreCase("GSTUNREGISTERED")) {
                    System.out.println("check 11");
                } else {
                    try {
                        System.out.println("check 12");
                        if (((String) r.getAttribute("CancelOption")).equalsIgnoreCase("I")) {
                            String stmt9 = "begin PKG_EINV.SP_GET_EINV_STATUS(?,?,?,?,?,?,?,?,?); end;";
                            st = trx.createCallableStatement(stmt9, 0);
                            st.setInt(1, 1);
                            st.setString(2, parent);
                            st.setInt(3, dealer);
                            st.setString(4, loca);
                            st.setString(5, (String) r.getAttribute("CanNum"));
                            st.setString(6, "NCR");
                            st.setString(7, CUST_GST_NUM);
                            st.registerOutParameter(8, Types.INTEGER);
                            st.registerOutParameter(9, Types.VARCHAR);
                            st.executeUpdate();
                            System.out.println("check 13");
                            Integer errCode = st.getInt(8);
                            if (errCode.compareTo(0) != 0) {
                                System.out.println("errMsg11" + errMsg);
                                errMsg = st.getString(9);
                                System.out.println("errMsg12" + errMsg);
                                return errMsg;
                            } else {
                                return errMsg;
                            }

                        }
                    } catch (Exception e) {
                        LOGGER.log(LOGGER.ERROR, e.getMessage());
                        return "Problem in fetching the EInvoice status";
                    }

                }


            }
        } catch (Exception e) {
            e.printStackTrace();
            LOGGER.log(LOGGER.ERROR, e.getMessage());

        } finally {
            try {
                if (st != null) {
                    st.close();
                }
            } catch (Exception e) {
                e.printStackTrace();
                LOGGER.log(LOGGER.ERROR, e.getMessage());
                return errMsg;

            }
        }
        return errMsg;
    }

    public String updateOtherInvCancellation(CallableStatement st, DBTransaction trx) {
        String message = null;
        try {
            Map session = ADFContext.getCurrent().getSessionScope();
            ViewObjectImpl vo = this.getShInvoiceEOView1();
            Row r = vo.getCurrentRow();
            String BillNature = (String) r.getAttribute("BillNature");
            String orderPartyCd = (String) r.getAttribute("OrderPartyCd");
            String vin = (String) r.getAttribute("Vin");
            String dealer = (String) session.get("dealerMapCd");
            String loc = (String) session.get("locCd");
            String parent = (String) session.get("parentGroupCd");
            String comp = (String) session.get("compCode");
            String invNo = (String) r.getAttribute("InvNum");
            String invType = (String) r.getAttribute("InvType");
            //String errorMsg = null;
            if (null != BillNature && (BillNature.equalsIgnoreCase("VC") || BillNature.equalsIgnoreCase("C"))) {
                message = "Error in updating the Order Status";
                System.out.println("check11");
                String orderStatus =
                    "UPDATE SH_ORDBOOK SET ORDER_STATUS = 'A',MODIFIED_BY = '" + session.get("userCode") +
                    "',MODIFIED_DATE = SYSDATE" + " WHERE ORDER_NUM = '" + (String) r.getAttribute("OrderNum") +
                    "' AND DEALER_MAP_CD = '" + dealer + "' AND LOC_CD = '" + loc + "' AND PARENT_GROUP = '" + parent +
                    "' AND COMP_FA = '" + comp + "'";
                // 2. Create the CallableStatement for the PL/SQL block
                st = trx.createCallableStatement(orderStatus, 0);
                st.executeUpdate();
                System.out.println("check12");
                message = "Error in updating the Vehicle Master";
                /*  String gmVin ="UPDATE GM_VIN SET INV_NUM = NULL, INV_DATE = NULL,PARTY_CD = NULL,MODIFIED_BY = null ,"+
                                 " MODIFIED_DATE = SYSDATE,SELLING_DEALER_CD = NULL,SELLING_LOC_CD = NULL,"+
                                 " SELLING_PARENT_GROUP = NULL,SMIL_FSC_COUPON=NULL  WHERE VIN = '"+vin+"'";
                System.out.println("query : "+gmVin);

                st = trx.createCallableStatement(gmVin, 0);
                st.executeUpdate();
                System.out.println("check other 1");*/
                String sql1 =
                    "SELECT ENQ_NUM  FROM SH_ORDBOOK WHERE ORDER_NUM = '" + (String) r.getAttribute("OrderNum") +
                    "' AND DEALER_MAP_CD = " + dealer + " and  LOC_CD = '" + loc + "' AND PARENT_GROUP = '" + parent +
                    "' AND COMP_FA = '" + comp + "'";
                ResultSet rs1 = trx.createStatement(0).executeQuery(sql1);
                String LV_ENQ_NUM = "";
                if (rs1.next()) {
                    LV_ENQ_NUM = rs1.getString(1);
                }
                if (null != LV_ENQ_NUM && !LV_ENQ_NUM.equalsIgnoreCase("")) {
                    System.out.println("check other 2");
                    String sql2 =
                        "SELECT ENQ_VAR_SRL,REMARKS FROM RD_ENQFOLLOW WHERE ENQ_NUM = '" + LV_ENQ_NUM +
                        "' AND REMARKS LIKE '%' || '" + invNo + "' || '%' AND DEALER_MAP_CD = " + dealer +
                        " AND LOC_CD = '" + loc + "'  AND PARENT_GROUP = '" + parent + "' AND COMP_FA = '" + comp +
                        "' AND ENQ_VAR_SRL=1";
                    ResultSet rs2 = trx.createStatement(0).executeQuery(sql2);
                    String ENQ_VAR_SRL = "";
                    String REMARKS = "";
                    if (rs2.next()) {
                        ENQ_VAR_SRL = rs2.getString(1);
                        REMARKS = rs2.getString(2);
                    }

                    message = "Error in updating the Enquiry Status";
                    System.out.println("check other 3");
                    String rdEnq =
                        "UPDATE RD_ENQ SET ENQ_STATUS = 'O', MODIFIED_BY = '" + (String) session.get("userCode") +
                        "', MODIFIED_DATE = SYSDATE WHERE ENQ_NUM = '" + LV_ENQ_NUM + "' AND ENQ_VAR_SRL = 1 " +
                        "  DEALER_MAP_CD = " + dealer + " and  LOC_CD = '" + loc + "' AND PARENT_GROUP = '" + parent +
                        "' AND COMP_FA = '" + comp + "'";
                    st = trx.createCallableStatement(rdEnq, 0);
                    st.executeUpdate();
                    message = "Error in updating the Followup row";
                    System.out.println("check other 4");
                    String rdEnqFollow =
                        "UPDATE RD_ENQFOLLOW SET ENQ_FOLLOWSTATUS = 'O', REMARKS = LV_RMKS || '- Cancelled on ' || '-' ||  SYSDATE, ENQ_FOLLOW_ACT_DATE = SYSDATE " +
                        " WHERE ENQ_NUM = LV_ENQ_NUM AND ENQ_VAR_SRL = 1 AND ENQ_FOLLOWSTATUS = 'C'" +
                        " DEALER_MAP_CD = " + dealer + " and  LOC_CD = '" + loc + "' AND PARENT_GROUP = '" + parent +
                        "' AND COMP_FA = '" + comp + "'";
                    st = trx.createCallableStatement(rdEnqFollow, 0);
                    st.executeUpdate();
                }

                message = "Error in updating data";
                System.out.println("check other 5");
                String shSsi =
                    "UPDATE SH_SSI SET VALID_YN = 'N' WHERE VIN = '" + vin + "' and DOC_NUM='" + invNo + "' and " +
                    " DEALER_MAP_CD = " + dealer + " and  LOC_CD = '" + loc + "' AND PARENT_GROUP = '" + parent +
                    "' AND COMP_FA = '" + comp + "'";
                st = trx.createCallableStatement(shSsi, 0);
                st.executeUpdate();

                message = "Error in updating data";
                System.out.println("check other 6");
                String shPop =
                    "UPDATE SH_POP SET VALID_YN = 'N' WHERE VIN = '" + vin + "' and" + " DEALER_MAP_CD = " + dealer +
                    " and  LOC_CD = '" + loc + "' AND PARENT_GROUP = '" + parent + "' AND COMP_FA = '" + comp + "'";
                st = trx.createCallableStatement(shPop, 0);
                st.executeUpdate();

                message = "Error in deleting PSF/OMR rows";
                System.out.println("check other 7");
                String delVhPsf =
                    " DELETE FROM VH_PSF WHERE VIN = '" + vin + "' and PSF_TYPE IN ('PSF','OMR') and" +
                    " DEALER_MAP_CD = " + dealer + " and  LOC_CD = '" + loc + "'";
                st = trx.createCallableStatement(delVhPsf, 0);
                st.executeUpdate();

                message = "Execution failed for insertion of RIPS data";
                System.out.println("check other 8");

                String ins1 =
                    " INSERT INTO SI_RIPS(RIPS_DEALER_CD,RIPS_LOC_CD,RIPS_INV_NUM,RIPS_INV_TYPE,RIPS_PARENT_GROUP,RIPS_COMP_FA,RIPS_TIMESTAMP,RIPS_BATCHPICKED_FLAG,RIPS_INV_STATUS)" +
                    " VALUES( " + dealer + ", '" + loc + "' , '" + invNo + "' , '" + invType + "' , '" + parent +
                    "' , '" + comp + "' ,  sysdate , 'N' , 'C')";
                st = trx.createCallableStatement(ins1, 0);
                st.executeUpdate();


            }

            if (null != BillNature && BillNature.equalsIgnoreCase("C")) {
                message = "error while updating data";
                System.out.println("check other 9");
                String preInvC =
                    "UPDATE sh_pre_invoice SET ORG_INV_NUM=NULL where  PARENT_GROUP = '" + parent +
                    "' and DEALER_MAP_CD= '" + dealer + "and  LOC_CD = '" + loc + "' AND COMP_FA = '" + comp +
                    "' and ORDER_NUM='" + (String) r.getAttribute("OrderNum") + "'  and VIN= '" + vin +
                    "' AND INV_STATUS='I' AND BILL_NATURE= '" + BillNature + "'";
                st = trx.createCallableStatement(preInvC, 0);
                st.executeUpdate();
            }


            if (null != BillNature && BillNature.equalsIgnoreCase("V")) {
                message = "error while updating data";
                System.out.println("check other 10");
                String preInvV =
                    "UPDATE sh_pre_invoice SET ORG_INV_NUM=NULL where ARENT_GROUP = '" + parent +
                    "' and DEALER_MAP_CD= '" + dealer + "and  LOC_CD = '" + loc + "' AND COMP_FA = '" + comp +
                    "' and ORDER_NUM='" + (String) r.getAttribute("OrderNum") + "'  and VIN= '" + vin +
                    "' AND INV_STATUS='I' AND BILL_NATURE= '" + BillNature + "'";
                st = trx.createCallableStatement(preInvV, 0);
                st.executeUpdate();
            }

            if (null != BillNature && BillNature.equalsIgnoreCase("VC")) {
                message = "error while updating data";
                System.out.println("check other 11");
                String preInvVC =
                    "UPDATE sh_pre_invoice SET ORG_INV_NUM=NULL where PARENT_GROUP = '" + parent +
                    "' and DEALER_MAP_CD= " + dealer + " and  LOC_CD = '" + loc + "' AND COMP_FA = '" + comp +
                    "' and ORDER_NUM='" + (String) r.getAttribute("OrderNum") + "'  and VIN= '" + vin +
                    "' AND INV_STATUS='I'";
                st = trx.createCallableStatement(preInvVC, 0);
                st.executeUpdate();
            }

            if (null != BillNature && (BillNature.equalsIgnoreCase("VC") || BillNature.equalsIgnoreCase("C"))) {
                message = "Error in updating the Order Status";
                System.out.println("check123");
                String sql =
                    "select COUNT(1) as cnt FROM sh_grn sh,sd_grn sd WHERE sd.AVL_PARENT_GROUP ='" + parent +
                    "' AND sd.AVL_DLR_CD =" + dealer + " AND sd.AVL_LOC_CD ='" + loc + "' AND sd.AVL_COMP_FA ='" +
                    comp + "' AND sd.VIN = '" + vin +
                    "' and sh.DEALER_MAP_CD=SD.DEALER_MAP_CD and sh.LOC_CD= SD.LOC_CD" +
                    " and sh.COMP_FA= SD.COMP_FA and sh.GRN_NUM= SD.GRN_NUM and sh.PARENT_GROUP=SD.PARENT_GROUP";
                ResultSet rs3 = trx.createStatement(0).executeQuery(sql);
                Integer cnt = 0;
                if (rs3.next()) {
                    cnt = rs3.getInt(1);
                }
                System.out.println("check1234" + sql);
                if (cnt == 0) {
                    message = "Execution failed while updating the stock";
                } else {
                    message = "Execution failed while updating the stock";
                    System.out.println("check other 13");
                    String sqlQ =
                        "SELECT SD.PARENT_GROUP,SD.DEALER_MAP_CD,SD.LOC_CD,SD.COMP_FA FROM sh_grn sh,sd_grn sd WHERE sd.AVL_PARENT_GROUP ='" +
                        parent + "' AND sd.AVL_DLR_CD =" + dealer + " AND sd.AVL_LOC_CD ='" + loc +
                        "' AND sd.AVL_COMP_FA ='" + comp + "' AND sd.VIN ='" + vin +
                        "' AND sh.DEALER_MAP_CD=SD.DEALER_MAP_CD AND sh.LOC_CD= SD.LOC_CD AND sh.COMP_FA= SD.COMP_FA" +
                        " AND sh.GRN_NUM= SD.GRN_NUM AND sh.PARENT_GROUP=SD.PARENT_GROUP";
                    ResultSet rs4 = trx.createStatement(0).executeQuery(sqlQ);
                    String sdParent = null;
                    String sdDealerMapCd = null;
                    String sdLocCd = null;
                    String sdCompFa = null;
                    if (rs4.next()) {
                        sdParent = rs4.getString(1);
                        sdDealerMapCd = rs4.getString(2);
                        sdLocCd = rs4.getString(3);
                        sdCompFa = rs4.getString(4);
                    }

                    String sqlQ1 =
                        "SELECT MAX(STK_SRL_NUM)  FROM SH_STOCK WHERE STK_IN_DOC_NUM='" + invNo +
                        "' and DEALER_MAP_CD = " + dealer + " and  LOC_CD = '" + loc + "' AND PARENT_GROUP = '" +
                        parent + "' AND COMP_FA = '" + comp + "'";
                    ResultSet rs5 = trx.createStatement(0).executeQuery(sqlQ1);
                    Integer LV_MAX_SNO = 0;

                    if (rs5.next()) {
                        LV_MAX_SNO = rs5.getInt(1);
                    }
                    System.out.println("check other 14");
                    String shStkInv =
                        "insert into sh_stock(PARENT_GROUP, DEALER_MAP_CD, LOC_CD, COMP_FA, STK_IN_DOC_NUM, STK_SRL_NUM, STK_IN_DATE,CHASSIS_STATUS, CHASSIS_NUM, ENGINE_NUM, " +
                        "VIN, MODEL_CD, VARIANT_CD, COLOR_CD, GRN_DATE, STK_IN_DOC_TYPE, GRN_NUM, AVL_PARENT_GROUP, AVL_DEALER_MAP_CD, AVL_LOC_CD, AVL_COMP_FA, " +
                        "CREATED_DATE, CREATED_BY) (select SD.PARENT_GROUP,SD.DEALER_MAP_CD,SD.LOC_CD,SD.COMP_FA, '" +
                        invNo + "' ,nvl( '" + LV_MAX_SNO + "' ,0)+1,SYSDATE, " +
                        "SD.DAMAGE,sd.CHASSIS_NUM,sd.ENGINE_NUM,sd.vin,sd.MODEL_CD,sd.VARIANT_CD,sd.ECOLOR_CD,sh.GRN_DATE,'VSL',SD.GRN_NUM,'" +
                        parent + "', " + dealer + "," + "'" + loc + "' ,'" + comp + "',SYSDATE,'" +
                        session.get("userCode") + "' FROM sh_grn sh,sd_grn sd WHERE sd.AVL_PARENT_GROUP = '" + parent +
                        "'" + " AND sd.AVL_DLR_CD = '" + dealer + "' AND sd.AVL_LOC_CD ='" + loc +
                        "' AND sd.AVL_COMP_FA ='" + comp + "' AND sd.VIN = '" + invNo + "'" +
                        " and sh.DEALER_MAP_CD=SD.DEALER_MAP_CD and sh.LOC_CD= SD.LOC_CD and sh.COMP_FA= SD.COMP_FA and sh.GRN_NUM= SD.GRN_NUM and sh.PARENT_GROUP=SD.PARENT_GROUP)";
                    st = trx.createCallableStatement(shStkInv, 0);
                    st.executeUpdate();
                }
            }
            System.out.println("check other end" + message);
            if (null == message) {
                message = "success";
                getTransaction().commit();
            }
        }

        catch (Exception e) {
            System.out.println("check other end exception" + message);
            System.out.println("error while Updating other stock datas");
            return message;
        }
        return message;
    }

    /**
     * Container's getter for GmEclrRO1.
     * @return GmEclrRO1
     */
    public ViewObjectImpl getGmEclrRO1() {
        return (ViewObjectImpl) findViewObject("GmEclrRO1");
    }


    public void initTermsConditions() {
        ViewObjectImpl vo = this.getAmTermConditionsVO1();
        vo.executeEmptyRowSet();
    }
    public void initOrderCancel() {

    ViewObjectImpl vo1 = this.getShOrdBookCanVO1();
    vo1.executeEmptyRowSet();
    ViewObjectImpl vo2 = this.getSdOrdReasonsVO1();
    vo2.executeEmptyRowSet();
    ViewObjectImpl vo = this.getOrderCancelST1();
    vo.executeQuery();
    }
	
	public void initOrderBook() {

    ViewObjectImpl vo = this.getOrderBookingRO1();
    vo.executeQuery();
    }
	
    public void initSchemeMst() {

        ViewObjectImpl vo2 = this.getGmSchemeSMVO2();
        vo2.executeEmptyRowSet();
        ViewObjectImpl vo = this.getGmSchemeMasterTVO1();
        vo.executeQuery();
    }
    
    public void initVehicleCharges() {

        ViewObjectImpl vo2 = this.getSmVchargesVO1();
        vo2.executeEmptyRowSet();
        ViewObjectImpl vo = this.getSmVChargesTVO1();
        vo.executeQuery();
    }

    public void initInvoiceApproval() {

        ViewObjectImpl vo2 = this.getInvoiceCancelApprovalRO();
        vo2.executeEmptyRowSet();
        ViewObjectImpl vo = this.getInvoiceCancelApprovalST();
        vo.executeQuery();
    }


    public Map populateVehicleDtlsforSearch(int P_DEALER, int P_PRINCIPAL, String P_PARENT, String P_LOC_CD,
                                            String P_COMP_FA, String P_CHASSIS, String P_MODEL_CD, String P_GP_TYPE,
                                            String P_VIN) {

        Map returnMap = new HashMap<String, Object>();
        DBTransaction trx = (DBTransaction) getTransaction();
        CallableStatement st = null;
        String RegNo = null;
        String InvNum = null;
        java.sql.Date InvDate = null;
        String orderNum = null;
        java.sql.Date OrderDate = null;
        java.sql.Date AllotDate = null;
        String CustCd = null;
        String CustName = null;
        String ComAddr1 = null;
        String ComAddr2 = null;
        String ComAddr3 = null;
        String Phone = null;
        String Mobile = null;
        String ComCity = null;
        String Email = null;
        String VarrientCd = null;
        String VarrientDesc = null;
        String ColorCd = null;
        String ColorDesc = null;
        String ModelDesc = null;
        String errorMsg = "";
        int errorCode = 0;

        ViewObjectImpl gatePass = this.getGatePassVO1();
        Row gatePassR = gatePass.getCurrentRow();

        try {
            // 1. Define the PL/SQL block for the statement to invoke
            String stmt =
                "begin SP_GET_GP_CUST_VEH_DET(?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?); end;";
            // 2. Create the CallableStatement for the PL/SQL block
            st = trx.createCallableStatement(stmt, 0);
            // 3. Register the positions and types of the OUT parameters


            // 4. Set the bind values of the IN parameters
            st.setInt(1, P_DEALER);
            st.setInt(2, P_PRINCIPAL);
            st.setString(3, P_PARENT);
            st.setString(4, P_LOC_CD);
            st.setString(5, P_COMP_FA);
            st.setString(6, P_CHASSIS);
            st.setString(7, P_MODEL_CD);
            st.setString(8, P_GP_TYPE);
            // st.setString(9, P_REG_NUM);
            st.registerOutParameter(9, Types.VARCHAR);
            st.setString(10, P_VIN);
            st.registerOutParameter(11, Types.VARCHAR);
            st.registerOutParameter(12, Types.DATE); //Invoice Date
            st.registerOutParameter(13, Types.VARCHAR);
            st.registerOutParameter(14, Types.DATE);
            st.registerOutParameter(15, Types.DATE);
            st.registerOutParameter(16, Types.VARCHAR);
            st.registerOutParameter(17, Types.VARCHAR);
            st.registerOutParameter(18, Types.VARCHAR);
            st.registerOutParameter(19, Types.VARCHAR);
            st.registerOutParameter(20, Types.VARCHAR);
            st.registerOutParameter(21, Types.VARCHAR);
            st.registerOutParameter(22, Types.VARCHAR);
            st.registerOutParameter(23, Types.VARCHAR);
            st.registerOutParameter(24, Types.VARCHAR);
            st.registerOutParameter(25, Types.VARCHAR);
            st.registerOutParameter(26, Types.VARCHAR);
            st.registerOutParameter(27, Types.VARCHAR);
            st.registerOutParameter(28, Types.VARCHAR);
            st.registerOutParameter(29, Types.VARCHAR);
            st.registerOutParameter(30, Types.VARCHAR);
            st.registerOutParameter(31, Types.INTEGER);

            // 5. Execute the statement
            st.executeUpdate();
            RegNo = st.getString(9) != null ? st.getString(9) : "";
            InvNum = st.getString(11) != null ? st.getString(11) : "";
            InvDate = st.getDate(12);
            orderNum = st.getString(13) != null ? st.getString(13) : "";
            OrderDate = st.getDate(14);
            AllotDate = st.getDate(15);
            LOGGER.info("Invoice Date : " + InvDate + " Order Date : " + OrderDate + " Allot Date : " + AllotDate);
            CustCd = st.getString(16) != null ? st.getString(16) : "";
            CustName = st.getString(17) != null ? st.getString(17) : "";
            ComAddr1 = st.getString(18) != null ? st.getString(18) : "";
            ComAddr2 = st.getString(19) != null ? st.getString(19) : "";
            ComAddr3 = st.getString(20) != null ? st.getString(20) : "";
            Phone = st.getString(21) != null ? st.getString(22) : "";
            Mobile = st.getString(22) != null ? st.getString(22) : "";
            ComCity = st.getString(23) != null ? st.getString(23) : "";
            Email = st.getString(24) != null ? st.getString(24) : "";
            ModelDesc = st.getString(25) != null ? st.getString(25) : "";
            VarrientCd = st.getString(26) != null ? st.getString(26) : "";
            VarrientDesc = st.getString(27) != null ? st.getString(27) : "";
            ColorCd = st.getString(28) != null ? st.getString(28) : "";
            ColorDesc = st.getString(29) != null ? st.getString(29) : "";
            errorMsg = st.getString(30) != null ? st.getString(30) : "";
            errorCode = st.getInt(31);

        } catch (Exception sqle) {
            sqle.printStackTrace();
        } finally {
            try {
                if (st != null) {
                    st.close();
                }
            } catch (Exception e) {
                e.printStackTrace();

            }
        }
        returnMap.put("ErrorCode", errorCode);
        returnMap.put("ErrorMsg", errorMsg);
        if (errorCode > 0) {
            LOGGER.info("Error Message in  : populateVehicleDtlsforSearch() : " + errorMsg);
            return returnMap;
        } else {

            gatePassR.setAttribute("OrderDate", OrderDate);
            gatePassR.setAttribute("AllotDate", AllotDate);

            gatePassR.setAttribute("CustName", CustName);
            gatePassR.setAttribute("ComAddr1", ComAddr1);
            gatePassR.setAttribute("ComAddr2", ComAddr2);
            gatePassR.setAttribute("ComAddr3", ComAddr3);
            gatePassR.setAttribute("Phone", Phone);
            gatePassR.setAttribute("Mobile", Mobile);
            gatePassR.setAttribute("ComCity", ComCity);
            gatePassR.setAttribute("Email", Email);

            gatePassR.setAttribute("VarientDesc", VarrientDesc);

            gatePassR.setAttribute("ColorDesc", ColorCd);
            gatePassR.setAttribute("ModelDesc", ModelDesc);
        }

        return returnMap;

    }


    public void customerDeclarationAckSearch(String parentGroupCd, String dealerMapCd, String locCd, String compFa,
                                             String aprType, String invType, String invNum, String pmc) {
        ViewObjectImpl customerSt = this.getCustomerDeclarationAckST1();
        CustomerDeclarationAckSTRowImpl custRow = (CustomerDeclarationAckSTRowImpl) customerSt.getCurrentRow();
        DBTransaction trx = (DBTransaction) getTransaction();
        CallableStatement st = null;
        //Row crRow = customerSt.createRow();
        try {
            // 1. Define the PL/SQL block for the statement to invoke
            String stmt = "begin SP_OLD_CAR_DETAILS_FETCH(?,?,?,?,?,?,?,?,?,?,?); end;";
            // 2. Create the CallableStatement for the PL/SQL block
            st = trx.createCallableStatement(stmt, 0);
            // 3. Register the positions and types of the OUT parameters

            // 4. Set the bind values of the IN parameters
            st.setString(1, aprType);
            st.setString(2, parentGroupCd);
            st.setString(3, dealerMapCd);
            st.setString(4, locCd);
            st.setString(5, compFa);
            st.setString(6, invType);
            st.setString(7, invNum);
            st.setString(8, pmc);
            st.registerOutParameter(9, OracleTypes.CURSOR);
            st.registerOutParameter(10, Types.VARCHAR);
            st.registerOutParameter(11, Types.VARCHAR);
            st.executeUpdate();

            ResultSet cursor = st.getObject(9, ResultSet.class);
            while (cursor.next()) {
                //Invoice Details

                custRow.setAttribute("NewCarSoldToT", cursor.getString(1));
                custRow.setAttribute("AddressT", cursor.getString(2));
                custRow.setAttribute("PhoneT", cursor.getString(3));
                custRow.setAttribute("MICustomerNameT", cursor.getString(4));
                custRow.setAttribute("InvNumT", cursor.getString(5));
                custRow.setAttribute("InvoiceDateT", cursor.getString(6));
                custRow.setAttribute("InvoiceOrderNumT", cursor.getString(7));
                custRow.setAttribute("DealerNameT", cursor.getString(8));
                custRow.setAttribute("DealerCityT", cursor.getString(9));
                custRow.setAttribute("DealerCodeT", cursor.getString(10));

                //Old Car Customer Details
                custRow.setAttribute("OldCarCustomerNameT", cursor.getString(11));
                custRow.setAttribute("OldCarCustomerRelationWithNewCustT", cursor.getString(12));

                //Old Vehicle Details as per system
                custRow.setAttribute("OldCarRegNumT", cursor.getString(13));
                custRow.setAttribute("OldModelT", cursor.getString(14));
                custRow.setAttribute("OldSubModelT", cursor.getString(15));
                custRow.setAttribute("OldChassisNumT", cursor.getString(16));
                custRow.setAttribute("OldEngineNumT", cursor.getString(17));

                //As Certified by Customer
                custRow.setAttribute("OldCarRegNumCustT", cursor.getString(18));
                custRow.setAttribute("OldCarModelMakeCT", cursor.getString(19));
                custRow.setAttribute("OldModelCustT", cursor.getString(20));
                custRow.setAttribute("OldModelCustDescT", cursor.getString(21));
                custRow.setAttribute("OldSubModelCustT", cursor.getString(22));
                custRow.setAttribute("OldSubModelCustDescT", cursor.getString(23));
                custRow.setAttribute("OldChassisCustT", cursor.getString(24));
                custRow.setAttribute("OldEngineNumCustT", cursor.getString(25));
            }
            cursor.close();
        } catch (Exception sqle) {
            // TODO: Add catch code
            sqle.printStackTrace();
        } finally {
            try {
                st.close();
            } catch (SQLException sqle) {
                // TODO: Add catch code
                sqle.printStackTrace();
            }

        }
    }


    public String updateRecordInInvoceCustDecAck(String compFa, String dealerMapCd, String invoiceNo, String locCode,
                                                 String parentGroupCd) {
        String claimStatus = "X";
        ViewObjectImpl voiEC = this.getSdLoyltyExchClaimRO1();
        ViewCriteria vcEC = voiEC.getViewCriteria("ClaimStatusCustDecVC");
        voiEC.applyViewCriteria(vcEC, false);
        voiEC.setNamedWhereClauseParam("bind_compFa", compFa);
        voiEC.setNamedWhereClauseParam("bind_dealerMapCd", dealerMapCd);
        voiEC.setNamedWhereClauseParam("bind_invoiceNumber", invoiceNo);
        voiEC.setNamedWhereClauseParam("bind_locCode", locCode);
        voiEC.setNamedWhereClauseParam("bind_parentGroupCd", parentGroupCd);
        voiEC.executeQuery();
        RowSetIterator rsiEC = voiEC.createRowSetIterator(null);
        while (rsiEC.hasNext()) {
            Row rowEC = rsiEC.next();
            if (rowEC.getAttribute("ClaimStatus") != null) {
                claimStatus = (String) rowEC.getAttribute("ClaimStatus");
            }
        }
        rsiEC.closeRowSetIterator();


        if (!claimStatus.equalsIgnoreCase("A")) {
            ViewObjectImpl voiCustDec = this.getCustomerDeclarationAckST1();
            ViewObjectImpl voiInv = this.getShInvoiceForCustDecAckVO1();
            ViewCriteria vc = voiInv.getViewCriteria("CustDecAckVC");
            voiInv.applyViewCriteria(vc, false);
            voiInv.setNamedWhereClauseParam("bind_compFa", compFa);
            voiInv.setNamedWhereClauseParam("bind_dealerMapCd", dealerMapCd);
            voiInv.setNamedWhereClauseParam("bind_invoiceNo", voiCustDec.getCurrentRow().getAttribute("InvNumT"));
            voiInv.setNamedWhereClauseParam("bind_locCode", locCode);
            voiInv.setNamedWhereClauseParam("bind_parentGroupCd", parentGroupCd);
            voiInv.executeQuery();
            RowSetIterator rsi = voiInv.createRowSetIterator(null);
            while (rsi.hasNext()) {
                Row row = rsi.next();
                row.setAttribute("OldCarRegNumC", voiCustDec.getCurrentRow().getAttribute("OldCarRegNumCustT"));
                row.setAttribute("OldCarModelMakeC", voiCustDec.getCurrentRow().getAttribute("OldCarModelMakeCT"));
                row.setAttribute("OldCarModelC", voiCustDec.getCurrentRow().getAttribute("OldModelCustT"));
                row.setAttribute("OldCarSubModelC", voiCustDec.getCurrentRow().getAttribute("OldSubModelCustT"));
                row.setAttribute("OldCarChassisC", voiCustDec.getCurrentRow().getAttribute("OldChassisCustT"));
                row.setAttribute("OldCarEngineC", voiCustDec.getCurrentRow().getAttribute("OldEngineNumCustT"));
            }
            rsi.closeRowSetIterator();
        }
        return null;
    }

    /**
     * Container's getter for AmDealerLocRO1.
     * @return AmDealerLocRO1
     */
    public ViewObjectImpl getAmDealerLocRO1() {
        return (ViewObjectImpl) findViewObject("AmDealerLocRO1");
    }

    /**
     * Container's getter for ShInvoiceForCustDecAckVO1.
     * @return ShInvoiceForCustDecAckVO1
     */
    public ViewObjectImpl getShInvoiceForCustDecAckVO1() {
        return (ViewObjectImpl) findViewObject("ShInvoiceForCustDecAckVO1");
    }

    /**
     * Container's getter for SdLoyltyExchClaimRO1.
     * @return SdLoyltyExchClaimRO1
     */
    public ViewObjectImpl getSdLoyltyExchClaimRO1() {
        return (ViewObjectImpl) findViewObject("SdLoyltyExchClaimRO1");
    }

    /**
     * Container's getter for SdLoyltyExchClaimEOView1.
     * @return SdLoyltyExchClaimEOView1
     */
    public SdLoyltyExchClaimEOViewImpl getSdLoyltyExchClaimEOView1() {
        return (SdLoyltyExchClaimEOViewImpl) findViewObject("SdLoyltyExchClaimEOView1");
    }

    /**
     * Container's getter for SalesTypeLOV1.
     * @return SalesTypeLOV1
     */
    public ViewObjectImpl getSalesTypeLOV1() {
        return (ViewObjectImpl) findViewObject("SalesTypeLOV1");
    }

    /**
     * Container's getter for RelationLOV1.
     * @return RelationLOV1
     */
    public ViewObjectImpl getRelationLOV1() {
        return (ViewObjectImpl) findViewObject("RelationLOV1");
    }

    /**
     * The purpose of this method is to fetch and set  data in Header table(When we select order number in Header.
     * @It will return String type flag,according to this flag we are showing the message
     * form name:Pre Invoice
     * jira id:MSIL-
     * @param pmc
     * @param dealerMapCd
     * @param locCode
     * @param compFa
     * @param parentGroupCd
     * @param orderNum
     * @param orderDate
     * @param invDate
     * @param invType
     * @return
     */

    public String orderDetailsInPreInvoice(String pmc, String dealerMapCd, String locCode, String compFa,
                                           String parentGroupCd, String orderNum, Date orderDate, Date invDate,
                                           String invType) {


        LOGGER.info("pmc=>" + pmc + " \n dealerMapCd=>" + dealerMapCd + " \n locCode=>" + locCode + " " + "\n compFa=" +
                    compFa + " \n parentGroupCd=>" + parentGroupCd + " \n orderNum=" + orderNum + " " +
                    "\n orderDate=>" + orderDate + " \n invDate=>" + invDate + " \n invType=" + invType);

        ViewObjectImpl voiPreInv = this.getShPreInvoiceVO1();
        ShPreInvoiceVORowImpl preInvRow = (ShPreInvoiceVORowImpl) voiPreInv.getCurrentRow();

        String valOrd =
            validateOrderNumber(dealerMapCd, locCode, parentGroupCd, compFa, preInvRow.getOrderPartyCd(), orderNum,
                                invType, preInvRow.getBillNature());
        LOGGER.info(" validateOrderNumber return value  "+valOrd);
        
        if(valOrd != null && !valOrd.equalsIgnoreCase("Y")){
            return valOrd;
        }

        CallableStatement cst = null;
        try {
            DBTransactionImpl dbti = (DBTransactionImpl) getDBTransaction();
            cst =
                dbti.createCallableStatement(("BEGIN " +
                                              "SP_GET_ALT_ORD_DETAILS_FOR(?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?);" +
                                              "END;"), 0);
            cst.setString(1, dealerMapCd);
            cst.setString(2, pmc);
            cst.setString(3, locCode);
            cst.setString(4, compFa);
            cst.setString(5, parentGroupCd);
            cst.setString(6, invType);
            cst.setString(7, orderNum);
            cst.setObject(8, invDate);

            cst.registerOutParameter(9, Types.VARCHAR);
            cst.registerOutParameter(10, Types.VARCHAR);
            cst.registerOutParameter(11, Types.VARCHAR);
            cst.registerOutParameter(12, Types.DATE);

            cst.registerOutParameter(13, Types.VARCHAR);
            cst.registerOutParameter(14, Types.VARCHAR);
            cst.registerOutParameter(15, Types.VARCHAR);
            cst.registerOutParameter(16, Types.VARCHAR);
            cst.registerOutParameter(17, Types.VARCHAR);
            cst.registerOutParameter(18, Types.VARCHAR);
            cst.registerOutParameter(19, Types.NUMERIC);
            cst.registerOutParameter(20, Types.VARCHAR);
            cst.registerOutParameter(21, Types.VARCHAR);
            cst.registerOutParameter(22, Types.VARCHAR);
            cst.registerOutParameter(23, Types.VARCHAR);
            cst.registerOutParameter(24, Types.VARCHAR);
            cst.registerOutParameter(25, Types.VARCHAR);
            cst.registerOutParameter(26, Types.VARCHAR);
            cst.registerOutParameter(27, Types.VARCHAR);
            cst.registerOutParameter(28, Types.VARCHAR);
            cst.registerOutParameter(29, Types.VARCHAR);
            cst.registerOutParameter(30, Types.VARCHAR);
            cst.registerOutParameter(31, Types.VARCHAR);
            cst.registerOutParameter(32, Types.VARCHAR);
            cst.registerOutParameter(33, Types.VARCHAR);
            cst.registerOutParameter(34, Types.VARCHAR);
            cst.registerOutParameter(35, Types.VARCHAR);
            cst.registerOutParameter(36, Types.VARCHAR);
            cst.registerOutParameter(37, Types.NUMERIC);
            cst.registerOutParameter(38, Types.NUMERIC);
            cst.registerOutParameter(39, Types.NUMERIC);
            cst.registerOutParameter(40, Types.NUMERIC);
            cst.registerOutParameter(41, Types.NUMERIC);
            cst.registerOutParameter(42, Types.VARCHAR);
            cst.registerOutParameter(43, Types.VARCHAR);
            cst.registerOutParameter(44, Types.VARCHAR);
            cst.registerOutParameter(45, Types.VARCHAR);
            cst.registerOutParameter(46, Types.VARCHAR);
            cst.executeUpdate();

            //  preInvRow.setPriceForCd(cst.getString(9));
            //setOrderDate(cst.getString(10));
            preInvRow.setAllotNum(cst.getString(11));
            LOGGER.info("cst.getObject(12)====" + cst.getObject(12));
            if (cst.getObject(12) != null) {
                try {
                    oracle.jbo.domain.Date jboDate = new oracle.jbo.domain.Date(cst.getObject(12));
                    preInvRow.setAllotDateT(jboDate);
                } catch (SQLException sqle) {
                    // TODO: Add catch code
                    sqle.printStackTrace();
                }

            }
            //setAllotDate(cst.getString(12));
            preInvRow.setAreaCd(cst.getString(13));
            preInvRow.setSalesmanCd(cst.getString(14));
            preInvRow.setSalesType(cst.getString(15));
            preInvRow.setFiCd(cst.getString(16));
            preInvRow.setFinCashT(cst.getString(17));
            preInvRow.setBranch(cst.getString(18));
            LOGGER.info("HYPO AMOUNT==>" + cst.getObject(19));
            if (cst.getObject(19) != null) {
                preInvRow.setHypoAmt((BigDecimal) cst.getObject(19));
            } else {
//                preInvRow.setHypoAmt(new BigDecimal(0));
            }
            preInvRow.setEnqRAddress1(cst.getString(20));

            preInvRow.setEnqRAddress2(cst.getString(21));
            preInvRow.setEnqRAddress3(cst.getString(22));
            preInvRow.setEnqRCityCd(cst.getString(23));
            preInvRow.setCityDescT(cst.getString(24));
            preInvRow.setEnqRPin(cst.getString(25));
            preInvRow.setModelCdT(cst.getString(26));
            preInvRow.setModelDescT(cst.getString(27));

            preInvRow.setVariantCd(cst.getString(28));
            preInvRow.setVariantDescT(cst.getString(29));
            preInvRow.setEcolorCd(cst.getString(30));
            preInvRow.setIcolorCd(cst.getString(30));
            preInvRow.setColorDescT(cst.getString(31));
            preInvRow.setVin(cst.getString(32));
            preInvRow.setChassisNum(cst.getString(33));

            preInvRow.setEngineNum(cst.getString(34));
            preInvRow.setEnginePf(cst.getString(35));
            preInvRow.setKeyNum(cst.getString(36));
            preInvRow.setInterestAmt(BigDecimal.ZERO);
            preInvRow.setTdsAmt(BigDecimal.ZERO);
            System.out.println("Book Amt---" + cst.getObject(37));
            if (cst.getObject(37) != null) {
                preInvRow.setBookingAmt((BigDecimal) cst.getObject(37));
            } else {
                preInvRow.setBookingAmt(BigDecimal.ZERO);
            }
            System.out.println("Recd Amt---" + cst.getObject(38));
            if (cst.getObject(38) != null) {
                preInvRow.setRecdAmt((BigDecimal) cst.getObject(38));
            } else {
                preInvRow.setRecdAmt(BigDecimal.ZERO);
            }
            System.out.println("Sell Amt---" + cst.getObject(39));
            if (cst.getObject(39) != null) {
                preInvRow.setSellPrice((BigDecimal) cst.getObject(39));
            } else {
                preInvRow.setSellPrice(BigDecimal.ZERO);
            }
            System.out.println("Accesory Amt---" + cst.getObject(40));
            if (cst.getObject(40) != null) {
                preInvRow.setAccessoryPrice((BigDecimal) cst.getObject(40));
            } else {
                preInvRow.setAccessoryPrice(BigDecimal.ZERO);
            }
            preInvRow.setNdpT(cst.getBigDecimal(41));
            preInvRow.setRelation(cst.getString(42));
            preInvRow.setRelationName(cst.getString(43));
            preInvRow.setVehicleStatusT(cst.getString(44));
            try {
                preInvRow.setGstnDealer(gstDealerPreInvoice(dealerMapCd, locCode, parentGroupCd));
            } catch (Exception e) {
                e.printStackTrace();
            }
            try {
                System.out.println("BEFORE FETCH HSN");
                preInvRow.setHsn(fetchHsnNumber(preInvRow.getVin(), preInvRow.getVariantCd(), pmc));
                System.out.println("AFTER FETCH HSN");
            } catch (Exception e) {
                e.printStackTrace();
            }


            try {
                java.sql.Timestamp datetime = new java.sql.Timestamp(System.currentTimeMillis());
                oracle.jbo.domain.Date daTime = new oracle.jbo.domain.Date(datetime);
                preInvRow.setCreatedDate(daTime);
            } catch (Exception e) {
                // TODO: Add catch code
                e.printStackTrace();
            }


        } catch (SQLException sqle) {
            // TODO: Add catch code
            sqle.printStackTrace();
        } finally {
            try {
                cst.close();
            } catch (SQLException sqle) {
                sqle.printStackTrace();
            }
        }
        return null;
    }

    public String validateInvoiceNumCustDecAck(String dealerMapCd, String parentGroupCd, String locCode, String compFa,
                                               String invNum, String salesType) {
        System.out.println("SALES TYPE IS" + salesType);
        String flag = "N";
        try {
            ViewObjectImpl voiEClaim = this.getSdLoyltyExchClaimRO1();
            ViewObjectImpl voiInv = this.getShInvoiceForCustDecAckVO1();
            String ECWhere =
                " dealer_map_cd='" + dealerMapCd + "' AND " + "parent_group='" + parentGroupCd + "' AND loc_cd='" +
                locCode + "' AND comp_fa='" + compFa + "' AND inv_num='" + invNum +
                "' AND inv_status IN('D') AND  CLAIM_STATUS not in ('T','R') AND reversal_date is null";
            String invWhere =
                " dealer_map_cd='" + dealerMapCd + "' AND " + "parent_group='" + parentGroupCd + "' AND loc_cd='" +
                locCode + "' AND comp_fa='" + compFa + "'AND inv_num='" + invNum +
                "' AND inv_status='I' AND bill_nature IN ('V','VC') AND ((exchange_flag = 'Y') OR (loyal_bonus_flag= 'Y'))";
            if (salesType != null && salesType.equalsIgnoreCase("D")) {
                System.out.println("WHEN SALES TYPE IS D=>" + salesType);
                voiEClaim.setWhereClause(ECWhere);
                voiEClaim.executeQuery();
                if (voiEClaim.getEstimatedRowCount() > 0) {
                    flag = "Y";
                }
            } else {
                voiInv.setWhereClause(invWhere);
                voiInv.executeQuery();
                if (voiInv.getEstimatedRowCount() > 0) {
                    flag = "Y";
                }

            }
        } catch (Exception e) {
            flag = "N";
            // TODO: Add catch code
            e.printStackTrace();
        }

        return flag;
    }

    public void resetCustomerDecAck() {
        this.getCustomerDeclarationAckST1().executeQuery();
    }

    /**
     * Container's getter for SalesCertificateDualRVO1.
     * @return SalesCertificateDualRVO1
     */
    public SalesCertificateDualRVOImpl getSalesCertificateDualRVO1() {
        return (SalesCertificateDualRVOImpl) findViewObject("SalesCertificateDualRVO1");
    }

    /** Container's getter for StDeliveryNoteVO1.
     * @return StDeliveryNoteVO1
     */
    public ViewObjectImpl getStDeliveryNoteVO1() {
        return (ViewObjectImpl) findViewObject("StDeliveryNoteVO1");
    }

    /**
     * Container's getter for SdGrnDelNoteRO1.
     * @return SdGrnDelNoteRO1
     */
    public ViewObjectImpl getSdGrnDelNoteRO1() {
        return (ViewObjectImpl) findViewObject("SdGrnDelNoteRO1");
    }

    /**
     * Container's getter for SdGrnRO1.
     * @return SdGrnRO1
     */
    public ViewObjectImpl getSdGrnRO1() {
        return (ViewObjectImpl) findViewObject("SdGrnRO1");
    }

    /**
     * Container's getter for DeliveryNoteST1.
     * @return DeliveryNoteST1
     */
    public ViewObjectImpl getDeliveryNoteST1() {
        return (ViewObjectImpl) findViewObject("DeliveryNoteST1");
    }

    /**
     * Container's getter for SdGrnModelLOV1.
     * @return SdGrnModelLOV1
     */
    public ViewObjectImpl getSdGrnModelLOV1() {
        return (ViewObjectImpl) findViewObject("SdGrnModelLOV1");
    }

    /**
     * This method is used to execute SpValidateVinDelnote procedure and fetch details related to the vehicle.
     */
    public String exeSpValidateVinDelnote(String prtGrp, int dealer, String pmc, String locCd, String compFa,
                                          String vin) {
        String invNum = null;
        java.util.Date invDate;
        String altNum = null;
        java.util.Date altDate;
        String errMsg = null;
        int errCd = 0;
        CallableStatement cs = null;
        try {
            String stmt = "begin SP_VALIDATE_VIN_DELNOTE(?,?,?,?,?,?,?,?,?,?,?,?); end;";
            DBTransaction dbtxn = (DBTransaction) getTransaction();
            cs = dbtxn.createCallableStatement(stmt.toString(), 1);
            cs.setString(1, prtGrp);
            cs.setInt(2, dealer);
            cs.setString(3, pmc);
            cs.setString(4, locCd);
            cs.setString(5, compFa);
            cs.setString(6, vin);
            cs.registerOutParameter(7, Types.VARCHAR);
            cs.registerOutParameter(8, Types.DATE);
            cs.registerOutParameter(9, Types.VARCHAR);
            cs.registerOutParameter(10, Types.DATE);
            cs.registerOutParameter(11, Types.VARCHAR);
            cs.registerOutParameter(12, Types.INTEGER);
            cs.executeUpdate();
            invNum = cs.getString(7);
            invDate = cs.getDate(8);
            altNum = cs.getString(9);
            altDate = cs.getDate(10);
            errMsg = cs.getString(11);
            errCd = cs.getInt(12);
            if (errMsg == null) {
                Row r = this.getStDeliveryNoteVO1().getCurrentRow();
                r.setAttribute("InvNum", invNum);
                r.setAttribute("InvDate", invDate);
                r.setAttribute("AltNum", altNum);
                r.setAttribute("AltDate", altDate);
                r.setAttribute("Vin", vin);
            }
        } catch (SQLException sqle) {
            // TODO: Add catch code
            sqle.printStackTrace();
        } finally {
            try {
                if (cs != null) {
                    cs.close();
                }
            } catch (Exception e) {
            }
        }
        return errMsg;
    }

    /**
     * Container's getter for FinancialControlNumLOV1.
     * @return FinancialControlNumLOV1
     */
    public ViewObjectImpl getFinancialControlNumLOV1() {
        return (ViewObjectImpl) findViewObject("FinancialControlNumLOV1");
    }

    /**
     * Container's getter for CSDExchangeRO1.
     * @return CSDExchangeRO1
     */
    public ViewObjectImpl getCSDExchangeRO1() {
        return (ViewObjectImpl) findViewObject("CSDExchangeRO1");
    }

    /**
     * This method is used to execute SpVinDelnote procedure and populate details related to the vehicle.
     */
    public String exeSpVinDelnote(String prtGrp, int dealer, String pmc, String locCd, String compFa, String vin) {
        String errMsg = null;
        int errCd = 0;
        CallableStatement cs = null;
        try {
            String stmt = "begin Sp_vin_delnote(?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?); end;";
            DBTransaction dbtxn = (DBTransaction) getTransaction();
            cs = dbtxn.createCallableStatement(stmt.toString(), 1);
            cs.setString(1, prtGrp);
            cs.setInt(2, dealer);
            cs.setString(3, pmc);
            cs.setString(4, locCd);
            cs.setString(5, compFa);
            cs.setString(6, vin);
            cs.registerOutParameter(7, Types.VARCHAR);
            cs.registerOutParameter(8, Types.VARCHAR);
            cs.registerOutParameter(9, Types.VARCHAR);
            cs.registerOutParameter(10, Types.VARCHAR);
            cs.registerOutParameter(11, Types.VARCHAR);
            cs.registerOutParameter(12, Types.VARCHAR);
            cs.registerOutParameter(13, Types.VARCHAR);
            cs.registerOutParameter(14, Types.VARCHAR);
            cs.registerOutParameter(15, Types.VARCHAR);
            cs.registerOutParameter(16, Types.VARCHAR);
            cs.registerOutParameter(17, Types.VARCHAR);
            cs.registerOutParameter(18, Types.VARCHAR);
            cs.registerOutParameter(19, Types.VARCHAR);
            cs.registerOutParameter(20, Types.VARCHAR);
            cs.registerOutParameter(21, Types.VARCHAR);
            cs.registerOutParameter(22, Types.INTEGER);
            cs.executeUpdate();
            errMsg = cs.getString(21);
            errCd = cs.getInt(22);
            Row r = this.getStDeliveryNoteVO1().getCurrentRow();
            if (errMsg == null) {
                r.setAttribute("DnNum", cs.getString(7));
                r.setAttribute("colorDesc", cs.getString(8));
                r.setAttribute("variantDesc", cs.getString(9));
                r.setAttribute("CustDesc", cs.getString(10));
                r.setAttribute("Model", cs.getString(11));
                r.setAttribute("ModelDesc", cs.getString(12));
                r.setAttribute("VariantCd", cs.getString(13));
                r.setAttribute("ColorCd", cs.getString(14));
                r.setAttribute("Engine", cs.getString(15));
                r.setAttribute("ChassisNum", cs.getString(16));
                r.setAttribute("KeyNum", cs.getString(17));
                r.setAttribute("OrderNum", cs.getString(18));
                r.setAttribute("CustCd", cs.getString(19));
                r.setAttribute("Hyp", cs.getString(20));

                // ADFUtils.showMessage(2, errMsg1);
                ViewObjectImpl vo1 = this.getStDeliveryNoteRO1();
                ViewCriteria vc1 = vo1.getViewCriteria("StDeliveryNoteROCriteria");
                vo1.applyViewCriteria(vc1);
                vo1.setNamedWhereClauseParam("bind_compFa", compFa);
                vo1.setNamedWhereClauseParam("bind_dlrCd", dealer);
                vo1.setNamedWhereClauseParam("bind_locCd", locCd);
                vo1.setNamedWhereClauseParam("bind_prtGrp", prtGrp);
                vo1.setNamedWhereClauseParam("bind_vin", vin);
                System.out.println("QUERY-->" + vo1.getQuery());
                vo1.executeQuery();
                Row r1 = vo1.first();
                if (r1 != null) {
                    System.out.println(r1.getAttribute("DnDate"));
                    Date dnDate = r1.getAttribute("DnDate") == null ? null : (Date) r1.getAttribute("DnDate");
                    Date regDate = (Date) r1.getAttribute("RegDate");
                    String regNum = (String) r1.getAttribute("RegNum");
                    String rtoName = (String) r1.getAttribute("RtoName");
                    String delayReason = (String) r1.getAttribute("DelayReason");
                    r.setAttribute("RegNum", regNum);
                    r.setAttribute("RtoName", rtoName);
                    r.setAttribute("RegDate", regDate);
                    r.setAttribute("DelayReason", delayReason);
                    r.setAttribute("DnDate", dnDate);
                }
            } else {
                r.setAttribute("InvNum", null);
                r.setAttribute("InvDate", null);
                r.setAttribute("AltNum", null);
                r.setAttribute("AltDate", null);
                r.setAttribute("Vin", null);
            }

        } catch (SQLException sqle) {
            // TODO: Add catch code
            sqle.printStackTrace();
        } finally {
            try {
                if (cs != null) {
                    cs.close();
                }
            } catch (Exception e) {
            }
        }
        return errMsg;
    }


    /**
     * Container's getter for StDeliveryNoteRO1.
     * @return StDeliveryNoteRO1
     */
    public ViewObjectImpl getStDeliveryNoteRO1() {
        return (ViewObjectImpl) findViewObject("StDeliveryNoteRO1");
    }

    /**
     * Container's getter for SmVchargesAndAmCtypeRO1.
     * @return SmVchargesAndAmCtypeRO1
     */
    public ViewObjectImpl getSmVchargesAndAmCtypeRO1() {
        return (ViewObjectImpl) findViewObject("SmVchargesAndAmCtypeRO1");
    }

    /**
     * Container's getter for ShOrdbookAndShOrdChargesPreInvRO1.
     * @return ShOrdbookAndShOrdChargesPreInvRO1
     */
    public ViewObjectImpl getShOrdbookAndShOrdChargesPreInvRO1() {
        return (ViewObjectImpl) findViewObject("ShOrdbookAndShOrdChargesPreInvRO1");
    }

    /**
     * Container's getter for ShPreInvoiceSdPreInvChargesRO1.
     * @return ShPreInvoiceSdPreInvChargesRO1
     */
    public ViewObjectImpl getShPreInvoiceSdPreInvChargesRO1() {
        return (ViewObjectImpl) findViewObject("ShPreInvoiceSdPreInvChargesRO1");
    }

    /**
     * Container's getter for ShPreInvChargeAmtRO1.
     * @return ShPreInvChargeAmtRO1
     */
    public ViewObjectImpl getShPreInvChargeAmtRO1() {
        return (ViewObjectImpl) findViewObject("ShPreInvChargeAmtRO1");
    }

    /**
     * This method is used to execute sp_validate_alphanumeric procedure.
     */
    public void exeSpValidateAlphanumeric(String rto) {
        CallableStatement cs = null;
        try {
            String stmt = "begin sp_validate_alphanumeric(?); end;";
            DBTransaction dbtxn = (DBTransaction) getTransaction();
            cs = dbtxn.createCallableStatement(stmt.toString(), 1);
            cs.setString(1, rto);
            cs.executeUpdate();
        } catch (SQLException sqle) {
            // TODO: Add catch code
            sqle.printStackTrace();
        } finally {
            try {
                if (cs != null) {
                    cs.close();
                }
            } catch (Exception e) {
            }

        }
    }

    /**
     * Container's getter for GmVinCountRO1.
     * @return GmVinCountRO1
     */
    public ViewObjectImpl getGmVinCountRO1() {
        return (ViewObjectImpl) findViewObject("GmVinCountRO1");
    }


    /**
     * Container's getter for DetailsForSdGrnLOV1.
     * @return DetailsForSdGrnLOV1
     */
    public DetailsForSdGrnLOVImpl getDetailsForSdGrnLOV1() {
        return (DetailsForSdGrnLOVImpl) findViewObject("DetailsForSdGrnLOV1");
    }


    /**
     * Container's getter for CountVINForSdGrnLOV1.
     * @return CountVINForSdGrnLOV1
     */
    public CountVINForSdGrnLOVImpl getCountVINForSdGrnLOV1() {
        return (CountVINForSdGrnLOVImpl) findViewObject("CountVINForSdGrnLOV1");
    }

    /**
     * Container's getter for SdGrnVO2.
     * @return SdGrnVO2
     */
    public SdGrnVOImpl getSdGrnVO2() {
        return (SdGrnVOImpl) findViewObject("SdGrnVO2");
    }

    /**
     * Container's getter for ShGrnVOToSdGrnVO1.
     * @return ShGrnVOToSdGrnVO1
     */
    public ViewLinkImpl getShGrnVOToSdGrnVO1() {
        return (ViewLinkImpl) findViewLink("ShGrnVOToSdGrnVO1");
    }

    /**
     * Container's getter for GRNSearchDualRO1.
     * @return GRNSearchDualRO1
     */
    public ViewObjectImpl getGRNSearchDualRO1() {
        return (ViewObjectImpl) findViewObject("GRNSearchDualRO1");
    }

    /**
     * Container's getter for GRNSearchResultsRO1.
     * @return GRNSearchResultsRO1
     */
    public GRNSearchResultsROImpl getGRNSearchResultsRO1() {
        return (GRNSearchResultsROImpl) findViewObject("GRNSearchResultsRO1");
    }

    /**
     * Container's getter for SdDeliveryDetailsVO1.
     * @return SdDeliveryDetailsVO1
     */
    public ViewObjectImpl getSdDeliveryDetailsVO1() {
        return (ViewObjectImpl) findViewObject("SdDeliveryDetailsVO1");
    }

    /**
     * Container's getter for DeliveryChecklistVO1.
     * @return DeliveryChecklistVO1
     */
    public ViewObjectImpl getDeliveryChecklistVO1() {
        return (ViewObjectImpl) findViewObject("DeliveryChecklistVO1");
    }

    /**
     * Container's getter for SdDeliveryDetailsVO2.
     * @return SdDeliveryDetailsVO2
     */
    public ViewObjectImpl getSdDeliveryDetailsForDelCheckVO() {
        return (ViewObjectImpl) findViewObject("SdDeliveryDetailsForDelCheckVO");
    }

    /**
     * Container's getter for ShOrdbookShOrdChargesRO1.
     * @return ShOrdbookShOrdChargesRO1
     */
    public ViewObjectImpl getShOrdbookShOrdChargesRO1() {
        return (ViewObjectImpl) findViewObject("ShOrdbookShOrdChargesRO1");
    }


    /**
     * The purpose of set data in detail table(When we select order number in Header.
     * @It will return String type flag,according to this flag we are showing the message
     * form name:Pre Invoice
     * jira id:MSIL-
     * @param dealerMapCd
     * @param parentGroupCd
     * @param locCode
     * @param ordNum
     * @param compFa
     * @param pmc
     * @param variantCd
     * @param colorCd
     * @param custType
     *  @param invType
     * @param areaCd
     * @param invDate
     * @param billNature
     * @param ordInv
     * @return
     */
    public String preInvoiceDetails(String dealerMapCd, String parentGroupCd, String locCode, String compFa,
                                    String ordNum, String pmc, String variantCd, String colorCd, String custType,
                                    String invType, String areaCd, Date invDate, String billNature, String ordInv) {
        try {
            System.out.println("dealerMapCd=>" + dealerMapCd + " \n parentGroupCd=>" + parentGroupCd + "\n locCode=>" +
                               locCode + " \n " + "compFa=>" + compFa + " \n ordNum=>" + ordNum + " \n pmc=>" + pmc +
                               " \n variantCd=>" + variantCd + " \n colorCd" + colorCd + " \n" + "custType=>" +
                               custType + " \n invType=>" + invType + " \n areaCd=>" + areaCd + " \n invDate=>" +
                               invDate + "\n billNature=>" + billNature + " \n ordInv=>" + ordInv);
            ViewObjectImpl voiShPreInv = this.getShPreInvoiceVO1();
            String kcesState = "N";
            String custGstNum = null;
            String sellingPriceFor = voiShPreInv.getCurrentRow()
                                                .getAttribute("PriceForCd")
                                                .toString();
            String custCd = voiShPreInv.getCurrentRow()
                                       .getAttribute("OrderPartyCd")
                                       .toString();

            SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd");
            String invDt = sdf.format(invDate.dateValue());

            String query88 = null;
            ResultSet rs88;
            BigDecimal sellPriceL = BigDecimal.ZERO;
            BigDecimal sellPriceC = BigDecimal.ZERO;
            query88 =
                "  SELECT SELL_PRICE_L, SELL_PRICE_C, ACCESSORY_PRICE, ND_PRICE  " + "    FROM SM_SPRICE_FOR  " +
                "   WHERE MUL_FOR_CD = '" + sellingPriceFor + "'  " + "    AND VARIANT_CD = '" + variantCd + "'  " +
                "   AND COLOR_IND = (SELECT CTYPE_CD  " + "                       FROM GM_ECLR  " +
                "               WHERE ECOLOR_CD = '" + colorCd + "'  " + "                 AND PRINCIPAL_MAP_CD = '" +
                pmc + "')  " +
                "                AND SALES_TYPE = DECODE('IND','HNC','IND','N2N','IND','LEA','IND','IND')  " +
                "    AND (to_date('" + invDt + "','yyyy-MM-dd') >= FROM_DATE AND to_date('" + invDt +
                "','yyyy-MM-dd') <= NVL(TO_DATE, SYSDATE))  " + "    and principal_map_cd = '" + pmc + "'";
            rs88 = getDBTransaction().createStatement(0).executeQuery(query88);
            if (rs88.next()) {
                sellPriceL = rs88.getBigDecimal("SELL_PRICE_L");
                sellPriceC = rs88.getBigDecimal("SELL_PRICE_C");
                BigDecimal sellPriceL1 = sellPriceL;
                BigDecimal sellPriceC1 = sellPriceC;


                if (invType.equals("VSL")) {
                    voiShPreInv.getCurrentRow().setAttribute("SellPrice", sellPriceL1);

                } else if (invType.equals("VSC")) {
                    voiShPreInv.getCurrentRow().setAttribute("SellPrice", sellPriceC1);
                }
            }


            System.out.println("Sell main Pricde---" + voiShPreInv.getCurrentRow().getAttribute("SellPrice"));
            if (voiShPreInv.getCurrentRow().getAttribute("CustGstNumT") != null) {
                custGstNum = voiShPreInv.getCurrentRow()
                                        .getAttribute("CustGstNumT")
                                        .toString();
            }

            if (voiShPreInv.getCurrentRow().getAttribute("KcesStateT") != null) {
                kcesState = voiShPreInv.getCurrentRow()
                                       .getAttribute("KcesStateT")
                                       .toString();
            }

            if (!invType.equalsIgnoreCase("VSC")) {
                if (voiShPreInv.getCurrentRow().getAttribute("DealerGstStCdT") != null) {
                    areaCd = voiShPreInv.getCurrentRow()
                                        .getAttribute("DealerGstStCdT")
                                        .toString();
                    System.out.println("code11---" + voiShPreInv.getCurrentRow()
                                                                .getAttribute("DealerGstStCdT")
                                                                .toString());
                }
            }
            System.out.println("area Cod---" + areaCd);
            String vcm = null;
            String vlc = null;
            String vcess = null;

            if (invType.equalsIgnoreCase("VSL") && billNature.equalsIgnoreCase("V")) {
                vlc = "L";
                vcm = " ";
                vcess = "R";
            } else if (invType.equalsIgnoreCase("VSL") && billNature.equalsIgnoreCase("C")) {
                vlc = " ";
                vcm = "M";
                vcess = " ";

            }

            else if (invType.equalsIgnoreCase("VSL") && billNature.equalsIgnoreCase("VC")) {
                vlc = "L";
                vcm = "M";
                vcess = "R";
            }

            else if (invType.equalsIgnoreCase("VSC") && billNature.equalsIgnoreCase("V")) {
                vlc = "C";
                vcm = " ";
                vcess = "R";

            }

            else if (invType.equalsIgnoreCase("VSC") && billNature.equalsIgnoreCase("C")) {
                vlc = " ";

                vcm = "M";
                vcess = " ";

            }

            else if (invType.equalsIgnoreCase("VSL") && billNature.equalsIgnoreCase("VC")) {
                vlc = "C";
                vcm = "M";
                vcess = "R";

            }
            System.out.println(vlc + "date---" + vcm + "---" + vcess);
            LOGGER.info("INSIDE DETAILS DATA");
            //LOGGER.info("INSIDE DETAILS DATA");
            //ViewObjectImpl voi1 = this.getSmVchargesAndAmCtypeRO1();
            ViewObjectImpl voiChargePi = this.getShOrdbookAndShOrdChargesPreInvRO1();
            ViewObjectImpl voiFiCnt = this.getShPreInvoiceSdPreInvChargesRO1();
            ViewObjectImpl voiFiAmt1 = this.getShPreInvChargeAmtRO1();

            ViewObjectImpl voiFiAmt2 = this.getShOrdbookShOrdChargesRO1();
            //ShOrdbookShOrdChargesRO1
            Integer cnt = 0;
            //            ViewObjectImpl voiSdDtl1 = this.getSdPreInvChargesVO1();
            //            voiSdDtl1.executeEmptyRowSet();
            ViewObjectImpl voiSdDtl = this.getSdPreInvChargesVO1();
            
            RowSetIterator deleteChargsItr = voiSdDtl.createRowSetIterator(null);
            while(deleteChargsItr.hasNext()){
                deleteChargsItr.next().remove();
            }
            deleteChargsItr.closeRowSetIterator();
            

            //  voi1.setNamedWhereClauseParam("bind_areaCd", areaCd);
            //voi1.setNamedWhereClauseParam("bind_colorCd", colorCd);
            //voi1.setNamedWhereClauseParam("bind_custType", custType);
            //voi1.setNamedWhereClauseParam("bind_dealerMapCd", dealerMapCd);
            //voi1.setNamedWhereClauseParam("bind_invDate", invDate);
            //voi1.setNamedWhereClauseParam("bind_locCode", locCode);
            //voi1.setNamedWhereClauseParam("bind_variantCd", variantCd);
            //voi1.setNamedWhereClauseParam("bind_parentGroup", parentGroupCd);
            //voi1.setNamedWhereClauseParam("bind_pmc", pmc);
            //voi1.setNamedWhereClauseParam("bind_vcess", vcess);
            //voi1.setNamedWhereClauseParam("bind_vcm", vcm);
            //voi1.setNamedWhereClauseParam("bind_vlc", vlc);
            //voi1.executeQuery();
            String generation = "";
            //System.out.println(voi1.getRowCount()+"INSIDE DETAILS DATA voi1.getEstimatedRowCount() " + voi1.getEstimatedRowCount());
            //System.out.println("QUERY IS=============" + voi1.getQuery());
            BigDecimal dummyChargeTotal = BigDecimal.ZERO;

            //                generation =
            //                    preInvoiceNumberGeneration(Integer.parseInt(dealerMapCd), pmc, locCode, compFa, "PRI", 2020);
            //                LOGGER.info("GENERATION==========" + generation);
            //

//            BigDecimal sellingPrice = new BigDecimal(voiShPreInv.getCurrentRow()
//                                                                .getAttribute("SellPrice")
//                                                                .toString());
            String query66 = null;
            ResultSet rs66;
            String chargeCd = null, chargeType = null, chargeInd = null, chargeValue = null, commonind =
                null, modifyYn = null;
            query66 =
                "  SELECT A.CHARGE_CD,A.CHARGE_TYPE,A.CHARGE_IND,A.CHARGE_VALUE,A.COMMON_IND,B.MODIFY_YN,' ' X   " +
                "     FROM SM_VCHARGES A, AM_CTYPE B     " + "    WHERE A.VARIANT_CD ='" + variantCd + "'     " +
                "    AND A.COLOR_IND = (SELECT CTYPE_CD FROM GM_ECLR WHERE ECOLOR_CD = '" +colorCd+ "' AND PRINCIPAL_MAP_CD = '" +
                pmc + "')     " + "     AND A.AREA_CD in ('" + areaCd + "','ZZ')     " +
                "     AND A.CUSTOMER_TYPE = DECODE('" + custType +
                "','CSD','IND','CPC','IND','INC','IND','N2N','IND','LEA','IND','" + custType + "')   " +
                "  AND to_date('" + invDt + "','yyyy-MM-dd') BETWEEN A.FROM_DATE AND NVL(A.TO_DATE,SYSDATE)     " +
                "    AND A.COMMON_IND IN ('" + vcess + "','" + vcm + "','" + vlc + "')     " +
                "      AND A.DEALER_MAP_CD = '" + dealerMapCd + "'     " + "     AND A.LOC_CD = '" + locCode +
                "'     " + "    AND A.PARENT_GROUP = '" + parentGroupCd + "'     " +
                "     AND A.CHARGE_TYPE = B.CHARGE_TYPE    " + "     AND B.DEALER_MAP_CD = A.DEALER_MAP_CD    " +
                "     AND B.LOC_CD = A.LOC_CD     " +
                "      AND B.CHARGE_TYPE NOT IN ('ETW','EX1','EX3','EX4','EXE','EXT','EXV','EXW','MEW','SA3',    " +
                "  'SAI','VAE','VEX','WAR','WC','CTR','STR','ITR','TFP','TFN','THP','THN')    " +
                "   ORDER BY A.CHARGE_SRL";
            System.out.println("query---" + query66);
            rs66 = getDBTransaction().createStatement(0).executeQuery(query66);
            //   System.out.println(rs66.leng);

            while (rs66.next()) {
                System.out.println("View Count---" + voiSdDtl.getRowCountInRange());
                chargeCd = rs66.getString("CHARGE_CD");
                chargeType = rs66.getString("CHARGE_TYPE");
                chargeInd = rs66.getString("CHARGE_IND");
                chargeValue = rs66.getString("CHARGE_VALUE");
                commonind = rs66.getString("COMMON_IND");
                modifyYn = rs66.getString("MODIFY_YN");
                cnt++;
                System.out.println("Count C----" + cnt);
                LOGGER.info("************************generation****************" + generation);
                // RowSetIterator rsiVoi1 = voi1.createRowSetIterator(null);
                //while (rsiVoi1.hasNext()) {
                System.out.println("***************INSIDE***************8");
                //  Row rowVoi1 = rsiVoi1.next();
                if (kcesState.equalsIgnoreCase("Y") && invType.equalsIgnoreCase("VSC") &&
                    (chargeType != null && chargeType.toString().equalsIgnoreCase("CE1"))) {
                    System.out.println("in iff***************INSIDE***************8");
                } else if (kcesState.equalsIgnoreCase("Y") && !custGstNum.equalsIgnoreCase("GSTUNREGISTERED") &&
                           (chargeType != null && chargeType.equalsIgnoreCase("CE1"))) {
                    System.out.println("***in else if************INSIDE***************8");
                } else if (kcesState.equalsIgnoreCase("N") &&
                           (chargeType != null && chargeType.equalsIgnoreCase("CE1"))) {
                    System.out.println("*****in else iff1**********INSIDE***************8");
                } else {
                    String query1 = null;
                    ResultSet rs1;
                    String panNum = null;

                    query1 =
                        "SELECT pan_num FROM GM_CIN  WHERE cust_cd='" + custCd + "' AND PRINCIPAL_MAP_CD = '" + pmc +
                        "'";

                    rs1 = getDBTransaction().createStatement(0).executeQuery(query1);
                    if (rs1.next()) {
                        panNum = rs1.getString(1);

                    }

                    BigDecimal dummyChargeAmt = BigDecimal.ZERO;
                    BigDecimal chargeSetScaleValue = BigDecimal.ZERO;


                    System.out.println(chargeValue + "******in elseeee*********INSIDE***************8");
                    Row crRwDtl = voiSdDtl.createRow();
                    crRwDtl.setAttribute("ChargeCd", chargeCd);
                    crRwDtl.setAttribute("ChargeType", chargeType);
                    crRwDtl.setAttribute("ChargeInd", chargeInd);
//                    if (chargeCd.equals("TRTP")) {
//                        if (sellingPrice.compareTo(new BigDecimal(1000000)) == 1) {
//                            if (null == panNum) {
//                                crRwDtl.setAttribute("ChargeValue",
//                                                     new BigDecimal(5).setScale(2, RoundingMode.HALF_EVEN));
//                            } else {
//                                crRwDtl.setAttribute("ChargeValue",
//                                                     new BigDecimal(1).setScale(2, RoundingMode.HALF_EVEN));
//                            }
//
//                        } else {
//                            if (null == panNum) {
//                                crRwDtl.setAttribute("ChargeValue",
//                                                     new BigDecimal(1).setScale(2, RoundingMode.HALF_EVEN));
//                            } else {
//                                crRwDtl.setAttribute("ChargeValue",
//                                                     new BigDecimal(0.1).setScale(2, RoundingMode.HALF_EVEN));
//                            }
//                        }
//                        // crRwDtl.setAttribute("ChargeValue", new BigDecimal(0.1).setScale(2, RoundingMode.HALF_EVEN));
//                        dummyChargeAmt =
//                            (sellingPrice.add(dummyChargeTotal)).multiply(new BigDecimal(crRwDtl.getAttribute("ChargeValue").toString()))
//                            .divide(new BigDecimal(100));
//                        chargeSetScaleValue = dummyChargeAmt.setScale(2, RoundingMode.HALF_EVEN);
//
//                    } else {
//                        if(chargeInd.equalsIgnoreCase("P")){
//                        crRwDtl.setAttribute("ChargeValue", new BigDecimal(chargeValue));
//                        dummyChargeAmt = sellingPrice.multiply(new BigDecimal(chargeValue)).divide(new BigDecimal(100));
//                        chargeSetScaleValue = dummyChargeAmt.setScale(2, RoundingMode.HALF_EVEN);
//                        }else{
//                            crRwDtl.setAttribute("ChargeValue", new BigDecimal(chargeValue));
//                            dummyChargeAmt = new BigDecimal(chargeValue);
//                            chargeSetScaleValue = dummyChargeAmt.setScale(2, RoundingMode.HALF_EVEN);
//                        }
//                    }
                    crRwDtl.setAttribute("ChargeValue", new BigDecimal(chargeValue));
                    if(chargeInd.equalsIgnoreCase("A")){
                        if(chargeValue != null){
                    crRwDtl.setAttribute("ChargeAmt", new BigDecimal(chargeValue));
                            } else {
                            crRwDtl.setAttribute("ChargeAmt", BigDecimal.ZERO);                            
                            }

                            }
                    dummyChargeTotal = dummyChargeTotal.add(chargeSetScaleValue);
                    System.out.println("Dummy Charge Amtt---" + chargeSetScaleValue);
                    crRwDtl.setAttribute("CommonInd", commonind);
//                    crRwDtl.setAttribute("ChgFlag", modifyYn);
                    crRwDtl.setAttribute("ChargeSrl", cnt);
                    // crRwDtl.setAttribute("InvNum", generation);
                    crRwDtl.setAttribute("CheckBoxT", "Y");
                    //  crRwDtl.setAttribute("TotalChargeAmtT", dummyChargeTotal);

                    if (ordInv.equalsIgnoreCase("PI")) {
                        System.out.println("_____________INSIDE PI_____________");

                        voiChargePi.setNamedWhereClauseParam("bindChargeCd", chargeCd);
                        voiChargePi.setNamedWhereClauseParam("bindChargeType", chargeType);
                        voiChargePi.setNamedWhereClauseParam("bind_compFa", compFa);
                        voiChargePi.setNamedWhereClauseParam("bind_dealerMapCd", dealerMapCd);
                        voiChargePi.setNamedWhereClauseParam("bind_locCode", locCode);
                        voiChargePi.setNamedWhereClauseParam("bind_ordInv", ordInv);
                        voiChargePi.setNamedWhereClauseParam("bind_ordNum", ordNum);
                        voiChargePi.setNamedWhereClauseParam("bind_parentGroupCd", parentGroupCd);
                        voiChargePi.executeQuery();
                        System.out.println("GET ESTIMTAED ROW COUNT IN AMT TABLE=>" +
                                           voiChargePi.getEstimatedRowCount());
                        RowSetIterator rsiChargePi = voiChargePi.createRowSetIterator(null);
                        while (rsiChargePi.hasNext()) {
                            Row rowChargePi = rsiChargePi.next();
                            System.out.println("LV AMT->CHARGE AMOUNT=>" + rowChargePi.getAttribute("LvAmt"));
                            crRwDtl.setAttribute("ChargeAmt", rowChargePi.getAttribute("LvAmt"));
                        }
                        rsiChargePi.closeRowSetIterator();

                    } else {
                        System.out.println("_____________INSIDE PI_______ELSEE______");
                        BigDecimal fiCount = new BigDecimal(0);
                        voiFiCnt.setNamedWhereClauseParam("bind_compFa", compFa);
                        voiFiCnt.setNamedWhereClauseParam("bind_dealerMapCd", dealerMapCd);
                        voiFiCnt.setNamedWhereClauseParam("bind_locCode", locCode);
                        voiFiCnt.setNamedWhereClauseParam("bind_ordInv", ordInv);
                        voiFiCnt.setNamedWhereClauseParam("bind_ordNum", ordNum);
                        voiFiCnt.setNamedWhereClauseParam("bind_parentGroupCd", parentGroupCd);
                        RowSetIterator rsiFiCnt = voiFiCnt.createRowSetIterator(null);
                        while (rsiFiCnt.hasNext()) {
                            Row rowFiCnt = rsiFiCnt.next();
                            fiCount = (BigDecimal) rowFiCnt.getAttribute("LvCount");

                        }
                        rsiFiCnt.closeRowSetIterator();

                        if (fiCount.compareTo(new BigDecimal(0)) == 0) {
                            System.out.println("_____________INSIDE PI____IF IFFF_________");
                            voiFiAmt2.setNamedWhereClauseParam("bind_chargeCd", chargeCd);
                            voiFiAmt2.setNamedWhereClauseParam("bind_chargeType", chargeType);
                            voiFiAmt2.setNamedWhereClauseParam("bind_compFa", compFa);
                            voiFiAmt2.setNamedWhereClauseParam("bind_dealerMapCd", dealerMapCd);
                            voiFiAmt2.setNamedWhereClauseParam("bind_locCode", locCode);
                            voiFiAmt2.setNamedWhereClauseParam("bind_ordNum", ordNum);
                            voiFiAmt2.setNamedWhereClauseParam("bind_parentGroupCd", parentGroupCd);
                            voiFiAmt2.executeQuery();
                            RowSetIterator rsiFiAmt2 = voiFiAmt2.createRowSetIterator(null);
                            while (rsiFiAmt2.hasNext()) {
                                Row rowFiAmt2 = rsiFiAmt2.next();
                                crRwDtl.setAttribute("ChargeAmt", rowFiAmt2.getAttribute("LvAmt"));

                            }
                            rsiFiAmt2.closeRowSetIterator();
                        } else {

                            System.out.println("_____________INSIDE PI___IF ELSE ELSEEE ESLEEE__________");
                            voiFiAmt1.setNamedWhereClauseParam("bind_chargeCd", chargeCd);
                            voiFiAmt1.setNamedWhereClauseParam("bind_chargeType", chargeType);
                            voiFiAmt1.setNamedWhereClauseParam("bind_compFa", compFa);
                            voiFiAmt1.setNamedWhereClauseParam("bind_dealerMapCd", dealerMapCd);
                            voiFiAmt1.setNamedWhereClauseParam("bind_locCode", locCode);
                            voiFiAmt1.setNamedWhereClauseParam("bind_ordNum", ordNum);
                            voiFiAmt1.setNamedWhereClauseParam("bind_parentGroupCd", parentGroupCd);
                            voiFiAmt1.executeQuery();
                            RowSetIterator rsiFiAmt1 = voiFiAmt1.createRowSetIterator(null);
                            while (rsiFiAmt1.hasNext()) {
                                Row rowFiAmt1 = rsiFiAmt1.next();
                                crRwDtl.setAttribute("ChargeAmt", rowFiAmt1.getAttribute("LvAmt"));
                            }
                            rsiFiAmt1.closeRowSetIterator();
                        }
                    }
                    voiSdDtl.insertRow(crRwDtl);

                    calculate_preInvoice();
                }
            }
            System.out.println("Amttt--" + dummyChargeTotal);
            voiShPreInv.getCurrentRow().setAttribute("ChargeAmt", dummyChargeTotal);
            //rsiVoi1.closeRowSetIterator();
        } catch (Exception e) {
            // TODO: Add catch code
            e.printStackTrace();
        }
        return null;
    }

    public void initComplaintRegistration() {
        try {
            this.getShComplaintsVO1().executeEmptyRowSet();
        } catch (Exception e) {
            // TODO: Add catch code
            e.printStackTrace();
        }

    }


    public void cmsRollback() {
        try {
            this.getDBTransaction().rollback();
        } catch (Exception e) {
            // TODO: Add catch code
            e.printStackTrace();
        }
    }


    public String exeSpDeliveryCancel(String dlr, String prtGrp, String locCd, String compFa, String uName, String vin,
                                      String delDet, String dnNum, String reason) {
        CallableStatement cs = null;
        String errMsg = null;
        try {
            String stmt = "begin SP_DELIVERY_CANCEL(?,?,?,?,?,?,?,?,?,?,?); end;";
            DBTransaction dbtxn = (DBTransaction) getTransaction();
            cs = dbtxn.createCallableStatement(stmt.toString(), 1);
            cs.setString(1, dlr);
            cs.setString(2, locCd); //locCd
            cs.setString(3, prtGrp); //prtGrp
            cs.setString(4, compFa);
            cs.setString(5, uName);
            cs.setString(6, vin);
            cs.setString(7, delDet);
            cs.setString(8, dnNum);
            cs.setString(9, reason);
            cs.registerOutParameter(10, Types.INTEGER);
            cs.registerOutParameter(11, Types.VARCHAR);
            cs.executeUpdate();
            errMsg = cs.getString(11);
        } catch (SQLException sqle) {
            // TODO: Add catch code
            sqle.printStackTrace();
        } finally {
            try {
                if (cs != null) {
                    cs.close();
                }
            } catch (Exception e) {
            }
        }

        return errMsg;
    }

    /**
     * Container's getter for CustomerCodeRO1.
     * @return CustomerCodeRO1
     */
    public ViewObjectImpl getCustomerCodeRO1() {
        return (ViewObjectImpl) findViewObject("CustomerCodeRO1");
    }

    /**
     * Container's getter for VariantDetailsRO1.
     * @return VariantDetailsRO1
     */
    public ViewObjectImpl getVariantDetailsRO1() {
        return (ViewObjectImpl) findViewObject("VariantDetailsRO1");
    }

    /**
     * This method is used to generate Challan number and save details to the database.
     */
    public String[] exeSaveDeliveryNote(String prtGrp, String dlr, String uName, String locCd, String compFa,
                                        String pmc) {
        DBTransaction trx = (DBTransaction) getTransaction();
        CallableStatement st = null;
        String docNum = null;
        String error_msg = null;
        int dealerCode = 0;
        int err = 0;
        Map session = ADFContext.getCurrent().getSessionScope();
        Integer finYear = new Integer(session.get("Year").toString());
        Integer principalMapCd = new Integer(session.get("principalMapCd").toString());
        Integer dealerMapCd = new Integer(session.get("dealerMapCd").toString());
        LOGGER.warning("finYear" + finYear);
        try {
            Row r = this.getStDeliveryNoteVO1().getCurrentRow();
            String vin = (String) r.getAttribute("Vin");
            String dnNum = (String) r.getAttribute("DnNum");
            Date delDate = (Date) r.getAttribute("DnDate");
            String regNum = (String) r.getAttribute("RegNum");
            String variantCd = (String) r.getAttribute("VariantCd");
            String invNum = (String) r.getAttribute("InvNum");
            String custCd = (String) r.getAttribute("CustCd");
            Date invDate = (Date) r.getAttribute("InvDate");
            java.sql.Date invDateSql  = null;
            java.sql.Date delDateSql = null;
            if(invDate != null){
                invDateSql = invDate.dateValue();
            }
            if(delDate != null){
                delDateSql = delDate.dateValue();
            }
            String orderNum = (String) r.getAttribute("OrderNum");
            Date regDate = (Date) r.getAttribute("RegDate");
            String rtoName = (String) r.getAttribute("RtoName");
            if (dnNum == null) {
                String stmt = "begin Generate_Next_Num (?,?,?,?,?,?,?,?,?); end;";
                st = trx.createCallableStatement(stmt, 0);
                int dlrCd = Integer.parseInt(dlr);
                st.setInt(1, dlrCd);
                st.setString(2, pmc);
                st.setString(3, locCd);
                st.setString(4, compFa);
                st.setString(5, "DN");
                st.registerOutParameter(6, Types.VARCHAR);
                st.registerOutParameter(7, Types.VARCHAR);
                st.registerOutParameter(8, Types.INTEGER);
                st.setInt(9, finYear);
                st.executeUpdate();
                docNum = st.getString(6);
                error_msg = st.getString(7);
                err = st.getInt(8);
                if (error_msg == null) {
                    r.setAttribute("DnNum", docNum);
                }
                r.setAttribute("CreatedBy", uName);
                dealerCode = Integer.parseInt(dlr);
                //exeSpVinDelnote(prtGrp,dealerCode , pmc, locCd, compFa, vin);
                dnNum = docNum;
            }
            ViewObjectImpl vo = this.getGmVinVO1();
            ViewCriteria vc = vo.getViewCriteria("GmVinVOCriteria");
            vo.applyViewCriteria(vc);
            vo.setNamedWhereClauseParam("bind_vin", vin);
            vo.executeQuery();
            Row row = vo.first();
            if(row != null){
            String regNum1 = (String) row.getAttribute("RegNum");
            if (regNum1 == null) {
                row.setAttribute("DnNum", dnNum);
                row.setAttribute("DnDate", delDate);
                row.setAttribute("RegNum", regNum);
                row.setAttribute("RegDate", regDate);
                row.setAttribute("RtoName", rtoName);
                row.setAttribute("ModifiedBy", uName);
                // java.sql.Date sysDate = new java.sql.Date(System.currentTimeMillis());
                // row.setAttribute("ModifiedDate", arg1);

            } else {
                row.setAttribute("DnNum", dnNum);
                row.setAttribute("DnDate", delDate);
                row.setAttribute("ModifiedBy", uName);
            }
            }
            ViewObjectImpl sdGrnVO = this.getSdGrnDnVO1(); /// change here
            ViewCriteria sdGrnVc = sdGrnVO.getViewCriteria("SdGrnDnVOCriteria");
            sdGrnVO.applyViewCriteria(sdGrnVc);
            sdGrnVO.setNamedWhereClauseParam("bind_compFa", compFa);
            sdGrnVO.setNamedWhereClauseParam("bind_dlrCd", dlr);
            sdGrnVO.setNamedWhereClauseParam("bind_locCd", locCd);
            sdGrnVO.setNamedWhereClauseParam("bind_prtGrp", prtGrp);
            sdGrnVO.setNamedWhereClauseParam("bind_vin", vin);
            sdGrnVO.executeQuery();
            Row row1 = sdGrnVO.first();
            if(row1 != null){
                row1.setAttribute("DnNum", dnNum);
                row1.setAttribute("DnDate", delDate);
            }
            ViewObjectImpl vo1 = this.getShInvoiceVO1();
            ViewCriteria vc1 = vo1.getViewCriteria("ShInvoiceVOCriteria");
            vo1.applyViewCriteria(vc1);
            vo1.setNamedWhereClauseParam("bind_compFa", compFa);
            vo1.setNamedWhereClauseParam("bind_dlrCd", dlr);
            vo1.setNamedWhereClauseParam("bind_locCd", locCd);
            vo1.setNamedWhereClauseParam("bind_prtGrp", prtGrp);
            vo1.setNamedWhereClauseParam("bind_vin", vin);
            vo1.setNamedWhereClauseParam("bind_orderNum", orderNum);
            vo1.executeQuery();
            Row row2 = vo1.first();
            if(row2 != null){
                row2.setAttribute("DnNum", dnNum);
                row2.setAttribute("ModifiedBy", uName);
            }
            ViewObjectImpl amListVO = this.getAmListRO1();
            ViewObjectImpl sdDelVO = this.getSdDeliveryDetailsVO1();
            ViewCriteria amListvc = amListVO.getViewCriteria("filterByStdDelItems");
            VariableValueManager vvm = amListvc.ensureVariableManager();
            amListVO.applyViewCriteria(amListvc);
            vvm.setVariableValue("bind_LstName", "STD_DELIVERED_ITEMS");
            vvm.setVariableValue("bind_principalMapCd", pmc);
            RowSetIterator iter = amListVO.createRowSetIterator(null);
            int countSlNo = 0;
            while (iter.hasNext()) {
                Row amLstRow = iter.next();
                if (amLstRow != null) {
                    Boolean SelectCheck = (Boolean) amLstRow.getAttribute("Select");
                    LOGGER.warning(" SelectCheck " + SelectCheck);
                    if (SelectCheck != null && SelectCheck) {
                        LOGGER.warning("List Name--->" + amLstRow.getAttribute("ListName"));
                        LOGGER.warning(" ListDesc--->" + amLstRow.getAttribute("ListDesc"));
                        LOGGER.warning("Select value--->" + (Boolean) amLstRow.getAttribute("Select"));
                        Row sdDelVORow = sdDelVO.createRow();
                        sdDelVO.insertRow(sdDelVORow);
                        countSlNo++;
                        LOGGER.warning("SlNO.--->" + countSlNo);
                        sdDelVORow.setAttribute("DealerMapCd", dealerCode);
                        sdDelVORow.setAttribute("CompFa", compFa);
                        sdDelVORow.setAttribute("LocCd", locCd);
                        sdDelVORow.setAttribute("ParentGroup", prtGrp);
                        sdDelVORow.setAttribute("Vin", vin);
                        sdDelVORow.setAttribute("DnDate", delDate);
                        sdDelVORow.setAttribute("CreatedBy", uName);
                        sdDelVORow.setAttribute("SlNo", countSlNo);
                        sdDelVORow.setAttribute("StdMul", 'S');
                        sdDelVORow.setAttribute("DnNum", dnNum);
                        java.sql.Timestamp datetime = new java.sql.Timestamp(System.currentTimeMillis());
                        oracle.jbo.domain.Date daTime = new oracle.jbo.domain.Date(datetime);
                        LOGGER.warning("oracle jbo current date---->" + daTime);
                        sdDelVORow.setAttribute("CreatedDate", daTime);
                        //sdDelVORow.setAttribute("ModifiedBy", uName);
                        sdDelVORow.setAttribute("DeliveredItems", amLstRow.getAttribute("ListCode"));
                        char select = amLstRow.getAttribute("Select") == null ? 'N' : 'Y';
                        sdDelVORow.setAttribute("DeliveryYn", select);
                    }
                }
            }
            countSlNo = 0;
            iter.closeRowSetIterator();

            ViewObjectImpl amChkListVO = this.getAmListForDelChkLstRO();
            ViewObjectImpl sdDelChkListVO = this.getSdDeliveryDetailsForDelCheckVO();
            ViewCriteria amListChkListvc = amChkListVO.getViewCriteria("filterByDelviryChkLstVC");
            VariableValueManager vvm1 = amListChkListvc.ensureVariableManager();
            amChkListVO.applyViewCriteria(amListChkListvc);
            vvm1.setVariableValue("bind_ListName", "DELIVERED_ITEMS");
            vvm1.setVariableValue("bind_PrinciMapCd", pmc);
            RowSetIterator iter1 = amChkListVO.createRowSetIterator(null);
            int countChkListSlNo = 0;
            while (iter1.hasNext()) {
                Row amLstChkListRow = iter1.next();
                if (amLstChkListRow != null) {
                    Boolean selectRow = (Boolean) amLstChkListRow.getAttribute("SelectRow");
                    LOGGER.warning(" SelectCheck " + selectRow);
                    if (selectRow != null && selectRow) {
                        LOGGER.warning("List Name--->" + amLstChkListRow.getAttribute("ListName"));
                        LOGGER.warning("List Code--->" + amLstChkListRow.getAttribute("ListCode"));
                        LOGGER.warning("Select value--->" + (Boolean) amLstChkListRow.getAttribute("SelectRow"));
                        Row sdDelChkListVORow = sdDelChkListVO.createRow();
                        sdDelChkListVO.insertRow(sdDelChkListVORow);
                        countChkListSlNo++;
                        LOGGER.warning("SlNO.--->" + countChkListSlNo);
                        sdDelChkListVORow.setAttribute("DealerMapCd", dealerCode);
                        sdDelChkListVORow.setAttribute("CompFa", compFa);
                        sdDelChkListVORow.setAttribute("LocCd", locCd);
                        sdDelChkListVORow.setAttribute("ParentGroup", prtGrp);
                        sdDelChkListVORow.setAttribute("Vin", vin);
                        sdDelChkListVORow.setAttribute("DnDate", delDate);
                        sdDelChkListVORow.setAttribute("CreatedBy", uName);
                        sdDelChkListVORow.setAttribute("SlNo", countChkListSlNo);
                        sdDelChkListVORow.setAttribute("StdMul", 'M');
                        sdDelChkListVORow.setAttribute("DnNum", dnNum);
                        java.sql.Timestamp datetime = new java.sql.Timestamp(System.currentTimeMillis());
                        oracle.jbo.domain.Date daTime = new oracle.jbo.domain.Date(datetime);
                        LOGGER.warning("oracle jbo current date---->" + daTime);
                        sdDelChkListVORow.setAttribute("CreatedDate", daTime);
                        //sdDelChkListVORow.setAttribute("ModifiedBy", uName);
                        sdDelChkListVORow.setAttribute("DeliveredItems", amLstChkListRow.getAttribute("ListCode"));
                        char select = (Boolean) amLstChkListRow.getAttribute("SelectRow") == null ? 'N' : 'Y';
                        LOGGER.warning("SelectRow--->" + select);
                        sdDelChkListVORow.setAttribute("DeliveryYn", select);
                    }
                }
            }
            countChkListSlNo = 0;
            iter1.closeRowSetIterator();
            //inserting data to VH_PSF table
            try {
                String stmt = "begin SP_INSERT_PSF_SMR_DEL(?,?,?,?,?,?,?,?,?,?,?,?,?,?,?); end;";
                DBTransaction dbtxn = (DBTransaction) getTransaction();
                st = dbtxn.createCallableStatement(stmt.toString(), 1);
                st.setInt(1, principalMapCd);
                st.setInt(2, dealerMapCd);
                st.setString(3, prtGrp);
                st.setString(4, locCd);
                st.setString(5, compFa);
                st.setString(6, vin);
                st.setString(7, variantCd);
                st.setString(8, regNum);
                st.setString(9, custCd);
                st.setString(10, invNum);
                st.setDate(11, invDateSql);
                st.setDate(12, delDateSql);
                st.setString(13, uName);
                st.registerOutParameter(14, Types.VARCHAR);
                st.registerOutParameter(15, Types.INTEGER);
                st.executeUpdate();
                error_msg = st.getString(14);
                err = st.getInt(15);

            } catch (SQLException sqle) {
                // TODO: Add catch code
                sqle.printStackTrace();
            } finally {
                try {
                    if (st != null) {
                        st.close();
                    }
                } catch (Exception e) {
                }
            }

            this.getDBTransaction().commit();
        } catch (Exception e) {
            // TODO: Add catch code
            e.printStackTrace();
        } finally {
            try {
                if (st != null) {
                    st.close();
                }
            } catch (Exception e) {
            }
        }
        return new String[] { error_msg, docNum };
    }


    /**
     * Container's getter for GmVinRO1.
     * @return GmVinRO1
     */
    public ViewObjectImpl getGmVinRO1() {
        return (ViewObjectImpl) findViewObject("GmVinRO1");
    }

    /**
     * Container's getter for GmVinVO1.
     * @return GmVinVO1
     */
    public ViewObjectImpl getGmVinVO1() {
        return (ViewObjectImpl) findViewObject("GmVinVO1");
    }

    /**
     * Container's getter for ShInvoiceVO1.
     * @return ShInvoiceVO1
     */
    public ViewObjectImpl getShInvoiceVO1() {
        return (ViewObjectImpl) findViewObject("ShInvoiceVO1");
    }

    /**
     * Container's getter for SdGrnDnVO1.
     * @return SdGrnDnVO1
     */
    public ViewObjectImpl getSdGrnDnVO1() {
        return (ViewObjectImpl) findViewObject("SdGrnDnVO1");
    }

    /**
     * Container's getter for ClaimTypeST1.
     * @return ClaimTypeST1
     */
    public ViewObjectImpl getClaimTypeST1() {
        return (ViewObjectImpl) findViewObject("ClaimTypeST1");
    }

    /**
     * Container's getter for MakeDescRO1.
     * @return MakeDescRO1
     */
    public ViewObjectImpl getMakeDescRO1() {
        return (ViewObjectImpl) findViewObject("MakeDescRO1");
    }

    /**
     * Container's getter for OldCarDetailsRO1.
     * @return OldCarDetailsRO1
     */
    public ViewObjectImpl getOldCarDetailsRO1() {
        return (ViewObjectImpl) findViewObject("OldCarDetailsRO1");
    }

    /**
     * Container's getter for CSDExchangeAcquisitionRO1.
     * @return CSDExchangeAcquisitionRO1
     */
    public ViewObjectImpl getCSDExchangeAcquisitionRO1() {
        return (ViewObjectImpl) findViewObject("CSDExchangeAcquisitionRO1");
    }

    /**
     * Container's getter for ShOrdBookRO2.
     * @return ShOrdBookRO2
     */
    public ViewObjectImpl getShOrdBookRO2() {
        return (ViewObjectImpl) findViewObject("ShOrdBookRO2");
    }

    /**
     * Container's getter for SdPreInvChargesVO1.
     * @return SdPreInvChargesVO1
     */
    public SdPreInvChargesVOImpl getSdPreInvChargesVO1() {
        return (SdPreInvChargesVOImpl) findViewObject("SdPreInvChargesVO1");
    }

    /**
     * Container's getter for ShPreInvoiceLK1.
     * @return ShPreInvoiceLK1
     */
    public ViewLinkImpl getShPreInvoiceLK1() {
        return (ViewLinkImpl) findViewLink("ShPreInvoiceLK1");
    }

    public String preInvoiceNumberGeneration(int dealerMapCd, String principalMapCd, String locCd, String compFa,
                                             String docType, int finYear) {
        Map session = ADFContext.getCurrent().getSessionScope();
        String invoiceNumber = null;
        Integer cnt = new Integer(1);
        int Year = Integer.parseInt(session.get("Year").toString());
//        System.out.println(" session.get(\"finYear\") "+session.get("finYear"));
        LOGGER.info(Year+" preInvoiceNumberGeneration finYear " + finYear);
        ViewObjectImpl voiPreInv = this.getShPreInvoiceVO1();
        //  ViewObjectImpl voiPreInvDtl = this.getSdPreInvChargesVO1();
        ShPreInvoiceVORowImpl preInvRow = (ShPreInvoiceVORowImpl) voiPreInv.getCurrentRow();
        if (preInvRow.getInvNum() == null) {
            invoiceNumber = exeGenNextNum(dealerMapCd, principalMapCd, locCd, compFa, docType, Year);

        }
        return invoiceNumber;
    }

    /**
     * This method is used for cheking Registration Number from Database in CSD Loyalty App
     */
    public String RegNumCeck(String RegNum, String Principal, String Dealer, String Loca, String Compa,
                             String ParentGroup) {
        ViewObjectImpl vo = this.getSdLoyltyExchClaimEOView1();
        Row r = vo.getCurrentRow();
        String Model = r.getAttribute("InvModel") == null ? null : r.getAttribute("InvModel").toString();
        String sql =
            "SELECT months FROM sh_exch_poc WHERE model_cd ='" + Model + "' AND PRINCIPAL_MAP_CD =" + Principal;
        ResultSet rs;
        String Month = null;
        String Error = null;
        try {
            rs = getDBTransaction().createStatement(0).executeQuery(sql);
            if (rs.next()) {
                Month = rs.getString(1);
            }

            if (Month == null) {
                String query = "SELECT months FROM sh_exch_poc WHERE model_cd = 'X'";
                ResultSet rs1;
                rs1 = getDBTransaction().createStatement(0).executeQuery(query);
                if (rs.next()) {
                    Month = rs1.getString(1);
                }
            }

            String Buy =
                "SELECT XX.BUYING_NUM, xx.make, decode(xx.make, 'M', 'MARUTI', 'NON-MARUTI')MakeDesc, xx.model, xx.chassis, xx.vin, (xx.cust_name||' '||xx.cust_middle_name||' '||xx.cust_last_name) CustName, xx.engine, xx.submodel, xx.buy_price FROM MULDMS.Sh_Tv_Eval XX WHERE XX.Buy_Date >=first_day(add_months(trunc(sysdate), -" +
                Month + ")) AND XX.Buy_Date < sysdate AND xx.reg_no='" + RegNum +
                "' AND XX.Status in ('Y', 'B') AND NVL(XX.Exch_Flag, 'X') != 'Y' and xx.parent_group='" + ParentGroup +
                "' and xx.dealer_map_cd='" + Dealer + "' and xx.loc_cd ='" + Loca + "' and xx.comp_fa='" + Compa + "'";
            ResultSet rs2;
            rs2 = getDBTransaction().createStatement(0).executeQuery(Buy);
            if (rs2.next()) {
                Month = rs2.getString(1);
                r.setAttribute("BuyingId", rs2.getString(1));
                r.setAttribute("OldCarMake", rs2.getString(2));
                r.setAttribute("OldCarMakeDesc", rs2.getString(3));
                r.setAttribute("OldCarModel", rs2.getString(4));
                r.setAttribute("OldCarChassis", rs2.getString(5));
                r.setAttribute("OldCarVin", rs2.getString(6));
                r.setAttribute("OldCarCustName", rs2.getString(7));
                r.setAttribute("EngineNum", rs2.getString(8));
                r.setAttribute("OldCarSubModel", rs2.getString(9));
                r.setAttribute("PocBuyingPrice", rs2.getString(10));
            } else {
                Error = "Enter a valid Registration Number.";
            }

            String CustName =
                "SELECT YY.MINS_CUST_NAME FROM NI_NEW_MINS YY WHERE YY.MINS_REG_NUM ='" + RegNum +
                "' AND NVL(YY.CANCELLATION_STATUS, 'N') != 'Y' AND YY.MINS_EXP_DATE >= TRUNC(SYSDATE) AND YY.PRINCIPAL_MAP_CD =" +
                Principal +
                " AND NOT EXISTS (SELECT 1 FROM NI_NEW_MINS ZZ WHERE ZZ.MINS_VIN = YY.MINS_VIN AND ZZ.Mins_Policy_No = yy.mins_policy_no AND NVL(ZZ.CANCELLATION_STATUS, 'N') = 'Y' AND ZZ.PRINCIPAL_MAP_CD = YY.PRINCIPAL_MAP_CD)";
            ResultSet rs3;
            rs3 = getDBTransaction().createStatement(0).executeQuery(CustName);
            if (rs3.next()) {
                Month = rs3.getString(1);
                r.setAttribute("MiOldCarCustName", rs2.getString(1));
            }
        } catch (SQLException e) {
            e.printStackTrace();
        }
        return Error;
    }

    /**
     * This method is used for cheking Buying ID from Database in CSD Loyalty App
     */
    public String BuyIdCheck(String BuyID, String Principal, String Dealer, String Loca, String Compa,
                             String ParentGroup) {
        ViewObjectImpl vo = this.getSdLoyltyExchClaimEOView1();
        Row r = vo.getCurrentRow();
        String Model = r.getAttribute("InvModel") == null ? null : r.getAttribute("InvModel").toString();
        String InvDate = r.getAttribute("InvDate") == null ? null : r.getAttribute("InvDate").toString();
        String output = InvDate.substring(0, 10);
        String sql =
            "SELECT months FROM sh_exch_poc WHERE model_cd ='" + Model + "' AND PRINCIPAL_MAP_CD =" + Principal;
        ResultSet rs;
        String Month = null;
        String Error = null;
        try {
            rs = getDBTransaction().createStatement(0).executeQuery(sql);
            if (rs.next()) {
                Month = rs.getString(1);
            }

            if (Month == null) {
                String query = "SELECT months FROM sh_exch_poc WHERE model_cd = 'X'";
                System.out.println(" Month " + query);
                ResultSet rs1;
                rs1 = getDBTransaction().createStatement(0).executeQuery(query);
                if (rs1.next()) {
                    System.out.println(" rs1 " + rs1.getString(1));
                    Month = rs1.getString(1);
                }
            }
            System.out.println(" Month " + Month + " Inv date " + output + " Buy id " + BuyID);
            String Buy =
                "SELECT XX.reg_no, xx.make, decode(xx.make, 'M', 'MARUTI', 'NON-MARUTI')MakeDesc, xx.model, xx.chassis, xx.vin, (xx.cust_name||' '||xx.cust_middle_name||' '||xx.cust_last_name) CustName, xx.engine, xx.submodel, xx.buy_price, round(((to_date('" +
                output +
                "','YYYY-MM-DD')- to_date(XX.DATE_OF_REG,'YYYY-MM-DD')) /365),2) OldAge FROM MULDMS.Sh_Tv_Eval XX WHERE XX.Buy_Date >=first_day(add_months(trunc(sysdate), -" +
                Month + ")) AND XX.Buy_Date < sysdate AND xx.Buying_Num='" + BuyID +
                "' AND XX.Status in ('Y', 'B') AND NVL(XX.Exch_Flag, 'X') != 'Y' and xx.parent_group='" + ParentGroup +
                "' and xx.dealer_map_cd=" + Dealer + " and xx.loc_cd ='" + Loca + "' and xx.comp_fa='" + Compa + "'";
            System.out.println("Buy Query "+Buy);
            ResultSet rs2;
            rs2 = getDBTransaction().createStatement(0).executeQuery(Buy);
            System.out.println(" rs2 " + rs2);
            if (rs2.next()) {
                System.out.println(" rs2.getString(1) " + rs2.getString(1));
                Month = rs2.getString(1);
                r.setAttribute("OldCarRegNum", rs2.getString(1));
                r.setAttribute("OldCarMake", rs2.getString(2));
                r.setAttribute("OldCarMakeDesc", rs2.getString(3));
                r.setAttribute("OldCarModel", rs2.getString(4));
                r.setAttribute("OldCarChassis", rs2.getString(5));
                r.setAttribute("OldCarVin", rs2.getString(6));
                r.setAttribute("OldCarCustName", rs2.getString(7));
                r.setAttribute("EngineNum", rs2.getString(8));
                r.setAttribute("OldCarSubModel", rs2.getString(9));
                r.setAttribute("PocBuyingPrice", rs2.getString(10));
                r.setAttribute("OldCarAge", rs2.getString(11));
            } else {
                Error = "Enter a valid Buy ID.";
            }

            String CustName =
                "SELECT YY.MINS_CUST_NAME FROM NI_NEW_MINS YY WHERE YY.MINS_REG_NUM ='" +
                r.getAttribute("OldCarRegNum") +
                "' AND NVL(YY.CANCELLATION_STATUS, 'N') != 'Y' AND YY.MINS_EXP_DATE >= TRUNC(SYSDATE) AND YY.PRINCIPAL_MAP_CD =" +
                Principal +
                " AND NOT EXISTS (SELECT 1 FROM NI_NEW_MINS ZZ WHERE ZZ.MINS_VIN = YY.MINS_VIN AND ZZ.Mins_Policy_No = yy.mins_policy_no AND NVL(ZZ.CANCELLATION_STATUS, 'N') = 'Y' AND ZZ.PRINCIPAL_MAP_CD = YY.PRINCIPAL_MAP_CD)";
            ResultSet rs3;
            rs3 = getDBTransaction().createStatement(0).executeQuery(CustName);
            if (rs3.next()) {
                Month = rs3.getString(1);
                r.setAttribute("MiOldCarCustName", rs2.getString(1));
            }
        } catch (SQLException e) {
            e.printStackTrace();
        }
        return Error;
    }

    /**
     * Container's getter for AmListRO1.
     * @return AmListRO1
     */
    public ViewObjectImpl getAmListRO1() {
        return (ViewObjectImpl) findViewObject("AmListRO1");
    }

    public String MSILContri(String Principal, String Dealer, String Loca, String Compa, String ParentGroup) {
        System.out.println("MSILContri");
        ViewObjectImpl vo = this.getSdLoyltyExchClaimEOView1();
        Row r = vo.getCurrentRow();
        String SaleType = r.getAttribute("SalesType") == null ? null : r.getAttribute("SalesType").toString();
        String Model = r.getAttribute("InvModel") == null ? null : r.getAttribute("InvModel").toString();
        String OldModel = r.getAttribute("OldCarModel") == null ? null : r.getAttribute("OldCarModel").toString();
        String OldMake = r.getAttribute("OldCarMake") == null ? null : r.getAttribute("OldCarMake").toString();
        String VariantCode = r.getAttribute("InvSubModel") == null ? null : r.getAttribute("InvSubModel").toString();
        String InvDate = r.getAttribute("InvDate") == null ? null : r.getAttribute("InvDate").toString();
        System.out.println(" Inv Date " + InvDate);
        String output = InvDate.substring(0, 10);
        String ClaimType = r.getAttribute("ClaimType") == null ? null : r.getAttribute("ClaimType").toString();
        String FuelType = null;
        BigDecimal zero = new BigDecimal(0);
        BigDecimal OldCarAge =
            new BigDecimal(r.getAttribute("OldCarAge") == null ? "0" : r.getAttribute("OldCarAge").toString());
        BigDecimal InvChargeAmt =
            new BigDecimal(r.getAttribute("InvChargeAmt") == null ? "0" : r.getAttribute("InvChargeAmt").toString());
        String sql =
            "SELECT am.region_cd, am.state_cd, am.for_cd,am.channel FROM am_dealer_loc am WHERE am.parent_group ='" +
            ParentGroup + "' AND am.dealer_map_cd =" + Dealer + " AND am.loc_Cd ='" + Loca + "'";
        ResultSet rs;
        String Region = null;
        String State = null;
        String ForCd = null;
        String Channel = null;
        String Error = null;
        int count = 0;
        String lv_sales_type = SaleType;
        
        
        try{
            rs = getDBTransaction().createStatement(0).executeQuery(sql);
            if (rs.next()) {
                Region = rs.getString(1);
                State = rs.getString(2);
                ForCd = rs.getString(3);
                Channel = rs.getString(4);
            }

            String Fuel = "SELECT FUELTYPE_CD FROM gm_var  WHERE variant_cd ='" + VariantCode + "'";
            ResultSet rs1;
            rs1 = getDBTransaction().createStatement(0).executeQuery(Fuel);
            if (rs1.next()) {
                FuelType = rs1.getString(1);
            }
            
            String BonusMasterCount =
                "SELECT count(*) count FROM sm_bonus_master sm WHERE sm.bonus_type = decode('" +
                ClaimType + "','A','L','" + ClaimType + "') AND nvl(sm.bonus_loy_acq_flag,'" + ClaimType + "')='" +
                ClaimType + "' AND trunc(to_date('" + output +
                "','YYYY-MM-DD')) between sm.from_Date and sm.to_date AND sm.regn ='" + Region + "' AND (sm.STATE ='" +
                State + "' OR sm.STATE = '%') AND (sm.for_cd ='" + ForCd + "' OR sm.for_cd = '%') AND (sm.model_cd ='" +
                Model + "' OR sm.model_cd = '%') AND (sm.fueltype_cd ='" + FuelType +
                "' or sm.fueltype_cd = '%') AND (SM.VARIANT_CD ='" + VariantCode +
                "' OR SM.VARIANT_CD = '%') AND PRINCIPAL_MAP_CD =" + Principal +
                " AND SM.STATUS = 'A' AND SM.SLAB_CD = '000' AND sm.sales_type = '"+SaleType+"'";
            System.out.println("BonusMasterCount "+BonusMasterCount);
            ResultSet rs2;
            rs2 = getDBTransaction().createStatement(0).executeQuery(BonusMasterCount);
            if (rs2.next()) {
                count = rs2.getInt(1);
            } 
            System.out.println("BonusMasterCount "+count);
            if(count > 0){
            lv_sales_type = SaleType;
            }else{
            lv_sales_type = "%";
            }
            

            BigDecimal totalbonus = new BigDecimal(0);
            BigDecimal MsilBonus = new BigDecimal(0);
            
            String BonusMaster =
                "SELECT sm.tot_bonus, sm.msil_share FROM sm_bonus_master sm WHERE sm.bonus_type = decode('" +
                ClaimType + "','A','L','" + ClaimType + "') AND nvl(sm.bonus_loy_acq_flag,'" + ClaimType + "')='" +
                ClaimType + "' AND trunc(to_date('" + output +
                "','YYYY-MM-DD')) between sm.from_Date and sm.to_date AND sm.regn ='" + Region + "' AND (sm.STATE ='" +
                State + "' OR sm.STATE = '%') AND (sm.for_cd ='" + ForCd + "' OR sm.for_cd = '%') AND (sm.model_cd ='" +
                Model + "' OR sm.model_cd = '%') AND (sm.fueltype_cd ='" + FuelType +
                "' or sm.fueltype_cd = '%') AND (SM.VARIANT_CD ='" + VariantCode +
                "' OR SM.VARIANT_CD = '%') AND PRINCIPAL_MAP_CD =" + Principal +
                " AND SM.STATUS = 'A' AND SM.SLAB_CD = '000' AND sm.sales_type = '"+lv_sales_type+"'";
            System.out.println("BonusMaster "+BonusMaster);
            ViewObject dyanamicVo1 = this
                      .getDBTransaction()
                      .createViewObjectFromQueryStmt(BonusMaster);
            dyanamicVo1.executeQuery();
            
            
            if(dyanamicVo1.getAllRowsInRange().length> 0){
            ResultSet rs3;
            rs3 = getDBTransaction().createStatement(0).executeQuery(BonusMaster);
            if (rs3.next()) {
                    totalbonus = rs3.getBigDecimal(1);
                    MsilBonus = rs3.getBigDecimal(2);
                }
            } else {

                String BonusMasterChannelCount =
                                    "SELECT count(*) count FROM sm_bonus_master sm WHERE sm.bonus_type = decode('" +
                                    ClaimType + "','A','L','" + ClaimType + "') AND nvl(sm.bonus_loy_acq_flag,'" + ClaimType + "')='" +
                                    ClaimType + "' AND trunc(to_date('" + output +
                                    "','YYYY-MM-DD')) between sm.from_Date and sm.to_date AND sm.regn ='" + Region +
                                    "' AND (sm.STATE ='" + State + "' OR sm.STATE = '%') AND (sm.for_cd ='" + ForCd +
                                    "' OR sm.for_cd = '%') AND (sm.model_cd ='" + Model +
                                    "' OR sm.model_cd = '%') AND (sm.fueltype_cd ='" + FuelType +
                                    "' or sm.fueltype_cd = '%') AND (SM.VARIANT_CD ='" + VariantCode +
                                    "' OR SM.VARIANT_CD = '%') AND PRINCIPAL_MAP_CD =" + Principal +
                                    " AND SM.STATUS = 'A' AND SM.SLAB_CD =SF_GET_EXCH_SLAB(" + OldCarAge + ") AND (SM.CHANNEL= '%' OR SM.CHANNEL='" +
                                    Channel + "')  AND sm.sales_type ='"+SaleType+"'";
                System.out.println("BonusMasterChannelCount "+BonusMasterChannelCount);
                ResultSet rs6;
                rs6 = getDBTransaction().createStatement(0).executeQuery(BonusMasterChannelCount);
                if (rs6.next()) {
                    System.out.println("BonusMasterChannelCount "+rs6.getInt(1));
                        if(rs6.getInt(1)> 0){
                            lv_sales_type = SaleType;
                        }else{
                            lv_sales_type = "%";
                        }
                    }
                
//                ViewObject dyanamicVo2 = this
//                          .getDBTransaction()
//                          .createViewObjectFromQueryStmt(BonusMasterChannelCount);
//                dyanamicVo2.executeQuery();
//                System.out.println("dyanamicVo2.getAllRowsInRange().length "+dyanamicVo2.getAllRowsInRange().length);
//                if(dyanamicVo2.getAllRowsInRange().length> 0){
//                    lv_sales_type = SaleType;
//                }else{
//                    lv_sales_type = "%";
//                }
                    
                String BonusMasterChannel =
                                    "SELECT sm.tot_bonus, sm.msil_share count FROM sm_bonus_master sm WHERE sm.bonus_type = decode('" +
                                    ClaimType + "','A','L','" + ClaimType + "') AND nvl(sm.bonus_loy_acq_flag,'" + ClaimType + "')='" +
                                    ClaimType + "' AND trunc(to_date('" + output +
                                    "','YYYY-MM-DD')) between sm.from_Date and sm.to_date AND sm.regn ='" + Region +
                                    "' AND (sm.STATE ='" + State + "' OR sm.STATE = '%') AND (sm.for_cd ='" + ForCd +
                                    "' OR sm.for_cd = '%') AND (sm.model_cd ='" + Model +
                                    "' OR sm.model_cd = '%') AND (sm.fueltype_cd ='" + FuelType +
                                    "' or sm.fueltype_cd = '%') AND (SM.VARIANT_CD ='" + VariantCode +
                                    "' OR SM.VARIANT_CD = '%') AND PRINCIPAL_MAP_CD =" + Principal +
                                    " AND SM.STATUS = 'A' AND SM.SLAB_CD =SF_GET_EXCH_SLAB(" + OldCarAge + ") AND (SM.CHANNEL= '%' OR SM.CHANNEL='" +
                                    Channel + "') AND sm.sales_type ='"+lv_sales_type+"'";
                
                System.out.println(" BonusMasterChannel "+BonusMasterChannel);
                ResultSet rs4;
                rs4 = getDBTransaction().createStatement(0).executeQuery(BonusMasterChannel);
                if (rs4.next()) {
                        totalbonus = rs4.getBigDecimal(1);
                        MsilBonus = rs4.getBigDecimal(2);
                    }
                System.out.println(totalbonus+ " totalbonus MsilBonus "+MsilBonus);
                

            }
            
            
         //   --------Additional Bonus------------
         String additionalCount =
                        "SELECT count(*) count FROM sm_add_bonus_master sma WHERE sma.BONUS_TYPE ='" +
                        ClaimType + "' AND trunc(to_date('" + output +
                        "','YYYY-MM-DD')) between sma.from_Date and sma.to_date AND sma.regn ='" + Region +
                        "' AND (sma.STATE ='" + State + "' OR sma.STATE = '%') AND (sma.for_cd ='" + ForCd +
                        "' OR sma.for_cd = '%') AND (sma.MODEL ='" + Model + "' OR sma.MODEL = '%') AND (sma.FUEL ='" +
                        FuelType +
                        "' OR sma.FUEL = '%') AND (SMa.VARIANT_CD =(SELECT FUELTYPE_CD FROM gm_var WHERE variant_cd ='" +
                        VariantCode + "') OR SMa.VARIANT_CD = '%') AND (sma.Old_Veh_Make ='" + OldMake +
                        "' OR sma.Old_Veh_Make = '%') AND (sma.Old_Veh_Model ='" + OldModel +
                        "' OR sma.Old_Veh_Model = '%') AND sma.STATUS = 'A' AND sma.PRINCIPAL_MAP_CD ='" + Principal +
                        "' AND (SMA.CHANNEL= '%' OR SMA.CHANNEL='" + Channel + "') AND sma.sales_type = '"+lv_sales_type+"'";
                    
                    
            ViewObject dyanamicVo3 = this
                      .getDBTransaction()
                      .createViewObjectFromQueryStmt(additionalCount);
            dyanamicVo3.executeQuery();
            System.out.println("dyanamicVo3.getAllRowsInRange().length "+dyanamicVo3.getAllRowsInRange().length);
            if(dyanamicVo3.getAllRowsInRange().length> 0){
                lv_sales_type = lv_sales_type;
            }else{
                lv_sales_type = "%";
            }
            
            String additional =
                           "SELECT nvl(sma.TOT_BONUS_ADD, 0), nvl(sma.MSIL_SHARE_ADD, 0) FROM sm_add_bonus_master sma WHERE sma.BONUS_TYPE ='" +
                           ClaimType + "' AND trunc(to_date('" + output +
                           "','YYYY-MM-DD')) between sma.from_Date and sma.to_date AND sma.regn ='" + Region +
                           "' AND (sma.STATE ='" + State + "' OR sma.STATE = '%') AND (sma.for_cd ='" + ForCd +
                           "' OR sma.for_cd = '%') AND (sma.MODEL ='" + Model + "' OR sma.MODEL = '%') AND (sma.FUEL ='" +
                           FuelType +
                           "' OR sma.FUEL = '%') AND (SMa.VARIANT_CD =(SELECT FUELTYPE_CD FROM gm_var WHERE variant_cd ='" +
                           VariantCode + "') OR SMa.VARIANT_CD = '%') AND (sma.Old_Veh_Make ='" + OldMake +
                           "' OR sma.Old_Veh_Make = '%') AND (sma.Old_Veh_Model ='" + OldModel +
                           "' OR sma.Old_Veh_Model = '%') AND sma.STATUS = 'A' AND sma.PRINCIPAL_MAP_CD ='" + Principal +
                           "' AND (SMA.CHANNEL= '%' OR SMA.CHANNEL='" + Channel + "') AND sma.sales_type = '"+lv_sales_type+"'";
                       
                    
                    
                    ResultSet rs5;
                    BigDecimal addtotalbonus = new BigDecimal(0);
                    BigDecimal addMsilBonus = new BigDecimal(0);
                    rs5 = getDBTransaction().createStatement(0).executeQuery(additional);
                    if (rs5.next()) {
                        addtotalbonus = rs5.getBigDecimal(1);
                        addMsilBonus = rs5.getBigDecimal(2);
                    }
            
            if(totalbonus.add(MsilBonus).compareTo(zero) < 0 && addtotalbonus.add(addMsilBonus).compareTo(zero) <0){
                // ADFUtils.showMessage(2,"Bonus Details not available");
                return null;
            }
            BigDecimal bonus_add = MsilBonus.add(addMsilBonus);
            BigDecimal Totl_add = totalbonus.add(addtotalbonus);
            System.out.println(bonus_add+" bonus_add "+Totl_add);
            System.out.println(totalbonus+" Totl_add "+addtotalbonus);
            System.out.println(Totl_add+" Totl_add.compareTo(InvChargeAmt) "+InvChargeAmt+" "+Totl_add.compareTo(InvChargeAmt));
            
            if(Totl_add.compareTo(InvChargeAmt) <= 0){
                System.out.println(" if msil "+bonus_add);
                r.setAttribute("MsilPayable", bonus_add);
                }else{
                System.out.println(" else msil "+(bonus_add.divide(Totl_add,4,RoundingMode.HALF_EVEN)));
                System.out.println(" else msil "+(bonus_add.divide(Totl_add,4,RoundingMode.HALF_EVEN)).multiply(InvChargeAmt));
                    r.setAttribute("MsilPayable",(bonus_add.divide(Totl_add,4,RoundingMode.HALF_EVEN)).multiply(InvChargeAmt).setScale(0, RoundingMode.HALF_EVEN));
                }
            r.setAttribute("MasterBonusAmt", Totl_add.setScale(0, RoundingMode.HALF_EVEN));
                      r.setAttribute("MsilShare", bonus_add.setScale(0, RoundingMode.HALF_EVEN));

        }catch(Exception e){
            e.printStackTrace();
        }
        
        return Error;
    }

    /**
     * This method is used for getting MSIL Contribution CSD Loyalty App
     */
    public String MSILContri1(String Principal, String Dealer, String Loca, String Compa, String ParentGroup) {
        System.out.println("MSILContri");
        ViewObjectImpl vo = this.getSdLoyltyExchClaimEOView1();
        Row r = vo.getCurrentRow();
        String Model = r.getAttribute("InvModel") == null ? null : r.getAttribute("InvModel").toString();
        String OldModel = r.getAttribute("OldCarModel") == null ? null : r.getAttribute("OldCarModel").toString();
        String OldMake = r.getAttribute("OldCarMake") == null ? null : r.getAttribute("OldCarMake").toString();
        String VariantCode = r.getAttribute("InvSubModel") == null ? null : r.getAttribute("InvSubModel").toString();
        String InvDate = r.getAttribute("InvDate") == null ? null : r.getAttribute("InvDate").toString();
        System.out.println(" Inv Date " + InvDate);
        //        SimpleDateFormat sd = new SimpleDateFormat("MM-dd-yyyy");
        String output = InvDate.substring(0, 10);
        String ClaimType = r.getAttribute("ClaimType") == null ? null : r.getAttribute("ClaimType").toString();
        String FuelType = null;
        BigDecimal zero = new BigDecimal(0);
        BigDecimal OldCarAge =
            new BigDecimal(r.getAttribute("OldCarAge") == null ? "0" : r.getAttribute("OldCarAge").toString());
        //        BigDecimal BonusPassCust =
        //            new BigDecimal(r.getAttribute("BonusPassToCust") == null ? "0" :
        //                           r.getAttribute("BonusPassToCust").toString());
        BigDecimal InvChargeAmt =
            new BigDecimal(r.getAttribute("InvChargeAmt") == null ? "0" : r.getAttribute("InvChargeAmt").toString());
        String sql =
            "SELECT am.region_cd, am.state_cd, am.for_cd,am.channel FROM am_dealer_loc am WHERE am.parent_group ='" +
            ParentGroup + "' AND am.dealer_map_cd =" + Dealer + " AND am.loc_Cd ='" + Loca + "'";
        ResultSet rs;
        String Region = null;
        String State = null;
        String ForCd = null;
        String Channel = null;
        String Error = null;
        try {
            rs = getDBTransaction().createStatement(0).executeQuery(sql);
            if (rs.next()) {
                Region = rs.getString(1);
                State = rs.getString(2);
                ForCd = rs.getString(3);
                Channel = rs.getString(4);
            }

            String Fuel = "SELECT FUELTYPE_CD FROM gm_var  WHERE variant_cd ='" + VariantCode + "'";
            ResultSet rs3;
            rs3 = getDBTransaction().createStatement(0).executeQuery(Fuel);
            if (rs3.next()) {
                FuelType = rs3.getString(1);
            }

            String BonusMastrer =
                "SELECT sm.tot_bonus, sm.msil_share FROM sm_bonus_master sm WHERE sm.bonus_type = decode('" +
                ClaimType + "','A','L','" + ClaimType + "') AND nvl(sm.bonus_loy_acq_flag,'" + ClaimType + "')='" +
                ClaimType + "' AND trunc(to_date('" + output +
                "','YYYY-MM-DD')) between sm.from_Date and sm.to_date AND sm.regn ='" + Region + "' AND (sm.STATE ='" +
                State + "' OR sm.STATE = '%') AND (sm.for_cd ='" + ForCd + "' OR sm.for_cd = '%') AND (sm.model_cd ='" +
                Model + "' OR sm.model_cd = '%') AND (sm.fueltype_cd ='" + FuelType +
                "' or sm.fueltype_cd = '%') AND (SM.VARIANT_CD ='" + VariantCode +
                "' OR SM.VARIANT_CD = '%') AND PRINCIPAL_MAP_CD =" + Principal +
                " AND SM.STATUS = 'A' AND SM.SLAB_CD = '000'";
            ResultSet rs2;
            BigDecimal totalbonus = new BigDecimal(0);
            BigDecimal MsilBonus = new BigDecimal(0);
            rs2 = getDBTransaction().createStatement(0).executeQuery(BonusMastrer);
            if (rs2.next()) {
                totalbonus = rs2.getBigDecimal(1);
                MsilBonus = rs2.getBigDecimal(2);
            } else {
                String BonusMastrerr =
                    "SELECT sm.tot_bonus, sm.msil_share FROM sm_bonus_master sm WHERE sm.bonus_type = decode('" +
                    ClaimType + "','A','L','" + ClaimType + "') AND nvl(sm.bonus_loy_acq_flag,'" + ClaimType + "')='" +
                    ClaimType + "' AND trunc(to_date('" + output +
                    "','YYYY-MM-DD')) between sm.from_Date and sm.to_date AND sm.regn ='" + Region +
                    "' AND (sm.STATE ='" + State + "' OR sm.STATE = '%') AND (sm.for_cd ='" + ForCd +
                    "' OR sm.for_cd = '%') AND (sm.model_cd ='" + Model +
                    "' OR sm.model_cd = '%') AND (sm.fueltype_cd ='" + FuelType +
                    "' or sm.fueltype_cd = '%') AND (SM.VARIANT_CD ='" + VariantCode +
                    "' OR SM.VARIANT_CD = '%') AND PRINCIPAL_MAP_CD =" + Principal +
                    " AND SM.STATUS = 'A' AND SM.SLAB_CD ='" + OldCarAge + "' AND (SM.CHANNEL= '%' OR SM.CHANNEL='" +
                    Channel + "')";
                ResultSet rs4;
                rs4 = getDBTransaction().createStatement(0).executeQuery(BonusMastrerr);
                if (rs3.next()) {
                    totalbonus = rs4.getBigDecimal(1);
                    MsilBonus = rs4.getBigDecimal(2);
                }
            }

            String additional =
                "SELECT nvl(sma.TOT_BONUS_ADD, 0), nvl(sma.MSIL_SHARE_ADD, 0) FROM sm_add_bonus_master sma WHERE sma.BONUS_TYPE ='" +
                ClaimType + "' AND trunc(to_date('" + output +
                "','YYYY-MM-DD')) between sma.from_Date and sma.to_date AND sma.regn ='" + Region +
                "' AND (sma.STATE ='" + State + "' OR sma.STATE = '%') AND (sma.for_cd ='" + ForCd +
                "' OR sma.for_cd = '%') AND (sma.MODEL ='" + Model + "' OR sma.MODEL = '%') AND (sma.FUEL ='" +
                FuelType +
                "' OR sma.FUEL = '%') AND (SMa.VARIANT_CD =(SELECT FUELTYPE_CD FROM gm_var WHERE variant_cd ='" +
                VariantCode + "') OR SMa.VARIANT_CD = '%') AND (sma.Old_Veh_Make ='" + OldMake +
                "' OR sma.Old_Veh_Make = '%') AND (sma.Old_Veh_Model ='" + OldModel +
                "' OR sma.Old_Veh_Model = '%') AND sma.STATUS = 'A' AND sma.PRINCIPAL_MAP_CD ='" + Principal +
                "' AND (SMA.CHANNEL= '%' OR SMA.CHANNEL='" + Channel + "')";
            ResultSet rs5;
            BigDecimal addtotalbonus = new BigDecimal(0);
            BigDecimal addMsilBonus = new BigDecimal(0);
            rs5 = getDBTransaction().createStatement(0).executeQuery(additional);
            if (rs5.next()) {
                addtotalbonus = rs5.getBigDecimal(1);
                addMsilBonus = rs5.getBigDecimal(2);
            }
            BigDecimal Totl = totalbonus.add(MsilBonus);
            BigDecimal addtotl = addtotalbonus.add(addMsilBonus);
            if (Totl.compareTo(addtotl) == -1) {
                Error = "Bonus Details not available";
            }
            BigDecimal Totl_add = totalbonus.add(addtotalbonus);
            BigDecimal bonus_add = MsilBonus.add(addMsilBonus);

            if (Totl_add.compareTo(InvChargeAmt) == -1 || Totl_add.compareTo(InvChargeAmt) == 0) {
                //                r.setAttribute("OEMContribution", bonus_add);
                r.setAttribute("MsilPayable", bonus_add);
            } else {
                //                r.setAttribute("OEMContribution", (bonus_add.divide(Totl_add)).multiply(InvChargeAmt));
                r.setAttribute("MsilPayable", (bonus_add.divide(Totl_add)).multiply(InvChargeAmt));
            }
            //            r.setAttribute("InvChargeAmt", InvChargeAmt);
            r.setAttribute("MasterBonusAmt", Totl_add);
            //            r.setAttribute("MsilPayable", r.getAttribute("OEMContribution"));
            r.setAttribute("MsilShare", bonus_add);

        } catch (SQLException e) {
            e.printStackTrace();
        }
        return Error;
    }

    /**
     * This method is used for getting New MSIL Contribution CSD Loyalty App
     */
    public String MSILContriNew(String Principal, String Dealer, String Loca, String Compa, String ParentGroup,
                                String SalesType) {
        ViewObjectImpl vo = this.getSdLoyltyExchClaimEOView1();
        Row r = vo.getCurrentRow();
        String inv_num = r.getAttribute("InvNum") == null ? null : r.getAttribute("InvNum").toString();
        String Model = r.getAttribute("InvModel") == null ? null : r.getAttribute("InvModel").toString();
        String vin = r.getAttribute("InvVin") == null ? null : r.getAttribute("InvVin").toString();
        String VariantCode = r.getAttribute("InvSubModel") == null ? null : r.getAttribute("InvSubModel").toString();
        String InvDate = r.getAttribute("InvDate") == null ? null : r.getAttribute("InvDate").toString();
        String output = InvDate.substring(0, 10);
        String ClaimType = r.getAttribute("ClaimType") == null ? null : r.getAttribute("ClaimType").toString();
        String FuelType = null;
        BigDecimal Slab =
            r.getAttribute("NewOldCarAge") == null ? (BigDecimal) r.getAttribute("OldCarAge") :
            (BigDecimal) r.getAttribute("NewOldCarAge");
        String OldMake = r.getAttribute("OldCarMake") == null ? "N" : r.getAttribute("OldCarMake").toString();
        String OldModel = r.getAttribute("OldCarModel") == null ? null : r.getAttribute("OldCarModel").toString();
        String OldVariant =
            r.getAttribute("OldCarSubModel") == null ? null : r.getAttribute("OldCarSubModel").toString();
        if (OldMake.equals("M")) {
            OldMake = "M";
        } else {
            OldMake = "N";
        }
        BigDecimal zero = new BigDecimal(0);
        BigDecimal OldCarAge =
            new BigDecimal(r.getAttribute("OldCarAge") == null ? "0" : r.getAttribute("OldCarAge").toString());
        //        BigDecimal BonusPassCust =
        //            new BigDecimal(r.getAttribute("BonusPassToCust") == null ? "0" :
        //                           r.getAttribute("BonusPassToCust").toString());
        
        BigDecimal lv_kces = zero;
        String lv_kces_query =
            "select nvl(sum(charge_value),0) from sd_inv_charges sic  where sic.dealer_map_cd=" + Dealer +
            " and sic.loc_cd = '" + Loca + "' and sic.parent_group='"+ParentGroup +"' and sic.inv_num= '"+inv_num+"' and sic.charge_cd='CE1'";
        
        try{
        ResultSet lv_kces_rs = getDBTransaction().createStatement(0).executeQuery(lv_kces_query);
        if (lv_kces_rs.next()) {
            lv_kces = lv_kces_rs.getBigDecimal(1);
        }
        }catch(Exception e){
            e.printStackTrace();
        }
        


        BigDecimal InvChargeAmt =
            new BigDecimal(r.getAttribute("InvChargeAmt") == null ? "0" : r.getAttribute("InvChargeAmt").toString());
        String sql =
            "SELECT am.region_cd, am.state_cd, am.for_cd,am.channel FROM am_dealer_loc am WHERE am.parent_group ='" +
            ParentGroup + "' AND am.dealer_map_cd =" + Dealer + " AND am.loc_Cd ='" + Loca + "'";
        ResultSet rs;
        String Region = null;
        String State = null;
        String ForCd = null;
        String Channel = null;
        String Error = null;
        try {
            rs = getDBTransaction().createStatement(0).executeQuery(sql);
            if (rs.next()) {
                Region = rs.getString(1);
                State = rs.getString(2);
                ForCd = rs.getString(3);
                Channel = rs.getString(4);
            }

            String Fuel = "SELECT FUELTYPE_CD FROM gm_var  WHERE variant_cd ='" + VariantCode + "'";
            ResultSet rs3;
            rs3 = getDBTransaction().createStatement(0).executeQuery(Fuel);
            if (rs3.next()) {
                FuelType = rs3.getString(1);
            }

            String year = "select to_char(invh_mfg_dt,'YYYY')  from si_invd where invd_vin='" + vin + "' and rownum=1";
            ResultSet rs4;
            String LvYear = null;
            rs4 = getDBTransaction().createStatement(0).executeQuery(year);
            if (rs4.next()) {
                LvYear = rs4.getString(1);
            }
            BigDecimal totalbonus = new BigDecimal(0);
            BigDecimal MsilBonus = new BigDecimal(0);
            BigDecimal addtotalbonus = new BigDecimal(0);
            BigDecimal addMsilBonus = new BigDecimal(0);
            BigDecimal sktltotalbonus = new BigDecimal(0);
            BigDecimal sktlMsilBonus = new BigDecimal(0);

            String totalbonusquery =
                "SELECT sf_get_total_bonus('A','" + ClaimType + "',trunc(to_date('" + output + "','YYYY-MM-DD')), '" +
                Region + "', '" + State + "','" + ForCd + "','" + Model + "','" + VariantCode + "','" + FuelType +
                "','BT',null,null,null,'" + Principal + "',SF_GET_EXCH_SLAB(" + Slab + "),'" + Channel + "','" + SalesType +
                "') FROM dual";
            System.out.println(" totalbonusquery "+totalbonusquery);
            ResultSet rs2;
            rs2 = getDBTransaction().createStatement(0).executeQuery(totalbonusquery);
            if (rs2.next()) {
                totalbonus = rs2.getBigDecimal(1);
            }

            String MsilBonusquery =
                "SELECT sf_get_total_bonus('A','" + ClaimType + "',trunc(to_date('" + output + "','YYYY-MM-DD')), '" +
                Region + "', '" + State + "','" + ForCd + "','" + Model + "','" + VariantCode + "','" + FuelType +
                "','BM',null,null,null,'" + Principal + "',SF_GET_EXCH_SLAB(" + Slab +"),'" + Channel + "','" + SalesType +
                "') FROM dual";
            System.out.println(" MsilBonusquery "+MsilBonusquery);
            ResultSet rs5;
            rs5 = getDBTransaction().createStatement(0).executeQuery(MsilBonusquery);
            if (rs5.next()) {
                MsilBonus = rs5.getBigDecimal(1);
            }

            String addtotalbonusquery =
                "SELECT sf_get_total_bonus('A','" + ClaimType + "',trunc(to_date('" + output + "','YYYY-MM-DD')), '" +
                Region + "', '" + State + "','" + ForCd + "','" + Model + "','" + VariantCode + "','" + FuelType +
                "','AM','" + OldMake + "','" + OldModel + "','" + OldVariant + "','" + Principal +
                "',SF_GET_EXCH_SLAB(" + Slab + "),'" + Channel + "','" + SalesType + "') FROM dual";
            ResultSet rs6;
            rs6 = getDBTransaction().createStatement(0).executeQuery(addtotalbonusquery);
            if (rs6.next()) {
                addtotalbonus = rs6.getBigDecimal(1);
            }

            String addMsilBonusquery =
                "SELECT sf_get_total_bonus('A','" + ClaimType + "',trunc(to_date('" + output + "','YYYY-MM-DD')), '" +
                Region + "', '" + State + "','" + ForCd + "','" + Model + "','" + VariantCode + "','" + FuelType +
                "','AT','" + OldMake + "','" + OldModel + "','" + OldVariant + "','" + Principal +
                "',SF_GET_EXCH_SLAB(" + Slab + "),'" + Channel + "','" + SalesType + "') FROM dual";
            ResultSet rs7;
            rs7 = getDBTransaction().createStatement(0).executeQuery(addMsilBonusquery);
            if (rs7.next()) {
                addMsilBonus = rs7.getBigDecimal(1);
            }

            String sktltotalbonusquery =
                "SELECT sf_get_total_bonus('A','" + ClaimType + "',trunc(to_date('" + output + "','YYYY-MM-DD')), '" +
                Region + "', '" + State + "','" + ForCd + "','" + Model + "','" + VariantCode + "','" + FuelType +
                "','ST',null,null,null,'" + Principal + "'," + LvYear +",'" + Channel + "','" + SalesType +
                "') FROM dual";
            ResultSet rs8;
            rs8 = getDBTransaction().createStatement(0).executeQuery(sktltotalbonusquery);
            if (rs8.next()) {
                sktltotalbonus = rs8.getBigDecimal(1);
            }

            String sktlMsilBonusquery =
                "SELECT sf_get_total_bonus('A','" + ClaimType + "',trunc(to_date('" + output + "','YYYY-MM-DD')), '" +
                Region + "', '" + State + "','" + ForCd + "','" + Model + "','" + VariantCode + "','" + FuelType +
                "','SM',null,null,null," + Principal + "," + LvYear +",'" + Channel + "','" + SalesType +
                "') FROM dual";
            ResultSet rs9;
            rs9 = getDBTransaction().createStatement(0).executeQuery(sktlMsilBonusquery);
            if (rs9.next()) {
                sktlMsilBonus = rs9.getBigDecimal(1);
            }

            BigDecimal Totl = totalbonus.add(MsilBonus);
            BigDecimal addtotl = addtotalbonus.add(addMsilBonus);
            BigDecimal stmladdtotl = sktltotalbonus.add(sktlMsilBonus);
            if (Totl.compareTo(zero) == -1 && addtotl.compareTo(zero) == -1 && stmladdtotl.compareTo(zero) == -1) {
                Error = "Bonus Details not available";
                return Error;
            }
            BigDecimal Totl_add = totalbonus.add(addtotalbonus).add(sktltotalbonus);
            BigDecimal bonus_add = MsilBonus.add(addMsilBonus).add(sktlMsilBonus);
            BigDecimal Msil_Payable_Amount = zero;
            System.out.println(Totl_add+" Totl_add.compareTo(InvChargeAmt) "+InvChargeAmt);
            if (Totl_add.compareTo(InvChargeAmt) <= 0) {
                //                r.setAttribute("OEMContribution", bonus_add);
                r.setAttribute("MsilPayable", bonus_add);
                Msil_Payable_Amount = bonus_add;
                System.out.println("Inside If ");
            } else {
                System.out.println("Inside else "+bonus_add.divide(Totl_add,4,RoundingMode.HALF_EVEN));
                //                r.setAttribute("OEMContribution", (bonus_add.divide(Totl_add)).multiply(InvChargeAmt));
                Msil_Payable_Amount = (bonus_add.divide(Totl_add,4,RoundingMode.HALF_EVEN)).multiply(InvChargeAmt).setScale(4,RoundingMode.HALF_EVEN);
                System.out.println("Msil_Payable_Amount "+Msil_Payable_Amount);
                r.setAttribute("MsilPayable", (bonus_add.divide(Totl_add,4,RoundingMode.HALF_EVEN)).multiply(InvChargeAmt).setScale(0, RoundingMode.HALF_EVEN));
            }
            
            System.out.println("MsilPayable "+                           Msil_Payable_Amount.add(((Msil_Payable_Amount.multiply(lv_kces))
                                                    .setScale(2, RoundingMode.HALF_EVEN)).divide(new BigDecimal(100)))
                           .setScale(0, RoundingMode.HALF_EVEN));
            
            r.setAttribute("MsilPayable",
                           Msil_Payable_Amount.add(((Msil_Payable_Amount.multiply(lv_kces))
                                                    .setScale(3, RoundingMode.HALF_EVEN)).divide(new BigDecimal(100)))
                           .setScale(0, RoundingMode.HALF_EVEN));


            //            r.setAttribute("InvChargeAmt", BonusPassCust);
            r.setAttribute("MasterBonusAmt", Totl_add);
            //            r.setAttribute("MsilPayable", r.getAttribute("OEMContribution"));
            r.setAttribute("MsilShare", bonus_add);
            r.setAttribute("FinalCustDisc", InvChargeAmt);
            r.setAttribute("ClaimStatus", "U");

          
            String claim_num = "SELECT 'C' || LPAD(EXCH_SEQ_NUM.nextval, 10, 0) FROM dual";
            ResultSet rs10;
            rs10 = getDBTransaction().createStatement(0).executeQuery(claim_num);
            if (rs10.next()) {
                r.setAttribute("ClaimId", rs10.getString(1));
            }  
            r.setAttribute("ClaimSync", "N");
            r.setAttribute("ClaimCategory", "N");
            
            
            String lv_fcb_amt_Qry =
                "select nvl(fcb_amt,0) from sh_invoice where parent_group = '" + ParentGroup +
                "'  and dealer_map_cd = " + Dealer + " and loc_cd = '" + Loca + "' and comp_fa= '"+Compa+"' and INV_NUM= '"+inv_num+"'";
            System.out.println(" lv_fcb_amt_Qry "+lv_fcb_amt_Qry);
            ResultSet rs11;
            rs11 = getDBTransaction().createStatement(0).executeQuery(lv_fcb_amt_Qry);
            BigDecimal lv_fcb_amt = BigDecimal.ZERO;
            if (rs11.next()) {
                lv_fcb_amt = rs11.getBigDecimal(1);
            }  
            
            Object result =
                callStoredFunction(Types.VARCHAR, "fnc_inv_exch_charges(?,?,?,?,?)",
                                   new Object[] { ParentGroup, Dealer, Loca, Compa, inv_num });
//            System.out.println("fnc_inv_exch_charges "+result);
            BigDecimal res = result != null ? new BigDecimal(result.toString()) : lv_fcb_amt;
            
            if(Totl_add.compareTo(BigDecimal.ZERO) > 0 && res.compareTo(BigDecimal.ZERO) == 0){
                r.setAttribute("ClaimCategory", "BMN");
            }else if(Totl_add.compareTo(BigDecimal.ZERO) > 0 && res.compareTo(BigDecimal.ZERO) > 0){
                r.setAttribute("ClaimCategory", "BMD");
            }else if(Totl_add.compareTo(BigDecimal.ZERO) == 0 ){
                r.setAttribute("ClaimCategory", "BMD");
            }
           
            

        } catch (SQLException e) {
            e.printStackTrace();
        }
        return Error;
    }

    /**
     * This method is used for Update Different tabel from CSD Loyalty App
     */
    public String UpdateCSD(String Parent, String Dealer, String Loc, String Comp, String SalesType) {
        System.out.println("UpdateCSD " + SalesType);
        ViewObjectImpl vo = this.getSdLoyltyExchClaimEOView1();
        Row r = vo.getCurrentRow();
        String FinCotrl = r.getAttribute("InvNum") == null ? null : r.getAttribute("InvNum").toString();
        String BuyId = r.getAttribute("BuyingId") == null ? null : r.getAttribute("BuyingId").toString();
        BigDecimal NewOldCarAge = (BigDecimal) r.getAttribute("NewOldCarAge");
        BigDecimal OldCarAge = (BigDecimal) r.getAttribute("OldCarAge") == null ? new BigDecimal(0) : (BigDecimal) r.getAttribute("OldCarAge");

        DBTransaction trx = (DBTransaction) getTransaction();
        CallableStatement st = null;
        String errMsg = null;

        try {
            if (!SalesType.equals("DB") && NewOldCarAge.compareTo(OldCarAge) != 0) {
                System.out.println(" not salestype " + SalesType);
                String shinvoice =
                    "update sh_invoice set old_car_age=nvl(" + NewOldCarAge +
                    ",old_car_age),modified_date=sysdate,modified_by='CLAIMLD' where parent_group='" + Parent +
                    "' and dealer_map_cd='" + Dealer + "' and loc_cd='" + Loc + "' and comp_fa='" + Comp +
                    "' and inv_num='" + FinCotrl + "'";
                // 2. Create the CallableStatement for the PL/SQL block
                System.out.println("shinvoice " + shinvoice);
                st = trx.createCallableStatement(shinvoice, 0);
                st.executeUpdate();
            }
            if (SalesType.equals("DB")) {
                String SH_TV_EVAL =
                    "UPDATE SH_TV_EVAL SH SET SH.EXCH_FLAG= 'Y', SH.EXCH_PARENT_GROUP='" + Parent +
                    "', SH.EXCH_DEALER_MAP_CD ='" + Dealer + "', SH.EXCH_LOC_CD='" + Loc + "', SH.EXCH_COMP_FA='" +
                    Comp + "', SH.EXCH_INV_NUM='" + FinCotrl + "', SH.MODIFIED_DATE= SYSDATE WHERE SH.BUYING_NUM ='" +
                    BuyId + "'";
                // 2. Create the CallableStatement for the PL/SQL block
                st = trx.createCallableStatement(SH_TV_EVAL, 0);
                st.executeUpdate();
            }
            getTransaction().commit();
            errMsg = "Success";
        } catch (Exception sqle) {
            // TODO: Add catch code
            sqle.printStackTrace();
        } finally {
            try {
                if (st != null) {
                    st.close();
                }
            } catch (Exception e) {
            }
        }
        return errMsg;
    }

    /**
     * Container's getter for CpNumberLOV1.
     * @return CpNumberLOV1
     */
    public ViewObjectImpl getCpNumberLOV1() {
        return (ViewObjectImpl) findViewObject("CpNumberLOV1");
    }

    /**
     * Container's getter for GmStateLOV1.
     * @return GmStateLOV1
     */
    public ViewObjectImpl getGmStateLOV1() {
        return (ViewObjectImpl) findViewObject("GmStateLOV1");
    }

    /**
     * Container's getter for MulCorporateVO1.
     * @return MulCorporateVO1
     */
    public ViewObjectImpl getMulCorporateVO1() {
        return (ViewObjectImpl) findViewObject("MulCorporateVO1");
    }

    /**
     * Container's getter for GmCityLOV1.
     * @return GmCityLOV1
     */
    public ViewObjectImpl getGmCityLOV1() {
        return (ViewObjectImpl) findViewObject("GmCityLOV1");
    }

    /**
     * Container's getter for MulCorporateTVO1.
     * @return MulCorporateTVO1
     */
    public ViewObjectImpl getMulCorporateTVO1() {
        return (ViewObjectImpl) findViewObject("MulCorporateTVO1");
    }

    /**
     * Container's getter for GenNextNumberRO1.
     * @return GenNextNumberRO1
     */
    public ViewObjectImpl getGenNextNumberRO1() {
        return (ViewObjectImpl) findViewObject("GenNextNumberRO1");
    }

    /**
     * Container's getter for AmDealerLocParamRO1.
     * @return AmDealerLocParamRO1
     */
    public ViewObjectImpl getAmDealerLocParamRO1() {
        return (ViewObjectImpl) findViewObject("AmDealerLocParamRO1");
    }


    public String gstDealerPreInvoice(String dealerMapCd, String locCode, String parentGroupCd) {
        String dealerGst = "GSTUNREGISTERED";
        try {
            ViewObjectImpl voi = getAmDealerLocParamRO1();
            voi.setNamedWhereClauseParam("bind_dealerMapCd", dealerMapCd);
            voi.setNamedWhereClauseParam("bind_locCode", locCode);
            voi.setNamedWhereClauseParam("bind_parentGroupCd", parentGroupCd);
            voi.executeQuery();
            if (voi.getEstimatedRowCount() > 0) {
                Row rowGst = voi.first();
                if (rowGst.getAttribute("GstNum") != null) {
                    dealerGst = rowGst.getAttribute("GstNum").toString();
                }
            }
        } catch (Exception e) {
            dealerGst = "GSTUNREGISTERED";
            e.printStackTrace();
        }
        return dealerGst;
    }

    /**
     * Container's getter for SdGrmRO1.
     * @return SdGrmRO1
     */
    public ViewObjectImpl getSdGrmRO1() {
        return (ViewObjectImpl) findViewObject("SdGrmRO1");
    }

    public String fetchHsnNumber(String vin, String variantCd, String pmc) {
        LOGGER.info("VIN--" + vin + "   VARIANT CD--" + variantCd + "    PMC--" + pmc);
        String hsn = null;
        try {
            ViewObjectImpl voiGrn = this.getSdGrnRO1();
            ViewObjectImpl voiVar = this.getGmVarRO1();
            voiGrn.setNamedWhereClauseParam("bind_vinNumber", vin);
            voiGrn.executeQuery();
            if (voiGrn.getEstimatedRowCount() > 0) {
                Row rowGrn = voiGrn.first();
                if (rowGrn.getAttribute("Hsn") != null) {
                    hsn = rowGrn.getAttribute("Hsn").toString();
                }
            }
            if (hsn != null && hsn.equalsIgnoreCase("NOHSN")) {
                voiVar.setNamedWhereClauseParam("bind_principalMapCd", pmc);
                voiVar.setNamedWhereClauseParam("bind_varCode", variantCd);
                voiVar.executeQuery();
                if (voiVar.getEstimatedRowCount() > 0) {
                    Row rowVar = voiVar.first();
                    if (rowVar.getAttribute("Hsn") != null) {
                        hsn = rowVar.getAttribute("Hsn").toString();
                    }
                    if (hsn.equalsIgnoreCase("NOHSN")) {
                        hsn = "8703";
                    }
                }
            }
            LOGGER.info("END HSN" + hsn);
        } catch (Exception e) {
            hsn = "8703";
            e.printStackTrace();
        }
        return hsn;
    }


    /**
     * The purpose of this method is to fetch and set  data based on search values.
     * @It will return String type flag,according to this flag we are showing the message
     * form name:Pre Invoice
      @param invoiceNum
     * @param invoiceType
     * @param fromDate
     * @param toDate
     * @return
     */

    public String doFilterDataPreInvoice(String invoiceNum, String invoiceType, Date fromDate, Date toDate) {
        String ret_val = "Y";


        System.out.println(fromDate + invoiceType + fromDate + toDate);

        ViewObjectImpl voiPreInv = this.getShPreInvoiceVO1();
        voiPreInv.appendViewCriteria(voiPreInv.getViewCriteria("SearchVC"));
        voiPreInv.setNamedWhereClauseParam("bind_fromDate", fromDate);
        voiPreInv.setNamedWhereClauseParam("bind_toDate", toDate);
        voiPreInv.setNamedWhereClauseParam("bind_invNum", invoiceNum);
        voiPreInv.setNamedWhereClauseParam("bind_invType", invoiceType);
        voiPreInv.executeQuery();
        if (voiPreInv.getEstimatedRowCount() <= 0) {
            ret_val = "N";
        }

        Row rw = voiPreInv.getCurrentRow();
        Map session = ADFContext.getCurrent().getSessionScope();

        getPreInvoiceDataProcedure(session.get("principalMapCd").toString(), session.get("dealerMapCd").toString(),
                                   session.get("locCd").toString(), session.get("compCode").toString(),
                                   session.get("parentGroupCd").toString(), (String) rw.getAttribute("OrderNum"),
                                   (String) rw.getAttribute("AllotNum"), (String) rw.getAttribute("VariantCd"),
                                   (String) rw.getAttribute("FiCd"));


        return ret_val;
    }

    /**
     * The purpose of this method is to reset of search data.
     */
    public void doResetPreInvoice() {
        this.getPreInvoiceST1().executeQuery();
        ViewObjectImpl voiInvVo = this.getShPreInvoiceVO1();
        voiInvVo.removeViewCriteria("SearchVC");
        voiInvVo.setNamedWhereClauseParam("bind_fromDate", null);
        voiInvVo.setNamedWhereClauseParam("bind_toDate", null);
        voiInvVo.setNamedWhereClauseParam("bind_invNum", null);
        voiInvVo.setNamedWhereClauseParam("bind_invType", null);
        voiInvVo.executeQuery();
    }

    public void exeSdDelTable(String delChlnNum, String compCd, String locCd, String parentCd, int dealerCd) {
        ViewObjectImpl vo1 = (ViewObjectImpl) this.getSdDeliveryDetailsVO1().getViewObject();
        LOGGER.warning("delivery challan num--->" + delChlnNum);
        LOGGER.warning("" + vo1.getQuery());
        vo1.setNamedWhereClauseParam("bind_compCode", compCd);
        vo1.setNamedWhereClauseParam("bind_dealerCd", dealerCd);
        vo1.setNamedWhereClauseParam("bind_locCode", locCd);
        vo1.setNamedWhereClauseParam("bind_parentCd", parentCd);
        vo1.setNamedWhereClauseParam("bind_delChlnNum", delChlnNum);
        vo1.setNamedWhereClauseParam("bind_StdMul", 'S');
        //vo1.setWhereClause("STD_MUL IN ('S','M')");
        LOGGER.warning("" + vo1.getQuery());
        LOGGER.warning("BEFORE TABLE SD DEL CALL" + new Timestamp(System.currentTimeMillis()));
        vo1.setSortBy("DelItemDesc");
        vo1.executeQuery();
        if (vo1.getEstimatedRowCount() > 0) {
            RowSetIterator rs = vo1.createRowSetIterator(null);
            while (rs.hasNext()) {
                Row row = rs.next();
                row.setAttribute("SelectDelYN", true);
            }
            rs.closeRowSetIterator();
        }
        LOGGER.warning("row count" + vo1.getEstimatedRowCount());
        //        RowSetIterator rsi = vo1.createRowSetIterator(null);
        //        while (rsi.hasNext()) {
        //            Row r = rsi.next();
        //            String stdMul =
        //            String deliveredItems = (String)r.getAttribute("DelItemDesc");
        //        }
        ViewObjectImpl vo2 = (ViewObjectImpl) this.getSdDeliveryDetailsForDelCheckVO().getViewObject();
        vo2.setNamedWhereClauseParam("bind_delChlnNum", delChlnNum);
        vo2.setNamedWhereClauseParam("bind_StdMul", 'M');
        vo2.setNamedWhereClauseParam("bind_compCode", compCd);
        vo2.setNamedWhereClauseParam("bind_dealerCd", dealerCd);
        vo2.setNamedWhereClauseParam("bind_locCode", locCd);
        vo2.setNamedWhereClauseParam("bind_parentCd", parentCd);
        LOGGER.warning("" + vo1.getQuery());
        vo2.setSortBy("DelItemDesc");
        vo2.executeQuery();
        if (vo2.getEstimatedRowCount() > 0) {
            RowSetIterator rs2 = vo2.createRowSetIterator(null);
            while (rs2.hasNext()) {
                Row row2 = rs2.next();
                row2.setAttribute("SelectChkListYN", true);
            }
            rs2.closeRowSetIterator();
        }
        LOGGER.warning("after TABLE SD DEL CALL" + new Timestamp(System.currentTimeMillis()));
    }


    public BigDecimal calculateInvoiceSellPrice(String dealerMapCd, String locCode, String compFa, String parentGroupCd,
                                                String billNature) {
        String bill_nature_val = null;
        BigDecimal sell_price = new BigDecimal(0);
        CallableStatement cst = null;
        if (billNature.equalsIgnoreCase("V")) {
            bill_nature_val = "C";
        } else if (billNature.equalsIgnoreCase("C")) {
            bill_nature_val = "V";
        }
        try {
            if (!billNature.equalsIgnoreCase("VC")) {
                DBTransactionImpl dbti = (DBTransactionImpl) getDBTransaction();
                cst =
                    dbti.createCallableStatement(("BEGIN " + "SP_GET_PRE_INVOICE_SELL_PRICE(?,?,?,?,?,?,?,?,?,?);" +
                                                  "END;"), 0);
                cst.setString(1, dealerMapCd);
                cst.setString(2, locCode);
                cst.setString(3, compFa);
                cst.setString(4, parentGroupCd);
                cst.setString(5, this.getShPreInvoiceVO1()
                                     .getCurrentRow()
                                     .getAttribute("OrderNum") + "");
                cst.setString(6, this.getShPreInvoiceVO1()
                                     .getCurrentRow()
                                     .getAttribute("InvType") + "");
                cst.setString(7, bill_nature_val);
                cst.registerOutParameter(8, Types.NUMERIC);
                cst.registerOutParameter(9, Types.VARCHAR);
                cst.registerOutParameter(10, Types.NUMERIC);
                cst.executeUpdate();
                if (cst.getObject(8) != null) {
                    sell_price = (BigDecimal) cst.getObject(8);
                    if (sell_price.compareTo(new BigDecimal(0)) != 0) {
                        this.getShPreInvoiceVO1()
                            .getCurrentRow()
                            .setAttribute("SellPrice", sell_price);
                    }
                }
            } else {
                this.getShPreInvoiceVO1()
                    .getCurrentRow()
                    .setAttribute("InterestAmt", new BigDecimal(0));
                this.getShPreInvoiceVO1()
                    .getCurrentRow()
                    .setAttribute("TdsAmt", new BigDecimal(0));

            }


        } catch (SQLException sqle) {
            sqle.printStackTrace();
        } finally {
            try {
                cst.close();
            } catch (SQLException sqle) {
                sqle.printStackTrace();
            }

        }
        return null;
    }


    public String validateOrderNumber(String dealerMapCd, String locCode, String parentGroupCd, String compFa,
                                      String custCd, String orderNum, String invType, String billNature) {
        BigDecimal errorCode = null;
        String ret_val = "Y";
        CallableStatement cst = null;
        try {
            DBTransactionImpl dbti = (DBTransactionImpl) getDBTransaction();
            cst =
                dbti.createCallableStatement(("BEGIN " + "SP_VALIDATE_ORDER_NUM_PRE(?,?,?,?,?,?,?,?,?,?);" + "END;"),
                                             0);
            cst.setString(1, dealerMapCd);
            cst.setString(2, locCode);
            cst.setString(3, parentGroupCd);
            cst.setString(4, compFa);
            cst.setString(5, custCd);
            cst.setString(6, orderNum);
            cst.setString(7, invType);
            cst.setString(8, billNature);
            cst.registerOutParameter(9, Types.VARCHAR);
            cst.registerOutParameter(10, Types.NUMERIC);
            cst.executeUpdate();
            if (cst.getObject(10) != null) {
                errorCode = (BigDecimal) cst.getObject(10);
                if (errorCode.compareTo(new BigDecimal(0)) == 1) {
                    ret_val = "N";
                    this.getShPreInvoiceVO1()
                        .getCurrentRow()
                        .setAttribute("OrderNum", null);
                    this.getShPreInvoiceVO1()
                        .getCurrentRow()
                        .setAttribute("OrderDate", null);

                }
                if(errorCode.compareTo(new BigDecimal(0)) == 1){
                    return cst.getString(9);
            }
            }else{
                System.out.println(" SP_VALIDATE_ORDER_NUM_PRE "+cst.getObject(10));
            }

        } catch (SQLException sqle) {
            ret_val = "Y";
            sqle.printStackTrace();
        } finally {
            try {
                cst.close();
            } catch (SQLException sqle) {
                sqle.printStackTrace();
            }
        }
        return ret_val;
    }

    public void doResetPreInvoiceST() {
        this.getPreInvoiceST1().executeQuery();
    }

    public void initPreInvoice() {
        this.getShPreInvoiceVO1().executeEmptyRowSet();
        this.getPreInvoiceST1().executeQuery();

    }

    public void doResetOrderBook(){
        this.getOrderBookingRO1().executeQuery();
        this.getShOrdbookMainVO1().executeEmptyRowSet();
    }

    public void getCustFullNamePreInvoice(String custCode){
        try {
            LOGGER.info("CUST CODE " + custCode );
          String custNm =  getCustomerNm(custCode);
//          String title = getCustomerTitle(custCode);
          Row curRow = getShPreInvoiceVO1().getCurrentRow();
            curRow.setAttribute("ShipTehsilT", "NA");
            curRow.setAttribute("ShipVillageT", "NA");
            curRow.setAttribute("InvPartyCd", custNm );
//            if(title == null){
//                curRow.setAttribute("InvPartyCd", custNm );
//            }else{
//            curRow.setAttribute("InvPartyCd",  custNm );
//            }
        }catch(Exception e){
            e.printStackTrace();
        }
        
    }

    public Integer stateCodeInPreInvoice(String custCode, String pmc) {
        try {
            LOGGER.info("CUST CODE " + custCode + "\n PMC=" + pmc);
            ViewObjectImpl voi = this.getGmCinVO1();
            ViewCriteria vc = voi.getViewCriteria("CustCdAndPmcVC");

            voi.applyViewCriteria(vc);
            voi.setNamedWhereClauseParam("bind_custCd", custCode);
            voi.setNamedWhereClauseParam("bind_pmc", pmc);

            voi.executeQuery();

            if (voi.getEstimatedRowCount() > 0) {
                LOGGER.info("____________FIVE____________________");

                ResultSet rs;
                Map session = ADFContext.getCurrent().getSessionScope();
                Integer dealerMapCd = new Integer(session.get("dealerMapCd").toString());
                Integer principalMapCd = new Integer(session.get("principalMapCd").toString());
                String parentGroupCd = session.get("parentGroupCd").toString();
                String locCd = session.get("locCd").toString();
                String userCode = session.get("userCode").toString();
                String compCode = String.valueOf(session.get("compCode"));
                String statusDesc = null;

                String claimQryId =
                    "select FOR_CD \n" + "from am_dealer_loc\n" + "where DEALER_MAP_CD='10019'\n" +
                    "AND PARENT_GROUP='CHOWG'\n" + "AND LOC_CD='TWS'";
                //                System.out.println(claimQryId);
                rs = getDBTransaction().createStatement(0).executeQuery(claimQryId);
                if (rs.next()) {
                    statusDesc = rs.getString(1);
                }
                String generation = "";
                //            generation =
                //                                preInvoiceNumberGeneration(dealerMapCd, pmc, locCd, compCode, "PRI", 2021);
                //            generation = exeGenNextNum(Integer.parseInt(dealerMapCd.toString()), String.valueOf(principalMapCd), String.valueOf(locCd), String.valueOf(compCode), "PRI", 2021);
                //           System.out.println("inv Number---"+generation);
                //            this.getShPreInvoiceVO1()
                //                .getCurrentRow()
                //                .setAttribute("InvNum", generation);
                //            this.getShPreInvoiceVO1()
                //                .getCurrentRow()
                //                .setAttribute("BillNature", "VC");
                //            this.getShPreInvoiceVO1()
                //                .getCurrentRow()
                //                .setAttribute("PriceForCd", statusDesc);
                Row row = voi.first();
                System.out.println("row.getAttribute(\"StateCd\")" + row.getAttribute("StateCd"));
                this.getShPreInvoiceVO1()
                    .getCurrentRow()
                    .setAttribute("StateCdT", (String)row.getAttribute("StateCd"));
                this.getShPreInvoiceVO1()
                    .getCurrentRow()
                    .setAttribute("CustGstNumT", (String)row.getAttribute("GstNum"));
                
                DBTransaction trx = (DBTransaction) getTransaction();
                CallableStatement st = null;
                String t_cust_state_cd = null;
                String t_DEALER_STATE = null;
                //   System.out.println("inside exeSpSendOTP");
                String stmt = "begin SP_GET_GST_STATE (?,?,?,?,?,?,?,?,?,?,?); end;";
                try {
                    st = trx.createCallableStatement(stmt, 0);
                    st.setInt(1, principalMapCd);
                    st.setString(2, custCode);
                    st.setInt(3, dealerMapCd);
                    st.setString(4, parentGroupCd);
                    st.setString(5, locCd);
                    st.registerOutParameter(6, Types.VARCHAR);
                    st.registerOutParameter(7, Types.VARCHAR);
                    st.registerOutParameter(8, Types.VARCHAR);
                    st.registerOutParameter(9, Types.VARCHAR);
                    st.registerOutParameter(10, Types.VARCHAR);
                    st.registerOutParameter(11, Types.NUMERIC);
                    st.executeUpdate();
                    t_cust_state_cd = st.getString(6);
                    t_DEALER_STATE = st.getString(7);
                    
                    System.out.println(t_cust_state_cd+" t_cust_state_cd t_DEALER_STATE "+t_DEALER_STATE);
                    
                    String invTyp = (String)this.getShPreInvoiceVO1().getCurrentRow().getAttribute("InvType");
                    
                    if( t_cust_state_cd != null && t_DEALER_STATE != null && !t_cust_state_cd.equalsIgnoreCase(t_DEALER_STATE) && invTyp != null && !invTyp.equalsIgnoreCase("VSC")){
//                        System.out.println("Dealer and Customer state are different.You may decide to choose IGST");
                        return 1;
                    }
                    
                } catch (SQLException sqle) {
                    // TODO: Add catch code
                    sqle.printStackTrace();
                    
                } finally {
                    try {
                        if (st != null) {
                            st.close();
                        }
                    } catch (Exception e) {
                    }
                }
                
                
                //            this.getShPreInvoiceVO1()
                //                .getCurrentRow()
                //                .setAttribute("InvoiceType", "CUS");


                //            ViewObjectImpl vo12 = this.getAmDealerVO1();
                //            LOGGER.info("____________ONE____________________");
                //                ViewCriteria vc1 = vo12.getViewCriteria("AmDealerVOCriteria1");
                //            LOGGER.info("____________TWO____________________");
                //
                //            vo12.applyViewCriteria(vc1);
                //            vo12.setNamedWhereClauseParam("pDealerMapCd", ADFContext.getCurrent().getSessionScope().get("dealerMapCd"));
                //            vo12.setNamedWhereClauseParam("pParentGrp", ADFContext.getCurrent().getSessionScope().get("parentGroupCd"));
                //            LOGGER.info("____________THREE____________________");
                //
                //            vo12.executeQuery();
                //
                //            if(vo12.getRowCount() > 0){
                //                Row row12=vo12.first();
                //                    this.getShPreInvoiceVO1()
                //                        .getCurrentRow()
                //                        .setAttribute("BookDlrCd", row12.getAttribute("MulDealerCd"));
                //        }
                //CUS
               
                
            }else{
                //GENERAL.DISP_TEXT('Please enter State in Customer Master','Error');
                return 2;
            }
            LOGGER.info("____________SIX____________________");
        } catch (Exception ex) {
            ex.printStackTrace();
        }
        return 0;
    }


    /**
     * Container's getter for GmCinVO1.
     * @return GmCinVO1
     */
    public ViewObjectImpl getGmCinVO1() {
        return (ViewObjectImpl) findViewObject("GmCinVO1");
    }


    public void searchGRN(String grnNum, String InvNum) {
                ViewObjectImpl searchvo = this.getGRNSearchDualRO1();
                Row searchrow  = searchvo.getCurrentRow();
                System.out.println(searchrow.getAttribute("FinanceControlNum")+"--fincntrlnum---");
            ViewObjectImpl vo = this.getShGrnVO1();
            ViewCriteria vc = vo.getViewCriteria("ShGrnVOCriteria");
            vo.applyViewCriteria(vc);
            vo.setNamedWhereClauseParam("bindGrnNum", grnNum);
            vo.setNamedWhereClauseParam("bindInvoiceNum", InvNum);
                vo.setNamedWhereClauseParam("bindFinCntrlNum", searchrow.getAttribute("FinanceControlNum"));
            vo.executeQuery();
            Row row = vo.first();
                if(row != null) {
            row.setAttribute("GrnNumT",row.getAttribute("GrnNum"));
            
            System.out.println(row.getAttribute("FinCntNum")+"FinCntNum---");
                }
                System.out.println(vo.getEstimatedRowCount()+"getrowcount---");
            ViewObjectImpl vo1 = this.getSdGrnVO2();
        //        ViewCriteria vc1 = vo1.getViewCriteria("SdGrnVOCriteria");
        //        vo1.applyViewCriteria(vc1);
                vo1.setNamedWhereClauseParam("bind_grn_num", grnNum);
            //vo1.setNamedWhereClauseParam("bindInvNum", InvNum);
            vo1.executeQuery();
                System.out.println(vo1.getEstimatedRowCount()+"vo1---rowcount");

        }


    /**
     * Container's getter for AmListRO2.
     * @return AmListRO2
     */
    public ViewObjectImpl getAmListForDelChkLstRO() {
        return (ViewObjectImpl) findViewObject("AmListForDelChkLstRO");
    }


    /**
     * Container's getter for GdCinRO1.
     * @return GdCinRO1
     */
    public ViewObjectImpl getGdCinRO1() {
        return (ViewObjectImpl) findViewObject("GdCinRO1");
    }


    public String outStandingAmtAndInvTypeValues(String dealerMapCd, String parentGroupCd, String locCode,
                                                 String custCode, String pmc, String compFa) {
        LOGGER.info("_______________START");
        String flag = "N";
        try {
            ViewObjectImpl voi = this.getGdCinRO1();
            ViewObjectImpl gmCin = this.getGmCinVO1();
            voi.setNamedWhereClauseParam("bind_custCd", custCode);
            voi.setNamedWhereClauseParam("bind_dealerMapCd", dealerMapCd);
            voi.setNamedWhereClauseParam("bind_locCode", locCode);
            voi.setNamedWhereClauseParam("bind_parentGroupCd", parentGroupCd);
            if (voi.getEstimatedRowCount() > 0) {
                Row row = voi.first();
                if (row.getAttribute("OutstandingAmt") != null) {
                    this.getShPreInvoiceVO1()
                        .getCurrentRow()
                        .setAttribute("OutStandingAmtT", row.getAttribute("OutstandingAmt"));
                }
            }
            LOGGER.info("***************SECOND*******SECOND************************");
            ViewCriteria vcGmCin = gmCin.getViewCriteria("SezCountVC");
            gmCin.applyViewCriteria(vcGmCin, false);
            gmCin.setNamedWhereClauseParam("bind_custCode", custCode);
            gmCin.setNamedWhereClauseParam("bind_custSez", "Y");
            gmCin.setNamedWhereClauseParam("bind_pmc", pmc);
            gmCin.executeQuery();
            if (gmCin.getEstimatedRowCount() > 0) {
                flag = "Y";
                this.getShPreInvoiceVO1()
                    .getCurrentRow()
                    .setAttribute("InvType", "VSC");
            }
            LOGGER.info("***************THIRD*******THIRD************************");


            try {
                LOGGER.info("********START KCES**************");
                ViewObjectImpl voiKces = this.getKcesStatePreInvoiceRO1();
                voiKces.setNamedWhereClauseParam("bind_dealerMapCd", dealerMapCd);
                voiKces.setNamedWhereClauseParam("bind_locCode", locCode);
                voiKces.setNamedWhereClauseParam("bind_parentGroupCd", parentGroupCd);
                voiKces.executeQuery();
                if (voiKces.getEstimatedRowCount() > 0) {
                    Row kcesRow = voiKces.first();
                    this.getShPreInvoiceVO1()
                        .getCurrentRow()
                        .setAttribute("KcesStateT", kcesRow.getAttribute("KcesState"));
                } else {
                    this.getShPreInvoiceVO1()
                        .getCurrentRow()
                        .setAttribute("KcesStateT", "N");
                }
                LOGGER.info("********END KCES**************");

            } catch (Exception e) {
                // TODO: Add catch code
                e.printStackTrace();
            }

        } catch (Exception e) {
            flag = "N";
            e.printStackTrace();
        }
        return flag;
    }

    /**To execute executeShComplaintsVO on search
     * @param ComplNum ComplNum
     * @return  execute VO
     */
    public void executeShComplaintsVO(String complNum) {
        //To execute executeShComplaintsVO on search
        LOGGER.info("Enter into executeShComplaintsVO ");
        ViewObjectImpl shCompvo = this.getShComplaintsCmsVO1();
        ViewCriteria vc = shCompvo.getViewCriteria("ShComplaintsCmsVOCriteria");
        shCompvo.applyViewCriteria(vc);
        LOGGER.info("Sh_complaints Query--> " + shCompvo.getQuery());

        shCompvo.setNamedWhereClauseParam("PARENT_GRP_CD", ADFContext.getCurrent()
                                                                     .getSessionScope()
                                                                     .get("parentGroupCd"));
        shCompvo.setNamedWhereClauseParam("DEALER_MAPCD", ADFContext.getCurrent()
                                                                    .getSessionScope()
                                                                    .get("dealerMapCd"));
        shCompvo.setNamedWhereClauseParam("COMP_FACODE", ADFContext.getCurrent()
                                                                   .getSessionScope()
                                                                   .get("compCode"));
        shCompvo.setNamedWhereClauseParam("LOC_CD", ADFContext.getCurrent()
                                                              .getSessionScope()
                                                              .get("locCd"));
        shCompvo.setNamedWhereClauseParam("COMPL_NUM", complNum);
        shCompvo.executeQuery();
        LOGGER.info("Exit from executeShComplaintsVO");
    }

    /** To execute getSdComplaintsCmsReadOnlyVO on search
     * @param ComplNum ComplNum
     * @return  execute VO
     */
    public String executeSdComplaintsVO(String complNum) {
        //To execute getSdComplaintsCmsReadOnlyVO on search
        String status = "O";
        LOGGER.info("Enter into executeSdComplaintsVO ");
        ViewObjectImpl sdCompvo = this.getSdComplaintsCmsReadOnlyVO1();
        ViewCriteria vc = sdCompvo.getViewCriteria("SdComplaintsCmsReadOnlyVOCriteria");
        sdCompvo.applyViewCriteria(vc);
        sdCompvo.setNamedWhereClauseParam("PARENT_GRP_CD", ADFContext.getCurrent()
                                                                     .getSessionScope()
                                                                     .get("parentGroupCd"));
        sdCompvo.setNamedWhereClauseParam("DEALER_MAPCD", ADFContext.getCurrent()
                                                                    .getSessionScope()
                                                                    .get("dealerMapCd"));
        sdCompvo.setNamedWhereClauseParam("COMP_FACODE", ADFContext.getCurrent()
                                                                   .getSessionScope()
                                                                   .get("compCode"));
        sdCompvo.setNamedWhereClauseParam("LOC_CD", ADFContext.getCurrent()
                                                              .getSessionScope()
                                                              .get("locCd"));
        sdCompvo.setNamedWhereClauseParam("COMPL_NUM", complNum);
        sdCompvo.executeQuery();
        if (sdCompvo.getRowCount() > 0) {
            Row row = sdCompvo.last();
            status = row.getAttribute("CompStatus").toString();
        }
        LOGGER.info("Status-->" + status);
        LOGGER.info("Exit from executeSdComplaintsVO");
        return status;
    }

    /** To execute executeSdComplaintsFollowupVO on search
     * @param ComplNum
     * @return execute VO
     */
    public String[] executeSdComplaintsFollowupVO(String complNum) {
        //To execute executeSdComplaintsFollowupVO on search
        LOGGER.info("enter into executeSdComplaintsFollowupVO");

        String sdfollowupsrnumstr = "";
        String sdcompfollowupsrlstr = "";
        String sdcompfollowupDateStr = "";
        ViewObjectImpl shCompvo = this.getSdComplaintsFollowupCmsReadOnlyVO1();
        ViewCriteria vc = shCompvo.getViewCriteria("SdComplaintsFollowupCmsReadOnlyVOCriteria");
        shCompvo.applyViewCriteria(vc);
        shCompvo.setNamedWhereClauseParam("PARENT_GRP_CD", ADFContext.getCurrent()
                                                                     .getSessionScope()
                                                                     .get("parentGroupCd"));
        shCompvo.setNamedWhereClauseParam("DEALER_MAPCD", ADFContext.getCurrent()
                                                                    .getSessionScope()
                                                                    .get("dealerMapCd"));
        shCompvo.setNamedWhereClauseParam("COMP_FACODE", ADFContext.getCurrent()
                                                                   .getSessionScope()
                                                                   .get("compCode"));
        shCompvo.setNamedWhereClauseParam("LOC_CD", ADFContext.getCurrent()
                                                              .getSessionScope()
                                                              .get("locCd"));
        shCompvo.setNamedWhereClauseParam("COMPL_NUM", complNum);
        shCompvo.executeQuery();
        if (shCompvo.getRowCount() > 0) {
            Row row = shCompvo.first();
            sdfollowupsrnumstr = row.getAttribute("FollowupSrlNum").toString();
            sdcompfollowupsrlstr = row.getAttribute("CompSrlNum").toString();
            sdcompfollowupDateStr = row.getAttribute("FollowupDate").toString();
        }
        if (shCompvo.getRowCount() == 0) {
            sdfollowupsrnumstr = "0";
            sdcompfollowupsrlstr = "1";
            sdcompfollowupDateStr = "0";
        }
        LOGGER.info("FollowUpserialnum-->" + sdfollowupsrnumstr + "complserialnumber-->" + sdcompfollowupsrlstr);
        LOGGER.info("Exit from executeSdComplaintsFollowupVO");
        return new String[] { sdfollowupsrnumstr, sdcompfollowupsrlstr, sdcompfollowupDateStr };
    }

    /** this method is to insert data into shcomplaintsfollowup table
     * @param parent    parent
     * @param dealer   dealer
     * @param compFa   compFa
     * @param loc     Loc
     * @param complNum    complaint number
     * @param complDate    complaint date
     * @param compSrlNum    complaintserial number
     * @param followupSrNum  followupserialnumber
     * @param followupDate   followupdate
     * @param followupBy     followupby
     * @param observation    observation
     * @param solution       solution
     * @param remarks       remarks
     * @param creationDate   creationDate
     * @param createdBy     createdBy
     * @param modifiedDate  modifiedDate
     * @param modifiedBy    modifiedBy
     * @return   errorcode and error msg
     */
    public String insertIntoShCompFollowup(String parent, int dealer, String compFa, String loc, String complNum,
                                           Date complDate, int compSrlNum, int followupSrNum, Date followupDate,
                                           String followupBy, String observation, String solution, String remarks,
                                           Date creationDate, String createdBy, Date modifiedDate, String modifiedBy) {
        //this is to insert data into sd_comp_followup table
        LOGGER.info("enter into InsertShcomplaintsfollowup");
        DBTransaction trx = (DBTransaction) getTransaction();
        CallableStatement st = null;
        String errMsg = null;
        java.sql.Date complDatesql = complDate.dateValue();
        java.sql.Date followupDatesql = followupDate.dateValue();
        long millis = System.currentTimeMillis();
        java.sql.Date creationDatesql = new java.sql.Date(millis);
        java.sql.Date modifiedDatesql = modifiedDate.dateValue();

        try {
            // 1. Define the PL/SQL block for the statement to invoke
            String stmt =
                "insert into sd_comp_followup (PARENT_GROUP,DEALER_MAP_CD,COMP_FA,LOC_CD,COMPL_NUM,COMPL_DATE,COMP_SRL_NUM,FOLLOWUP_SRL_NUM,FOLLOWUP_DATE,FOLLOWUP_BY,OBSERVATION,SOLUTION,REMARKS,CREATED_DATE,CREATED_BY)values(?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)";

            // 2. Create the CallableStatement for the PL/SQL block
            st = trx.createCallableStatement(stmt, 0);
            // 3. Register the positions and types of the OUT parameters

            // 4. Set the bind values of the IN parameters
            st.setString(1, parent);
            st.setInt(2, dealer);
            st.setString(3, compFa);
            st.setString(4, loc);
            st.setString(5, complNum);
            st.setDate(6, complDatesql);
            st.setInt(7, compSrlNum);
            st.setInt(8, followupSrNum);
            st.setDate(9, followupDatesql);
            st.setString(10, followupBy);
            st.setString(11, observation);
            st.setString(12, solution);
            st.setString(13, remarks);
            st.setObject(14,creationDate);
            st.setString(15, createdBy);
            //st.setDate(16, null);
            //st.setString(17, null);
            // 5. Execute the statement
            st.executeUpdate();
            getTransaction().commit();
            errMsg = "Success";

        } catch (Exception sqle) {
//            sqle.printStackTrace();
            // TODO: Add catch code
            sqle.getMessage();
        } finally {
            try {
                if (st != null) {
                    st.close();
                }
            } catch (Exception e) {
            }
        }
        LOGGER.info("Exit from InsertShcomplaintsfollowup" + errMsg);
        return errMsg;

    }

    /**to reset the sdComplaintsfollowupVo
     */
    public void resetShComplaitsVO() {
        //this is to reset  the sh_complaints vo
        LOGGER.info("enter into resetShComplaitsVO");
        ViewObjectImpl shCompvo = this.getShComplaintsCmsVO1();
        shCompvo.executeEmptyRowSet();
        LOGGER.info("Exit from resetShComplaitsVO");
    }

    /**to reset the sdComplaintsfollowupVo
     */
    public void resetSdComplaitsVO() {
        //this is to reset  the sd_complaints tavoble
        LOGGER.info("enter into resetSdComplaitsVO");
        ViewObjectImpl shCompvo = this.getSdComplaintsCmsReadOnlyVO1();
        shCompvo.executeEmptyRowSet();
        LOGGER.info("Exit from resetSdComplaitsVO");
    }

    /**to reset the sdComplaintsfollowupVo
     */
    public void resetSdComplaitsfollowupVO() {
        //this is to reset  the sd_comp_followup vo
        LOGGER.info("enter into resetSdComplaitsfollowupVO");
        ViewObjectImpl shCompvo = this.getSdComplaintsFollowupCmsReadOnlyVO1();
        shCompvo.executeEmptyRowSet();
        LOGGER.info("Exit from resetSdComplaitsfollowupVO");
    }

    /**to reset the restcmsTransientVo
     */
    public void resetcmstransientVO() {
        //this is to reset  the transient vo
        LOGGER.info("Enter into resetcmstransientVO");
        ViewObject shCompvo = this.getCmsFollowupTransientVO1();
        shCompvo.executeQuery();
        LOGGER.info("Exit from resetcmstransientVO");
    }

    /**to reset the statusVo
     */
    public void resetcmstatusVO() {
        ViewObject cmsstsvo = this.getCmsFollowupstatustransientVO1();

        cmsstsvo.executeQuery();
    }

    /**to reset the initCMSfollowupVo
     */
    public void initCMSFollowup() {
        LOGGER.info("enter into initCMSFollowup");
        ViewObjectImpl vo = this.getShComplaintsCmsVO1();
        vo.executeEmptyRowSet();
        ViewObjectImpl vo1 = this.getSdComplaintsCmsReadOnlyVO1();
        vo1.executeEmptyRowSet();
        ViewObjectImpl vo2 = this.getSdComplaintsFollowupCmsReadOnlyVO1();
        vo2.executeEmptyRowSet();
        LOGGER.info("exit from initCMSFollowup");

    }


    /** this is to update sh_complaints table data
     * @param parent  parent code
     * @param dealer   dealer map code
     * @param compFa   comp fa code
     * @param loc      loc code
     * @param complNum   complaint number
     * @param duration   followup duration number
     * @return       error code and error message
     */
    public String updateShComplaints(String parent, int dealer, String compFa, String loc, String complNum,
                                     int duration) {
        //this is to update sh_complaints table data
        LOGGER.info("enter into updateShComplaintsupdate");
        DBTransaction trx = (DBTransaction) getTransaction();
        CallableStatement st = null;
        String errMsg = null;
        try {
            // 1. Define the PL/SQL block for the statement to invoke
            String stmt =
                " UPDATE SH_COMPLAINTS SET COMP_STATUS = 'C',COMPLAINT_DURATION ='" + duration +
                "'WHERE PARENT_GROUP ='" + parent + "'AND DEALER_MAP_CD ='" + dealer + "'AND COMP_FA ='" + compFa +
                "' AND LOC_CD ='" + loc + "'AND COMPL_NUM ='" + complNum + "'";
            // 2. Create the CallableStatement for the PL/SQL block
            st = trx.createCallableStatement(stmt, 0);
            // 3. Register the positions and types of the OUT parameters

            st.executeUpdate();
            getTransaction().commit();
            errMsg = "Success";
        } catch (Exception sqle) {
            // TODO: Add catch code
            sqle.getMessage();
        } finally {
            try {
                if (st != null) {
                    st.close();
                }
            } catch (Exception e) {
            }
        }
        LOGGER.info("Exit from updateShComplaintsupdate");
        return errMsg;
    }

    /**this is to update sd_complaints table data
     * @param parent  parent code
     * @param dealer   Dealer id
     * @param compFa   compfa code
     * @param loc       loc code
     * @param complNum     complaint number
     * @param modifiedDate   modified date
     * @param modifiedBy     modified by
     * @param closedBy       closed by
     * @param duration       followup duration
     * @return               success or failure
     */
    public String updateSdComplaints(String parent, int dealer, String compFa, String loc, String complNum,
                                     Date modifiedDate, String modifiedBy, String closedBy, int duration) {
        //this is to update sd_complaints table data
        LOGGER.info("enter into updateSdComplaints");
        java.sql.Date modifiedDatesql = modifiedDate.dateValue();
        DBTransaction trx = (DBTransaction) getTransaction();
        CallableStatement st = null;
        String errMsg = null;
        try {
            // 1. Define the PL/SQL block for the statement to invoke
            String stmt =
                "UPDATE SD_COMPLAINTS SET COMP_STATUS = 'C',FOLLOWUP_DURATION = " + duration +
                ",MODIFIED_DATE=TO_DATE('" + modifiedDatesql + "','YYYY-MM-DD'),MODIFIED_BY='" + modifiedBy +
                "',CLOSED_BY='" + closedBy + "' WHERE PARENT_GROUP ='" + parent + "' AND DEALER_MAP_CD =" + dealer +
                " AND COMP_FA = '" + compFa + "' AND LOC_CD = '" + loc + "' AND COMPL_NUM ='" + complNum + "'";
            // 2. Create the CallableStatement for the PL/SQL block
            st = trx.createCallableStatement(stmt, 0);
            // 3. Register the positions and types of the OUT parameters
            st.executeUpdate();
            getTransaction().commit();
            errMsg = "Success";
        } catch (Exception sqle) {
            // TODO: Add catch code
            sqle.getMessage();
        } finally {
            try {
                if (st != null) {
                    st.close();
                }
            } catch (Exception e) {
            }
        }
        LOGGER.info("Exit from updateSdComplaints");

        return errMsg;
    }

    /**
     * Container's getter for KcesStatePreInvoiceRO1.
     * @return KcesStatePreInvoiceRO1
     */
    public ViewObjectImpl getKcesStatePreInvoiceRO1() {
        return (ViewObjectImpl) findViewObject("KcesStatePreInvoiceRO1");
    }

    /**
     * Container's getter for ShOrdChargesVO1.
     * @return ShOrdChargesVO1
     */
    public ViewObjectImpl getShOrdChargesVO1() {
        return (ViewObjectImpl) findViewObject("ShOrdChargesVO1");
    }

    /**
     * Container's getter for GmFacultyMaterVO1.
     * @return GmFacultyMaterVO1
     */
    public GmFacultyMaterVOImpl getGmFacultyMaterVO1() {
        return (GmFacultyMaterVOImpl) findViewObject("GmFacultyMaterVO1");
    }

    /**
     * Container's getter for TrainerMasterDualVO1.
     * @return TrainerMasterDualVO1
     */
    public TrainerMasterDualVOImpl getTrainerMasterDualVO1() {
        return (TrainerMasterDualVOImpl) findViewObject("TrainerMasterDualVO1");
    }

    public void setTrainerCdAction() {
        ResultSet rs = null;
        String trnrCd = null;
        try {

            String trnrCdQry = "select 'TR'||lpad(SEQ_FACULTY_CD.NEXTVAL,6,0)  from dual";
            //            System.out.println(trnrCdQry);
            rs = getDBTransaction().createStatement(0).executeQuery(trnrCdQry);
            if (rs.next()) {
                trnrCd = rs.getString(1);
                //                System.out.println(trnrCd + "   trnrCd");
            }
        } catch (Exception e) {
            throw new JboException(e.getMessage());
        } finally {
            if (rs != null) {
                try {
                    rs.close();
                } catch (Exception e) {
                    e.printStackTrace();
                }
            }
        }
        ViewObjectImpl gmFcltVO = this.getGmFacultyMaterVO1();
        Row createGmFclty = gmFcltVO.getCurrentRow();
        createGmFclty.setAttribute("FacCd", trnrCd);
        createGmFclty.setAttribute("AgencyCd", this.getTrainerMasterDualVO1()
                                                   .getCurrentRow()
                                                   .getAttribute("AgencyCd"));
    }

    public String mobileNumValidator(String mobNum) {
        ResultSet rs = null;
        int count = 0;
        String ret = "N";
        String agncyCd = (String) this.getGmFacultyMaterVO1()
                                      .getCurrentRow()
                                      .getAttribute("AgencyCd");
        try {

            String countQry =
                "SELECT count(*)  FROM gm_faculty_master WHERE FAC_MOBILE='" + mobNum + "' AND AGENCY_CD='" + agncyCd +
                "'";
            //            System.out.println(countQry);
            rs = getDBTransaction().createStatement(0).executeQuery(countQry);
            if (rs.next()) {
                count = rs.getInt(1);
                //                System.out.println(count + "   count");
                if (count > 0) {
                    return "N";
                } else {
                    return "Y";
                }
            }
        } catch (Exception e) {
            throw new JboException(e.getMessage());
        } finally {
            if (rs != null) {
                try {
                    rs.close();
                } catch (Exception e) {
                    e.printStackTrace();
                }
            }
        }
        return ret;
    }

    /**
     * Container's getter for GdFacultyScoreRVO1.
     * @return GdFacultyScoreRVO1
     */
    public GdFacultyScoreRVOImpl getGdFacultyScoreRVO1() {
        return (GdFacultyScoreRVOImpl) findViewObject("GdFacultyScoreRVO1");
    }

    public void filterFcultyScore() {

        ViewObject gmFactVO = this.getGmFacultyMaterVO1();
        ViewObjectImpl vo = this.getGdFacultyScoreRVO1();
        vo.setNamedWhereClauseParam("BindAgncyCd", gmFactVO.getCurrentRow().getAttribute("AgencyCd"));
        vo.setNamedWhereClauseParam("BindFacCd", gmFactVO.getCurrentRow().getAttribute("FacCd"));
        vo.setNamedWhereClauseParam("BindPrincipal", gmFactVO.getCurrentRow().getAttribute("PrincipalMapCd"));
        vo.executeQuery();

    }

    public void updateBackScore() {
        ViewObjectImpl vo = this.getGdFacultyScoreRVO1();
        ViewObject gmFactVO = this.getGmFacultyMaterVO1();
        CallableStatement st = null;
        String facCd = (String) gmFactVO.getCurrentRow().getAttribute("FacCd");
        if (vo.getAllRowsInRange().length > 0) {
            RowSetIterator scoreRsi = vo.createRowSetIterator(null);
            while (scoreRsi.hasNext()) {
                Row scoreRw = scoreRsi.next();
                String progCd =
                    scoreRw.getAttribute("ProgramCd") == null ? "" : (String) scoreRw.getAttribute("ProgramCd");
                String CertYn = scoreRw.getAttribute("CertYn") == null ? "" : (String) scoreRw.getAttribute("CertYn");
                BigDecimal CertScore =
                    scoreRw.getAttribute("CertScore") == null ? new BigDecimal(0) :
                    (BigDecimal) scoreRw.getAttribute("CertScore");
                Timestamp CertDate = (Timestamp) scoreRw.getAttribute("CertDate");
                String UsrCd = (String) ADFContext.getCurrent()
                                                  .getSessionScope()
                                                  .get("userCode");
												System.out.println(progCd+"  progCd ");
												System.out.println(CertYn+"  CertYn ");
												System.out.println(CertScore+"  CertScore ");
												System.out.println(CertDate+"  CertDate ");
                String sql =
                    "SELECT COUNT(*) from gd_faculty_score FS WHERE FS.program_cd='" + progCd + "' and FS.FAC_CD= '" +
                    facCd + "'";
					System.out.println(sql);
                ResultSet rs;
                Integer flag = new Integer(0);
                try {
                    rs = getDBTransaction().createStatement(0).executeQuery(sql);
                    if (rs.next()) {
                        flag = (Integer) rs.getInt(1);

                        if (flag > 0) {
                            String flagUpdate = null;
                            if (CertDate == null) {
                                flagUpdate =
                                    "Update gd_faculty_score FS set FS.CERT_YN = '" + CertYn + "' ,  FS.CERT_SCORE = " +
                                    CertScore + " , FS.MODIFIED_BY = '" + UsrCd +
                                    "' ,  FS.MODIFIED_DATE = sysdate WHERE FS.program_cd = '" + progCd +
                                    "' and FS.FAC_CD= '" + facCd + "'";
                            } else {

                                flagUpdate =
                                    "Update gd_faculty_score FS set FS.CERT_YN = '" + CertYn + "' ,  FS.CERT_SCORE = " +
                                    CertScore + " ,  FS.CERT_DATE = TO_CHAR(TO_DATE('" +
									CertDate.toString().substring(0, 11)+
                                    //CertDate.toString().substring(0, 11) +"','YYYY-DD-MM
                                    "','yyyy-mm-dd'),'DD-MON-RR') , FS.MODIFIED_BY = '" +
                                    UsrCd + "' ,  FS.MODIFIED_DATE = sysdate WHERE FS.program_cd = '" + progCd +
                                    "' and FS.FAC_CD= '" + facCd + "'";
									System.out.println(flagUpdate);
                            }
                            // 2. Create the CallableStatement for the PL/SQL block
                            st = getDBTransaction().createCallableStatement(flagUpdate, 0);
                            st.executeUpdate();
                        } else {
                            // 1. Define the PL/SQL block for the statement to invoke
                            String stmt =
                                "INSERT INTO gd_faculty_score(fac_cd,program_cd,cert_score,cert_date,cert_yn,created_date,created_by) values(?,?,?,?,?,?,?)";
                            // 2. Create the CallableStatement for the PL/SQL block
                            st = getDBTransaction().createCallableStatement(stmt, 0);
                            // 3. Register the positions and types of the OUT parameters

                            // 4. Set the bind values of the IN parameters
                            long millis = System.currentTimeMillis();
                            java.sql.Date currdate = new java.sql.Date(millis);
                            st.setString(1, facCd);
                            st.setString(2, progCd);
                            st.setBigDecimal(3, CertScore);
                            st.setTimestamp(4, CertDate);
                            st.setString(5, CertYn);
                            st.setString(7, UsrCd);
                            st.setDate(6, currdate);
                            // 5. Execute the statement
                            st.executeUpdate();
                        }
						System.out.println("endinggggggg");
                    }
                } catch (SQLException e) {
                    e.printStackTrace();
                } finally {
                    try {
                        if (st != null) {
                            st.close();
                        }
                    } catch (Exception e) {
                    }
                }
            }
            scoreRsi.closeRowSetIterator();
            getTransaction().commit();
        }
    }


    public ViewObjectImpl getShOrdbookEOView1() {
        return (ViewObjectImpl) findViewObject("ShOrdbookEOView1");
    }

    /**
     * Container's getter for StAllotEOView1.
     * @return StAllotEOView1
     */
    public StAllotEOViewImpl getStAllotEOView1() {
        return (StAllotEOViewImpl) findViewObject("StAllotEOView1");
    }

    /**
     * Container's getter for AllotmentRO1.
     * @return AllotmentRO1
     */
    public ViewObjectImpl getAllotmentRO1() {
        return (ViewObjectImpl) findViewObject("AllotmentRO1");
    }

    /**
     * Container's getter for GmRegnLOV1.
     * @return GmRegnLOV1
     */
    public ViewObjectImpl getGmRegnLOV1() {
        return (ViewObjectImpl) findViewObject("GmRegnLOV1");
    }

    /**
     * Container's getter for GmSchemVO1.
     * @return GmSchemVO1
     */
    public ViewObjectImpl getGmSchemVO1() {
        return (ViewObjectImpl) findViewObject("GmSchemVO1");
    }

    /**
     * Container's getter for GmSchemeTVO1.
     * @return GmSchemeTVO1
     */
    public ViewObjectImpl getGmSchemeTVO1() {
        return (ViewObjectImpl) findViewObject("GmSchemeTVO1");
    }

    /**
     * This method used for executing table with empty rows
     */
    public void initSaleInvoiceCancellation() {
        LOGGER.info("enter into initMcpTypeMaster");
        ViewObjectImpl vo = this.getShInvoiceEOView1();
        vo.executeEmptyRowSet();
        ViewObjectImpl vo1 = this.getSalesInvoiceCancellationRO1();
        vo1.executeQuery();
        LOGGER.info("exit from initMcpTypeMaster");

    }

    /**
     * Container's getter for SdCompFollowUpVO1.
     * @return SdCompFollowUpVO1
     */
    public SdCompFollowUpVOImpl getSdCompFollowUpVO1() {
        return (SdCompFollowUpVOImpl) findViewObject("SdCompFollowUpVO1");
    }


    /**
     * Container's getter for ShComplaintsVO3.
     * @return ShComplaintsVO3
     */
    public ViewObjectImpl getShComplaintsVO3() {
        return (ViewObjectImpl) findViewObject("ShComplaintsVO3");
    }


    /**
     * Container's getter for CmsFollowupEmpLOV1.
     * @return CmsFollowupEmpLOV1
     */
    public ViewObjectImpl getCmsFollowupEmpLOV1() {
        return (ViewObjectImpl) findViewObject("CmsFollowupEmpLOV1");
    }

    /**
     * Container's getter for ViewObj1.
     * @return ViewObj1
     */
    public ViewObjectImpl getViewObj1() {
        return (ViewObjectImpl) findViewObject("ViewObj1");
    }

    /**
     * Container's getter for CmsFollowupComplaintNumLOV1.
     * @return CmsFollowupComplaintNumLOV1
     */
    public ViewObjectImpl getCmsFollowupComplaintNumLOV1() {
        return (ViewObjectImpl) findViewObject("CmsFollowupComplaintNumLOV1");
    }

    /**
     * Container's getter for CmsFollowupTransientVO1.
     * @return CmsFollowupTransientVO1
     */
    public ViewObjectImpl getCmsFollowupTransientVO1() {
        return (ViewObjectImpl) findViewObject("CmsFollowupTransientVO1");
    }

    /**
     * Container's getter for SchemNameLOV1.
     * @return SchemNameLOV1
     */
    public ViewObjectImpl getSchemNameLOV1() {
        return (ViewObjectImpl) findViewObject("SchemNameLOV1");
    }

    /**
     * Container's getter for ShComplaintsCmsVO1.
     * @return ShComplaintsCmsVO1
     */
    public ViewObjectImpl getShComplaintsCmsVO1() {
        return (ViewObjectImpl) findViewObject("ShComplaintsCmsVO1");
    }

    /**
     * Container's getter for AttendanceMgMtDualVO1.
     * @return AttendanceMgMtDualVO1
     */
    public AttendanceMgMtDualVOImpl getAttendanceMgMtDualVO1() {
        return (AttendanceMgMtDualVOImpl) findViewObject("AttendanceMgMtDualVO1");
    }

    /**
     * Container's getter for AmDealerLocParamVO1.
     * @return AmDealerLocParamVO1
     */
    public ViewObjectImpl getAmDealerLocParamVO1() {
        return (ViewObjectImpl) findViewObject("AmDealerLocParamVO1");
    }

    /**
     * Container's getter for DealerActivationST1.
     * @return DealerActivationST1
     */
    public ViewObjectImpl getDealerActivationST1() {
        return (ViewObjectImpl) findViewObject("DealerActivationST1");
    }

    /**
     * Container's getter for AllotmentModelLOV1.
     * @return AllotmentModelLOV1
     */
    public ViewObjectImpl getAllotmentModelLOV1() {
        return (ViewObjectImpl) findViewObject("AllotmentModelLOV1");
    }

    /**
     * Container's getter for AllotmentVariantLOV1.
     * @return AllotmentVariantLOV1
     */
    public ViewObjectImpl getAllotmentVariantLOV1() {
        return (ViewObjectImpl) findViewObject("AllotmentVariantLOV1");
    }

    /**
     * Container's getter for AllotmentColorLOV1.
     * @return AllotmentColorLOV1
     */
    public ViewObjectImpl getAllotmentColorLOV1() {
        return (ViewObjectImpl) findViewObject("AllotmentColorLOV1");
    }

    /**
     * Container's getter for AllotmentNumberLOV1.
     * @return AllotmentNumberLOV1
     */
    public ViewObjectImpl getAllotmentNumberLOV1() {
        return (ViewObjectImpl) findViewObject("AllotmentNumberLOV1");
    }


    /**
     * Container's getter for AllotmentAllotedByRO1.
     * @return AllotmentAllotedByRO1
     */
    public ViewObjectImpl getAllotmentAllotedByRO1() {
        return (ViewObjectImpl) findViewObject("AllotmentAllotedByRO1");
    }

    /**
     * Container's getter for MulCorporateRO1.
     * @return MulCorporateRO1
     */
    public ViewObjectImpl getMulCorporateRO1() {
        return (ViewObjectImpl) findViewObject("MulCorporateRO1");
    }

    /**
     * Container's getter for gmGropdAndGmGrophRO1.
     * @return gmGropdAndGmGrophRO1
     */
    public ViewObjectImpl getgmGropdAndGmGrophRO1() {
        return (ViewObjectImpl) findViewObject("gmGropdAndGmGrophRO1");
    }

    /**
     * Container's getter for GmGrophVO1.
     * @return GmGrophVO1
     */
    public GmGrophVOImpl getGmGrophVO1() {
        return (GmGrophVOImpl) findViewObject("GmGrophVO1");
    }

    /**
     * Container's getter for GmGropdVO1.
     * @return GmGropdVO1
     */
    public GmGropdVOImpl getGmGropdVO1() {
        return (GmGropdVOImpl) findViewObject("GmGropdVO1");
    }

    public void initDealerActivation() {
        this.getAmDealerLocParamVO1().executeEmptyRowSet();
        this.getDealerActivationST1().executeQuery();
    }

    public String doFilterDealerAction(String dealer_map_cd, String parent_group_cd, String loc_code, String city_cd,
                                       String for_cd) {
        String flag = "Y";
        ViewObjectImpl voiAmDlr = this.getAmDealerLocParamVO1();
        ViewCriteria vc = voiAmDlr.getViewCriteria("AmDealerLocParamVC");
        voiAmDlr.applyViewCriteria(vc, false);
        voiAmDlr.setNamedWhereClauseParam("bind_dealerMapCd", dealer_map_cd);
        voiAmDlr.setNamedWhereClauseParam("bind_locCode", loc_code);
        voiAmDlr.setNamedWhereClauseParam("bind_parentGroupCd", parent_group_cd);
        voiAmDlr.executeQuery();
        if (!(voiAmDlr.getEstimatedRowCount() > 0)) {
            flag = "N";
        }
        return flag;
    }

    public void resetDealerActivation() {
        this.getDealerActivationST1().executeQuery();
        ViewObjectImpl voiAmDlr = this.getAmDealerLocParamVO1();
        voiAmDlr.removeViewCriteria("AmDealerLocParamVC");
        voiAmDlr.setNamedWhereClauseParam("bind_dealerMapCd", null);
        voiAmDlr.setNamedWhereClauseParam("bind_locCode", null);
        voiAmDlr.setNamedWhereClauseParam("bind_parentGroupCd", null);
        voiAmDlr.executeQuery();
        voiAmDlr.executeEmptyRowSet();
    }

    public void setValuesInDlrAct(String user_code, Date modi_date) {
        try {
            ViewObjectImpl voi = this.getAmDealerLocParamVO1();
            java.sql.Timestamp datetime = new java.sql.Timestamp(System.currentTimeMillis());
            voi.getCurrentRow().setAttribute("ModifiedDate", datetime);
            voi.getCurrentRow().setAttribute("ModifiedBy", user_code);
        } catch (Exception e) {
            // TODO: Add catch code
            e.printStackTrace();
        }
    }


    /**
     * Container's getter for GmCalndrVO1.
     * @return GmCalndrVO1
     */
    public GmCalndrVOImpl getGmCalndrVO1() {
        return (GmCalndrVOImpl) findViewObject("GmCalndrVO1");
    }

    public void doEmptyRows() {
        GmCalndrVOImpl calndrVO1 = this.getGmCalndrVO1();
        calndrVO1.executeEmptyRowSet();
    }

    /**
     * Container's getter for InvoiceDetailsRO1.
     * @return InvoiceDetailsRO1
     */
    public ViewObjectImpl getInvoiceDetailsRO1() {
        return (ViewObjectImpl) findViewObject("InvoiceDetailsRO1");
    }

    /**
     * Container's getter for CommercialClaimDualRVO1.
     * @return CommercialClaimDualRVO1
     */
    public CommercialClaimDualRVOImpl getCommercialClaimDualRVO1() {
        return (CommercialClaimDualRVOImpl) findViewObject("CommercialClaimDualRVO1");
    }


    /**
     * Container's getter for AllotmentStoreRO1.
     * @return AllotmentStoreRO1
     */
    public ViewObjectImpl getAllotmentStoreRO1() {
        return (ViewObjectImpl) findViewObject("AllotmentStoreRO1");
    }

    /**
     * Container's getter for SdGrnVO1.
     * @return SdGrnVO1
     */
    public SdGrnVOImpl getSdGrnVO1() {
        return (SdGrnVOImpl) findViewObject("SdGrnVO1");
    }

    /**
     * Container's getter for GmSchemeLOV1.
     * @return GmSchemeLOV1
     */
    public ViewObjectImpl getGmSchemeLOV1() {
        return (ViewObjectImpl) findViewObject("GmSchemeLOV1");
    }

    /**
     * Container's getter for ModelLOV1.
     * @return ModelLOV1
     */
    public ViewObjectImpl getModelLOV1() {
        return (ViewObjectImpl) findViewObject("ModelLOV1");
    }

    /**
     * Container's getter for GmSchemeSMVO1.
     * @return GmSchemeSMVO1
     */
    public ViewObjectImpl getGmSchemeSMVO1() {
        return (ViewObjectImpl) findViewObject("GmSchemeSMVO1");
    }

    /**
     * This method used for executing table with empty rows
     */
    public void initStockyardCreation() {
        LOGGER.info("enter into initStockyardCreation");
        ViewObjectImpl vo = this.getSmDlrStkyrdEOView1();
        vo.executeEmptyRowSet();
        ViewObjectImpl vo1 = this.getStockyardSearchRVO1();
        vo1.executeEmptyRowSet();
        LOGGER.info("exit from initStockyardCreation");
    }

    public void setNullValue() {

        ViewObjectImpl vo = this.getGatePassVO1();
        // System.out.println(vo.getQuery());
        vo.executeEmptyRowSet();
        //   System.out.println(vo.getQuery());

    }

    /**
     * This method used for executing table with empty rows
     */
    public void initCSDLoyalty() {
        LOGGER.info("enter into initCSDLoyalty");
        ViewObjectImpl vo = this.getSdLoyltyExchClaimEOView1();
        vo.executeEmptyRowSet();
        LOGGER.info("exit from initCSDLoyalty");

    }

    /**
     * This method used for executing table with empty rows for LMS Program Page.
     */
    public void initLMSProgramVO() {
        LOGGER.info("enter into initLMSProgramVO");
        ViewObjectImpl vo = this.getTrainingProgramMasterVO1();
        vo.executeEmptyRowSet();
        ViewObjectImpl vo1 = this.getTrainingProgramMasterVO2();
        vo1.executeEmptyRowSet();
        ViewObjectImpl vo2 = this.getLmsSmAgencyVO1();
        vo2.executeEmptyRowSet();
        ViewObjectImpl vo3 = this.getGmCategoryMasterVO1();
        vo3.executeEmptyRowSet();
        ViewObjectImpl vo4 = this.getLMSProgramTransientVO1();
        vo4.executeQuery();
        LOGGER.info("exit from initLMSProgramVO");

    }


    /**This method is used tp perform search operation in LMSProgram Page
     */
    public void executeLMSPageVO() {
        LOGGER.info("enters into executeLMSPageVO");
        Row row = getLMSProgramTransientVO1().getCurrentRow();

        ViewObjectImpl vo = this.getTrainingProgramMasterVO1();
        ViewCriteria vc = vo.getViewCriteria("TrainingProgramMasterVOCriteria");
        vo.applyViewCriteria(vc);
        vo.setNamedWhereClauseParam("PrincipalMCD", ADFContext.getCurrent()
                                                              .getSessionScope()
                                                              .get("principalMapCd"));
        vo.setNamedWhereClauseParam("ProgramCode", row.getAttribute("ProgramID").toString());
        vo.executeQuery();

        ViewObjectImpl vo1 = this.getTrainingProgramMasterVO2();
        ViewCriteria vc1 = vo1.getViewCriteria("TrainingProgramMasterVOCriteria");
        vo1.applyViewCriteria(vc1);
        vo1.setNamedWhereClauseParam("PrincipalMCD", ADFContext.getCurrent()
                                                               .getSessionScope()
                                                               .get("principalMapCd"));
        vo1.setNamedWhereClauseParam("ProgramCode", row.getAttribute("ProgramID").toString());
        vo1.executeQuery();

        if (vo1.getRowCount() > 0) {
            Row rowmaster = vo1.first();

            LOGGER.info("channel-->" + rowmaster.getAttribute("Channel") + "--existingcheckbox-->" +
                        row.getAttribute("ExistingChannel"));
            String channelvalue =
                rowmaster.getAttribute("Channel") != null ? rowmaster.getAttribute("Channel").toString() : "";
            if (channelvalue.equals("NRM")) {
                row.setAttribute("ExistingChannel", true);

            }

            if (channelvalue.equals("EXC")) {
                row.setAttribute("Nexa", true);

            }

            if (channelvalue.equals("TV")) {
                row.setAttribute("TrueValue", true);
            }

            if (channelvalue.equals("COM")) {
                row.setAttribute("CommercialChannel", true);
            }
            if (channelvalue.equals("MSDS")) {
                row.setAttribute("MSDS", true);
            }
        }


        ViewObjectImpl vo2 = this.getLmsSmAgencyVO1();
        ViewCriteria vc2 = vo2.getViewCriteria("LmsSmAgencyVOCriteria");
        vo2.applyViewCriteria(vc2);
        vo2.setNamedWhereClauseParam("PrincipalMCD", ADFContext.getCurrent()
                                                               .getSessionScope()
                                                               .get("principalMapCd"));
        vo2.setNamedWhereClauseParam("ProgramCode", row.getAttribute("ProgramID").toString());
        vo2.executeQuery();
        // setting value for agency LOV
        if (vo2.getRowCount() > 0) {
            RowSetIterator rsiAgency = vo2.createRowSetIterator(null);
            while (rsiAgency.hasNext()) {
                Row rowmaster = vo1.first();
                Row rowAgency = rsiAgency.next();
                String channelvalue =
                    rowmaster.getAttribute("Channel") != null ? rowmaster.getAttribute("Channel").toString() : "";
                if (channelvalue.equals("NRM")) {
                    //rowAgency.setAttribute("SerialNum","NRM");
                    rowAgency.setAttribute("Channel", "NRM");
                    LOGGER.info("channel value-->" + rowAgency.getAttribute("Channel"));
                }

                if (channelvalue.equals("EXC")) {
                    rowAgency.setAttribute("Channel", "EXC");
                }

                if (channelvalue.equals("TV")) {
                    rowAgency.setAttribute("Channel", "TV");
                }

                if (channelvalue.equals("COM")) {
                    rowAgency.setAttribute("Channel", "COM");
                }
                if (channelvalue.equals("MSDS")) {
                    rowAgency.setAttribute("Channel", "MSDS");
                }
            }

        }


        ViewObjectImpl vo3 = this.getGmCategoryMasterVO1();
        ViewCriteria vc3 = vo3.getViewCriteria("GmCategoryMasterVOCriteria");
        vo3.applyViewCriteria(vc3);
        vo3.setNamedWhereClauseParam("PrincipalMCD", ADFContext.getCurrent()
                                                               .getSessionScope()
                                                               .get("principalMapCd"));
        vo3.setNamedWhereClauseParam("ProgramCode", row.getAttribute("ProgramID").toString());
        vo3.executeQuery();
        // setting value for designation LOV
        if (vo3.getRowCount() > 0) {
            RowSetIterator rsi = vo3.createRowSetIterator(null);
            while (rsi.hasNext()) {
                Row rowmaster = vo1.first();
                Row rowDesig = rsi.next();
                String channelvalue =
                    rowmaster.getAttribute("Channel") != null ? rowmaster.getAttribute("Channel").toString() : "";
                if (channelvalue.equals("NRM")) {
                    rowDesig.setAttribute("SerialNumber", "NRM");
                }

                if (channelvalue.equals("EXC")) {
                    rowDesig.setAttribute("SerialNumber", "EXC");
                }

                if (channelvalue.equals("TV")) {
                    rowDesig.setAttribute("SerialNumber", "TV");
                }

                if (channelvalue.equals("COM")) {
                    rowDesig.setAttribute("SerialNumber", "COM");
                }
                if (channelvalue.equals("MSDS")) {
                    rowDesig.setAttribute("SerialNumber", "MSDS");
                }
            }

        }
        LOGGER.info("exit from executeLMSPageVO");

    }


    /** this method is to commit the data.
     * @return string
     */
    public String lmsCommit() {
        LOGGER.info("enter into lmsCommit");
        String result = "success";
        try {
            this.getDBTransaction().commit();

        } catch (Exception e) {
            e.printStackTrace();
            e.getMessage();
            if (e.getMessage() != null)
                result = "failure";
        }
        LOGGER.info("exitfrom  lmsCommit");
        return result;
    }

    /**this method is for lMS level validation.

     * @param level level
     * @param checkVal checkVal
     * @return String
     */
    public String lmsValidateLevel(String level, String checkVal) {
        LOGGER.info("enter into  lmsValidateLevel");
        LOGGER.info("level-->" + level + "--checkVal-->" + checkVal);
        String result = "";
        ViewObjectImpl vo1 = this.getLmsLevelValidationVO1();
        vo1.setNamedWhereClauseParam("CHANNEL", checkVal);
        vo1.setNamedWhereClauseParam("PROG_LEVEL", level);
        vo1.executeQuery();
        if (vo1.getEstimatedRowCount() > 0) {
            result = "Duplicate";
        }
        if (vo1.getEstimatedRowCount() <= 0) {
            result = "Noduplicate";
        }
        LOGGER.info("exit from lmsValidateLevel");
        return result;
    }

    /**method for checkbox validation.

     * @param checkValue checkValue
     */
    public void checkUncheckLMSCheckBox(String checkValue) {
        LOGGER.info("enter into checkUncheckLMSCheckBox");
        Row row = getLMSProgramTransientVO1().getCurrentRow();
        LOGGER.info("checkValue-->" + checkValue);
        if ("NRM".equals(checkValue)) {
            row.setAttribute("Nexa", false);
            row.setAttribute("TrueValue", false);
            row.setAttribute("CommercialChannel", false);
            row.setAttribute("MSDS", false);
        }
        if (checkValue.equals("EXC")) {
            row.setAttribute("ExistingChannel", false);
            row.setAttribute("TrueValue", false);
            row.setAttribute("CommercialChannel", false);
            row.setAttribute("MSDS", false);
        }
        if (checkValue.equals("TV")) {
            row.setAttribute("Nexa", false);
            row.setAttribute("ExistingChannel", false);
            row.setAttribute("CommercialChannel", false);
            row.setAttribute("MSDS", false);
        }
        if (checkValue.equals("COM")) {
            row.setAttribute("Nexa", false);
            row.setAttribute("ExistingChannel", false);
            row.setAttribute("TrueValue", false);
            row.setAttribute("MSDS", false);
        }
        if (checkValue.equals("MSDS")) {
            row.setAttribute("Nexa", false);
            row.setAttribute("ExistingChannel", false);
            row.setAttribute("TrueValue", false);
            row.setAttribute("CommercialChannel", false);
        }
        LOGGER.info("exit from checkUncheckLMSCheckBox");
    }

    /**java method to validate Designation code in LMS Program page
     * Container's getter for CostCenterLOV1.
     * @param designationCd designationCd
     * @return CostCenterLOV1 CostCenterLOV1
     */
    public String lmsDesignationCodeValidator(String designationCd) {
        LOGGER.info("enter into lmsDesignationCodeValidator");
        ViewObject vo = this.getGmCategoryMasterVO1();
        RowSetIterator rsi = vo.createRowSetIterator(null);
        Row cRow = vo.getCurrentRow();
        int count = 0;
        String designationCode = "";
        //Iterate over viewObject to check duplicate record
        while (rsi.hasNext()) {
            Row r = rsi.next();
            //Check all rows other than current row
            if (!r.equals(cRow) && r.getAttribute("Categorycode") != null) {
                designationCode = r.getAttribute("Categorycode").toString();
                if (designationCd.equalsIgnoreCase(designationCode)) {
                    count = count + 1;
                }
            }
        }
        rsi.closeRowSetIterator();
        if (count > 0) {
            return "Y";
        } else {
            //cRow.setAttribute("CategoryCd", designationCd);
            return "N";
        }
    }

    /**java method to validate Agency code  in LMS program page.
     * @param agencyCd agencyCd
     * @return String returns string
     */
    public String lmsAgencyCodeValidator(String agencyCd) {
        LOGGER.info("enter into lmsAgencyCodeValidator");
        ViewObject vo = this.getLmsSmAgencyVO1();
        RowSetIterator rsi = vo.createRowSetIterator(null);
        Row cRow = vo.getCurrentRow();
        int count = 0;
        String agencyCode = "";
        //Iterate over viewObject to check duplicate record
        while (rsi.hasNext()) {
            Row r = rsi.next();
            //Check all rows other than current row
            if (!r.equals(cRow) && r.getAttribute("AgencyCd") != null) {
                agencyCode = r.getAttribute("AgencyCd").toString();
                if (agencyCd.equalsIgnoreCase(agencyCode)) {
                    count = count + 1;
                }
            }
        }
        rsi.closeRowSetIterator();
        if (count > 0) {
            return "Y";
        } else {
            return "N";
        }
    }

    /**
     * Container's getter for CostCenterLOV1.
     * @return CostCenterLOV1
     */
    public ViewObjectImpl getCostCenterLOV1() {
        return (ViewObjectImpl) findViewObject("CostCenterLOV1");
    }

    /**
     * Container's getter for SchemeMasterDealerLOV1.
     * @return SchemeMasterDealerLOV1
     */
    public ViewObjectImpl getSchemeMasterDealerLOV1() {
        return (ViewObjectImpl) findViewObject("SchemeMasterDealerLOV1");
    }

    /**
     * Container's getter for SchemeTypeLOV1.
     * @return SchemeTypeLOV1
     */
    public ViewObjectImpl getSchemeTypeLOV1() {
        return (ViewObjectImpl) findViewObject("SchemeTypeLOV1");
    }

    /**
     * Container's getter for SchemeReplicationDtlRO1.
     * @return SchemeReplicationDtlRO1
     */
    public ViewObjectImpl getSchemeReplicationDtlRO1() {
        return (ViewObjectImpl) findViewObject("SchemeReplicationDtlRO1");
    }


    /**
     * The purpose of this method is to filter data based on search values
     * @It will return String type flag,according to this flag we are showing the message
     * form name:Scheme Replication
     * jira id:MSIL-
     * @param dealer_map_cd
     * @param pmc
     * @param loc_code
     * @param channel
     * @param model_code
     * @param start_date
     * @param end_date
     * @param comp_fa
     * @param parent_group_cd
     * @return
     */
    public String filterDataInSchemeReplication(String dealer_map_cd, String loc_code, String pmc, String channel,
                                                String model_code, Date start_date, Date end_date, String comp_fa,
                                                String parent_group_cd) {

        LOGGER.info("CHANNEL->" + channel + " END DATE->" + end_date + " START DATE->" + start_date + " PMC->" + pmc +
                    " MODEL CODE->" + model_code);
        ViewObjectImpl voi = this.getSchemeReplicationDtlRO1();
        voi.setNamedWhereClauseParam("bind_channel", channel);
        voi.setNamedWhereClauseParam("bind_endDate", end_date);
        voi.setNamedWhereClauseParam("bind_modelCode", model_code);
        voi.setNamedWhereClauseParam("bind_pmc", pmc);
        voi.setNamedWhereClauseParam("bind_startDate", start_date);
        voi.executeQuery();
        return null;
    }

    /**
     * Container's getter for SchemeReplicationST1.
     * @return SchemeReplicationST1
     */
    public ViewObjectImpl getSchemeReplicationST1() {
        return (ViewObjectImpl) findViewObject("SchemeReplicationST1");
    }

    /**
     * Container's getter for GmSchemeMasterTVO1.
     * @return GmSchemeMasterTVO1
     */
    public ViewObjectImpl getGmSchemeMasterTVO1() {
        return (ViewObjectImpl) findViewObject("GmSchemeMasterTVO1");
    }

    /**
     * Container's getter for SchemeMstrGrpCrpCdLOV1.
     * @return SchemeMstrGrpCrpCdLOV1
     */
    public ViewObjectImpl getSchemeMstrGrpCrpCdLOV1() {
        return (ViewObjectImpl) findViewObject("SchemeMstrGrpCrpCdLOV1");
    }

    /**
     * Container's getter for SchemMstrCorpCdLOV1.
     * @return SchemMstrCorpCdLOV1
     */
    public ViewObjectImpl getSchemMstrCorpCdLOV1() {
        return (ViewObjectImpl) findViewObject("SchemMstrCorpCdLOV1");
    }

    /**
     * Container's getter for SchemeCostCenterLOV1.
     * @return SchemeCostCenterLOV1
     */
    public ViewObjectImpl getSchemeCostCenterLOV1() {
        return (ViewObjectImpl) findViewObject("SchemeCostCenterLOV1");
    }

    /**
     * Container's getter for GenSchemeCodeRO1.
     * @return GenSchemeCodeRO1
     */
    public ViewObjectImpl getGenSchemeCodeRO1() {
        return (ViewObjectImpl) findViewObject("GenSchemeCodeRO1");
    }

    /**
     * Container's getter for AllotmentLocationLOV2.
     * @return AllotmentLocationLOV2
     */
    public ViewObjectImpl getAllotmentLocationLOV2() {
        return (ViewObjectImpl) findViewObject("AllotmentLocationLOV2");
    }

    /**
     * Container's getter for AllowExchangeMappingDualVO1.
     * @return AllowExchangeMappingDualVO1
     */
    public ViewObjectImpl getAllowExchangeMappingDualVO1() {
        return (ViewObjectImpl) findViewObject("AllowExchangeMappingDualVO1");

    }

    /**
     * Container's getter for SdComplaintsCmsReadOnlyVO1.
     * @return SdComplaintsCmsReadOnlyVO1
     */
    public ViewObjectImpl getSdComplaintsCmsReadOnlyVO1() {
        return (ViewObjectImpl) findViewObject("SdComplaintsCmsReadOnlyVO1");
    }

    /**to reset the VO when click the Reset Button
     */
    public void executeSearch() {
        LOGGER.info("** inside executeSearch()-Allow Exchange Mapping** ");
        ViewObjectImpl vo = getAllowExchangeMappingReadOnlyVO1();
        vo.executeEmptyRowSet();
        LOGGER.info("** end of  executeSearch()-Allow Exchange Mapping** ");

    }

    /**
     * Container's getter for SdComplaintsFollowupCmsReadOnlyVO1.
     * @return SdComplaintsFollowupCmsReadOnlyVO1
     */
    public ViewObjectImpl getSdComplaintsFollowupCmsReadOnlyVO1() {
        return (ViewObjectImpl) findViewObject("SdComplaintsFollowupCmsReadOnlyVO1");
    }


    /**
     * Container's getter for CmsFollowupStatusnewLOV1.
     * @return CmsFollowupStatusnewLOV1
     */
    public ViewObjectImpl getCmsFollowupStatusnewLOV1() {
        return (ViewObjectImpl) findViewObject("CmsFollowupStatusnewLOV1");
    }

    /**
     * Container's getter for CmsFollowupstatustransientVO1.
     * @return CmsFollowupstatustransientVO1
     */
    public ViewObjectImpl getCmsFollowupstatustransientVO1() {
        return (ViewObjectImpl) findViewObject("CmsFollowupstatustransientVO1");
    }


    /**
     * Container's getter for AllowExchangeMappingReadOnlyVO1.
     * @return AllowExchangeMappingReadOnlyVO1
     */
    public ViewObjectImpl getAllowExchangeMappingReadOnlyVO1() {
        return (ViewObjectImpl) findViewObject("AllowExchangeMappingReadOnlyVO1");
    }

    /**
     * Container's getter for TrainingProgramNameLOV1.
     * @return TrainingProgramNameLOV1
     */
    public ViewObjectImpl getTrainingProgramNameLOV1() {
        return (ViewObjectImpl) findViewObject("TrainingProgramNameLOV1");
    }

    /**Method to fetch the data by call the procedure SP_GET_REPURCHASE_EVAL.
     * @param mapVal
     */
    public void searchExecution(HashMap mapVal) {
        LOGGER.info("** inside searchExecution()-Allow Exchange Mapping**");
        ViewObjectImpl voObj = this.getAllowExchangeMappingReadOnlyVO1();
        DBTransaction trx = (DBTransaction) getTransaction();
        CallableStatement st = null;
        java.sql.Date sqlStartDate = null;
        java.sql.Date sqlEndDate = null;
        oracle.jbo.domain.Date stDate = (oracle.jbo.domain.Date) mapVal.get("frmDate");
        sqlStartDate = stDate.dateValue();
        oracle.jbo.domain.Date edDt = (oracle.jbo.domain.Date) mapVal.get("toDate");
        sqlEndDate = edDt.dateValue();

        try {
            voObj.executeEmptyRowSet();
            String stmt = "begin PKG_ENQ_POC_DETAIL.SP_GET_REPURCHASE_EVAL(?,?,?,?,?,?,?); end;";
            st = trx.createCallableStatement(stmt, 0);
            st.setString(1, (String) mapVal.get("region"));
            st.setDate(2, sqlStartDate);
            st.setDate(3, sqlEndDate);
            st.setString(4, (String) mapVal.get("buyingId"));
            st.registerOutParameter(5, OracleTypes.CURSOR);
            st.registerOutParameter(6, OracleTypes.NUMBER);
            st.registerOutParameter(7, OracleTypes.VARCHAR);
            st.executeUpdate();
            ResultSet cursor = st.getObject(5, ResultSet.class);
            while (cursor.next()) {
                Row exchRow = voObj.createRow();
                exchRow.setAttribute("DlrCdForCd", cursor.getString(1));
                exchRow.setAttribute("DealerName", cursor.getString(2));
                exchRow.setAttribute("DlrCity", cursor.getString(3));
                exchRow.setAttribute("BuyingNum", cursor.getString(4));
                exchRow.setAttribute("CustomerName", cursor.getString(5));
                exchRow.setAttribute("Model", cursor.getString(6));
                exchRow.setAttribute("SubModel", cursor.getString(7));
                exchRow.setAttribute("Age", cursor.getString(8));
                exchRow.setAttribute("RegNum", cursor.getString(9));
                exchRow.setAttribute("RegDate", cursor.getString(10));
                exchRow.setAttribute("Category", cursor.getString(11));
                exchRow.setAttribute("AllowExch", cursor.getString(12));
                exchRow.setAttribute("ApprovalNo", cursor.getString(13));
                voObj.insertRow(exchRow);
            }
            cursor.close();

        } catch (Exception sqle) {
            sqle.printStackTrace();

        } finally {
            try {
                if (st != null) {
                    st.close();
                }
            } catch (Exception e) {
            }
        }
        LOGGER.info("** end of searchExecution()-Allow Exchange Mapping**");

    }

    /**
     * Container's getter for CommercialCliamInoviceDetailsDualRVO1.
     * @return CommercialCliamInoviceDetailsDualRVO1
     */
    public CommercialCliamInoviceDetailsDualRVOImpl getCommercialCliamInoviceDetailsDualRVO1() {
        return (CommercialCliamInoviceDetailsDualRVOImpl) findViewObject("CommercialCliamInoviceDetailsDualRVO1");
    }

    public void filterClaimInvoiceDetails() {
        ViewObject comClmDual = this.getCommercialClaimDualRVO1();
        ViewObjectImpl comClmInvDtl = this.getCommercialCliamInoviceDetailsDualRVO1();
        Row r = comClmDual.getCurrentRow();
        DBTransaction trx = (DBTransaction) getTransaction();
        CallableStatement st = null;
        Map session = ADFContext.getCurrent().getSessionScope();
        Integer principalMapCd = new Integer(session.get("principalMapCd").toString());
        String parentGroupCd = session.get("parentGroupCd").toString();
        String locCd = session.get("locCd").toString();
        Integer srno = new Integer(1);
        Integer dealerMapCd = new Integer(session.get("dealerMapCd").toString());
		System.out.println(parentGroupCd);
		System.out.println(dealerMapCd);
		System.out.println(locCd);
		System.out.println(r.getAttribute("ClaimType").toString());
		System.out.println(r.getAttribute("InvoiceType").toString());
		System.out.println((java.sql.Date) r.getAttribute("InvFrmDt"));
		System.out.println((java.sql.Date) r.getAttribute("InvToDate"));
		System.out.println((String) r.getAttribute("ClaimId"));
		System.out.println((String) r.getAttribute("ClaimStatus"));
        try {
            // 1. Define the PL/SQL block for the statement to invoke
            String stmt = "begin PKG_ISL_RMK_CLM.sp_isl_claim_list(?,?,?,?,?,?,?,?,?,?,?,?,?,?); end;";
            // 2. Create the CallableStatement for the PL/SQL block
            st = trx.createCallableStatement(stmt, 0);
            // 3. Register the positions and types of the OUT parameters

            // 4. Set the bind values of the IN parameters
            st.setString(1, parentGroupCd);
            st.setInt(2, dealerMapCd);
            st.setString(3, locCd);
            st.setString(4, r.getAttribute("ClaimType").toString());
            st.setString(5, r.getAttribute("InvoiceType").toString());
            st.setDate(6, (java.sql.Date) r.getAttribute("InvFrmDt"));
            st.setDate(7, (java.sql.Date) r.getAttribute("InvToDate"));
            st.setString(8, (String) r.getAttribute("VIN"));
            st.setString(9, (String) r.getAttribute("ClaimId"));
            st.setString(10, (String) r.getAttribute("ClaimStatus"));
            st.registerOutParameter(11, OracleTypes.CURSOR);
            st.registerOutParameter(12, Types.NUMERIC);
            st.registerOutParameter(13, Types.VARCHAR);
            st.setInt(14, principalMapCd);
            st.executeUpdate();

            ResultSet cursor = st.getObject(11, ResultSet.class);

            while (cursor.next()) {
                                System.out.println("commming...");
                Row createInvDtl = comClmInvDtl.createRow();

                createInvDtl.setAttribute("ClaimId", cursor.getString(1));
                createInvDtl.setAttribute("ClaimType", cursor.getString(2));
                createInvDtl.setAttribute("ClaimInvType", cursor.getString(3));
                createInvDtl.setAttribute("InvNum", cursor.getString(4));
                createInvDtl.setAttribute("VIN", cursor.getString(5));
                createInvDtl.setAttribute("CustName", cursor.getString(6));
                createInvDtl.setAttribute("InvDate", cursor.getDate(7));
                createInvDtl.setAttribute("ClaimAmt", cursor.getString(8));
                createInvDtl.setAttribute("DlrCode", cursor.getString(9));
                createInvDtl.setAttribute("ClaimStatus", cursor.getString(10));
                createInvDtl.setAttribute("ClaimStatusDesc", cursor.getString(11));
                createInvDtl.setAttribute("NmiFlag", cursor.getString(12));
                createInvDtl.setAttribute("SchemeCode", cursor.getString(13));
                createInvDtl.setAttribute("CompFa", cursor.getString(14));
                createInvDtl.setAttribute("Chassis", cursor.getString(15));
                createInvDtl.setAttribute("Model", cursor.getString(16));
                createInvDtl.setAttribute("MobNum", cursor.getString(17));
                createInvDtl.setAttribute("DlrContr", cursor.getString(18));
                createInvDtl.setAttribute("OfrValue", cursor.getString(19));
                createInvDtl.setAttribute("Varient", cursor.getString(20));
                createInvDtl.setAttribute("SchemeName", cursor.getString(21));
                createInvDtl.setAttribute("ClrfReqdDate", cursor.getDate(22));
                createInvDtl.setAttribute("DeclarationYn", cursor.getString(23));
                createInvDtl.setAttribute("MinQty", cursor.getString(24));
                createInvDtl.setAttribute("SrNo", srno.toString());
                srno = srno + 1;
                comClmInvDtl.insertRow(createInvDtl);
            }
            cursor.close();
        } catch (Exception sqle) {
            // TODO: Add catch code
            sqle.printStackTrace();
        } finally {
            try {
                if (st != null) {
                    st.close();
                }
            } catch (Exception e) {
            }
        }
    }


    public String spDateCheck() {
        DBTransaction trx = (DBTransaction) getTransaction();
        CallableStatement st = null;
        Map session = ADFContext.getCurrent().getSessionScope();
        Integer principalMapCd = new Integer(session.get("principalMapCd").toString());
        System.out.println("principalMapCd---->" + principalMapCd);
        try {

            // 1. Define the PL/SQL block for the statement to invoke
            String stmt = "begin PKG_EXCH_LOYALTY.SP_DATE_CHECK(?,?,?,?,?); end;";
            // 2. Create the CallableStatement for the PL/SQL block
            st = trx.createCallableStatement(stmt, 0);
            // 3. Register the positions and types of the OUT parameters

            // 4. Set the bind values of the IN parameters
            st.registerOutParameter(1, Types.VARCHAR);
            st.registerOutParameter(2, Types.VARCHAR);
            st.registerOutParameter(3, Types.NUMERIC);
            st.registerOutParameter(4, Types.VARCHAR);
            st.setInt(5, principalMapCd);
            st.executeUpdate();

            Integer errorCode = st.getObject(3) == null ? 0 : (Integer) st.getObject(3);
            String flag = (String) st.getObject(1);
            String message = (String) st.getObject(2);
            String errMsg = (String) st.getObject(4);
            if (errorCode == 1) {
                //                System.out.println("errorCode--->" + errorCode);
                return errMsg;
            } else if (flag != null && flag.equalsIgnoreCase("N")) {
                //                System.out.println("message--->" + message);
                return message;
            }
        } catch (Exception sqle) {
            // TODO: Add catch code
            sqle.printStackTrace();
        } finally {
            try {
                if (st != null) {
                    st.close();
                }
            } catch (Exception e) {
            }
        }
        return null;
    }


    public String uploadDocsAction() {
        ResultSet rs;
        CallableStatement st = null;
        DBTransaction trx = (DBTransaction) getTransaction();
        ViewObjectImpl comClmInvDtl = this.getCommercialCliamInoviceDetailsDualRVO1();
        ViewObjectImpl comClmDocDtl = this.getCoomercialClaimDocDtlDualRVO1();
        ViewObjectImpl comClmDoc = this.getCommercialClaimDocDualRVO1();
        Row invDtlR = comClmInvDtl.getCurrentRow();
        Map session = ADFContext.getCurrent().getSessionScope();
        Integer principalMapCd = new Integer(session.get("principalMapCd").toString());
        String locCd = session.get("locCd").toString();
        String parentGroupCd = session.get("parentGroupCd").toString();
        String compCode = session.get("compCode").toString();
        Integer dealerMapCd = new Integer(session.get("dealerMapCd").toString());
        try {
            if (invDtlR.getAttribute("InvNum") !=
                null) {
                //                System.out.println("invDtlR.getAttribute(\"InvNum\")-->" + invDtlR.getAttribute("InvNum"));
                if (comClmDoc.getCurrentRow() == null ||
                    invDtlR.getAttribute("InvNum") != comClmDoc.getCurrentRow().getAttribute("InvNum")) {
                                      //                    System.out.println("11111111111111");
                                      if (invDtlR.getAttribute("ClaimId") == null) {
                        if (invDtlR.getAttribute("MinQty") != null &&
                            (invDtlR.getAttribute("MinQty")
                                                                              .toString()
                                                                              .equalsIgnoreCase("R") ||
                             invDtlR.getAttribute("MinQty")
                                                                                                               .toString()
                                                                                                               .equalsIgnoreCase("Y"))) {
                            return "min";
                        }

                        if (invDtlR.getAttribute("ClaimStatus") != null && invDtlR.getAttribute("ClaimStatus")
                                                                                  .toString()
                                                                                  .equalsIgnoreCase("H")) {

                            String daysQry =
                                "SELECT list_desc FROM am_list WHERE list_name='ISL_RMK_CR_TBARRED' AND list_code='" +
                                invDtlR.getAttribute("ClaimType") + "' AND list_flag='Y' AND principal_map_cd=" +
                                principalMapCd;
                            //                            System.out.println(daysQry);
                            Integer flag = new Integer(0);
                            rs = getDBTransaction().createStatement(0).executeQuery(daysQry);
                            if (rs.next()) {
                                flag = rs.getInt(1);
                            } else
                                return null;
                            SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd");
                            Calendar c = Calendar.getInstance();
                            c.setTime(sdf.parse(invDtlR.getAttribute("InvDate").toString()));
                            c.add(Calendar.DAY_OF_MONTH, flag);
                            String newDate = sdf.format(c.getTime());
                            DateFormat df = new SimpleDateFormat("yyyy-MM-dd");
                            java.util.Date comDate = df.parse(newDate);
                            java.util.Date dt = new java.util.Date();
                            if (dt.compareTo(comDate) > 0) {
                                return "time";
                            }
                        } else {
                            String daysQry =
                                "SELECT list_desc FROM am_list WHERE list_name='ISL_RMK_CLM_TBARRED' AND list_code='" +
                                invDtlR.getAttribute("ClaimType") + "' AND list_flag='Y' AND principal_map_cd=" +
                                principalMapCd;
                            //                            System.out.println("daysQry---->" + daysQry);

                            Integer flag = new Integer(0);
                            rs = getDBTransaction().createStatement(0).executeQuery(daysQry);
                            if (rs.next()) {
                                flag = rs.getInt(1);
                            } else
                                return null;
                            SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd");
                            Calendar c = Calendar.getInstance();
                            c.setTime(sdf.parse(invDtlR.getAttribute("InvDate").toString()));
                            c.add(Calendar.DAY_OF_MONTH, flag);
                            String newDate = sdf.format(c.getTime());
                            DateFormat df = new SimpleDateFormat("yyyy-MM-dd");
                            java.util.Date comDate = df.parse(newDate);
                            java.util.Date dt = new java.util.Date();
                            if (dt.compareTo(comDate) > 0) {
                                return "time";
                            }
                        }
                        String corpCode = null;
                        String corpGrpCode = null;
                        String lvChk = null;
                        String cgCodeQry =
                            "select schem_corp_cd,schem_corp_grp_cd from gm_Schem gs where gs.schem_cd='" +
                            invDtlR.getAttribute("SchemeCode") + "'";
                        //                        System.out.println(cgCodeQry);
                        rs = getDBTransaction().createStatement(0).executeQuery(cgCodeQry);
                        if (rs.next()) {
                            corpCode = rs.getString(1);
                            corpGrpCode = rs.getString(2);
                        }

                        if (corpGrpCode != null) {
                            cgCodeQry =
                                "SELECT DISTINCT '1' FROM gm_groph gg,gm_grop_doc gd WHERE gd.grop_code=gg.grop_code AND gd.grop_code='" +
                                corpGrpCode + "'";
                            //                            System.out.println(cgCodeQry);

                            rs = getDBTransaction().createStatement(0).executeQuery(cgCodeQry);
                            if (rs.next()) {
                                lvChk = rs.getString(1);
                                //                                System.out.println("lvChk 1--->" + lvChk);
                            } else {
                                return "doc";
                            }
                        } else {
                            String ChkCrpCdQry =
                                "SELECT DISTINCT '1' FROM gm_gropd ggd  WHERE ggd.cp_code= '" + corpCode + "'";
                            //                            System.out.println(ChkCrpCdQry);
                            rs = getDBTransaction().createStatement(0).executeQuery(ChkCrpCdQry);
                            if (rs.next()) {
                                lvChk = rs.getString(1);
                                //                                System.out.println("lvChk 2--->" + lvChk);
                            } else {
                                return "doc1";
                            }

                            ChkCrpCdQry =
                                "SELECT DISTINCT '1' FROM gm_groph gg,gm_grop_doc gd WHERE gd.grop_code=gg.grop_code AND gd.grop_code='" +
                                corpGrpCode + "' AND ggd.cp_code= '" + corpCode + "'";
                            //                            System.out.println(ChkCrpCdQry);
                            rs = getDBTransaction().createStatement(0).executeQuery(ChkCrpCdQry);
                            if (rs.next()) {
                                lvChk = rs.getString(1);
                                //                                System.out.println("lvChk 3--->" + lvChk);
                            } else {
                                return "doc";
                            }
                        }
                    }
                    if (comClmDoc.getCurrentRow() != null)
                        comClmDoc.getCurrentRow().remove();
                    Row createClmDoc = comClmDoc.createRow();
                    createClmDoc.setAttribute("InvNum", invDtlR.getAttribute("InvNum"));
                    createClmDoc.setAttribute("ClaimId", invDtlR.getAttribute("ClaimId"));
                    createClmDoc.setAttribute("ClaimType", invDtlR.getAttribute("ClaimType"));
                    createClmDoc.setAttribute("VIN", invDtlR.getAttribute("VIN"));
                    createClmDoc.setAttribute("InvDate", invDtlR.getAttribute("InvDate"));
                    createClmDoc.setAttribute("CustName", invDtlR.getAttribute("CustName"));
                    createClmDoc.setAttribute("ClaimStatus", invDtlR.getAttribute("ClaimStatus"));
                    createClmDoc.setAttribute("ClaimStatusDesc", invDtlR.getAttribute("ClaimStatusDesc"));
                    createClmDoc.setAttribute("NmiCode", invDtlR.getAttribute("NmiFlag"));
                    createClmDoc.setAttribute("SchemeCode", invDtlR.getAttribute("SchemeCode"));
                    createClmDoc.setAttribute("CompFa", invDtlR.getAttribute("CompFa"));
                    createClmDoc.setAttribute("Chassis", invDtlR.getAttribute("Chassis"));
                    createClmDoc.setAttribute("Model", invDtlR.getAttribute("Model"));
                    createClmDoc.setAttribute("DlrContr", invDtlR.getAttribute("DlrContr"));
                    createClmDoc.setAttribute("OfrValue", invDtlR.getAttribute("OfrValue"));
                    createClmDoc.setAttribute("MobileNum", invDtlR.getAttribute("MobNum"));
                    createClmDoc.setAttribute("ClaimAmt", invDtlR.getAttribute("ClaimAmt"));
                    createClmDoc.setAttribute("InvType", invDtlR.getAttribute("ClaimInvType"));
                    createClmDoc.setAttribute("Varient", invDtlR.getAttribute("Varient"));
                    createClmDoc.setAttribute("SchemeName", invDtlR.getAttribute("SchemeName"));
                    createClmDoc.setAttribute("DeclarationYn", invDtlR.getAttribute("DeclarationYn"));
                    String ordNum = null;
                    String engNum = null;
                    String sManCd = null;
                    String empNm = null;
                    String empDgCd = null;
                    String engEmpNoQry =
                        "SELECT order_num,engine_num,salesman_cd FROM sh_invoice si WHERE si.DEALER_MAP_CD= " +
                        dealerMapCd + " AND si.inv_num= '" + invDtlR.getAttribute("InvNum") + "' AND si.LOC_CD='" +
                        locCd + "' AND si.COMP_FA='" + compCode + "' AND si.PARENT_GROUP='" + parentGroupCd + "'";
                    //                    System.out.println(engEmpNoQry);
                    rs = getDBTransaction().createStatement(0).executeQuery(engEmpNoQry);
                    if (rs.next()) {
                        ordNum = rs.getString(1);
                        engNum = rs.getString(2);
                        sManCd = rs.getString(3);
                        //                        System.out.println("ordNum --->" + ordNum + "   engNum--->" + engNum + " sManCd--->" + sManCd);
                    }
                    createClmDoc.setAttribute("EngineNum", engNum);
                    if (sManCd != null) {
                        String sNmEmpDgQry =
                            " SELECT EMP_NAME,EMP_DESG_CD FROM GM_EMP  WHERE  dealer_map_cd= " + dealerMapCd +
                            " AND emp_cd='" + sManCd + "'";
                        //                        System.out.println(sNmEmpDgQry);
                        rs = getDBTransaction().createStatement(0).executeQuery(sNmEmpDgQry);
                        if (rs.next()) {
                            empNm = rs.getString(1);
                            empDgCd = rs.getString(2);
                            //                            System.out.println("empNm --->" + empNm + "   empDgCd--->" + empDgCd);
                        }
                        createClmDoc.setAttribute("SalesmanName", empNm);
                        createClmDoc.setAttribute("EmpDesg", empDgCd);
                    }
                    if (ordNum != null) {
                        String cpName = null;
                        String docCorpQry =
                            " SELECT CP_NAME FROM SH_ORDBOOK ORD, MUL_CORPORATE COR WHERE  ORD.DEALER_MAP_CD= " +
                            dealerMapCd + " AND ORD.ORDER_NUM='" + ordNum + "' AND ORD.LOC_CD= '" + locCd +
                            "' AND ORD.COMP_FA='" + compCode + "' AND ORD.PARENT_GROUP='" + parentGroupCd +
                            "' AND CP_NUMBER=ORD.CORPORATE AND PRINCIPAL_MAP_CD = " + principalMapCd;
                        //                        System.out.println(docCorpQry);
                        rs = getDBTransaction().createStatement(0).executeQuery(docCorpQry);
                        if (rs.next()) {
                            cpName = rs.getString(1);
                            //                            System.out.println("cpName --->" + cpName);
                        }
                        createClmDoc.setAttribute("Corporate", cpName);
                    }

                    comClmDoc.insertRow(createClmDoc);

                    RowSetIterator comClmDocDtlItr = comClmDocDtl.createRowSetIterator(null);
                    while (comClmDocDtlItr.hasNext()) {
                        Row comClmDocDtlItrRow = comClmDocDtlItr.next();
                        comClmDocDtlItrRow.remove();
                    }
                    comClmDocDtlItr.closeRowSetIterator();
                    Integer srno = new Integer(1);
                    // 1. Define the PL/SQL block for the statement to invoke
                    String stmt = "begin PKG_ISL_RMK_CLM.sp_doc_list(?,?,?,?,?,?); end;";
                    // 2. Create the CallableStatement for the PL/SQL block
                    st = trx.createCallableStatement(stmt, 0);
                    // 3. Register the positions and types of the OUT parameters

                    // 4. Set the bind values of the IN parameters
                    st.setString(1, (String) comClmDoc.getCurrentRow().getAttribute("ClaimId"));
                    st.setString(2, (String) comClmDoc.getCurrentRow().getAttribute("SchemeCode"));
                    st.setString(3, principalMapCd.toString());
                    st.registerOutParameter(4, OracleTypes.CURSOR);
                    st.registerOutParameter(5, Types.NUMERIC);
                    st.registerOutParameter(6, Types.VARCHAR);
                    st.executeUpdate();

                    ResultSet cursor = st.getObject(4, ResultSet.class);

                    while (cursor.next()) {
                        //                        System.out.println("commming...dtl");
                        Row createDocDtl = comClmDocDtl.createRow();
                        createDocDtl.setAttribute("ClaimId", cursor.getString(1));
                        createDocDtl.setAttribute("DocCode", cursor.getString(2));
                        createDocDtl.setAttribute("DocDesc", cursor.getString(3));
                        createDocDtl.setAttribute("DocNameCode", cursor.getString(4));
                        createDocDtl.setAttribute("DocFileName", cursor.getString(5));
                        createDocDtl.setAttribute("DocUploadDate", cursor.getDate(6));
                        createDocDtl.setAttribute("DocFolderPath", cursor.getString(7));
                        createDocDtl.setAttribute("DocClar", cursor.getString(8));
                        createDocDtl.setAttribute("Reqd", cursor.getString(9));
                        createDocDtl.setAttribute("DocStatus", cursor.getString(10));
                        if (cursor.getString(11) != null)
                            createDocDtl.setAttribute("DocName", cursor.getString(11));
                        if (cursor.getString(2) != null && (cursor.getString(2)
                                                                  .toString()
                                                                  .equalsIgnoreCase("R05")) ||
                            cursor.getString(2)
                                                                                                     .toString()
                                                                                                     .equalsIgnoreCase("R04") ||
                                                          cursor.getString(2)
                                                                                                                                       .toString()
                                                                                                                                       .equalsIgnoreCase("R03"))
                            createDocDtl.setAttribute("CtrlMsg", "CTRL+L");
                        createDocDtl.setAttribute("SrNo", srno.toString());
                        srno = srno + 1;
                        comClmDocDtl.insertRow(createDocDtl);
                    }
                    cursor.close();

                }
            }


        } catch (Exception sqle) {
            // TODO: Add catch code
            sqle.printStackTrace();
        } finally {
            try {
                if (st != null) {
                    st.close();
                }
            } catch (Exception e) {
            }
        }
        return null;
    }

    /**
     * Container's getter for CommercialClaimDocDualRVO1.
     * @return CommercialClaimDocDualRVO1
     */
    public CommercialClaimDocDualRVOImpl getCommercialClaimDocDualRVO1() {
        return (CommercialClaimDocDualRVOImpl) findViewObject("CommercialClaimDocDualRVO1");
    }

    /**
     * Container's getter for CoomercialClaimDocDtlDualRVO1.
     * @return CoomercialClaimDocDtlDualRVO1
     */
    public CoomercialClaimDocDtlDualRVOImpl getCoomercialClaimDocDtlDualRVO1() {
        return (CoomercialClaimDocDtlDualRVOImpl) findViewObject("CoomercialClaimDocDtlDualRVO1");
    }

    public void insertComClmDocDtl() {
        ResultSet rs;
        ViewObjectImpl comClmDocDtl = this.getCoomercialClaimDocDtlDualRVO1();
        Integer srno = new Integer(1);
        String lstCd = null;
        String lstDesc = null;
        Row createDocDtl = comClmDocDtl.createRow();
        RowSetIterator comClmDocDtlItr = comClmDocDtl.createRowSetIterator(null);
        while (comClmDocDtlItr.hasNext()) {
            srno = srno + 1;
        }
        comClmDocDtlItr.closeRowSetIterator();
        try {
            String docCorpQry =
                "select  list_code,list_desc  FROM AM_LIST  WHERE list_name='ISL_RMK_DOC'   AND list_code='R05'";
            //            System.out.println(docCorpQry);
            rs = getDBTransaction().createStatement(0).executeQuery(docCorpQry);
            if (rs.next()) {
                lstCd = rs.getString(1);
                lstDesc = rs.getString(2);
            }
        } catch (Exception sqle) {
            // TODO: Add catch code
            sqle.printStackTrace();
        }

        createDocDtl.setAttribute("DocCode", lstCd);
        createDocDtl.setAttribute("DocDesc", lstDesc);
        createDocDtl.setAttribute("Reqd", "Y");
        createDocDtl.setAttribute("SrNo", srno.toString());
        comClmDocDtl.insertRow(createDocDtl);
    }

    public String chkFileProp() {
        Map session = ADFContext.getCurrent().getSessionScope();
        Integer principalMapCd = new Integer(session.get("principalMapCd").toString());
        ResultSet rs;
        String picSize = null;
        String path = null;
        try {
            String getDocSize =
                "select  list_desc  FROM AM_LIST  WHERE LIST_NAME = 'ISL_FILE_UPLD_SIZE' and LIST_CODE = 'UPLDS' and principal_map_cd = " +
                principalMapCd;
            //            System.out.println(getDocSize);
            rs = getDBTransaction().createStatement(0).executeQuery(getDocSize);
            if (rs.next()) {
                picSize = rs.getString(1);
            }
            if (picSize == null) {
                return "ms";
            }
            getDocSize =
                "select  list_desc  FROM AM_LIST  WHERE LIST_NAME = 'ISL_FILE_UPLD_PATH' and LIST_CODE = 'UPLDP' and principal_map_cd = " +
                principalMapCd;
            //            System.out.println(getDocSize);
            rs = getDBTransaction().createStatement(0).executeQuery(getDocSize);
            if (rs.next()) {
                path = rs.getString(1);
            }

            if (path == null)
                return "fp";
            else {
                this.getCoomercialClaimDocDtlDualRVO1()
                    .getCurrentRow()
                    .setAttribute("DocFolderPath", path);
                return picSize;
            }
        } catch (Exception sqle) {
            // TODO: Add catch code
            sqle.printStackTrace();
        }

        return null;
    }

    /**
     * Container's getter for ComClaimDclrRVO1.
     * @return ComClaimDclrRVO1
     */
    public ComClaimDclrRVOImpl getComClaimDclrRVO1() {
        return (ComClaimDclrRVOImpl) findViewObject("ComClaimDclrRVO1");
    }


    public String InsUpdtClaim() {
        DBTransaction trx = (DBTransaction) getTransaction();
        CallableStatement st = null;
        ResultSet rs;
        Map session = ADFContext.getCurrent().getSessionScope();
        Integer dealerMapCd = new Integer(session.get("dealerMapCd").toString());
        Integer principalMapCd = new Integer(session.get("principalMapCd").toString());
        String parentGroupCd = session.get("parentGroupCd").toString();
        String locCd = session.get("locCd").toString();
        String userCode = session.get("userCode").toString();
        ViewObjectImpl comClaimDocVO = this.getCommercialClaimDocDualRVO1();
        ViewObjectImpl comClmDocDtl = this.getCoomercialClaimDocDtlDualRVO1();
        Row r = comClaimDocVO.getCurrentRow();
        String gvtPrf = null;
        String custPrf = null;
        String Rltn = null;
        String chk = null;


        RowSetIterator comClmDocDtlItr = comClmDocDtl.createRowSetIterator(null);
        while (comClmDocDtlItr.hasNext()) {
            Row comClmDocDtlItrRow = comClmDocDtlItr.next();
            if (comClmDocDtlItrRow.getAttribute("DocCode") != null && comClmDocDtlItrRow.getAttribute("DocCode")
                                                                                        .toString()
                                                                                        .equalsIgnoreCase("R05"))
                gvtPrf =
                    comClmDocDtlItrRow.getAttribute("DocNameCode") == null ? null :
                    (String) comClmDocDtlItrRow.getAttribute("DocNameCode");
            if (comClmDocDtlItrRow.getAttribute("DocCode") != null && comClmDocDtlItrRow.getAttribute("DocCode")
                                                                                        .toString()
                                                                                        .equalsIgnoreCase("R03"))
                custPrf =
                    comClmDocDtlItrRow.getAttribute("DocNameCode") == null ? null :
                    (String) comClmDocDtlItrRow.getAttribute("DocNameCode");
            if (comClmDocDtlItrRow.getAttribute("DocCode") != null && comClmDocDtlItrRow.getAttribute("DocCode")
                                                                                        .toString()
                                                                                        .equalsIgnoreCase("R04"))
                Rltn =
                    comClmDocDtlItrRow.getAttribute("DocNameCode") == null ? null :
                    (String) comClmDocDtlItrRow.getAttribute("DocNameCode");
        }
        comClmDocDtlItr.closeRowSetIterator();


        try {
            if (comClmDocDtl.getCurrentRow().getAttribute("ClaimId") != null && comClmDocDtl.getCurrentRow()
                                                                                            .getAttribute("ClaimId")
                                                                                            .toString()
                                                                                            .contains("N")) {
                chk = "1";
                // 1. Define the PL/SQL block for the statement to invoke
                String stmt =
                    "insert into SD_ISL_RMK_CLAIM(CLAIM_TYPE,INVOICE_TYPE,PARENT_GROUP,DEALER_MAP_CD,LOC_CD,COMP_FA,INV_NUM,INV_VIN,INV_CHASSIS,INV_MODEL,INV_CUST_NAME,INV_MI_NAME,INV_MOB_NUM,INV_DATE,MSIL_PAYABLE,CLAIM_ID,NEW_CAR_MI_FLAG,CLAIM_STATUS,CLAIM_STATUS_DATE,DLR_CONTR,OFR_VALUE,SCHEME_CD,INV_SUB_MODEL,DECLARATION_YN,GOVT_PROOF,CUSTOMER_PROOF,RELATION)values(?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)";
                // 2. Create the CallableStatement for the PL/SQL block
                st = trx.createCallableStatement(stmt, 0);
                // 3. Register the positions and types of the OUT parameters
                long millis = System.currentTimeMillis();
                java.sql.Date currdate = new java.sql.Date(millis);
                // 4. Set the bind values of the IN parameters
                st.setString(1, (String) r.getAttribute("ClaimType"));
                st.setString(2, (String) r.getAttribute("InvType"));
                st.setString(3, parentGroupCd);
                st.setInt(4, dealerMapCd);
                st.setString(5, locCd);
                st.setString(6, (String) r.getAttribute("CompFa"));
                st.setString(7, (String) r.getAttribute("InvNum"));
                st.setString(8, (String) r.getAttribute("VIN"));
                st.setString(9, (String) r.getAttribute("Chassis"));
                st.setString(10, (String) r.getAttribute("Model"));
                st.setString(11, (String) r.getAttribute("CustName"));
                st.setString(12, (String) r.getAttribute("MiName"));
                st.setString(13, (String) r.getAttribute("MobileNum"));
                st.setDate(14, (java.sql.Date) r.getAttribute("InvDate"));
                st.setString(16, comClmDocDtl.getCurrentRow()
                                             .getAttribute("ClaimId")
                                             .toString()
                                             .substring(0, 11));
                st.setInt(15, Integer.valueOf((String) r.getAttribute("ClaimAmt")));
                st.setString(17, (String) r.getAttribute("NmiCode"));
                st.setString(18, (String) r.getAttribute("ClaimStatus"));
                st.setDate(19, currdate);
                st.setInt(20, Integer.valueOf((String) r.getAttribute("DlrContr")));
                st.setInt(21, Integer.valueOf((String) r.getAttribute("OfrValue")));
                st.setString(22, (String) r.getAttribute("SchemeCode"));
                st.setString(23, (String) r.getAttribute("Varient"));
                st.setString(24,
                             r.getAttribute("DeclarationYn") == null ? "N" : (String) r.getAttribute("DeclarationYn"));
                st.setString(25, gvtPrf);
                st.setString(26, custPrf);
                st.setString(27, Rltn);
                //                             // 5. Execute the statement
                st.executeUpdate();


            } else if (comClmDocDtl.getCurrentRow().getAttribute("ClaimId") != null) {
                chk = "2";
                String CoupanUpdate =
                    "UPDATE SD_ISL_RMK_CLAIM  set NEW_CAR_MI_FLAG='" + r.getAttribute("NmiCode") + "' , RELATION='" +
                    Rltn + "' , GOVT_PROOF='" + gvtPrf + "' , CUSTOMER_PROOF='" + custPrf + "' , DECLARATION_YN='" +
                    r.getAttribute("DeclarationYn") + "' where claim_id='" +
                    comClmDocDtl.getCurrentRow().getAttribute("ClaimId") + "'";
                //                System.out.println(CoupanUpdate);
                // 2. Create the CallableStatement for the PL/SQL block
                st = trx.createCallableStatement(CoupanUpdate, 0);
                st.executeUpdate();
            }

            comClmDocDtlItr = comClmDocDtl.createRowSetIterator(null);
            while (comClmDocDtlItr.hasNext()) {
                Row comClmDocDtlItrRow = comClmDocDtlItr.next();
                if (comClmDocDtlItrRow.getAttribute("ClaimId") != null && comClmDocDtlItrRow.getAttribute("ClaimId")
                                                                                            .toString()
                                                                                            .contains("N")) {
                    String stmt =
                        "insert into sd_isl_rmk_claim_doc(CLAIM_NUM,DOC_LIST_CODE,DOC_NAME,DOC_REQD,CREATED_BY,CREATED_DATE)values(?,?,?,?,?,?)";
                    // 2. Create the CallableStatement for the PL/SQL block
                    st = trx.createCallableStatement(stmt, 0);
                    // 3. Register the positions and types of the OUT parameters
                    long millis = System.currentTimeMillis();
                    java.sql.Date currdate = new java.sql.Date(millis);
                    // 4. Set the bind values of the IN parameters
                    st.setString(1, comClmDocDtlItrRow.getAttribute("ClaimId")
                                                      .toString()
                                                      .substring(0, 11));
                    st.setString(2, (String) comClmDocDtlItrRow.getAttribute("DocCode"));
                    st.setString(3, (String) comClmDocDtlItrRow.getAttribute("DocNameCode"));
                    st.setString(4, (String) comClmDocDtlItrRow.getAttribute("Reqd"));
                    st.setString(5, userCode);
                    st.setDate(6, currdate);
                    //                             // 5. Execute the statement
                    st.executeUpdate();
                } else {
                    String CoupanUpdate =
                        "UPDATE sd_isl_rmk_claim_doc  set file_name='" +
                        comClmDocDtlItrRow.getAttribute("DocFileName") + "' , folder_path='" +
                        comClmDocDtlItrRow.getAttribute("DocFolderPath") + "' , DOC_REQD='" +
                        comClmDocDtlItrRow.getAttribute("Reqd") + "' , DOC_NAME='" +
                        comClmDocDtlItrRow.getAttribute("DocNameCode") + "' , upload_date=sysdate where claim_num='" +
                        comClmDocDtlItrRow.getAttribute("ClaimId") + "' and doc_list_code='" +
                        comClmDocDtlItrRow.getAttribute("DocCode") + "'";
                    //                    System.out.println(CoupanUpdate);
                    // 2. Create the CallableStatement for the PL/SQL block
                    st = trx.createCallableStatement(CoupanUpdate, 0);
                    st.executeUpdate();
                }
            }
            comClmDocDtlItr.closeRowSetIterator();

            //            status if esle should be there
            String status = null;
            if (chk.equalsIgnoreCase("1")) {
                status = this.updateClaimStatus(comClmDocDtl.getCurrentRow()
                                                            .getAttribute("ClaimId")
                                                            .toString()
                                                            .substring(0, 11));
            } else if (chk.equalsIgnoreCase("2")) {
                status = this.updateClaimStatus((String) comClmDocDtl.getCurrentRow().getAttribute("ClaimId"));
            }
            String statusDesc = null;
            if (status != null) {
                String claimQryId =
                    "select list_desc from am_list where list_name='ISL_RMK_CLAIM_STATUS' and principal_map_cd=" +
                    principalMapCd + " and list_code='" + status + "'";
                //                System.out.println(claimQryId);
                rs = getDBTransaction().createStatement(0).executeQuery(claimQryId);
                if (rs.next()) {
                    statusDesc = rs.getString(1);
                }
                if (statusDesc != null)
                    return statusDesc + " 1";
                else
                    return status + " 2";
            } else {
                if (chk.equalsIgnoreCase("1"))
                    return "ins";
                else
                    return "updt";
            }

        } catch (Exception sqle) {
            // TODO: Add catch code
            sqle.printStackTrace();
        } finally {
            try {
                if (st != null) {
                    st.close();
                }
            } catch (Exception e) {
            }
        }
        return null;

    }

    public String genComClaimId() {
        ResultSet rs;
        String claimId = null;
        ViewObjectImpl comClmDocDtl = this.getCoomercialClaimDocDtlDualRVO1();
        try {
            String claimQryId = "select 'CLM'||lpad(isl_claim_seq.nextval,8,0) from dual";
            //            System.out.println(claimQryId);
            rs = getDBTransaction().createStatement(0).executeQuery(claimQryId);
            if (rs.next()) {
                claimId = rs.getString(1);
            }
        } catch (Exception sqle) {
            sqle.printStackTrace();
        }

        RowSetIterator comClmDocDtlItr = comClmDocDtl.createRowSetIterator(null);
        while (comClmDocDtlItr.hasNext()) {
            Row comClmDocDtlItrRow = comClmDocDtlItr.next();
            comClmDocDtlItrRow.setAttribute("ClaimId", claimId + "N");
        }
        comClmDocDtlItr.closeRowSetIterator();
        return claimId;
    }

    public String updateClaimStatus(String clmId) {
        ResultSet rs;
        DBTransaction trx = (DBTransaction) getTransaction();
        CallableStatement st = null;
        String status = null;
        Map session = ADFContext.getCurrent().getSessionScope();
        Integer count = 0;
        Integer counter = 0;
        try {
            String claimStatCnt =
                "select count(*) from Sd_isl_rmk_Claim_Doc where claim_num='" + clmId +
                "' and file_name is null and doc_reqd='Y'";
            //            System.out.println(claimStatCnt);
            rs = getDBTransaction().createStatement(0).executeQuery(claimStatCnt);
            if (rs.next()) {
                count = rs.getInt(1);
            }
            if (count == 0) {
                claimStatCnt = "select nvl(counter,0) from Sd_isl_rmk_Claim where claim_id='" + clmId + "'";
                //                System.out.println(claimStatCnt);
                rs = getDBTransaction().createStatement(0).executeQuery(claimStatCnt);
                if (rs.next()) {
                    counter = rs.getInt(1);
                }

                if (counter == 0)
                    status = "S";
                else
                    status = "C";
            }


            claimStatCnt =
                "update sd_isl_rmk_claim set claim_status='" + status +
                "' claim_status_date=sysdate,  docs_submission_date=sysdate,claim_submission_date=decode('" + status +
                "','S',sysdate,claim_submission_date),claim_submited_by=decode('" + status + "' ,'S','" +
                session.get("userCode").toString() + "' ,claim_submited_by) WHERE where claim_Id='" + clmId + "'";
            //            System.out.println(claimStatCnt);
            st = trx.createCallableStatement(claimStatCnt, 0);
            st.executeUpdate();

            claimStatCnt =
                "update sd_isl_rmk_claim_doc set status=null,clar_reason_cd=null where claim_num='" + clmId + "'";
            st = trx.createCallableStatement(claimStatCnt, 0);
            st.executeUpdate();
            return status;
        } catch (Exception sqle) {
            // TODO: Add catch code
            sqle.printStackTrace();
        } finally {
            try {
                if (st != null) {
                    st.close();
                }
            } catch (Exception e) {
            }
        }


        return null;
    }

    /** This method is used for setting the rows for InvoiceCancelApprovalRO for showing search results.
     * @param searchParams
     */
    public void searchInvoiceCancellingRecords(Map searchParams) {
        try {
            if (searchParams != null) {
                ViewObjectImpl InvoiceCancelApprovalRVO = this.getInvoiceCancelApprovalRO();
                InvoiceCancelApprovalRVO.setNamedWhereClauseParam("bind_comp_fa",
                                                                  (String) searchParams.get("compCode"));
                LOGGER.warning("compCode : " + (String) searchParams.get("compCode"));
                InvoiceCancelApprovalRVO.setNamedWhereClauseParam("bind_dealer_map_cd",
                                                                  (Integer) searchParams.get("Dealer"));
                LOGGER.warning("Dealer : " + (Integer) searchParams.get("Dealer"));
                InvoiceCancelApprovalRVO.setNamedWhereClauseParam("bind_from_date",

                    (Date) searchParams.get("fromDate"));
                LOGGER.warning("fromDate : " + (Date) searchParams.get("fromDate"));
                InvoiceCancelApprovalRVO.setNamedWhereClauseParam("bind_invoice_num",
                                                                  (String) searchParams.get("InvoiceNumber"));
                LOGGER.warning("InvoiceNumber : " + (String) searchParams.get("InvoiceNumber"));
                InvoiceCancelApprovalRVO.setNamedWhereClauseParam("bind_loc_cd", (String) searchParams.get("locCd"));
                LOGGER.warning("locCd : " + (String) searchParams.get("locCd"));
                InvoiceCancelApprovalRVO.setNamedWhereClauseParam("bind_parent_group",
                                                                  (String) searchParams.get("parentGroupCd"));
                LOGGER.warning("parentGroupCd : " + (String) searchParams.get("parentGroupCd"));
                InvoiceCancelApprovalRVO.setNamedWhereClauseParam("bind_to_date", (Date) searchParams.get("toDate"));
                LOGGER.warning("toDate : " + (Date) searchParams.get("toDate"));
                InvoiceCancelApprovalRVO.setNamedWhereClauseParam("bind_vin", (String) searchParams.get("VIN"));
                LOGGER.warning("VIN : " + (String) searchParams.get("VIN"));
                InvoiceCancelApprovalRVO.executeQuery();
            }
        } catch (Exception e) {
            LOGGER.log(LOGGER.ERROR, e.getMessage());
        }
    }

    /**
     * This method is used for updating the InvCanAppr flag for selected list of rows from the screen.
     * @param updateRows
     */
    public void updateInvoiceCancelApproval(Row[] updateRows, String userId) {
        try {
            if (updateRows != null) {
                for (Row row : updateRows) {
                    ViewObjectImpl InvoiceCancelApprovalUpdateVO = this.getShInvoiceVO1();
                    //row count
                    ViewCriteria ICAVC = InvoiceCancelApprovalUpdateVO.getViewCriteria("InvoiceCancelApprovalVC");
                    InvoiceCancelApprovalUpdateVO.applyViewCriteria(ICAVC, false);
                    InvoiceCancelApprovalUpdateVO.setNamedWhereClauseParam("bind_parent_group",
                                                                           (String) row.getAttribute("ParentGroup"));
                    InvoiceCancelApprovalUpdateVO.setNamedWhereClauseParam("bind_dealer_map_cd",
                                                                           (Integer) row.getAttribute("DealerMapCd"));
                    InvoiceCancelApprovalUpdateVO.setNamedWhereClauseParam("bind_loc_cd",
                                                                           (String) row.getAttribute("LocCd"));
                    InvoiceCancelApprovalUpdateVO.setNamedWhereClauseParam("bind_comp_fa",
                                                                           (String) row.getAttribute("CompFa"));
                    InvoiceCancelApprovalUpdateVO.setNamedWhereClauseParam("bind_inv_num",
                                                                           (String) row.getAttribute("InvNum"));
                    InvoiceCancelApprovalUpdateVO.setNamedWhereClauseParam("bind_inv_type",
                                                                           (String) row.getAttribute("InvType"));
                    InvoiceCancelApprovalUpdateVO.executeQuery();
                    RowSetIterator iter = InvoiceCancelApprovalUpdateVO.createRowSetIterator(null);
                    while (iter.hasNext()) {
                        Row rowUpdate = iter.next();
                        rowUpdate.setAttribute("InvCanAppr", "Y");
                        if (userId != null) {
                            rowUpdate.setAttribute("ModifiedBy", userId);
                        }
                        LOGGER.info(" InvCanAppr flag updated to Y for InvNum : " +
                                    (String) rowUpdate.getAttribute("InvNum"));
                    }
                    iter.closeRowSetIterator();
                }
            }
            this.getDBTransaction().commit();
        } catch (Exception e) {
            LOGGER.log(LOGGER.ERROR, e.getMessage());
        }
    }

    /**
     * Container's getter for InvoiceCancelApprovalRO1.
     * @return InvoiceCancelApprovalRO1
     */
    public InvoiceCancelApprovalROImpl getInvoiceCancelApprovalRO() {
        return (InvoiceCancelApprovalROImpl) findViewObject("InvoiceCancelApprovalRO");
    }

    /**
     * Container's getter for InvoiceCancelApprovalST1.
     * @return InvoiceCancelApprovalST1
     */
    public InvoiceCancelApprovalSTImpl getInvoiceCancelApprovalST() {
        return (InvoiceCancelApprovalSTImpl) findViewObject("InvoiceCancelApprovalST");
    }

    /**
     * Container's getter for InvoiceCancelApprovalUpdateVO1.
     * @return InvoiceCancelApprovalUpdateVO1
     */
    public ViewObjectImpl getInvoiceCancelApprovalUpdateVO() {
        return (ViewObjectImpl) findViewObject("InvoiceCancelApprovalUpdateVO");
    }

    public String exportToExcelSchemeReplication(String channel, Date replication_start_dt, Date replication_end_dt,
                                                 String model_code, String pmc) {

        ViewObjectImpl voi = this.getSchemeReplicationDtlRO1();
        voi.setNamedWhereClauseParam("bind_channel", channel);
        voi.setNamedWhereClauseParam("bind_endDate", replication_start_dt);
        voi.setNamedWhereClauseParam("bind_modelCode", model_code);
        voi.setNamedWhereClauseParam("bind_pmc", pmc);
        voi.setNamedWhereClauseParam("bind_startDate", replication_end_dt);
        voi.executeQuery();
        return null;
    }


    /**
     * The purpose of this method is to set data upload .csv data in View  Objec
     * @It will return String type flag,according to this flag we are showing the message
     * form name:Scheme Replication
     * jira id:MSIL-
     * @param linesValues
     * @return
     */

    public void schemeReplicationUploadData(String[] lineValues) {
        ViewObjectImpl voi_gm_scheme = this.getSchemeReplicationDtlRO1();
        if (lineValues[0] != null) {
            Row cr_row = voi_gm_scheme.createRow();
            cr_row.setAttribute("SchemName", lineValues[0]);
            cr_row.setAttribute("SchemType", lineValues[1]);
            cr_row.setAttribute("SchemRegn", lineValues[2]);
            cr_row.setAttribute("SchemDelrCd", lineValues[3]);
            cr_row.setAttribute("SchemModelCd", lineValues[4]);
            cr_row.setAttribute("SchemFueltypeCd", lineValues[5]);
            cr_row.setAttribute("SchemVariantCd", lineValues[6]);
            cr_row.setAttribute("SchemCostCentr", lineValues[7]);
            cr_row.setAttribute("SchemCorpGrpCd", lineValues[8]);
            cr_row.setAttribute("SchemCorpCd", lineValues[9]);
            cr_row.setAttribute("SchemAprove", lineValues[10]);
            cr_row.setAttribute("SchemMinQty", lineValues[11]);
            cr_row.setAttribute("SchemOfrVal", lineValues[12]);
            cr_row.setAttribute("SchemOfr", lineValues[12]);
            cr_row.setAttribute("SchemIslContrb", lineValues[13]);
            cr_row.setAttribute("SchemDlrContrb", lineValues[14]);
            cr_row.setAttribute("Channel", lineValues[15]);
            cr_row.setAttribute("SchemStarDt", lineValues[16]);
            cr_row.setAttribute("SchemEndDt", lineValues[17]);
            voi_gm_scheme.insertRow(cr_row);
        }
    }

    /**
     * The purpose of this method is to INSERT data in Gm table after upload data
     * @It will return String type flag,according to this flag we are showing the message
     * form name:Scheme Replication
     * jira id:MSIL-
     * @param userCode
     * @return
     */

    public String submitValuesSchemeReplication(String userCode) {
        ViewObjectImpl voi_gm_scheme = this.getGmSchemSrVO1();
        ViewObjectImpl voi_gm_sr = this.getSchemeReplicationDtlRO1();
        ViewObjectImpl voi_scheme_gen = this.getGenSchemeCodeRO1();
        java.sql.Timestamp datetime = new java.sql.Timestamp(System.currentTimeMillis());
        oracle.jbo.domain.Date daTime = new oracle.jbo.domain.Date(datetime);

        RowSetIterator rsi = voi_gm_sr.createRowSetIterator(null);
        while (rsi.hasNext()) {
            Row sr_row = rsi.next();
            Row cr_row = voi_gm_scheme.createRow();

            try {
                voi_scheme_gen.setNamedWhereClauseParam("bind_SCHEM_TYPE", sr_row.getAttribute("SchemType"));
                voi_scheme_gen.setNamedWhereClauseParam("bind_SCHEM_MODEL_CD", sr_row.getAttribute("SchemModelCd"));
                voi_scheme_gen.executeQuery();
                String scheme_code = this.getGenSchemeCodeRO1()
                                         .first()
                                         .getAttribute("Schemecode")
                                         .toString();
                cr_row.setAttribute("SchemCd", scheme_code);
                cr_row.setAttribute("SchemName", sr_row.getAttribute("SchemName"));
                cr_row.setAttribute("SchemType", sr_row.getAttribute("SchemType"));
                cr_row.setAttribute("SchemRegn", sr_row.getAttribute("SchemRegn"));
                cr_row.setAttribute("SchemDelrCd", sr_row.getAttribute("SchemDelrCd"));
                cr_row.setAttribute("SchemModelCd", sr_row.getAttribute("SchemModelCd"));
                cr_row.setAttribute("SchemFueltypeCd", sr_row.getAttribute("SchemFueltypeCd"));
                cr_row.setAttribute("SchemVariantCd", sr_row.getAttribute("SchemVariantCd"));
                cr_row.setAttribute("SchemCostCentr", sr_row.getAttribute("SchemCostCentr"));
                cr_row.setAttribute("SchemCorpGrpCd", sr_row.getAttribute("SchemCostCentr"));
                cr_row.setAttribute("SchemCorpCd", sr_row.getAttribute("SchemCorpCd"));
                cr_row.setAttribute("SchemAprove", sr_row.getAttribute("SchemAprove"));
                cr_row.setAttribute("SchemMinQty", sr_row.getAttribute("SchemMinQty"));
                cr_row.setAttribute("SchemOfrVal", sr_row.getAttribute("SchemOfrVal"));
                cr_row.setAttribute("SchemOfr", sr_row.getAttribute("SchemOfr"));
                cr_row.setAttribute("SchemIslContrb", sr_row.getAttribute("SchemIslContrb"));
                cr_row.setAttribute("SchemDlrContrb", sr_row.getAttribute("SchemDlrContrb"));
                cr_row.setAttribute("Channel", sr_row.getAttribute("Channel"));
                cr_row.setAttribute("SchemStarDt", sr_row.getAttribute("SchemStarDt"));
                cr_row.setAttribute("SchemEndDt", sr_row.getAttribute("SchemEndDt"));


                cr_row.setAttribute("CreatedBy", "ADMIN");
                cr_row.setAttribute("SchemAprove", "P");
                cr_row.setAttribute("CreatedDate", daTime);

                voi_gm_scheme.insertRow(cr_row);
            } catch (Exception e) {
                // TODO: Add catch code
                e.printStackTrace();
            }
        }
        rsi.closeRowSetIterator();
        return null;
    }

    /**
     * Container's getter for SchemeReplicationDtlRO2.
     * @return SchemeReplicationDtlRO2
     */
    public ViewObjectImpl getSchemeReplicationDtlRO2() {
        return (ViewObjectImpl) findViewObject("SchemeReplicationDtlRO2");
    }

    /**
     * The purpose of this method is to reset data
     * form name:Scheme Replication
     * jira id:MSIL-
     *
     */
    public void doResetSchemeReplication() {
        this.getSchemeReplicationDtlRO1().executeEmptyRowSet();
        this.getSchemeReplicationST1().executeQuery();
    }

    /**Method for update the table columns in Allow Exch Mapping
     * @param mapParams Map parameter
     * @return string variable value
     */
    public String updateAllowExchMapping(HashMap mapParams) {
        LOGGER.info("** inside updateAllowExchMapping - Allow Exch Mapping** ");
        Integer errCode = 0;
        String errMsg = null;
        DBTransaction trx = (DBTransaction) getTransaction();
        CallableStatement st = null;
        try {
            String stmt = "begin PKG_ENQ_POC_DETAIL.SP_ALLOW_EXCH_UPDATE(?,?,?,?,?,?); end;";
            st = trx.createCallableStatement(stmt, 0);
            st.setString(1, (String) mapParams.get("buyingNo"));
            st.setString(2, (String) mapParams.get("approvalNo"));
            st.setString(3, (String) mapParams.get("allowExch"));
            st.setString(4, (String) mapParams.get("approvedBy"));
            st.registerOutParameter(5, OracleTypes.NUMBER);
            st.registerOutParameter(6, OracleTypes.VARCHAR);

            st.executeUpdate();
            trx.commit();
            errCode = (Integer) st.getObject(5);
            errMsg = (String) st.getObject(6);
        } catch (Exception sqle) {
            sqle.printStackTrace();

        } finally {
            try {
                if (st != null) {
                    st.close();
                }
            } catch (Exception e) {
            }
        }
        LOGGER.info("** end updateAllowExchMapping - Allow Exch Mapping** " + errCode + "error==" + errMsg);
        if (errCode == null && errMsg == null) {
            return "Y";
        } else {
            return "N";
        }


    }

    /**Method for reset the Dual VO-Allow Exch Mapping.
     */
    public void executeResetAllowExch() {
        LOGGER.info("** inside executeResetAllowExch() - AllowExchMapping **");
        ViewObjectImpl voDual = this.getAllowExchangeMappingDualVO1();
        voDual.executeEmptyRowSet();
        voDual.executeQuery();
        LOGGER.info("** end executeResetAllowExch() - AllowExchMapping **");

    }

    /**
     * The purpose of this method is to reset data
     * form name:Scheme Replication
     * jira id:MSIL-
     *
     */
    public void resetSchemeReplication() {
        this.getSchemeReplicationDtlRO1().executeEmptyRowSet();

    }

    /**
     * Container's getter for SchemeMasterClosureDetailsRVO1.
     * @return SchemeMasterClosureDetailsRVO1
     */
    public SchemeMasterClosureDetailsRVOImpl getSchemeMasterClosureDetailsRVO1() {
        return (SchemeMasterClosureDetailsRVOImpl) findViewObject("SchemeMasterClosureDetailsRVO1");
    }

    /**
     * Container's getter for SchemeMasterClosureDualVO1.
     * @return SchemeMasterClosureDualVO1
     */
    public SchemeMasterClosureDualVOImpl getSchemeMasterClosureDualVO1() {
        return (SchemeMasterClosureDualVOImpl) findViewObject("SchemeMasterClosureDualVO1");
    }

    public void filterSchemeMasterDetails() {
        Map session = ADFContext.getCurrent().getSessionScope();
        ResultSet rs= null;
        Integer principalMapCd = new Integer(session.get("principalMapCd").toString());
        ViewObjectImpl SchemeMasterVo = this.getSchemeMasterClosureDualVO1();
        ViewObjectImpl SchemeMasterDtlVo = this.getSchemeMasterClosureDetailsRVO1();
        Row SchemeMasterRow = SchemeMasterVo.getCurrentRow();
        try {
            String state =
                SchemeMasterRow.getAttribute("StatCode") != null ?
                " AND bm.state LIKE decode(nvl('" + SchemeMasterRow.getAttribute("StatCode") +
                "','%'),'%',bm.state,nvl('" + SchemeMasterRow.getAttribute("StatCode") + "','%'))" :
                " AND bm.state LIKE decode(nvl(null,'%'),'%',bm.state,nvl(null,'%'))";
            String fordesc =
                SchemeMasterRow.getAttribute("ForDesc") != null ?
                " AND bm.for_cd LIKE  decode(nvl('" + SchemeMasterRow.getAttribute("ForDesc") +
                "','%'),'%',bm.for_cd,nvl('" + SchemeMasterRow.getAttribute("ForDesc") + "','%'))" :
                " AND bm.for_cd LIKE  decode(nvl(null,'%'),'%',bm.for_cd,nvl(null,'%'))";
            String fule =
                SchemeMasterRow.getAttribute("FuleTypeDesc") != null ?
                " AND bm.fueltype_cd LIKE decode(nvl('" + SchemeMasterRow.getAttribute("FuleTypeDesc") +
                "','%'),'%',bm.fueltype_cd,nvl('" + SchemeMasterRow.getAttribute("FuleTypeDesc") + "','%'))" :
                " AND bm.fueltype_cd LIKE decode(nvl(null,'%'),'%',bm.fueltype_cd,nvl(null,'%'))";
            String model =
                SchemeMasterRow.getAttribute("ModelCode") != null ?
                " AND bm.model_cd LIKE decode(nvl('" + SchemeMasterRow.getAttribute("ModelCode") +
                "','%'),'%',bm.model_cd,nvl('" + SchemeMasterRow.getAttribute("ModelCode") + "','%'))" :
                " AND bm.model_cd LIKE  decode(nvl(null,'%'),'%',bm.model_cd,nvl(null,'%'))";
            String varient =
                SchemeMasterRow.getAttribute("VarientCode") != null ?
                " AND bm.variant_cd LIKE decode(nvl('" + SchemeMasterRow.getAttribute("VarientCode") +
                "','%'),'%',bm.variant_cd,nvl('" + SchemeMasterRow.getAttribute("VarientCode") + "','%'))" :
                " AND bm.variant_cd LIKE  decode(nvl(null,'%'),'%',bm.variant_cd,nvl(null,'%'))";
            String sql =
                "SELECT scheme_type, regn,state,for_cd,fueltype_cd,model_cd,variant_cd,from_date,tot_bonus,Status,principal_map_cd,TO_DATE,rowid FROM muldms.sm_scheme_master bm  WHERE bm.scheme_type ='" +
                SchemeMasterRow.getAttribute("SchemeType") + "' AND bm.regn ='" + SchemeMasterRow.getAttribute("Regn") +
                "' AND bm.from_date >=to_char(to_date('" + SchemeMasterRow.getAttribute("FromDate") +
                "','yyyy-mm-dd'),'DD-MON-RR')  AND bm.to_date <to_char(to_date('" +
                SchemeMasterRow.getAttribute("ToDate") + "','yyyy-mm-dd')+1,'DD-MON-RR') " + state + fordesc + fule +
                model + varient + "  AND bm.status ='" + SchemeMasterRow.getAttribute("Status") +
                "' AND bm.principal_map_cd =" + principalMapCd + " AND bm.close_date IS NULL";
            System.out.println(sql);
            rs = getDBTransaction().createStatement(0).executeQuery(sql);
            while(rs.next()) {
                Row createSchemeMasterDtl = SchemeMasterDtlVo.createRow();
                createSchemeMasterDtl.setAttribute("SchemeType", rs.getString(1));
                createSchemeMasterDtl.setAttribute("Regn", rs.getString(2));
                createSchemeMasterDtl.setAttribute("Stat", rs.getString(3));
                createSchemeMasterDtl.setAttribute("ForCd", rs.getString(4));
                createSchemeMasterDtl.setAttribute("FuleTypeCd", rs.getString(5));
                createSchemeMasterDtl.setAttribute("ModelCd", rs.getString(6));
                createSchemeMasterDtl.setAttribute("VarientCd", rs.getString(7));
                createSchemeMasterDtl.setAttribute("FromDate", rs.getDate(8));
                createSchemeMasterDtl.setAttribute("TotBonus", rs.getInt(9));
                createSchemeMasterDtl.setAttribute("Status", rs.getString(10));
                createSchemeMasterDtl.setAttribute("ToDate", rs.getDate(12));
                createSchemeMasterDtl.setAttribute("PrincipalMapCd", rs.getInt(11));
                createSchemeMasterDtl.setAttribute("rowId1", rs.getRowId(13));
                SchemeMasterDtlVo.insertRow(createSchemeMasterDtl);
            }
        } catch (Exception sqle) {
            // TODO: Add catch code
            sqle.printStackTrace();
        }finally {
                closeStatement(null, null, rs);
            }
    }


    public void updateSchemeMasterDetails() {
        DBTransaction trx = (DBTransaction) getTransaction();
        CallableStatement st = null;
        Map session = ADFContext.getCurrent().getSessionScope();
        ViewObjectImpl SchemeMasterVo = this.getSchemeMasterClosureDualVO1();
        ViewObjectImpl SchemeMasterDtlVo = this.getSchemeMasterClosureDetailsRVO1();
        Row SchemeMasterRow = SchemeMasterVo.getCurrentRow();
        Integer principalMapCd = new Integer(session.get("principalMapCd").toString());

        try {
            RowSetIterator rsi = SchemeMasterDtlVo.createRowSetIterator(null);
            while (rsi.hasNext()) {
			
                Row r1 = rsi.next();
                String schmMstrDtlUpdt =
                    "UPDATE sm_scheme_master SET action_date = sysdate,close_date  = to_char(to_date('" +
                    SchemeMasterRow.getAttribute("CloseDate") + "','yyyy-mm-dd'),'DD-MON-RR'), modified_by = '" +
                    session.get("userCode").toString() + "' , to_date = to_char(to_date('" +
                    SchemeMasterRow.getAttribute("CloseDate") + "','yyyy-mm-dd'),'DD-MON-RR') where rowid ='" +
                    r1.getAttribute("rowId1") + "' and principal_map_cd =" + principalMapCd;
					try{
                st = trx.createCallableStatement(schmMstrDtlUpdt, 0);
                st.executeUpdate();
					}catch (Exception sqle) {
            // TODO: Add catch code
            sqle.printStackTrace();
        } finally {
            try {
                if (st != null) {
                    st.close();
                }
            } catch (Exception e) {
            }
        }
				
            }
            rsi.closeRowSetIterator();
        } catch (Exception sqle) {
            // TODO: Add catch code
            sqle.printStackTrace();
        } finally {
            try {
                if (st != null) {
                    st.close();
                }
            } catch (Exception e) {
            }
        }

    }

    /**
     * Container's getter for StockyardCreationLOV1.
     * @return StockyardCreationLOV1
     */
    public StockyardCreationLOVImpl getStockyardCreationLOV1() {
        return (StockyardCreationLOVImpl) findViewObject("StockyardCreationLOV1");
    }

    /**
     * Container's getter for GmSchemSrVO1.
     * @return GmSchemSrVO1
     */
    public ViewObjectImpl getGmSchemSrVO1() {
        return (ViewObjectImpl) findViewObject("GmSchemSrVO1");
    }


    /**
     * Container's getter for DesignationLOV1.
     * @return DesignationLOV1
     */
    public ViewObjectImpl getDesignationLOV1() {
        return (ViewObjectImpl) findViewObject("DesignationLOV1");
    }

    /**
     * Container's getter for GmCategoryMasterVO1.
     * @return GmCategoryMasterVO1
     */
    public ViewObjectImpl getGmCategoryMasterVO1() {
        return (ViewObjectImpl) findViewObject("GmCategoryMasterVO1");
    }


    /**
     * Container's getter for TrainingProgramMasterVO1.
     * @return TrainingProgramMasterVO1
     */
    public ViewObjectImpl getTrainingProgramMasterVO1() {
        return (ViewObjectImpl) findViewObject("TrainingProgramMasterVO1");
    }

    /**
     * Container's getter for LMSProgramTransientVO1.
     * @return LMSProgramTransientVO1
     */
    public ViewObjectImpl getLMSProgramTransientVO1() {
        return (ViewObjectImpl) findViewObject("LMSProgramTransientVO1");
    }

    /**
     * Container's getter for TrainingProgramMasterVO2.
     * @return TrainingProgramMasterVO2
     */
    public ViewObjectImpl getTrainingProgramMasterVO2() {
        return (ViewObjectImpl) findViewObject("TrainingProgramMasterVO2");
    }

    /**
     * Container's getter for SmBpriceVO1.
     * @return SmBpriceVO1
     */
    public ViewObjectImpl getSmBpriceVO1() {
        return (ViewObjectImpl) findViewObject("SmBpriceVO1");
    }

    /**
     * Container's getter for LmsSmAgencyVO1.
     * @return LmsSmAgencyVO1
     */
    public ViewObjectImpl getLmsSmAgencyVO1() {
        return (ViewObjectImpl) findViewObject("LmsSmAgencyVO1");
    }

    /**
     * Container's getter for BookingPriceST1.
     * @return BookingPriceST1
     */
    public ViewObjectImpl getBookingPriceST1() {
        return (ViewObjectImpl) findViewObject("BookingPriceST1");
    }

    /**
     * Container's getter for ReceiptVehicleLOV1.
     * @return ReceiptVehicleLOV1
     */
    public ViewObjectImpl getReceiptVehicleLOV1() {
        return (ViewObjectImpl) findViewObject("ReceiptVehicleLOV1");
    }

    /**
     * Method use for setting up the Receipt Table null when its load.
     */
    public void initReceiptEmptyRow() {
        LOGGER.info("**Receipt**");
        ViewObjectImpl vo = this.getReceiptEOView1();
        vo.executeEmptyRowSet();
        LOGGER.info("**Receipt**");
    }

    /**
     * Container's getter for ColorST1.
     * @return ColorST1
     */
    public ViewObjectImpl getColorST1() {
        return (ViewObjectImpl) findViewObject("ColorST1");
    }

    /**
     * Container's getter for OrderST1.
     * @return OrderST1
     */
    public ViewObjectImpl getOrderST1() {
        return (ViewObjectImpl) findViewObject("OrderST1");
    }

    /**
     * Container's getter for FmPartyMasterST1.
     * @return FmPartyMasterST1
     */
    public FmPartyMasterSTImpl getFmPartyMasterST() {
        return (FmPartyMasterSTImpl) findViewObject("FmPartyMasterST");
    }

    /**
     * fetch the customer information from SH_LEASE_CIN table.
     * @return boolean
     */
    public boolean fetchCustomerDataByCustomerIdAndBusinessType() {
        LOGGER.warning("** Begin SalseModuleAMImpl fetchCustomerDataByCustomerIdAndBusinessType() - FmPartyMaster **");
        FmPartyMasterSTRowImpl row = (FmPartyMasterSTRowImpl) getFmPartyMasterST().getCurrentRow();
        //          LOGGER.warning("customer id: "+ row.getCustomerId());
        //           LOGGER.warning("Business Type: "+ row.getBusinessType());

        if (row != null) {
            FmPartyMasterRVOImpl fmPartyMasterVO = getFmPartyMasterRVO();
            ViewCriteria fmPartyMasterVC = fmPartyMasterVO.getViewCriteria("filterByCustomerIdAndBusinessTypeCriteria");
            fmPartyMasterVO.applyViewCriteria(fmPartyMasterVC, false);
            fmPartyMasterVO.setNamedWhereClauseParam("bindCustomerId", row.getCustomerId());
            fmPartyMasterVO.setNamedWhereClauseParam("bindBusinessType", row.getBusinessType());
            fmPartyMasterVO.executeQuery();
            LOGGER.warning("Count: " + fmPartyMasterVO.getEstimatedRowCount());

            return true;
        }
        LOGGER.warning("** End SalseModuleAMImpl fetchCustomerDataByCustomerIdAndBusinessType() - FmPartyMaster **");
        return false;
    }

    /**
     * filter by customer id.
     * @param customerId customer id
     * @return String
     */
    public String filterByCustomer(String customerId) {
        LOGGER.warning("** Begin SalseModuleAMImpl filterByCustomer() - FmPartyMaster **");
        try {
            LOGGER.warning("customer id: " + customerId);
            if (customerId != null) { //ShLeaseCinVOImpl fmPartyMasterVO=getShLeaseCinVO();
                ShLeaseCinVOImpl fmPartyMasterVO = getShLeaseCinVO();
                ViewCriteria fmPartyMasterVC = fmPartyMasterVO.getViewCriteria("filterByCustomerIdCriteria");
                fmPartyMasterVO.applyViewCriteria(fmPartyMasterVC, false);
                fmPartyMasterVO.setNamedWhereClauseParam("bindCustomerId", customerId);
                fmPartyMasterVO.executeQuery();
                LOGGER.warning("Count: " + fmPartyMasterVO.getEstimatedRowCount());
            }
        } catch (Exception e) {
            LOGGER.warning("Error message" + e.getMessage());
        }
        LOGGER.warning("** Begin SalseModuleAMImpl filterByCustomer() - FmPartyMaster **");
        return null;
    }

    /** save the customer in SH_LEASE_CIN table.
     * @return String
     */
    public String saveCustomerInfo() {
        LOGGER.warning("** Begin SalseModuleAMImpl saveCustomerInfo() - FmPartyMaster **");
        try {
            Map session = ADFContext.getCurrent().getSessionScope();
            String userCode = session.get("userCode").toString();
            String customerId = generateCustomerId();
            LOGGER.warning("customer id" + customerId);
            ShLeaseCinVORowImpl row = (ShLeaseCinVORowImpl) getShLeaseCinVO().getCurrentRow();
            row.setCustomerId(customerId);
            row.setCreatedBy(userCode);
            row.setModifiedBy(userCode);
            this.getDBTransaction().commit();
            return customerId;
        } catch (Exception e) {
            LOGGER.warning("Error message" + e.getMessage());
        }
        LOGGER.warning("** End SalseModuleAMImpl saveCustomerInfo() - FmPartyMaster **");
        return null;
    }

    /** generate the customer id .
     * @return String
     */
    public String generateCustomerId() {
        LOGGER.warning("** Begin SalseModuleAMImpl generateCustomerId() - FmPartyMaster **");
        String stmt = "begin pkg_msl.SP_GENERATE_FMCUST (?,?); end;";
        CallableStatement cs = null;
        String error = null;
        String customerId = null;
        try {
            DBTransaction dbtxn = (DBTransaction) getTransaction();
            cs = dbtxn.createCallableStatement(stmt.toString(), 1);

            cs.registerOutParameter(1, OracleTypes.VARCHAR);
            cs.registerOutParameter(2, OracleTypes.VARCHAR);
            cs.execute();
            customerId = cs.getString(1);
            String error_msg = cs.getString(2);
            LOGGER.warning("cusid 1: " + customerId);
            LOGGER.warning("erro_2: " + error_msg);
            if (error_msg != null) {
                error = error_msg.toString();
            }
            // return error;
        } catch (Exception sqle) {
            LOGGER.warning("Error message" + sqle.getMessage());
        } finally {
            try {
                if (cs != null) {
                    cs.close();
                }
            } catch (Exception e) {
                LOGGER.warning("Error message" + e.getMessage());
            }
        }
        LOGGER.warning("** End SalseModuleAMImpl generateCustomerId() - FmPartyMaster **");
        return customerId;
    }

    /**
     * method to validate PAN PIN AADHAR NUMBER.
     * @param p_flag indicator
     * @param p_pin pin number
     * @param p_aAdhar aAdhar number
     * @param p_panNum pan number
     * @return String
     */
    public String validatePanAadharPin(int p_flag, String p_pin, String p_aAdhar, String p_panNum) {
        LOGGER.warning("** Begin SalseModuleAMImpl validatePanAadharPin() **");
        String stmt = "begin SP_VALIDATE_PAN_AADHAR_PIN (?,?,?,?,?,?); end;";
        CallableStatement cs = null;
        String error = "";
        try {
            LOGGER.warning("p_flag: " + p_flag);
            LOGGER.warning("p_pin: " + p_pin);
            LOGGER.warning("p_aAdhar: " + p_aAdhar);
            LOGGER.warning("p_panNum: " + p_panNum);
            DBTransaction dbtxn = (DBTransaction) getTransaction();
            cs = dbtxn.createCallableStatement(stmt.toString(), 1);
            cs.setObject(1, p_flag);
            cs.setObject(2, p_pin);
            cs.setObject(3, p_aAdhar);
            cs.setObject(4, p_panNum);

            cs.registerOutParameter(5, OracleTypes.INTEGER);
            cs.registerOutParameter(6, OracleTypes.VARCHAR);
            cs.execute();
            //int err =  cs.getInt(5);
            String error_msg = cs.getString(6);
            if (error_msg != null) {
                error = error_msg.toString();
            }
            return error;
        } catch (Exception sqle) {
            LOGGER.warning("Error message" + sqle.getMessage());
        } finally {
            try {
                if (cs != null) {
                    cs.close();
                }
            } catch (Exception e) {
                LOGGER.warning("Error message" + e.getMessage());
            }
        }
        LOGGER.warning("** End SalseModuleAMImpl validatePanAadharPin() **");
        return error;
    }

    /**
     * method to validata PIN number for valid City.
     * @param p_principal global param
     * @param p_city_cd city code
     * @param p_pin pin numer
     * @return String
     */
    public String validatePin(int p_principal, String p_city_cd, String p_pin) {
        LOGGER.warning("** Start SalseModuleAMImpl validatePin() **");
        String stmt = "begin SP_VALIDATE_PIN (?,?,?,?,?); end;";
        CallableStatement cs = null;
        String error = "";
        try {
            LOGGER.warning("p_principal: " + p_principal);
            LOGGER.warning("p_city_cd: " + p_city_cd);
            LOGGER.warning("p_pin: " + p_pin);
            DBTransaction dbtxn = (DBTransaction) getTransaction();
            cs = dbtxn.createCallableStatement(stmt.toString(), 1);
            cs.setObject(1, p_principal);
            cs.setObject(2, p_city_cd);
            cs.setObject(3, p_pin);

            cs.registerOutParameter(5, OracleTypes.INTEGER);
            cs.registerOutParameter(4, OracleTypes.VARCHAR);
            cs.execute();
            // int err =  cs.getInt(5);
            String error_msg = cs.getString(4);
            if (error_msg != null) {
                error = error_msg.toString();
            }
            return error;
        } catch (Exception sqle) {
            LOGGER.warning("Error message" + sqle.getMessage());
        } finally {
            try {
                if (cs != null) {
                    cs.close();
                }
            } catch (Exception e) {
                LOGGER.warning("Error message" + e.getMessage());
            }
        }
        LOGGER.warning("** End SalseModuleAMImpl validatePin() **");
        return error;
    }

    /**
     * method to validate email address.
     * @param email Email
     * @return Integer
     */
    public Integer exeFncVerifyEmail(String email) {
        LOGGER.warning("** Start SalseModuleAMImpl exeFncVerifyEmail() **");
        Integer error = null;
        try {
            LOGGER.warning("Email: " + email);
            Object errMsg = callStoredFunction(Types.VARCHAR, "fnc_verif_email_adr(?)", new Object[] { email });
            if (errMsg != null) {
                error = Integer.valueOf(errMsg.toString());
            }
        } catch (Exception sqle) {
            LOGGER.warning("Error message" + sqle.getMessage());
        }
        LOGGER.warning("** End SalseModuleAMImpl exeFncVerifyEmail() **");
        return error;
    }

    /**
     * method to validate GST number.
     * @param gstNum GST number
     * @param state state
     * @param pan PAN number
     * @param pmc PMC
     * @return String
     */
    public String validateGstNum(String gstNum, String state, String pan, String pmc) {
        LOGGER.warning("** Start SalseModuleAMImpl validateGstNum() **");
        String stmt = "begin sp_validate_gst (?,?,?,?,?,?); end;";
        DBTransaction dbtxn = (DBTransaction) getTransaction();
        CallableStatement cs = null;
        String error = "";
        try {
            LOGGER.warning("gstNum: " + gstNum);
            LOGGER.warning("state: " + state);
            LOGGER.warning("pan: " + pan);
            LOGGER.warning("pmc: " + pmc);
            cs = dbtxn.createCallableStatement(stmt.toString(), 1);
            cs.setObject(1, gstNum);
            cs.setObject(2, state);
            cs.setObject(3, pan);
            cs.setObject(4, pmc);

            cs.registerOutParameter(5, OracleTypes.INTEGER);
            cs.registerOutParameter(6, OracleTypes.VARCHAR);
            cs.execute();
            //int err =  cs.getInt(5);
            String error_msg = cs.getString(6);
            if (error_msg != null) {
                error = error_msg.toString();
            }
            return error;
        } catch (Exception sqle) {
            sqle.printStackTrace();
        } finally {
            try {
                if (cs != null) {
                    cs.close();
                }
            } catch (Exception e) {
                LOGGER.warning("Error message" + e.getMessage());
            }

        }
        LOGGER.warning("** End SalseModuleAMImpl validateGstNum() **");
        return error;
    }

    /**
     * method to create empty row for ShLeaseCinVO.
					
     */
    public void initEmptyRowSetForFmPartyMaster() {
        LOGGER.warning("** Start SalseModuleAMImpl initEmptyRowSetForFmPartyMaster() **");
        ShLeaseCinVOImpl fmPartyMasterVO = getShLeaseCinVO();
        fmPartyMasterVO.executeEmptyRowSet();
        FmPartyMasterRVOImpl fmPartyMasterRVO = getFmPartyMasterRVO();
        fmPartyMasterRVO.executeEmptyRowSet();
        LOGGER.warning("** End SalseModuleAMImpl initEmptyRowSetForFmPartyMaster() **");
    }

    /**
     * Container's getter for FmPartyMasterRVO1.
     * @return FmPartyMasterRVO1
     */
    public FmPartyMasterRVOImpl getFmPartyMasterRVO() {
        return (FmPartyMasterRVOImpl) findViewObject("FmPartyMasterRVO");
    }


    /**
     * Container's getter for ShLeaseCinVO1.
     * @return ShLeaseCinVO1
     */
    public ShLeaseCinVOImpl getShLeaseCinVO() {
        return (ShLeaseCinVOImpl) findViewObject("ShLeaseCinVO");
    }


    /**
     * Container's getter for GmVinVO2.
     * @return GmVinVO2
     */
    public ViewObjectImpl getGmVinVO2() {
        return (ViewObjectImpl) findViewObject("GmVinVO2");
    }

    /**
     * Container's getter for GmVinChassisNumRVO1.
     * @return GmVinChassisNumRVO1
     */
    public GmVinChassisNumRVOImpl getGmVinChassisNumRVO1() {
        return (GmVinChassisNumRVOImpl) findViewObject("GmVinChassisNumRVO1");
    }

    public void executeChassisNum(Integer pmcId, String modelCd) {
        System.err.println("Inside executeChassisNum method::::: " + pmcId + " " + modelCd);
        GmVinChassisNumRVOImpl gmVinVO = getGmVinChassisNumRVO1();
        ViewCriteria vc = gmVinVO.getViewCriteria("GmVinChassisNumRVOCriteria");
        gmVinVO.applyViewCriteria(vc);
        gmVinVO.setbindModelCd(modelCd);
        gmVinVO.setbindPMC(pmcId);
        gmVinVO.executeQuery();
        //        ViewObjectImpl vo = getGmVinVO2();
        //        vo.executeQuery();
    }

    public void executeGmVinVC(String modelCd, String chassisNum) {
        System.err.println("Inside executeGmVinVC method:::::");
        ViewObjectImpl vo = getGmVinVO2();
        ViewCriteria vc = vo.getViewCriteria("GmVinVOCriteria1");
        vo.applyViewCriteria(vc);
        vo.setNamedWhereClauseParam("bindChassisNum", chassisNum);
        vo.setNamedWhereClauseParam("bindModelCd", modelCd);
        vo.executeQuery();
    }

    public void initCallForGmVin() {
        ViewObjectImpl vo = this.getGmVinVO2();
        vo.executeEmptyRowSet();
    }

    /**
     * Container's getter for GmVinSearchRO1.
     * @return GmVinSearchRO1
     */
    public GmVinSearchROImpl getGmVinSearchRO1() {
        return (GmVinSearchROImpl) findViewObject("GmVinSearchRO1");
    }

    /**
     * Container's getter for GmVinFetchRO1.
     * @return GmVinFetchRO1
     */
    public GmVinFetchROImpl getGmVinFetchRO1() {
        return (GmVinFetchROImpl) findViewObject("GmVinFetchRO1");
    }

    public Boolean executeVinNoFetch(String chassisNum, String modelCd) {
        System.err.println("Inside executeVinNoFetch method:::::");
        boolean vinNo = false;
        GmVinFetchROImpl vo = getGmVinFetchRO1();
        ViewCriteria vc = vo.getViewCriteria("GmVinFetchROCriteria");
        vo.applyViewCriteria(vc);
        vo.setNamedWhereClauseParam("bindChassisNum", chassisNum);
        vo.setNamedWhereClauseParam("bindModelCd", modelCd);
        vo.executeQuery();
        if (vo.getEstimatedRowCount() == 0) {
            System.err.println("Inside if getEstimated row count equals 1 method:::::");
            vinNo = true;
        }
        if (vo.getEstimatedRowCount() > 1) {
            System.err.println("Inside if getEstimated row count 1 method:::::");
            vinNo = true;
        } else {
            if (vo.getEstimatedRowCount() > 0) {
                vinNo = false;
                System.err.println("Inside if getEstimated row count greater 0 method:::::");
                GmVinFetchRORowImpl rvo = (GmVinFetchRORowImpl) vo.first();
                if (rvo.getVin() != null) {
                    System.err.println("Inside if getVin  method:::::");
                    this.getGmVinSearchRO1()
                        .getCurrentRow()
                        .setAttribute("Vin", rvo.getVin());
                    GmVinFetchDetailsROImpl gmVinFetch = getGmVinFetchDetailsRO1();
                    //ViewCriteria vc1 = gmVinFetch.getViewCriteria("GmVinFetchDetailsROCriteria");
                    //gmVinFetch.applyViewCriteria(vc1);
                    System.err.println("RVO getVin():::::" + rvo.getVin());
                    gmVinFetch.setbindVinNo(rvo.getVin());
                    gmVinFetch.executeQuery();
                    System.err.println("gmVinFetch.getEstimatedRowCount():::::" + gmVinFetch.getEstimatedRowCount());
                    if (gmVinFetch.getEstimatedRowCount() > 0) {
                        GmVinFetchDetailsRORowImpl rvo1 = (GmVinFetchDetailsRORowImpl) gmVinFetch.first();
                        if (rvo1 != null && rvo1.getRowNum1() != null) {
                            System.err.println("Inside gmVinFetch details RVO:::");
                            System.err.println("rvo1.getParentGroup():::" + rvo1.getParentGroup());
                            System.err.println("rvo1.getDealerMapCd():::" + rvo1.getDealerMapCd());
                            System.err.println("rvo1.getLocCd():::" + rvo1.getLocCd());
                            this.getGmVinSearchRO1()
                                .getCurrentRow()
                                .setAttribute("ParentGroup", rvo1.getParentGroup());
                            this.getGmVinSearchRO1()
                                .getCurrentRow()
                                .setAttribute("DealerMapCd", rvo1.getDealerMapCd());
                            this.getGmVinSearchRO1()
                                .getCurrentRow()
                                .setAttribute("LocCd", rvo1.getLocCd());
                            this.getGmVinSearchRO1()
                                .getCurrentRow()
                                .setAttribute("CompFa", rvo1.getCompFa());
                            this.getGmVinSearchRO1()
                                .getCurrentRow()
                                .setAttribute("InvNum", rvo1.getInvNum());
                            this.getGmVinSearchRO1()
                                .getCurrentRow()
                                .setAttribute("SrNo", "1");
                            this.getGmVinSearchRO1()
                                .getCurrentRow()
                                .setAttribute("OrderNum", rvo1.getOrderNum());
                            this.getGmVinSearchRO1()
                                .getCurrentRow()
                                .setAttribute("InvDate", rvo1.getInvDate());
                            this.getGmVinSearchRO1()
                                .getCurrentRow()
                                .setAttribute("OrderDate", rvo1.getOrderDate());
                            this.getGmVinSearchRO1()
                                .getCurrentRow()
                                .setAttribute("CustId", rvo1.getOrderPartyCd());
                            this.getGmVinSearchRO1()
                                .getCurrentRow()
                                .setAttribute("CustName", rvo1.getInvPartyCd());
                            this.getGmVinSearchRO1()
                                .getCurrentRow()
                                .setAttribute("VariantCd", rvo1.getVariantCd());
                            this.getGmVinSearchRO1()
                                .getCurrentRow()
                                .setAttribute("EcolorCd", rvo1.getEcolorCd());
                            this.getGmVinSearchRO1()
                                .getCurrentRow()
                                .setAttribute("EngineNum", rvo1.getEngineNum());
                            this.getGmVinSearchRO1()
                                .getCurrentRow()
                                .setAttribute("InvStatus", rvo1.getInvStatus());
                            this.getGmVinSearchRO1()
                                .getCurrentRow()
                                .setAttribute("InvCheck", rvo1.getInvCheck());
                            this.getGmVinSearchRO1()
                                .getCurrentRow()
                                .setAttribute("SchemeCd", rvo1.getSchemeCd());
                            this.getGmVinSearchRO1()
                                .getCurrentRow()
                                .setAttribute("CancelDate", rvo1.getCancelDate());
                            this.getGmVinSearchRO1()
                                .getCurrentRow()
                                .setAttribute("Remarks", rvo1.getRemarks());
                            if (rvo1.getDealerMapCd() != null && rvo1.getLocCd() != null &&
                                rvo1.getParentGroup() != null && rvo1.getSchemeCd() != null) {
                                GmVinFetchLocROImpl gmVinFetchLoc = getGmVinFetchLocRO1();
                                gmVinFetchLoc.setbindDealerMapCd(rvo1.getDealerMapCd());
                                gmVinFetchLoc.setbindLocCd(rvo1.getLocCd());
                                gmVinFetchLoc.setbindParentGroup(rvo1.getParentGroup());
                                gmVinFetchLoc.executeQuery();
                                if (gmVinFetchLoc.getEstimatedRowCount() > 0) {
                                    GmVinFetchLocRORowImpl rvo2 = (GmVinFetchLocRORowImpl) gmVinFetchLoc.first();
                                    this.getGmVinSearchRO1()
                                        .getCurrentRow()
                                        .setAttribute("DealerName", rvo2.getDealerName());
                                    this.getGmVinSearchRO1()
                                        .getCurrentRow()
                                        .setAttribute("LocDesc", rvo2.getLocDesc());

                                }
                                GmVinFetchSchemeROImpl gmVinFetchScheme = getGmVinFetchSchemeRO1();
                                gmVinFetchScheme.setbindSchemeCd(rvo1.getSchemeCd());
                                gmVinFetchScheme.executeQuery();
                                if (gmVinFetchScheme.getEstimatedRowCount() > 0) {
                                    GmVinFetchSchemeRORowImpl rowImpl =
                                        (GmVinFetchSchemeRORowImpl) gmVinFetchScheme.first();
                                    this.getGmVinSearchRO1()
                                        .getCurrentRow()
                                        .setAttribute("SchemeName", rowImpl.getSchemName());
                                }
                            }


                        }
                    }
                    //this.getGmVinSearchRO1().getCurrentRow().setAttribute("SchemeName", rvo.getVin());
                }

            }


        }

        return vinNo;
    }

    /**
     * Container's getter for GmVinFetchSchemeRO1.
     * @return GmVinFetchSchemeRO1
     */
    public GmVinFetchSchemeROImpl getGmVinFetchSchemeRO1() {
        return (GmVinFetchSchemeROImpl) findViewObject("GmVinFetchSchemeRO1");
    }

    /**
     * Container's getter for GmVinFetchDetailsRO1.
     * @return GmVinFetchDetailsRO1
     */
    public GmVinFetchDetailsROImpl getGmVinFetchDetailsRO1() {
        return (GmVinFetchDetailsROImpl) findViewObject("GmVinFetchDetailsRO1");
    }

    /**
     * Container's getter for GmVinFetchLocRO1.
     * @return GmVinFetchLocRO1
     */
    public GmVinFetchLocROImpl getGmVinFetchLocRO1() {
        return (GmVinFetchLocROImpl) findViewObject("GmVinFetchLocRO1");
    }

    public Integer getUpdateCount(String vin) {
        System.err.println("getUpdateCount:::::" + vin);
        Integer count = -1;
        ViewObjectImpl sdGrnVO = this.getSdGrnDnVO1();
        ViewCriteria sdGrnVc = sdGrnVO.getViewCriteria("SdGrnDnVOCriteria1");

        sdGrnVO.setNamedWhereClauseParam("bindVin1", vin);
        sdGrnVO.applyViewCriteria(sdGrnVc);
        sdGrnVO.executeQuery();
        System.err.println("Estimated row count ::::" + sdGrnVO.getEstimatedRowCount());
        if (sdGrnVO.getEstimatedRowCount() > 1) {
            count = 2;
            return count;
        } else if (sdGrnVO.getEstimatedRowCount() == 0) {
            count = 0;
            return count;
        } else if (sdGrnVO.getEstimatedRowCount() == 1) {
            Row row1 = sdGrnVO.first();
            row1.setAttribute("SchemCd", null);
            count = 1;
            return count;
        }

        return count;
    }

    /**
     * Container's getter for ShInvSchemeVO1.
     * @return ShInvSchemeVO1
     */
    public ShInvSchemeVOImpl getShInvSchemeVO1() {
        return (ShInvSchemeVOImpl) findViewObject("ShInvSchemeVO1");
    }

    public void updateSchemeInv(String compfa, Integer dealerMapCd, String invNum, String locCd, String orderNumb,
                                String parentGrp, String remarks) {
        ShInvSchemeVOImpl shInvScheme = getShInvSchemeVO1();
        ViewCriteria vc = shInvScheme.getViewCriteria("ShInvSchemeVOCriteria");
        shInvScheme.applyViewCriteria(vc);
        shInvScheme.setNamedWhereClauseParam("bindCompFa", compfa);
        shInvScheme.setNamedWhereClauseParam("bindDealerMapCd", dealerMapCd);
        shInvScheme.setNamedWhereClauseParam("bindInvNum", invNum);
        shInvScheme.setNamedWhereClauseParam("bindLocCd", locCd);
        shInvScheme.setNamedWhereClauseParam("bindOrderNum", orderNumb);
        shInvScheme.setNamedWhereClauseParam("bindPG", parentGrp);
        shInvScheme.executeQuery();
        System.err.println("Estimated count row for the scheme inv:::::" + shInvScheme.getEstimatedRowCount());
        if (shInvScheme.getEstimatedRowCount() > 0) {
            Row row1 = shInvScheme.first();
            row1.setAttribute("Remarks", remarks);
        }
    }

    /**
     * Container's getter for GmVinST1.
     * @return GmVinST1
     */
    public GmVinSTImpl getGmVinST1() {
        return (GmVinSTImpl) findViewObject("GmVinST1");
    }

    /**
     * Purpose of this method is to set values in ST vo at the time of page load based on some criteria.
     * Form Name:-Booking Price
     *
     */
    public void bookingPricePageLoadValues(String dealer_map_cd, String loc_code, String parent_group_cd) {
        try {
            ViewObjectImpl amDlrprm = this.getAmDealerLocParamRO1();
            ViewObjectImpl amDlrLoc = this.getAmDealerLocRO1();
            ViewObjectImpl bookingPriceSt = this.getBookingPriceST1();
            Row rwBookSt = null;
            try {
                rwBookSt = bookingPriceSt.first();
            } catch (Exception e) {
                e.printStackTrace();
            }
            ViewCriteria vcPrm = amDlrprm.getViewCriteria("FilterHsnOnBasedGlobalValueVC");
            amDlrprm.applyViewCriteria(vcPrm, false);
            amDlrprm.setNamedWhereClauseParam("bind_dealerMapCd", dealer_map_cd);
            amDlrprm.setNamedWhereClauseParam("bind_locCode", loc_code);
            amDlrprm.setNamedWhereClauseParam("bind_parentGroupCd", parent_group_cd);
            amDlrprm.executeQuery();
            if (amDlrprm.getEstimatedRowCount() > 0) {
                Row rowPrm = amDlrprm.first();
                rwBookSt.setAttribute("AreaCdT", rowPrm.getAttribute("PreAreaCd"));
            }
            ViewCriteria vcLoc = amDlrLoc.getViewCriteria("PrntGrpDealerCdLocCdVC");
            amDlrLoc.applyViewCriteria(vcLoc, false);
            amDlrLoc.setNamedWhereClauseParam("bind_DlrMpCd", dealer_map_cd);
            amDlrLoc.setNamedWhereClauseParam("bind_LocationCd", loc_code);
            amDlrLoc.setNamedWhereClauseParam("bind_prtGrp", parent_group_cd);
            amDlrLoc.executeQuery();
            if (amDlrLoc.getEstimatedRowCount() > 0) {
                Row rowLoc = amDlrLoc.first();
                rwBookSt.setAttribute("ForCdT", rowLoc.getAttribute("ForCd"));
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    public void callFmCardSearch(Date fromDate, Date toDate, String fmCardNo, String toCardNo) {
        System.err.println("fromDate Date IMPL::::::" + fromDate);
        System.err.println("toDate Date IMPL::::::" + toDate);
        System.err.println("fCardno Date IMPL::::::" + fmCardNo);
        System.err.println("tCardNo Date IMPL::::::" + toCardNo);
        int count = 0;
        int srlNo = 1;
        FmCardSTImpl fmCardSearchObj = getFmCardST1();
        //FmCardSTRowImpl fmCardRow = (FmCardSTRowImpl) fmCardSearchObj.getCurrentRow();
        DBTransaction trx = (DBTransaction) getTransaction();
        CallableStatement st = null;
        //Row crRow = customerSt.createRow();
        try {
            // 1. Define the PL/SQL block for the statement to invoke
            String stmt = "begin PKG_MSL.SP_FETCHED_FMCARD_STATUS(?,?,?,?,?,?,?); end;";
            // 2. Create the CallableStatement for the PL/SQL block
            st = trx.createCallableStatement(stmt, 0);
            // 3. Register the positions and types of the OUT parameters

            // 4. Set the bind values of the IN parameters.s
            java.sql.Date sFromDate = null;
            java.sql.Date sToDate = null;
            sFromDate = fromDate.dateValue();
            sToDate = toDate.dateValue();
            SimpleDateFormat sdf = new SimpleDateFormat("dd-MM-yyyy");
            String sFromDate1 = sdf.format(sFromDate);
            String sToDate1 = sdf.format(sToDate);
            System.err.println("fromDate SQL Date IMPL::::::" + sFromDate);
            System.err.println("toDate SQL Date IMPL::::::" + sToDate);

            System.err.println("fromDate SQL Date IMPL::::::" + sFromDate1);
            System.err.println("toDate SQL Date IMPL::::::" + sToDate1);

            //            st.setDate(1, sFromDate);
            //            st.setDate(2, sToDate);
            st.setString(1, sFromDate1);
            st.setString(2, sToDate1);
            st.setString(3, fmCardNo);
            st.setString(4, toCardNo);
            st.registerOutParameter(5, OracleTypes.CURSOR);
            st.registerOutParameter(6, Types.INTEGER);
            st.registerOutParameter(7, Types.VARCHAR);
            st.executeUpdate();

            ResultSet cursor = st.getObject(5, ResultSet.class);
            //System.err.println("cursor loop::::"+cursor);

            while (cursor.next()) {
                count = 1;
                System.err.println("Inside while loop");
                //Invoice Details
                Row cardRow = fmCardSearchObj.createRow();
                cardRow.setAttribute("SrNo", cursor.getString(1));
                cardRow.setAttribute("LeaseFmCardNoT", cursor.getString(2));
                cardRow.setAttribute("FmVinT", cursor.getString(28));
                cardRow.setAttribute("FmSaleDateT", cursor.getString(35));
                cardRow.setAttribute("FmStartDateT", cursor.getString(3));
                cardRow.setAttribute("FmEndDateT", cursor.getString(4));
                cardRow.setAttribute("FmClientNameT", cursor.getString(40));
                cardRow.setAttribute("FmClientContactT", cursor.getString(41));
                cardRow.setAttribute("FmContMileageT", cursor.getString(8));
                cardRow.setAttribute("FmProductTypeT", cursor.getString(10));

                //Old Car Customer Details
                cardRow.setAttribute("FmForclosureDateT", cursor.getString(47));
                cardRow.setAttribute("FmForclosureRemksT", cursor.getString(49));

                //Old Vehicle Details as per system
                cardRow.setAttribute("FmCardStatusT", cursor.getString(7));
                cardRow.setAttribute("FmApproveRmksT", cursor.getString(26));
                fmCardSearchObj.insertRow(cardRow);
                srlNo++;
            }
            System.err.println("estimated row COunt:::" + fmCardSearchObj.getEstimatedRowCount() + ":::" +
                               fmCardSearchObj.getQuery());
            if (count == 0) {
                executeOninit();
            }
            cursor.close();
        } catch (Exception sqle) {
            // TODO: Add catch code
            sqle.printStackTrace();
        } finally {
            try {
                st.close();
            } catch (SQLException sqle) {
                // TODO: Add catch code
                sqle.printStackTrace();
            }

        }
    }

    /**
     * Container's getter for SmBpriceVO2.
     * @return SmBpriceVO2
     */
    public ViewObjectImpl getSmBpriceVO2() {
        return (ViewObjectImpl) findViewObject("SmBpriceVO2");
    }

    /**
     * Container's getter for SmBpriceVO3.
     * @return SmBpriceVO3
     */
    public ViewObjectImpl getSmBpriceVO3() {
        return (ViewObjectImpl) findViewObject("SmBpriceVO3");
    }

    /**
     * Purpose:Purpose of this method is to filter data based on conditions.
     * Form Name:Booking Price
     * @return
     */
    public String searchBookingPrice(String dealer_mapCd, String loc_code, String pmc, String user_code) {
        String variant_code = null, model_code = null, area_code = null, ret_val;
        ViewObjectImpl voiBookingPriceSt = this.getBookingPriceST1();
        BookingPriceSTRowImpl rwBookingSt = (BookingPriceSTRowImpl) voiBookingPriceSt.getCurrentRow();
        if (rwBookingSt.getVariantCdT() != null) {
            variant_code = "'" + rwBookingSt.getVariantCdT() + "'";
        }
        if (rwBookingSt.getModelT() != null) {
            model_code = "'" + rwBookingSt.getModelT() + "'";
        }
        if (rwBookingSt.getAreaCdT() != null) {
            area_code = "'" + rwBookingSt.getAreaCdT() + "'";
        }
        String where_clause =
            "principal_map_cd =" + pmc + " AND model_cd =" + model_code + " AND variant_cd = nvl(" + variant_code +
            ",variant_cd)";
        String where_clause1 =
            "DEALER_MAP_CD =" + dealer_mapCd + " AND LOC_CD ='" + loc_code +
            "' AND LATEST_YN = 'Y' AND BOOK_FROM_DATE = To_date(to_char(to_date('" + rwBookingSt.getFromDateT() +
            "','YYYY-MM-DD'), 'DD-Mon-YY')) AND VARIANT_CD = NVL(" + variant_code + ",variant_cd) AND AREA_CD =" +
            area_code + "";
        String where_clause2 =
            "DEALER_MAP_CD =" + dealer_mapCd + " AND LOC_CD ='" + loc_code +
            "' AND LATEST_YN = 'Y' AND BOOK_FROM_DATE =To_date(to_char(to_date('" + rwBookingSt.getFromDateT() +
            "','YYYY-MM-DD'), 'DD-Mon-YY')) AND BOOK_TO_DATE is null AND VARIANT_CD = NVL(" + variant_code +
            ",variant_cd) AND DECODE(" + variant_code + ",null,variant_cd," + variant_code +
            ") IN (SELECT variant_cd FROM gm_var WHERE principal_map_cd =" + pmc + " AND model_cd =" + model_code + ")";
        String where_clause3 =
            "DEALER_MAP_CD =" + dealer_mapCd + " AND LOC_CD ='" + loc_code +
            "' AND LATEST_YN = 'Y' AND BOOK_FROM_DATE =To_date(to_char(to_date('" + rwBookingSt.getFromDateT() +
            "','YYYY-MM-DD'), 'DD-Mon-YY')) AND BOOK_TO_DATE =To_date(to_char(to_date('" + rwBookingSt.getToDateT() +
            "','YYYY-MM-DD'), 'DD-Mon-YY')) A    ND VARIANT_CD = nvl(" + variant_code + ",variant_cd)|| AND DECODE(" +
            variant_code + ",null,variant_cd," + variant_code +
            ") IN (SELECT variant_cd FROM gm_var WHERE principal_map_cd =" + pmc + " AND model_cd =" + model_code + ")";
        try {
            Long cnt = new Long(0);
            ViewObjectImpl voiGmVar = this.getGmVarRO1();
            ViewObjectImpl voiBookingPrice = this.getSmBpriceVO1();
            ViewObjectImpl voiBookingPriceCnt = this.getSmBpriceVO2();
            voiBookingPriceCnt.setWhereClause(where_clause1);
            voiBookingPriceCnt.executeQuery();
            if (voiBookingPriceCnt.getEstimatedRowCount() < 0) {
                voiGmVar.setWhereClause(where_clause);
                voiGmVar.executeQuery();

                RowSetIterator rsiGmVar = voiGmVar.createRowSetIterator(null);
                while (rsiGmVar.hasNext()) {
                    ret_val = "C";
                    java.sql.Timestamp datetime = new java.sql.Timestamp(System.currentTimeMillis());
                    oracle.jbo.domain.Date daTime = new oracle.jbo.domain.Date(datetime);
                    Row rw_gmVar = rsiGmVar.next();
                    Row rw_bookprice = voiBookingPrice.createRow();
                    rw_bookprice.setAttribute("VariantCd", rw_gmVar.getAttribute("VariantCd")); //VariantCd
                    rw_bookprice.setAttribute("BookAmt", "0");
                    rw_bookprice.setAttribute("DealerMapCd", dealer_mapCd);
                    rw_bookprice.setAttribute("AreaCd", area_code);
                    rw_bookprice.setAttribute("LocCd", loc_code);
                    rw_bookprice.setAttribute("CcyCd", "N/A");
                    rw_bookprice.setAttribute("LatestYn", "Y");
                    rw_bookprice.setAttribute("CreatedBy", user_code);
                    rw_bookprice.setAttribute("CreatedDate", daTime);
                    rw_bookprice.setAttribute("BookFromDate", rwBookingSt.getFromDateT());
                    rw_bookprice.setAttribute("BookToDate", rwBookingSt.getToDateT());
                    rw_bookprice.setAttribute("ForCd", rwBookingSt.getForCdT());
                    voiBookingPrice.insertRow(rw_bookprice);
                }
                rsiGmVar.closeRowSetIterator();
            } else {
                if (rwBookingSt.getToDateT() == null) {
                    ret_val = "E";
                    voiBookingPrice.setWhereClause(where_clause2);
                } else {
                    ret_val = "E";
                    voiBookingPrice.setWhereClause(where_clause3);
                }
                voiBookingPrice.executeQuery();
            }
        } catch (Exception e) {
            e.printStackTrace();
        }

        return null;
    }

    public void initBookingPrice() {
        this.getSmBpriceVO1().executeEmptyRowSet();
    }

    public void resetBookingPrice() {
        this.getBookingPriceST1().executeQuery();
    }

    /**
     * Container's getter for FmCardSearchST1.
     * @return FmCardSearchST1
     */
    public FmCardSearchSTImpl getFmCardSearchST1() {
        return (FmCardSearchSTImpl) findViewObject("FmCardSearchST1");
    }

    /**
     * Container's getter for FmCardST1.
     * @return FmCardST1
     */
    public FmCardSTImpl getFmCardST1() {
        return (FmCardSTImpl) findViewObject("FmCardST1");
    }

    /**
     * Container's getter for SmBpriceMaxMinDateRO1.
     * @return SmBpriceMaxMinDateRO1
     */
    public ViewObjectImpl getSmBpriceMaxMinDateRO1() {
        return (ViewObjectImpl) findViewObject("SmBpriceMaxMinDateRO1");
    }

    public String validateDateBookingPrice(String dealer_mapCd, String loc_Code, String currency) {
        ViewObjectImpl voiBookPrSt = this.getBookingPriceST1();

        ViewObjectImpl voiBookingPrice = this.getSmBpriceVO2();

        ViewCriteria vc = voiBookingPrice.getViewCriteria("filterValuesForDateVC");
        voiBookingPrice.applyViewCriteria(vc, false);
        voiBookingPrice.setNamedWhereClauseParam("bind_bookFromDate",
                                                 voiBookPrSt.getCurrentRow().getAttribute("FromDateT"));
        voiBookingPrice.setNamedWhereClauseParam("bind_ccyCode", currency);
        voiBookingPrice.setNamedWhereClauseParam("bind_dealerMapCode", dealer_mapCd);
        voiBookingPrice.setNamedWhereClauseParam("bind_locCode", loc_Code);
        voiBookingPrice.setNamedWhereClauseParam("bind_variantCode",
                                                 voiBookPrSt.getCurrentRow().getAttribute("VariantCdT"));
        voiBookingPrice.executeQuery();
        if (voiBookingPrice.getEstimatedRowCount() > 0) {
            Row rw = voiBookingPrice.first();
            this.getBookingPriceST1()
                .getCurrentRow()
                .setAttribute("ToDateT", rw.getAttribute("BookToDate"));
        } else {
            Date max_from_dt = null;
            Date min_from_dt = null;
            Date from_date =
                voiBookPrSt.getCurrentRow().getAttribute("FromDateT") != null ?
                (Date) voiBookPrSt.getCurrentRow().getAttribute("FromDateT") : null;
            ViewObjectImpl voiDt = this.getSmBpriceMaxMinDateRO1();
            voiDt.setNamedWhereClauseParam("bind_dealerMapCd", dealer_mapCd);
            voiDt.setNamedWhereClauseParam("bind_loc_cd", loc_Code);
            voiDt.setNamedWhereClauseParam("bind_currency", currency);
            voiDt.setNamedWhereClauseParam("bind_variant_cd", voiBookPrSt.getCurrentRow().getAttribute("FromDateT"));
            voiDt.executeQuery();
            if (voiDt.getEstimatedRowCount() > 0) {
                Row rwDt = voiDt.first();
                if (rwDt.getAttribute("MaxBookDate") != null) {
                    max_from_dt = (Date) rwDt.getAttribute("MaxBookDate");
                }
                if (rwDt.getAttribute("MinBookDate") != null) {
                    min_from_dt = (Date) rwDt.getAttribute("MinBookDate");
                }
                if (from_date.compareTo(min_from_dt) > 0 && from_date.compareTo(max_from_dt) < 0) {
                    return "Date range already exists";
                }
                if (max_from_dt.compareTo(from_date) > 0) {
                    voiBookPrSt.getCurrentRow().setAttribute("ToDateT", addDayToOracleDate(min_from_dt, -1));
                } else {
                    voiBookPrSt.getCurrentRow().setAttribute("ToDateT", null);
                }
            }
            //return "End date of the selling price not found for the variant";
        }


        return null;
    }

    public Date addDayToOracleDate(Date date, int days) {
        if (date != null) {
            Calendar c1 = Calendar.getInstance();
            c1.setTime(date.getValue());
            c1.add(Calendar.DATE, days);
            java.util.Date javaUtilDate = c1.getTime();
            long javaMilliseconds = javaUtilDate.getTime();
            java.sql.Date javaSqlDate = new java.sql.Date(javaMilliseconds);
            return new oracle.jbo.domain.Date(javaSqlDate);
        }
        return null;
    }

    public String onSaveBookingPrice(String value) {
        ViewObjectImpl voiBookingPrice = this.getSmBpriceVO1();
        RowSetIterator rsiBooking = voiBookingPrice.createRowSetIterator(null);
        Row rwBooking = null;
        if (value.equalsIgnoreCase("C")) {
            while (rsiBooking.hasNext()) {
                rwBooking = rsiBooking.next();
                if (rwBooking.getAttribute("CheckBoxT") != null && rwBooking.getAttribute("CheckBoxT")
                                                                            .toString()
                                                                            .equalsIgnoreCase("N")) {
                    rwBooking.remove();
                }
            }
            rsiBooking.closeRowSetIterator();

        } else if (value.equalsIgnoreCase("E")) {
            {
                rwBooking = rsiBooking.next();
                if (rwBooking.getAttribute("CheckBoxT") != null && rwBooking.getAttribute("CheckBoxT")
                                                                            .toString()
                                                                            .equalsIgnoreCase("N")) {
                    rwBooking.refresh(Row.REFRESH_UNDO_CHANGES | Row.REFRESH_WITH_DB_FORGET_CHANGES);
                }
            }
            rsiBooking.closeRowSetIterator();

        }
        return null;
    }

    /**
     * method to create empty row for Allotment.

     */
    public void initAllotment() {
        LOGGER.warning("** Start**");
        try {
            ViewObjectImpl vo = this.getSdGrnVO1();
            vo.executeEmptyRowSet();
            this.getSdGrnAllotmentVO1().executeEmptyRowSet();
            ViewObjectImpl vo1 = this.getShOrdbookEOView1();
            vo1.executeEmptyRowSet();
            this.getSdGrmRO2().executeEmptyRowSet();
            this.getStAllotEOView1().executeEmptyRowSet();
            this.getAllotmentRO1().executeQuery();
            Row currRow = this.getAllotmentRO1().getCurrentRow();
            currRow.setAttribute("AllottedStatusT", "UT");
            currRow.setAttribute("OrderRadio", "O");
            currRow.setAttribute("ColorRadio", "A");
            currRow.setAttribute("AllotedBy", null);
            currRow.setAttribute("AllotedDate", null);
            currRow.setAttribute("LocDesc", null);
        } catch (Exception e) {
            e.printStackTrace();
        }
        LOGGER.warning("** Endt**");
    }

    /**
     * Container's getter for AmChargeRO1.
     * @return AmChargeRO1
     */
    public ViewObjectImpl getAmChargeRO1() {
        return (ViewObjectImpl) findViewObject("AmChargeRO1");
    }

    /**
     * Container's getter for FromDateLOV1.
     * @return FromDateLOV1
     */
    public ViewObjectImpl getFromDateLOV1() {
        return (ViewObjectImpl) findViewObject("FromDateLOV1");
    }

    /**
     * Container's getter for SmVchargesVO1.
     * @return SmVchargesVO1
     */
    public ViewObjectImpl getSmVchargesVO1() {
        return (ViewObjectImpl) findViewObject("SmVchargesVO1");
    }


    /**
     * Container's getter for LmsLevelValidationVO1.
     * @return LmsLevelValidationVO1
     */
    public ViewObjectImpl getLmsLevelValidationVO1() {
        return (ViewObjectImpl) findViewObject("LmsLevelValidationVO1");
    }

    /**
     * Container's getter for SchemeMasterUploadST1.
     * @return SchemeMasterUploadST1
     */
    public ViewObjectImpl getSchemeMasterUploadST1() {
        return (ViewObjectImpl) findViewObject("SchemeMasterUploadST1");
    }

    /**
     * Container's getter for CustomerColorChangeRO1.
     * @return CustomerColorChangeRO1
     */
    public ViewObjectImpl getCustomerColorChangeRO1() {
        return (ViewObjectImpl) findViewObject("CustomerColorChangeRO1");
    }

    /**
     * Container's getter for CustomerNameChangeRO1.
     * @return CustomerNameChangeRO1
     */
    public ViewObjectImpl getCustomerNameChangeRO1() {
        return (ViewObjectImpl) findViewObject("CustomerNameChangeRO1");
    }

    /**
     * Container's getter for BookingNoLOV1.
     * @return BookingNoLOV1
     */
    public ViewObjectImpl getBookingNoLOV1() {
        return (ViewObjectImpl) findViewObject("BookingNoLOV1");
    }

    /**
     * Container's getter for DealerCdForCdLOV1.
     * @return DealerCdForCdLOV1
     */
    public ViewObjectImpl getDealerCdForCdLOV1() {
        return (ViewObjectImpl) findViewObject("DealerCdForCdLOV1");
    }

    /**
     * Container's getter for VariantCodeForCstmrChgneLOV1.
     * @return VariantCodeForCstmrChgneLOV1
     */
    public ViewObjectImpl getVariantCodeForCstmrChgneLOV1() {
        return (ViewObjectImpl) findViewObject("VariantCodeForCstmrChgneLOV1");
    }

    /**
     * Container's getter for ModelForCustomerChangeLOV1.
     * @return ModelForCustomerChangeLOV1
     */
    public ViewObjectImpl getModelForCustomerChangeLOV1() {
        return (ViewObjectImpl) findViewObject("ModelForCustomerChangeLOV1");
    }

    /**
     * Container's getter for SmVChargesTVO1.
     * @return SmVChargesTVO1
     */
    public SmVChargesTVOImpl getSmVChargesTVO1() {
        return (SmVChargesTVOImpl) findViewObject("SmVChargesTVO1");
    }

    public void exeSp_insert_veh_charges(String chrgeType, String dlr, String locCd, String prtGrp, String uName,
                                         String areaCode, String variantCode) {
        LOGGER.warning("Start of exeSp_insert_veh_charges");
        ViewObject vo1 = this.getSmVChargesTVO1();
        Row r1 = vo1.getCurrentRow();
        DBTransaction trx = (DBTransaction) getTransaction();
        CallableStatement st = null;
        System.out.println(dlr);
        System.out.println(locCd);
        System.out.println(prtGrp);
        System.out.println(uName);
        System.out.println("areaCode--------" + areaCode);
        System.out.println("variantCode------" + variantCode);
        try {
            String stmt = "begin sp_insert_veh_charges (?,?,?,?,?,?,?,?,?,?,?,?); end;";
            st = trx.createCallableStatement(stmt, 0);
            st.setString(1, dlr); //hardcoded
            st.setString(2, locCd); //hardcoded
            st.setString(3, prtGrp); //hardcoded
            st.setString(4, variantCode);
            st.setString(5, areaCode);
            Date frmDate = (Date) r1.getAttribute("FromDate");
            java.sql.Date fDate = frmDate.dateValue();
            st.setDate(6, fDate);
            st.setString(7, chrgeType);
            st.setString(8, (String) r1.getAttribute("CustomerTypeCode"));
            st.setString(9, (String) r1.getAttribute("ColorCode"));
            st.setString(10, uName); //hardcoded
            st.registerOutParameter(11, Types.VARCHAR);
            st.registerOutParameter(12, Types.INTEGER);
            st.executeUpdate();
            String err = st.getString(11);
            int error_msg = st.getInt(12);
            LOGGER.warning("error message is ------" + err);
            LOGGER.warning("error code is --------" + error_msg);
            LOGGER.warning("end of exeSp_insert_veh_charges");
        } catch (Exception sqle) {
            // TODO: Add catch code
            sqle.printStackTrace();
        } finally {
            try {
                if (st != null) {
                    st.close();
                }
            } catch (Exception e) {
            }
        }
    }

    /**
     * Container's getter for LocationAllotLOV1.
     * @return LocationAllotLOV1
     */
    public ViewObjectImpl getLocationAllotLOV1() {
        return (ViewObjectImpl) findViewObject("LocationAllotLOV1");
    }

    /**
     * Container's getter for ForCodeRO1.
     * @return ForCodeRO1
     */
    public ViewObjectImpl getForCodeRO1() {
        return (ViewObjectImpl) findViewObject("ForCodeRO1");
    }

    /**
     * Container's getter for NewCarMasterRO1.
     * @return NewCarMasterRO1
     */
    public ViewObjectImpl getNewCarMasterRO1() {
        return (ViewObjectImpl) findViewObject("NewCarMasterRO1");
    }


    /**
     * Container's getter for ReportSMURO1.
     * @return ReportSMURO1
     */
    public ViewObjectImpl getReportSMURO1() {
        return (ViewObjectImpl) findViewObject("ReportSMURO1");
    }

    /**
     * Container's getter for GetBatchIdRO1.
     * @return GetBatchIdRO1
     */
    public ViewObjectImpl getGetBatchIdRO1() {
        return (ViewObjectImpl) findViewObject("GetBatchIdRO1");
    }

    /**
     * Container's getter for AdditionalBonusRO1.
     * @return AdditionalBonusRO1
     */
    public ViewObjectImpl getAdditionalBonusRO1() {
        return (ViewObjectImpl) findViewObject("AdditionalBonusRO1");
    }

    /**
     * Container's getter for BonusMasterClosureST1.
     * @return BonusMasterClosureST1
     */
    public ViewObjectImpl getBonusMasterClosureST1() {
        return (ViewObjectImpl) findViewObject("BonusMasterClosureST1");
    }

    /**
     * Container's getter for BonusRO1.
     * @return BonusRO1
     */
    public ViewObjectImpl getBonusRO1() {
        return (ViewObjectImpl) findViewObject("BonusRO1");
    }

    /**
     * Container's getter for StockLiquidationRO1.
     * @return StockLiquidationRO1
     */
    public ViewObjectImpl getStockLiquidationRO1() {
        return (ViewObjectImpl) findViewObject("StockLiquidationRO1");
    }

    public int exeSpvalidateVehCharges(String dlr, String locCd, String prtGrp, String uName, String chargeCode,
                                       String areaCode, String variantCode) {
        LOGGER.warning("Start of exeSpvalidateVehCharges");
        DBTransaction trx = (DBTransaction) getTransaction();
        CallableStatement st = null;
        int error_msg = 0;
        System.out.println("inside exeSpvalidateVehCharges");
        System.out.println("area Code---------" + areaCode);
        System.out.println("variant Code -------" + variantCode);
        try {
            ViewObject vo1 = this.getSmVChargesTVO1();
            Row r1 = vo1.getCurrentRow();
            String stmt = "begin sp_validate_veh_charges (?,?,?,?,?,?,?,?,?,?,?,?); end;";
            st = trx.createCallableStatement(stmt, 0);
            st.setString(1, dlr);
            st.setString(2, areaCode); // area code
            st.setString(3, locCd);
            st.setString(4, prtGrp);
            st.setString(5, variantCode); // variant code
            Date frmDate = (Date) r1.getAttribute("FromDate");
            java.sql.Date fDate = frmDate.dateValue();
            st.setDate(6, fDate);
            st.setString(7, chargeCode);
            st.setString(8, (String) r1.getAttribute("CustomerTypeCode"));
            st.setString(9, (String) r1.getAttribute("ColorCode"));
            st.setString(10, uName);
            st.registerOutParameter(11, Types.VARCHAR);
            st.registerOutParameter(12, Types.INTEGER);
            st.executeUpdate();
            String err = st.getString(11);
            error_msg = st.getInt(12);
            LOGGER.warning("error message is ------" + err);
            LOGGER.warning("error code is --------" + error_msg);
            LOGGER.warning("end of exeSpvalidateVehCharges");
        } catch (Exception e) {
            // TODO: Add catch code
            e.printStackTrace();
        } finally {
            try {
                if (st != null) {
                    st.close();
                }
            } catch (Exception e) {
            }
        }

        return error_msg;
    }

    /**
     * Container's getter for SmBookClrAllowVO1.
     * @return SmBookClrAllowVO1
     */
    public ViewObjectImpl getSmBookClrAllowVO1() {
        return (ViewObjectImpl) findViewObject("SmBookClrAllowVO1");
    }

    /**
     * Container's getter for GmVarCountRO1.
     * @return GmVarCountRO1
     */
    public ViewObjectImpl getGmVarCountRO1() {
        return (ViewObjectImpl) findViewObject("GmVarCountRO1");
    }

    /**
     * Container's getter for SmBookNameChngAllowVO1.
     * @return SmBookNameChngAllowVO1
     */
    public ViewObjectImpl getSmBookNameChngAllowVO1() {
        return (ViewObjectImpl) findViewObject("SmBookNameChngAllowVO1");

    }

    /**
     * This method is to insert parsed CSV data to TempSMSchemaMastr table.
     * @param csvLines
     * @param params
     * @return
     */
    public Map schemeMasterUploadValidate(String[] csvLines, Map params) {
        Map errorMap = new HashMap<String, String>();
        ViewObject tempSMSchemeMasterVO = this.getTempSMSchemeMasterVO1();
        ViewObject getBatchIdVO = this.getGetBatchIdRO1();
        String batchId = (String) getBatchIdVO.first().getAttribute("Batchid");
        LOGGER.info("Batch Id is : " + batchId);
        int recordsInserted = 0;
        try {
            if (csvLines != null) {
                Row tempRow = tempSMSchemeMasterVO.createRow();
                tempRow.setAttribute("State", csvLines[0]);
                tempRow.setAttribute("ForCd", csvLines[1]);
                tempRow.setAttribute("FueltypeCd", csvLines[2]);
                tempRow.setAttribute("ModelCd", csvLines[3]);
                tempRow.setAttribute("VariantCd", csvLines[4]);
                tempRow.setAttribute("TotBonus", Integer.parseInt(csvLines[5]));
                tempRow.setAttribute("BatchId", batchId);
                tempRow.setAttribute("SchemeType", (String) params.get("schemeType"));
                tempRow.setAttribute("Regn", (String) params.get("region"));
                tempRow.setAttribute("FromDate", (Date) params.get("fromDate"));
                tempRow.setAttribute("ToDate", (Date) params.get("toDate"));
                tempRow.setAttribute("EaiFlag", 'Y');
                tempRow.setAttribute("SchemeRemarks", (String) params.get("schemeRemarks"));
                tempSMSchemeMasterVO.insertRow(tempRow);
                recordsInserted++;
            } else {
                if (recordsInserted == 0) {
                    errorMap.put("Error_String", "No Data Found in Excel.");
                    errorMap.put("Error_Code", "NDF");
                    errorMap.put("BatchId", null);
                    return errorMap;
                }

            }
            this.getDBTransaction().commit();
        } catch (NumberFormatException nfe) {
            LOGGER.info("NFE Exception " + nfe.getMessage());
            errorMap.put("Error_String", "Width problem/Incompatible Data while fetching detail.");
            errorMap.put("Error_Code", "NFE");
            errorMap.put("BatchId", null);
            return errorMap;
        } catch (Exception e) {
            LOGGER.info("Exception " + e.getMessage());
            errorMap.put("Error_String", "Unknown Error occurred, Please review the file and try again.");
            errorMap.put("Error_Code", "OTH");
            errorMap.put("BatchId", null);
            return errorMap;
        }
        errorMap.put("Error_String", "N/A");
        errorMap.put("Error_Code", "SUC");
        errorMap.put("BatchId", batchId);
        return errorMap;
    }

    /**
     * Container's getter for TempSMSchemeMasterVO1.
     * @return TempSMSchemeMasterVO1
     */
    public TempSMSchemeMasterVOImpl getTempSMSchemeMasterVO1() {
        return (TempSMSchemeMasterVOImpl) findViewObject("TempSMSchemeMasterVO1");
    }

    /**
     * Container's getter for UpdateDupRecSMURO1.
     * @return UpdateDupRecSMURO1
     */
    public ViewObjectImpl getUpdateDupRecSMURO1() {
        return (ViewObjectImpl) findViewObject("UpdateDupRecSMURO1");
    }

    /**
     * This method is used to update the duplicate records in TempSMSchemeMaster table.  Form Name : SCHEME MASTER UPLOAD
     * @param batchId
     */
    public Map updateDupRecordsSMU(String batchId) {
        ViewObjectImpl updateDupRO = this.getUpdateDupRecSMURO1();
        ViewObjectImpl updateDupTempRO = this.getUpdateDupRecordsTempSMURO1();
        ViewObjectImpl tempSMSchememasterVO = this.getTempSMSchemeMasterVO1();
        ViewObjectImpl countVO = this.getSMURecordsCountRO1();
        Map session = ADFContext.getCurrent().getSessionScope();
        Integer principalMapCd = new Integer(session.get("principalMapCd").toString());
        RowSetIterator updateDupRORSI = null;
        RowSetIterator updateDupTempRORSI = null;
        Map returnMap = new HashMap<String, String>();
        try {
            //implementation of update_Dup_record procedure in form : scheme master upload
            SimpleDateFormat formatter = new SimpleDateFormat("MM/dd/yyyy");
            ViewCriteria UpdateRecVC = updateDupRO.getViewCriteria("UpdateDupRecSMUROCriteria");
            VariableValueManager vvm = UpdateRecVC.ensureVariableManager();
            vvm.setVariableValue("bind_batch_id", batchId);
            vvm.setVariableValue("bind_pmc", principalMapCd);
            updateDupRO.applyViewCriteria(UpdateRecVC);
            updateDupRO.executeQuery();
            LOGGER.info("update_Dup_record :- No. of Dups found in SMU tempSMSchemeMaster : " +
                        updateDupRO.getEstimatedRowCount());
            updateDupRORSI = updateDupRO.createRowSetIterator(null);
            while (updateDupRORSI.hasNext()) {
                Row updateRow = updateDupRORSI.next();
                ViewCriteria tempSMShemeVC = tempSMSchememasterVO.getViewCriteria("TempSMSchemeMasterVOCriteria");
                VariableValueManager tempVVM = tempSMShemeVC.ensureVariableManager();
                tempVVM.setVariableValue("bind_rowId", updateRow.getAttribute("Rowid1"));
                tempSMSchememasterVO.applyViewCriteria(tempSMShemeVC);
                tempSMSchememasterVO.executeQuery();
                Row tempRow = tempSMSchememasterVO.first();
                formatter = new SimpleDateFormat("dd-MMM-yy");
                String fromDate = formatter.format(updateRow.getAttribute("FromDate"));
                String toDate = formatter.format(updateRow.getAttribute("ToDate"));
                tempRow.setAttribute("EaiFlag", "D");
                tempRow.setAttribute("ErrReason",
                                     "Duplicate Combination->" + updateRow.getAttribute("SchemeType") + "," +
                                     updateRow.getAttribute("Regn") + "," + updateRow.getAttribute("State") + "," +
                                     updateRow.getAttribute("ForCd") + "," + updateRow.getAttribute("FueltypeCd") +
                                     "," + updateRow.getAttribute("ModelCd") + "," +
                                     updateRow.getAttribute("VariantCd") + "," + fromDate + "," + toDate);
                this.getDBTransaction().commit();
                LOGGER.info("Duplicate marked for RowId : " + updateRow.getAttribute("Rowid1"));
            }
            updateDupRORSI.closeRowSetIterator();
            //implementation of update_Dup_record_temp procedure in form : scheme master upload
            VariableValueManager tempUpdatevvm = updateDupTempRO.ensureVariableManager();
            tempUpdatevvm.setVariableValue("bind_batchId", batchId);
            updateDupTempRO.executeQuery();
            LOGGER.info("update_Dup_record_temp :- No. of Dups found in SMU tempSMSchemeMaster : " +
                        updateDupTempRO.getEstimatedRowCount());
            updateDupTempRORSI = updateDupTempRO.createRowSetIterator(null);
            while (updateDupTempRORSI.hasNext()) {
                Row updateTempRow = updateDupTempRORSI.next();
                ViewCriteria tempSMSchemeVC = tempSMSchememasterVO.getViewCriteria("TempSMSchemeMasterVOCriteria");
                VariableValueManager tempVVM = tempSMSchemeVC.ensureVariableManager();
                tempVVM.setVariableValue("bind_rowId", updateTempRow.getAttribute("Rowid1"));
                tempSMSchememasterVO.applyViewCriteria(tempSMSchemeVC);
                tempSMSchememasterVO.executeQuery();
                Row tempRow = tempSMSchememasterVO.first();
                formatter = new SimpleDateFormat("dd-MMM-yy");
                String fromDate = formatter.format(updateTempRow.getAttribute("FromDate"));
                String toDate = formatter.format(updateTempRow.getAttribute("ToDate"));
                tempRow.setAttribute("EaiFlag", "D");
                tempRow.setAttribute("ErrReason",
                                     "Duplicate Combination->" + updateTempRow.getAttribute("SchemeType") + "," +
                                     updateTempRow.getAttribute("Regn") + "," + updateTempRow.getAttribute("State") +
                                     "," + updateTempRow.getAttribute("ForCd") + "," +
                                     updateTempRow.getAttribute("FueltypeCd") + "," +
                                     updateTempRow.getAttribute("ModelCd") + "," +
                                     updateTempRow.getAttribute("VariantCd") + "," + fromDate + "," + toDate);
                this.getDBTransaction().commit();
                LOGGER.info("Duplicate marked for RowId : " + updateTempRow.getAttribute("Rowid1"));
            }
            updateDupTempRORSI.closeRowSetIterator();
            LOGGER.info("TempSmScheme VO Query AFter duplicate : " + tempSMSchememasterVO.getQuery());
            uploadDataValidateSchemeMasterUpload(batchId);
            VariableValueManager countVM = countVO.ensureVariableManager();
            countVM.setVariableValue("bind_pmc", principalMapCd);
            countVM.setVariableValue("bind_batchId", batchId);
            countVO.executeQuery();
            Row countRow = countVO.first();
            if (countRow != null) {
                returnMap.put("TotalCount", countRow.getAttribute("Totalcount").toString());
                returnMap.put("SuccessCount", countRow.getAttribute("Successcount").toString());
                returnMap.put("FailedCount", countRow.getAttribute("Failedcount").toString());
            }
            return returnMap;

        } catch (Exception e) {
            LOGGER.severe("Exception : " + e.getMessage());
            return null;
        } finally {
            if (updateDupTempRORSI != null) {
                updateDupTempRORSI.closeRowSetIterator();
            }
            if (updateDupRORSI != null) {
                updateDupRORSI.closeRowSetIterator();
            }
        }
    }

    /**
     * Container's getter for UpdateDupRecordsTempSMURO1.
     * @return UpdateDupRecordsTempSMURO1
     */
    public ViewObjectImpl getUpdateDupRecordsTempSMURO1() {
        return (ViewObjectImpl) findViewObject("UpdateDupRecordsTempSMURO1");
    }


    /**
     * Purpose of this method is to reset page data on click of Reset Button.
     * Form Name:-Bonus Master Closure
     **/
    public void resetBonusMasterVO() {
        this.getBonusMasterClosureST1().executeQuery();
        this.getBonusRO1().executeEmptyRowSet();
        this.getAdditionalBonusRO1().executeEmptyRowSet();
        this.getStockLiquidationRO1().executeEmptyRowSet();
    }

    /**
     * Purpose of this method is to filter page data on click of Search Button.
     * Based on return flag we are showing message
     * Form Name:-Bonus Master Closure
     * @param Integer
     * @return
     **/
    public String filterDataBonusMasterClosure(Integer pmc) {
        ViewObjectImpl voiBonusSt = this.getBonusMasterClosureST1();
        BonusMasterClosureSTRowImpl bonusStRw = (BonusMasterClosureSTRowImpl) voiBonusSt.getCurrentRow();
        ViewObjectImpl voiBonusRo = this.getBonusRO1();
        ViewObjectImpl voiAdditionalRo = this.getAdditionalBonusRO1();
        ViewObjectImpl voiStokcRo = this.getStockLiquidationRO1();

        if (bonusStRw.getMasterTypeT() == null) {
            return "N";
        }
        if (bonusStRw.getMasterTypeT().equalsIgnoreCase("B")) {
            voiBonusRo.setNamedWhereClauseParam("bind_bonusType", bonusStRw.getBonusTypeT());
            voiBonusRo.setNamedWhereClauseParam("bind_channel", bonusStRw.getChannelT());
            voiBonusRo.setNamedWhereClauseParam("bind_forCode", bonusStRw.getCityT());
            voiBonusRo.setNamedWhereClauseParam("bind_fromDate", bonusStRw.getFromDateT());
            voiBonusRo.setNamedWhereClauseParam("bind_fuelType", bonusStRw.getFuelTypeT());
            voiBonusRo.setNamedWhereClauseParam("bind_modelCode", bonusStRw.getModelT());
            voiBonusRo.setNamedWhereClauseParam("bind_pmc", pmc);
            voiBonusRo.setNamedWhereClauseParam("bind_region", bonusStRw.getRegionT());
            voiBonusRo.setNamedWhereClauseParam("bind_state", bonusStRw.getStateT());
            voiBonusRo.setNamedWhereClauseParam("bind_status", bonusStRw.getStatusT());
            voiBonusRo.setNamedWhereClauseParam("bind_toDate", bonusStRw.getToDateT());
            voiBonusRo.setNamedWhereClauseParam("bind_variantCode", bonusStRw.getVariantT());
            voiBonusRo.executeQuery();
            if (voiBonusRo.getEstimatedRowCount() <= 0) {
                return null;
            }
        } else if (bonusStRw.getMasterTypeT().equalsIgnoreCase("A")) {
            voiAdditionalRo.setNamedWhereClauseParam("bind_bonusType", bonusStRw.getBonusTypeT());
            voiAdditionalRo.setNamedWhereClauseParam("bind_channel", bonusStRw.getChannelT());
            voiAdditionalRo.setNamedWhereClauseParam("bind_forCode", bonusStRw.getCityT());
            voiAdditionalRo.setNamedWhereClauseParam("bind_fromDate", bonusStRw.getFromDateT());
            voiAdditionalRo.setNamedWhereClauseParam("bind_fuelType", bonusStRw.getFuelTypeT());
            voiAdditionalRo.setNamedWhereClauseParam("bind_modelCode", bonusStRw.getModelT());
            voiAdditionalRo.setNamedWhereClauseParam("bind_pmc", pmc);
            voiAdditionalRo.setNamedWhereClauseParam("bind_region", bonusStRw.getRegionT());
            voiAdditionalRo.setNamedWhereClauseParam("bind_state", bonusStRw.getStateT());
            voiAdditionalRo.setNamedWhereClauseParam("bind_status", bonusStRw.getStatusT());
            voiAdditionalRo.setNamedWhereClauseParam("bind_toDate", bonusStRw.getToDateT());
            voiAdditionalRo.setNamedWhereClauseParam("bind_variantCode", bonusStRw.getVariantT());
            voiAdditionalRo.executeQuery();
            if (voiAdditionalRo.getEstimatedRowCount() <= 0) {
                return null;
            }
        } else if (bonusStRw.getMasterTypeT().equalsIgnoreCase("S")) {
            voiStokcRo.setNamedWhereClauseParam("bind_bonusType", bonusStRw.getBonusTypeT());
            voiStokcRo.setNamedWhereClauseParam("bind_channel", bonusStRw.getChannelT());
            voiStokcRo.setNamedWhereClauseParam("bind_forCode", bonusStRw.getCityT());
            voiStokcRo.setNamedWhereClauseParam("bind_fromDate", bonusStRw.getFromDateT());
            voiStokcRo.setNamedWhereClauseParam("bind_fuelType", bonusStRw.getFuelTypeT());
            voiStokcRo.setNamedWhereClauseParam("bind_modelCode", bonusStRw.getModelT());
            voiStokcRo.setNamedWhereClauseParam("bind_pmc", pmc);
            voiStokcRo.setNamedWhereClauseParam("bind_region", bonusStRw.getRegionT());
            voiStokcRo.setNamedWhereClauseParam("bind_state", bonusStRw.getStateT());
            voiStokcRo.setNamedWhereClauseParam("bind_status", bonusStRw.getStatusT());
            voiStokcRo.setNamedWhereClauseParam("bind_toDate", bonusStRw.getToDateT());
            voiStokcRo.setNamedWhereClauseParam("bind_variantCode", bonusStRw.getVariantT());
            voiStokcRo.executeQuery();
            if (voiStokcRo.getEstimatedRowCount() <= 0) {
                return null;
            }
        }
        return "Y";
    }

    /**
     * Container's getter for SmBonusMasterVO1.
     * @return SmBonusMasterVO1
     */
    public ViewObjectImpl getSmBonusMasterVO1() {
        return (ViewObjectImpl) findViewObject("SmBonusMasterVO1");
    }

    /**
     * Container's getter for SmAddBonusMasterVO1.
     * @return SmAddBonusMasterVO1
     */
    public ViewObjectImpl getSmAddBonusMasterVO1() {
        return (ViewObjectImpl) findViewObject("SmAddBonusMasterVO1");
    }

    /**
     * Container's getter for SmBonusStklMasterVO1.
     * @return SmBonusStklMasterVO1
     */
    public ViewObjectImpl getSmBonusStklMasterVO1() {
        return (ViewObjectImpl) findViewObject("SmBonusStklMasterVO1");
    }

    public String onSaveBonusMasterClosure(Integer pmc, String user_code) {
        if(user_code!=null)
        {
            user_code=user_code.toUpperCase();
        }
        ViewObjectImpl voiBonusSt = this.getBonusMasterClosureST1();
        BonusMasterClosureSTRowImpl bonusStRw = (BonusMasterClosureSTRowImpl) voiBonusSt.getCurrentRow();
        ViewObjectImpl voiBonusMaster = this.getSmBonusMasterVO1();
        ViewObjectImpl voiAddBonus = this.getSmAddBonusMasterVO1();
        ViewObjectImpl voiBonusStkl = this.getSmBonusStklMasterVO1();

        ViewObjectImpl voiBonusRo = this.getBonusRO1();
        ViewObjectImpl voiAdditionalRo = this.getAdditionalBonusRO1();
        ViewObjectImpl voiStockRo = this.getStockLiquidationRO1();

        if (bonusStRw.getMasterTypeT() == null) {
            return "N";
        }
        if(!bonusStRw.getActionT().equalsIgnoreCase("C"))
        { 
           return "NC"; 
        }
        
        java.sql.Timestamp datetime = new java.sql.Timestamp(System.currentTimeMillis());
        oracle.jbo.domain.Date daTime = new oracle.jbo.domain.Date(datetime);
        oracle.jbo.domain.Date  close_date=(oracle.jbo.domain.Date) bonusStRw.getCloseDateT();
        close_date=new oracle.jbo.domain.Date(close_date.toString().substring(0, 10));
        
        
        if (bonusStRw.getMasterTypeT().equalsIgnoreCase("B") && bonusStRw.getActionT().equalsIgnoreCase("C")) {
            RowSetIterator bonusRoRsi = voiBonusRo.createRowSetIterator(null);
            while (bonusRoRsi.hasNext()) {
                Row bonusRoRw = bonusRoRsi.next();
                System.out.println("ROW ID BONUS-->" + bonusRoRw.getAttribute("Rowid1"));
                ViewCriteria bonusMasterVC = voiBonusMaster.getViewCriteria("PmcAndIdVC");
                VariableValueManager vvBonusMaster = bonusMasterVC.ensureVariableManager();
                vvBonusMaster.setVariableValue("bind_rowId", bonusRoRw.getAttribute("Rowid1"));
                vvBonusMaster.setVariableValue("bind_pmc", pmc);
                voiBonusMaster.applyViewCriteria(bonusMasterVC);
                voiBonusMaster.executeQuery();
                if (voiBonusMaster.getEstimatedRowCount() > 0) {
                    Row bonusRow = voiBonusMaster.first();
                    bonusRow.setAttribute("ActionDate", daTime);
                    bonusRow.setAttribute("CloseDate", close_date);
                    bonusRow.setAttribute("ModifiedBy", user_code);
                    bonusRow.setAttribute("ModifiedDate", daTime);
                    bonusRow.setAttribute("ToDate", close_date);
                }
                getDBTransaction().commit();
            }
            bonusRoRsi.closeRowSetIterator();
        } else if (bonusStRw.getMasterTypeT().equalsIgnoreCase("S") && bonusStRw.getActionT().equalsIgnoreCase("C")) {
            RowSetIterator stockRsi = voiStockRo.createRowSetIterator(null);
            while (stockRsi.hasNext()) {
                Row stockRw = stockRsi.next();
                System.out.println("STOCK ROWID-->" + stockRw.getAttribute("Rowid1"));
                ViewCriteria bonusStklVC = voiBonusStkl.getViewCriteria("PmcAndIdVC");
                VariableValueManager vvBonusStkl = bonusStklVC.ensureVariableManager();
                vvBonusStkl.setVariableValue("bind_rowId", stockRw.getAttribute("Rowid1"));
                vvBonusStkl.setVariableValue("bind_pmc", pmc);
                voiBonusStkl.applyViewCriteria(bonusStklVC);
                voiBonusStkl.executeQuery();
                if (voiBonusStkl.getEstimatedRowCount() > 0) {
                    Row bonusStklRow = voiBonusStkl.first();
                    bonusStklRow.setAttribute("ActionDate", daTime);
                    bonusStklRow.setAttribute("CloseDate", close_date);
                    bonusStklRow.setAttribute("ModifiedBy", user_code);
                    bonusStklRow.setAttribute("ModifiedDate", daTime);
                    bonusStklRow.setAttribute("ToDate", close_date);
                }
                getDBTransaction().commit();
            }
            stockRsi.closeRowSetIterator();
        } else if (bonusStRw.getMasterTypeT().equalsIgnoreCase("A") && bonusStRw.getActionT().equalsIgnoreCase("C")) {
            System.out.println("When bonus type is A and Action is C");
            RowSetIterator additionalRsi = voiAdditionalRo.createRowSetIterator(null);
            while (additionalRsi.hasNext()) {
                System.out.println("");
                Row additionalRw = additionalRsi.next();
                System.out.println("ADDITIONAL ROW-->" + additionalRw.getAttribute("Rowid1"));
                System.out.println("ADDITIONAL PMC-->" + pmc);
                ViewCriteria addBonusVC = voiAddBonus.getViewCriteria("PmcAndIdVC");
                VariableValueManager vvAddBonus = addBonusVC.ensureVariableManager();
                vvAddBonus.setVariableValue("bind_rowId", additionalRw.getAttribute("Rowid1"));
                vvAddBonus.setVariableValue("bind_pmc", pmc);
                voiAddBonus.applyViewCriteria(addBonusVC);
                voiAddBonus.executeQuery();
                System.out.println("After filter the row:"+voiAddBonus.getEstimatedRowCount());
                if (voiAddBonus.getEstimatedRowCount() > 0) {
                    Row addBonusRow = voiAddBonus.first();
                    addBonusRow.setAttribute("ActionDate", daTime);
                    addBonusRow.setAttribute("CloseDate", close_date);
                    addBonusRow.setAttribute("ModifiedBy", user_code);
                    addBonusRow.setAttribute("ModifiedDate", daTime);
                }
                getDBTransaction().commit();
            }
            additionalRsi.closeRowSetIterator();
        }
        return null;
    }


    /**
     * Container's getter for ShLeaseFmCardVO1.
     * @return ShLeaseFmCardVO1
     */
    public ViewObjectImpl getShLeaseFmCardVO1() {
        return (ViewObjectImpl) findViewObject("ShLeaseFmCardVO1");
    }

    /**
     * Container's getter for StartDateEndDateRO1.
     * @return StartDateEndDateRO1
     */
    public ViewObjectImpl getStartDateEndDateRO1() {
        return (ViewObjectImpl) findViewObject("StartDateEndDateRO1");
    }

    /**
     * Container's getter for ShLeaseFmCardLOV1.
     * @return ShLeaseFmCardLOV1
     */
    public ViewObjectImpl getShLeaseFmCardLOV1() {
        return (ViewObjectImpl) findViewObject("ShLeaseFmCardLOV1");
    }

    /**
     * Container's getter for SMSchemeMasterVO1.
     * @return SMSchemeMasterVO1
     */
    public ViewObjectImpl getSMSchemeMasterVO1() {
        return (ViewObjectImpl) findViewObject("SMSchemeMasterVO1");
    }


    /**
     * Container's getter for ShLeaseFmCardTVO1.
     * @return ShLeaseFmCardTVO1
     */
    public ViewObjectImpl getShLeaseFmCardTVO1() {
        return (ViewObjectImpl) findViewObject("ShLeaseFmCardTVO1");
    }

    /**
     * Container's getter for ResourceBundleEntriesVO1.
     * @return ResourceBundleEntriesVO1
     */
    public ViewObjectImpl getResourceBundleEntriesVO() {
        return (ViewObjectImpl) findViewObject("ResourceBundleEntriesVO");
    }

    /**
     * Container's getter for InsuranceDateRO1.
     * @return InsuranceDateRO1
     */
    public ViewObjectImpl getInsuranceDateRO1() {
        return (ViewObjectImpl) findViewObject("InsuranceDateRO1");
    }

    /**
     * Container's getter for VehicleDetailsRO1.
     * @return VehicleDetailsRO1
     */
    public ViewObjectImpl getVehicleDetailsRO1() {
        return (ViewObjectImpl) findViewObject("VehicleDetailsRO1");
    }

    /**
     * Container's getter for AllotmentSummaryRO1.
     * @return AllotmentSummaryRO1
     */
    public ViewObjectImpl getAllotmentSummaryRO1() {
        return (ViewObjectImpl) findViewObject("AllotmentSummaryRO1");
    }

    /**
     * Container's getter for ShReceiptsVO1.
     * @return ShReceiptsVO1
     */
    public ShReceiptsVOImpl getShReceiptsVO1() {
        return (ShReceiptsVOImpl) findViewObject("ShReceiptsVO1");
    }


    /**
     * Container's getter for SdReceiptsVO1.
     * @return SdReceiptsVO1
     */
    public SdReceiptsVOImpl getSdReceiptsVO1() {
        return (SdReceiptsVOImpl) findViewObject("SdReceiptsVO1");
    }

    /**
     * Container's getter for StApportionVO1.
     * @return StApportionVO1
     */
    public ViewObjectImpl getStApportionVO1() {
        return (ViewObjectImpl) findViewObject("StApportionVO1");
    }

    /**
     * Container's getter for SdReceiptsVO2.
     * @return SdReceiptsVO2
     */
    public SdReceiptsVOImpl getSdReceiptsVO2() {
        return (SdReceiptsVOImpl) findViewObject("SdReceiptsVO2");
    }

    /**
     * Container's getter for ShReceiptsToSdReceiptsVL1.
     * @return ShReceiptsToSdReceiptsVL1
     */
    public ViewLinkImpl getShReceiptsToSdReceiptsVL1() {
        return (ViewLinkImpl) findViewLink("ShReceiptsToSdReceiptsVL1");
    }

    /**
     * Container's getter for StApportionVO2.
     * @return StApportionVO2
     */
    public ViewObjectImpl getStApportionVO2() {
        return (ViewObjectImpl) findViewObject("StApportionVO2");
    }

    /**
     * Container's getter for ShReceiptsToStApportionVL1.
     * @return ShReceiptsToStApportionVL1
     */
    public ViewLinkImpl getShReceiptsToStApportionVL1() {
        return (ViewLinkImpl) findViewLink("ShReceiptsToStApportionVL1");
    }


    /**
     * Container's getter for SmParticipantsVO1.
     * @return SmParticipantsVO1
     */
    public ViewObjectImpl getSmParticipantsVO1() {
        return (ViewObjectImpl) findViewObject("SmParticipantsVO1");
    }

    /**
     * Container's getter for DealerTrainingFilterRO1.
     * @return DealerTrainingFilterRO1
     */
    public ViewObjectImpl getDealerTrainingFilterRO1() {
        return (ViewObjectImpl) findViewObject("DealerTrainingFilterRO1");
    }

    /**
     * Container's getter for DealerTrainingResultsRO1.
     * @return DealerTrainingResultsRO1
     */
    public ViewObjectImpl getDealerTrainingResultsRO1() {
        return (ViewObjectImpl) findViewObject("DealerTrainingResultsRO1");
    }

    /**
     * Container's getter for BonusMasterUploadDummyVO1.
     * @return BonusMasterUploadDummyVO1
     */
    public ViewObjectImpl getBonusMasterUploadDummyVO1() {
        return (ViewObjectImpl) findViewObject("BonusMasterUploadDummyVO1");
    }

    public String exeSpGenerateFmCardNo() {
        LOGGER.warning("Start of exeSpGenerateFmCardNo");
        DBTransaction trx = (DBTransaction) getTransaction();
        CallableStatement st = null;
        String fmCardNo = null;
        String stmt = "begin muldms.pkg_msl.SP_GENERATE_FMCARDNO (?,?); end;";
        st = trx.createCallableStatement(stmt, 0);
        try {
            st.registerOutParameter(1, Types.VARCHAR);
            st.registerOutParameter(2, Types.VARCHAR);
            st.execute();
            fmCardNo = st.getString(1);
            LOGGER.warning("fmCardNo--------------->>>>>>>>" + fmCardNo);
        } catch (SQLException e) {
            e.printStackTrace();
        } finally {
            try {
                if (st != null) {
                    st.close();
                }
            } catch (Exception e) {
            }
        }
        return fmCardNo;
    }

    /**
     * Container's getter for BonusTypeLOV1.
     * @return BonusTypeLOV1
     */
    public ViewObjectImpl getBonusTypeLOV1() {
        return (ViewObjectImpl) findViewObject("BonusTypeLOV1");
    }

    /**
     * Container's getter for GetBonusBatchIdRO1.
     * @return GetBonusBatchIdRO1
     */
    public ViewObjectImpl getGetBonusBatchIdRO1() {
        return (ViewObjectImpl) findViewObject("GetBonusBatchIdRO1");
    }

    /**
     * Container's getter for TempSmBonusMasterVO1.
     * @return TempSmBonusMasterVO1
     */
    public ViewObjectImpl getTempSmBonusMasterVO1() {
        return (ViewObjectImpl) findViewObject("TempSmBonusMasterVO1");
    }

    /**
     * Container's getter for SmAddBonusMasterUploadVO1.
     * @return SmAddBonusMasterUploadVO1
     */
    public ViewObjectImpl getSmAddBonusMasterUploadVO1() {
        return (ViewObjectImpl) findViewObject("SmAddBonusMasterUploadVO1");
    }


    /**
     * This method is used to insert uploaded data to Master table Form Name : SCHEME MASTRE UPLOAD
     * @param batchId
     */
    public void uploadToSchemeMaster(String batchId) {
        Map session = ADFContext.getCurrent().getSessionScope();
        Object principalMapCd = session.get("principalMapCd");
        Integer principalMapCdi = new Integer(principalMapCd.toString());
        ViewObjectImpl tempSMSchemeVO = this.getTempSMSchemeMasterVO1();
        ViewObjectImpl SMSchemeMasterVO = this.getSMSchemeMasterVO1();
        try {
            ViewCriteria temptoMasterVC = tempSMSchemeVO.getViewCriteria("TempToMasterVC");
            VariableValueManager tempToMastervvm = temptoMasterVC.ensureVariableManager();
            tempToMastervvm.setVariableValue("bind_batchId", batchId);
            tempToMastervvm.setVariableValue("bind_pmc", principalMapCdi);
            tempSMSchemeVO.applyViewCriteria(temptoMasterVC);
            tempSMSchemeVO.executeQuery();
            LOGGER.info("Query of TempSMScheme : " + tempSMSchemeVO.getQuery());
            LOGGER.info("No.Of rows selected to insert to SMSchemeMaster : " + tempSMSchemeVO.getEstimatedRowCount());
            RowSetIterator tempRSI = tempSMSchemeVO.createRowSetIterator(null);
            while (tempRSI.hasNext()) {
                Row tempRow = tempRSI.next();
                Row masterRow = SMSchemeMasterVO.createRow();
                masterRow.setAttribute("SchemeType", tempRow.getAttribute("SchemeType"));
                masterRow.setAttribute("Regn", tempRow.getAttribute("Regn"));
                masterRow.setAttribute("State", tempRow.getAttribute("State"));
                masterRow.setAttribute("ForCd", tempRow.getAttribute("ForCd"));
                masterRow.setAttribute("FueltypeCd", tempRow.getAttribute("FueltypeCd"));
                masterRow.setAttribute("ModelCd", tempRow.getAttribute("ModelCd"));
                masterRow.setAttribute("VariantCd", tempRow.getAttribute("VariantCd"));
                masterRow.setAttribute("FromDate", tempRow.getAttribute("FromDate"));
                masterRow.setAttribute("ToDate", tempRow.getAttribute("ToDate"));
                masterRow.setAttribute("TotBonus", tempRow.getAttribute("TotBonus"));
                masterRow.setAttribute("SchemeRemarks", tempRow.getAttribute("SchemeRemarks"));
                masterRow.setAttribute("Status", "A");
                masterRow.setAttribute("PrincipalMapCd", principalMapCdi);
                SMSchemeMasterVO.insertRow(masterRow);
                tempRow.setAttribute("EaiFlag", "U");
                this.getDBTransaction().commit();
            }
        } catch (Exception e) {
            LOGGER.info("Exception : " + e.getMessage());
        }
    }

    /**
     * Container's getter for ViewUploadStatusSMURO1.
     * @return ViewUploadStatusSMURO1
     */
    public ViewObjectImpl getViewUploadStatusSMURO1() {
        return (ViewObjectImpl) findViewObject("ViewUploadStatusSMURO1");
    }

    /**
     * Container's getter for SMURegionStateValidationRO1.
     * @return SMURegionStateValidationRO1
     */
    public ViewObjectImpl getSMURegionStateValidationRO1() {
        return (ViewObjectImpl) findViewObject("SMURegionStateValidationRO1");
    }

    /**
     * Container's getter for SMURegionForcdValidationRO1.
     * @return SMURegionForcdValidationRO1
     */
    public ViewObjectImpl getSMURegionForcdValidationRO1() {
        return (ViewObjectImpl) findViewObject("SMURegionForcdValidationRO1");
    }

    /**
     * Container's getter for SMUModelCdValidationRO1.
     * @return SMUModelCdValidationRO1
     */
    public ViewObjectImpl getSMUModelCdValidationRO1() {
        return (ViewObjectImpl) findViewObject("SMUModelCdValidationRO1");
    }

    /**
     * Container's getter for SMUSchemeValidationRO1.
     * @return SMUSchemeValidationRO1
     */
    public ViewObjectImpl getSMUSchemeValidationRO1() {
        return (ViewObjectImpl) findViewObject("SMUSchemeValidationRO1");
    }

    /**
     * Below method is to validate the data being uploaded to master table. Form Name: SCHEME MASTER UPLOAD
     * @param batchId
     */
    public void uploadDataValidateSchemeMasterUpload(String batchId) {
        Map session = ADFContext.getCurrent().getSessionScope();
        Object principalMapCd = session.get("principalMapCd");
        Integer principalMapCdi = new Integer(principalMapCd.toString());
        ViewObjectImpl tempSMSchemeVO = this.getTempSMSchemeMasterVO1();
        BigDecimal zeroBigDecimal = new BigDecimal(0);
        try {
            tempSMSchemeVO.clearViewCriterias();
            ViewCriteria temptoMasterVC = tempSMSchemeVO.getViewCriteria("TempToMasterVC");
            VariableValueManager tempToMastervvm = temptoMasterVC.ensureVariableManager();
            tempToMastervvm.setVariableValue("bind_batchId", batchId);
            tempToMastervvm.setVariableValue("bind_pmc", principalMapCdi);
            tempSMSchemeVO.applyViewCriteria(temptoMasterVC);
            tempSMSchemeVO.executeQuery();
            LOGGER.info("No.Of rows selected to validate before insert to SMSchemeMaster : " +
                        tempSMSchemeVO.getEstimatedRowCount());
            RowSetIterator tempRSI = tempSMSchemeVO.createRowSetIterator(null);
            while (tempRSI.hasNext()) {
                Row tempRow = tempRSI.next();
                tempRow.setAttribute("EaiFlag", "Y");
                tempRow.setAttribute("ErrReason", null);
                // for validation of duplicate row.
                ViewObjectImpl SMUSchemeValidationVO = this.getSMUSchemeValidationRO1();
                VariableValueManager vvmStValid = SMUSchemeValidationVO.ensureVariableManager();
                LOGGER.info("bind_regn : " + tempRow.getAttribute("Regn"));
                LOGGER.info("bind_scheme_type : " + tempRow.getAttribute("SchemeType"));
                LOGGER.info("State : " + tempRow.getAttribute("State"));
                LOGGER.info("FueltypeCd : " + tempRow.getAttribute("FueltypeCd"));
                LOGGER.info("ForCd : " + tempRow.getAttribute("ForCd"));
                LOGGER.info("ModelCd : " + tempRow.getAttribute("ModelCd"));
                LOGGER.info("VariantCd : " + tempRow.getAttribute("VariantCd"));
                LOGGER.info("FromDate : " + tempRow.getAttribute("FromDate"));
                LOGGER.info("ToDate : " + tempRow.getAttribute("ToDate"));
                vvmStValid.setVariableValue("bind_regn", tempRow.getAttribute("Regn"));
                vvmStValid.setVariableValue("bind_scheme_type", tempRow.getAttribute("SchemeType"));
                vvmStValid.setVariableValue("bind_state", tempRow.getAttribute("State"));
                vvmStValid.setVariableValue("bind_fueltype_cd", tempRow.getAttribute("FueltypeCd"));
                vvmStValid.setVariableValue("bind_forCd", tempRow.getAttribute("ForCd"));
                vvmStValid.setVariableValue("bind_model_cd", tempRow.getAttribute("ModelCd"));
                vvmStValid.setVariableValue("bind_variant_cd", tempRow.getAttribute("VariantCd"));
                vvmStValid.setVariableValue("bind_from_date", tempRow.getAttribute("FromDate"));
                vvmStValid.setVariableValue("bind_to_date", tempRow.getAttribute("ToDate"));
                SMUSchemeValidationVO.executeQuery();
                Row SMUSchemeValidateRow = SMUSchemeValidationVO.first();
                if (SMUSchemeValidateRow.getAttribute("Schemetypecount") != null &&
                    ((BigDecimal) SMUSchemeValidateRow.getAttribute("Schemetypecount")).compareTo(new BigDecimal(0)) !=
                    0) {
                    LOGGER.info("Scheme already exists in SM_SCHEME_MASTER");
                    tempRow.setAttribute("EaiFlag", "E");
                    tempRow.setAttribute("ErrReason", "Scheme Already Exists.");
                    this.getDBTransaction().commit();
                } else {
                    // Region and state code validation
                    ViewObjectImpl regionStateValidationVO = this.getSMURegionStateValidationRO1();
                    VariableValueManager vvmrs = regionStateValidationVO.ensureVariableManager();
                    vvmrs.setVariableValue("bind_pmc", principalMapCdi);
                    vvmrs.setVariableValue("bind_state", tempRow.getAttribute("State"));
                    vvmrs.setVariableValue("bind_regn", tempRow.getAttribute("Regn"));
                    regionStateValidationVO.executeQuery();
                    Row regnStateValidateRow = regionStateValidationVO.first();
                    if (((BigDecimal) regnStateValidateRow.getAttribute("Regionstatecount"))
                        .compareTo(zeroBigDecimal) == 0) {
                        LOGGER.info("State validation failed with details Region : " + tempRow.getAttribute("Regn") +
                                    " State : " + tempRow.getAttribute("State"));
                        tempRow.setAttribute("EaiFlag", "E");
                        tempRow.setAttribute("ErrReason", "Wrong Region & State Combination.");
                        this.getDBTransaction().commit();
                    } else {
                        //CHECK variant CODE EXISTS IN gm_var TABLE
                        ViewObjectImpl modelCodeValidationVO = this.getSMUModelCdValidationRO1();
                        VariableValueManager vvmModel = modelCodeValidationVO.ensureVariableManager();
                        vvmModel.setVariableValue("bind_pmc", principalMapCdi);
                        vvmModel.setVariableValue("bind_fueltype_cd", tempRow.getAttribute("FueltypeCd"));
                        vvmModel.setVariableValue("bind_variant_cd", tempRow.getAttribute("VariantCd"));
                        vvmModel.setVariableValue("bind_model_cd", tempRow.getAttribute("ModelCd"));
                        modelCodeValidationVO.executeQuery();
                        Row modelCodeValidateRow = modelCodeValidationVO.first();
                        if (((BigDecimal) modelCodeValidateRow.getAttribute("Modelcodecount"))
                            .compareTo(zeroBigDecimal) == 0) {
                            LOGGER.info("Model cd validation failed. for Model cd : " +
                                        tempRow.getAttribute("ModelCd") + " Variant cd : " +
                                        tempRow.getAttribute("VariantCd") + " FuelType cd : " +
                                        tempRow.getAttribute("FueltypeCd"));
                            tempRow.setAttribute("EaiFlag", "E");
                            tempRow.setAttribute("ErrReason", "Wrong Fuel,Model & Variant Combination");
                            this.getDBTransaction().commit();
                        }
                    }
                }
                // from date should be next date from current date.
                oracle.jbo.domain.Date fromDate = (oracle.jbo.domain.Date) tempRow.getAttribute("FromDate");
                java.sql.Timestamp datetime = new java.sql.Timestamp(System.currentTimeMillis());
                oracle.jbo.domain.Date datime = new oracle.jbo.domain.Date(datetime);
                if (fromDate.compareTo(datime) <= 0) {
                    tempRow.setAttribute("EaiFlag", "E");
                    tempRow.setAttribute("ErrReason", "Scheme can be updated from next day onwards");
                    this.getDBTransaction().commit();
                }
            }
            this.getDBTransaction().commit();
            tempRSI.closeRowSetIterator();
        } catch (Exception e) {
            LOGGER.severe("Exception :" + e.getMessage());
        }
    }

    /**
     * This method ServiceCancel use for checking data in table
     */

    public String checkFinancialYearCount() {
        ResultSet rs = null;
        String flag = null;
        Calendar cal = Calendar.getInstance();
        int month = cal.get(Calendar.MONTH) + 1;
        if (01 == month || 02 == month || 03 == month) {
            Map session = ADFContext.getCurrent().getSessionScope();
            String parentGroup = (String) session.get("parentGroupCd");
            String locCd = (String) session.get("locCd");
            String dealerMapCd = (String) session.get("dealerMapCd");
            String compCode = (String) session.get("compCode");
            Integer finYear = (Integer) session.get("finYear");
            String sql =
                "	SELECT COUNT(* ) FROM FM_COMPANY WHERE PARENT_GROUP='" + parentGroup + "' AND LOC_CD='" +
                locCd + "'  AND DEALER_MAP_CD='" + dealerMapCd + "' AND COMP_CODE='" + compCode + "' and (FIN_YEAR=" +
                finYear + "+1)";

            try {
                rs = getDBTransaction().createStatement(0).executeQuery(sql);
                if (rs.next()) {
                    flag = rs.getString(1);
                    //System.out.println(flag);
                }
            } catch (SQLException e) {
                e.printStackTrace();
            } finally {
                closeStatement(null, null, rs);
            }
        }
        return flag;
    }

    public static void closeStatement(Connection con, Statement ps, ResultSet rs) {
        try {
            if (con != null) {
                con.close();
            }
            if (ps != null) {
                ps.close();
            }
            if (rs != null) {
                rs.close();
            }
        } catch (SQLException e) {
            e.printStackTrace();

        }
    }

    /**

     * Container's getter for SMURecordsCountRO1.
     * @return SMURecordsCountRO1
     */
    public ViewObjectImpl getSMURecordsCountRO1() {
        return (ViewObjectImpl) findViewObject("SMURecordsCountRO1");
    }

    /**
     * Container's getter for ShLeaseFmCardLogRO1.
     * @return ShLeaseFmCardLogRO1
     */
    public ViewObjectImpl getShLeaseFmCardLogRO1() {
        return (ViewObjectImpl) findViewObject("ShLeaseFmCardLogRO1");
    }

    public void trainedManPowFilter(HashMap mapVal) {
        ViewObject trainFilter = this.getDealerTrainingFilterRO1();
        ViewObjectImpl trainResults = this.getDealerTrainingResultsRO1();
        trainResults.executeQuery();
        Row r = trainFilter.getCurrentRow();
        DBTransaction trx = (DBTransaction) getTransaction();
        CallableStatement st = null;
        Map session = ADFContext.getCurrent().getSessionScope();
        Integer dealerMapCd = new Integer(session.get("dealerMapCd").toString());
        String locCd = session.get("locCd").toString();
        try {
            // 1. Define the PL/SQL block for the statement to invoke
            String stmt = "begin Sp_sal_trained_manpower(?,?,?,?,?,?,?); end;";
            // 2. Create the CallableStatement for the PL/SQL block
            st = trx.createCallableStatement(stmt, 0);
            // 3. Register the positions and types of the OUT parameters

            // 4. Set the bind values of the IN parameters
            String finyearVal = (String) mapVal.get("FinYear");
            st.setInt(1, new Integer(finyearVal));
            st.setString(2, (String) mapVal.get("PgrmId"));
            st.setInt(3, dealerMapCd);
            st.setString(4, locCd);
            st.registerOutParameter(5, OracleTypes.CURSOR);
            st.registerOutParameter(6, Types.INTEGER);
            st.registerOutParameter(7, Types.VARCHAR);
            // 5. Execute the statement
            st.executeUpdate();
            String error_msg = st.getString(7);
            int err = st.getInt(6);
            ResultSet cursor = st.getObject(5, ResultSet.class);

            while (cursor.next()) {
                Row createtrainedMenRow = trainResults.createRow();
                createtrainedMenRow.setAttribute("EmpCode", cursor.getString(5));
                                createtrainedMenRow.setAttribute("MspIN", cursor.getString(6));
                                createtrainedMenRow.setAttribute("EmpName", cursor.getString(7));
                                createtrainedMenRow.setAttribute("Designation", cursor.getString(8));
                                createtrainedMenRow.setAttribute("DOJ", cursor.getObject(9));
                                createtrainedMenRow.setAttribute("DOL", cursor.getObject(10));
                                createtrainedMenRow.setAttribute("SessionID", cursor.getString(11));
                                createtrainedMenRow.setAttribute("ProgramStartDate", cursor.getObject(12));
                                createtrainedMenRow.setAttribute("ProgramEndDate", cursor.getObject(13));
                                createtrainedMenRow.setAttribute("Attendance", cursor.getString(14));
                                createtrainedMenRow.setAttribute("PreTestScore", cursor.getString(15));
                                createtrainedMenRow.setAttribute("PostTestScore", cursor.getString(16));
                                createtrainedMenRow.setAttribute("TotalScore", cursor.getString(17));
                trainResults.insertRow(createtrainedMenRow);
            }
            cursor.close();
        } catch (Exception sqle) {
            // TODO: Add catch code
            sqle.printStackTrace();
        } finally {
            try {
                if (st != null) {
                    st.close();
                }
            } catch (Exception e) {
            }
        }
    }

    public void nonTrainedManPowFilter(HashMap mapVal) {
        ViewObject trainFilter = this.getDealerTrainingFilterRO1();
        ViewObjectImpl trainResults = this.getDealerTrainingResultsRO1();
        trainResults.executeQuery();
        Row r = trainFilter.getCurrentRow();
        DBTransaction trx = (DBTransaction) getTransaction();
        CallableStatement st = null;
        Map session = ADFContext.getCurrent().getSessionScope();
        Integer dealerMapCd = new Integer(session.get("dealerMapCd").toString());
        String locCd = session.get("locCd").toString();
        try {
            // 1. Define the PL/SQL block for the statement to invoke
            String stmt = "begin Sp_sal_nom_not_trained(?,?,?,?,?,?,?); end;";
            // 2. Create the CallableStatement for the PL/SQL block
            st = trx.createCallableStatement(stmt, 0);
            // 3. Register the positions and types of the OUT parameters

            // 4. Set the bind values of the IN parameters
            st.setString(1, (String) mapVal.get("FinYear"));
            st.setString(2, (String) mapVal.get("PgrmId"));
            st.setInt(3, dealerMapCd);
            st.setString(4, locCd);
            st.registerOutParameter(5, OracleTypes.CURSOR);
            st.registerOutParameter(6, Types.INTEGER);
            st.registerOutParameter(7, Types.VARCHAR);
            // 5. Execute the statement
            st.executeUpdate();
            String error_msg = st.getString(7);
            int err = st.getInt(6);
            ResultSet cursor = st.getObject(5, ResultSet.class);
            st.executeUpdate();

            while (cursor.next()) {
                Row createNtrainedMenRow = trainResults.createRow();
                createNtrainedMenRow.setAttribute("EmpCode", cursor.getString(5));
                                createNtrainedMenRow.setAttribute("MspIN", cursor.getString(6));
                                createNtrainedMenRow.setAttribute("EmpName", cursor.getString(7));
                                createNtrainedMenRow.setAttribute("Designation", cursor.getString(8));
                                createNtrainedMenRow.setAttribute("DOJ", cursor.getString(9));
                                createNtrainedMenRow.setAttribute("DOL", cursor.getString(10));
                                createNtrainedMenRow.setAttribute("SessionID", cursor.getString(11));
                                createNtrainedMenRow.setAttribute("ProgramStartDate", cursor.getString(12));
                                createNtrainedMenRow.setAttribute("ProgramEndDate", cursor.getString(13));
                                createNtrainedMenRow.setAttribute("Attendance", cursor.getString(14));
                                createNtrainedMenRow.setAttribute("PreTestScore", cursor.getString(15));
                                createNtrainedMenRow.setAttribute("PostTestScore", cursor.getString(16));
                                createNtrainedMenRow.setAttribute("TotalScore", cursor.getString(17));
                trainResults.insertRow(createNtrainedMenRow);
            }
            cursor.close();
            //
        } catch (Exception sqle) {
            // TODO: Add catch code
            sqle.printStackTrace();
        } finally {
            try {
                if (st != null) {
                    st.close();
                }
            } catch (Exception e) {
            }
        }
    }

    public String getCustomerNm(String custcd) {
        DBTransaction trx = (DBTransaction) getTransaction();
        CallableStatement st = null;
        String custNm = null;
        Map session = ADFContext.getCurrent().getSessionScope();
        Object principalMapCd = session.get("principalMapCd");
        Integer principalMapCdi = new Integer(principalMapCd.toString());
        try {
            // 1. Define the PL/SQL block for the statement to invoke
            String stmt = "begin SP_GET_CUSTOMER_NAME (?,?,?,?,?); end;";
            // 2. Create the CallableStatement for the PL/SQL block
            st = trx.createCallableStatement(stmt, 0);
            // 3. Register the positions and types of the OUT parameters

            // 4. Set the bind values of the IN parameters
            st.setInt(1, principalMapCdi.intValue());
            st.setString(2, custcd);
            st.registerOutParameter(3, Types.VARCHAR);
            st.registerOutParameter(4, Types.VARCHAR);
            st.registerOutParameter(5, Types.INTEGER);
            // 5. Execute the statement
            st.executeUpdate();
            custNm = st.getString(3);
            String error_msg = st.getString(4);
            int err = st.getInt(5);


        } catch (Exception sqle) {
            // TODO: Add catch code
            sqle.printStackTrace();
        } finally {
            try {
                if (st != null) {
                    st.close();
                }
            } catch (Exception e) {
            }
        }

        return custNm;
    }

    /**
     * Container's getter for AmReceiptLOV1.
     * @return AmReceiptLOV1
     */
    public ViewObjectImpl getAmReceiptLOV1() {
        return (ViewObjectImpl) findViewObject("AmReceiptLOV1");
    }

    /**
     * Container's getter for FmCardHistoryRO1.
     * @return FmCardHistoryRO1
     */
    public ViewObjectImpl getFmCardHistoryRO1() {
        return (ViewObjectImpl) findViewObject("FmCardHistoryRO1");
    }

    public String exeSpLeaseUpdGmVinExt() {
        ViewObject vo = this.getShLeaseFmCardVO1();
        DBTransaction trx = (DBTransaction) getTransaction();
        CallableStatement st = null;
        Row r = vo.getCurrentRow();
        String stmt = "begin pkg_msl.SP_LEASE_UPD_GM_VIN_EXT (?,?,?,?,?,?,?,?,?,?); end;";
        st = trx.createCallableStatement(stmt, 0);
        try {
            st.setString(1, (String) r.getAttribute("FmVin"));
            st.setString(2, (String) r.getAttribute("LeaseFmcardNo"));
            st.setInt(3, (Integer) r.getAttribute("FmSellingDealer"));
            st.setString(4, (String) r.getAttribute("FmSellingLocCd"));
            Date strtDate = (Date) r.getAttribute("FmStartDate");
            java.sql.Date fmStrtDate = strtDate.dateValue();
            Date endDate = (Date) r.getAttribute("FmEndDate");
            java.sql.Date fmEndDate = endDate.dateValue();
            st.setDate(5, fmStrtDate);
            st.setDate(6, fmEndDate);
            st.setInt(7, 0);
            st.setInt(8, (Integer) r.getAttribute("FmContMileage"));
            st.registerOutParameter(9, Types.INTEGER);
            st.registerOutParameter(10, Types.VARCHAR);
            st.executeUpdate();
            String error_msg = st.getString(10);
            int err = st.getInt(9);
            System.out.println("error_msg------" + error_msg);
            System.out.println("err -------- >>>" + err);
            // this.getDBTransaction().commit();
        } catch (SQLException sqle) {
            // TODO: Add catch code
            sqle.printStackTrace();
        }
        return null;
    }

    public String exeSpInstUpdLease(String uName) {
        ViewObject vo = this.getShLeaseFmCardVO1();
        DBTransaction trx = (DBTransaction) getTransaction();
        CallableStatement st = null;
        Row r = vo.getCurrentRow();
        java.sql.Date fmRegDate = null;
        java.sql.Date fmSaleDate = null;
        java.sql.Date fmInsuDate = null;
        java.sql.Date fmAgreeDate = null;
        java.sql.Date fmForeClosDate = null;
        LOGGER.warning("r.getAttribute(LeaseFmcardNo ------------" + r.getAttribute("LeaseFmcardNo"));
        LOGGER.warning("r.getAttribute(FmCardStatus ------------" + r.getAttribute("FmCardStatus"));
        LOGGER.warning("r.getAttribute(FmExcessMileageChrg ------------" + r.getAttribute("FmExcessMileageChrg"));
        LOGGER.warning("r.getAttribute(FmMnthLeaseRental ------------" + r.getAttribute("FmMnthLeaseRental"));
        LOGGER.warning("r.getAttribute(ChaufferCharges ------------" + r.getAttribute("ChaufferCharges"));
        LOGGER.warning("r.getAttribute(NoOfDrivers ------------" + r.getAttribute("NoOfDrivers"));
        LOGGER.warning("r.getAttribute(AgreementDate ------------" + r.getAttribute("AgreementDate"));
        LOGGER.warning("r.getAttribute(Tenure ------------" + r.getAttribute("Tenure"));
        LOGGER.warning("r.getAttribute(FmChassisNum ------------" + r.getAttribute("FmChassisNum"));
        LOGGER.warning("r.getAttribute(FmModelCd ------------" + r.getAttribute("FmModelCd"));
        LOGGER.warning("r.getAttribute(FmVariantCd ------------" + r.getAttribute("FmVariantCd"));
        LOGGER.warning("r.getAttribute(FmSellingDealer ------------" + r.getAttribute("FmSellingDealer"));

        String stmt =
            "begin pkg_msl.SP_INST_UPD_LEASE (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?); commit ; end;";
        st = trx.createCallableStatement(stmt, 0);
        try {
            Integer excessMil = (Integer) r.getAttribute("FmExcessMileageChrg");
            Integer mnthLeaseRentl =
                r.getAttribute("FmMnthLeaseRental") != null ? (Integer) r.getAttribute("FmMnthLeaseRental") : null;
            Integer chaufferCharges = (Integer) r.getAttribute("ChaufferCharges");
            Integer noOfDriver = (Integer) r.getAttribute("NoOfDrivers");
            Integer vtsCharges = (Integer) r.getAttribute("VtsCharge");
            Integer bdFee = (Integer) r.getAttribute("BdFee");
            Integer capCost = (Integer) r.getAttribute("CapatalizedCost");
            //  Integer FmMnthLeaseRental= (Integer)r.getAttribute("FmMnthLeaseRental");
            Date strtDate = (Date) r.getAttribute("FmStartDate");
            java.sql.Date fmStrtDate = strtDate.dateValue();
            Date endDate = (Date) r.getAttribute("FmEndDate");
            java.sql.Date fmEndDate = endDate.dateValue();
            st.setString(1, (String) r.getAttribute("LeaseFmcardNo"));
            st.setDate(2, fmStrtDate);
            st.setDate(3, fmEndDate);
            st.setString(4, (String) r.getAttribute("AgreementNo"));
            Date agreeDate = (Date) r.getAttribute("AgreementDate");
            if (agreeDate != null) {
                fmAgreeDate = agreeDate.dateValue();
            }
            st.setDate(5, fmAgreeDate);
            st.setString(6, (String) r.getAttribute("FmCardStatus"));
            st.setInt(7, (Integer) r.getAttribute("FmContMileage"));
            st.setObject(8, excessMil);
            st.setString(9, (String) r.getAttribute("FmProductType"));
            st.setInt(10, (Integer) r.getAttribute("FmMnthChrg"));
            st.setObject(11, mnthLeaseRentl);
            st.setString(12, (String) r.getAttribute("LeaseRentalInd"));
            st.setInt(13, (Integer) r.getAttribute("Tenure"));
            st.setString(14, (String) r.getAttribute("ChaufferInd"));
            st.setString(15, (String) r.getAttribute("VtsInd"));
            st.setString(16, (String) r.getAttribute("ParkingTollInd"));
            st.setString(17, (String) r.getAttribute("FuelMgmtInd"));
            st.setString(18, (String) r.getAttribute("OutStationTravelInd"));
            st.setString(19, (String) r.getAttribute("Others"));
            st.setObject(20, chaufferCharges);
            st.setObject(21, noOfDriver);
            st.setObject(22, vtsCharges);
            st.setObject(23, capCost);
            st.setString(24, (String) r.getAttribute("InsuranceType"));
            st.setObject(25, bdFee);
            st.setString(26, (String) r.getAttribute("FmApprovalRemarks"));
            st.setString(27, (String) r.getAttribute("FmVin"));
            st.setString(28, (String) r.getAttribute("FmEngine"));
            st.setString(29, (String) r.getAttribute("FmChassisNum"));
            st.setString(30, (String) r.getAttribute("FmModelCd"));
            st.setString(31, (String) r.getAttribute("FmVariantCd"));
            st.setString(32, (String) r.getAttribute("FmRegNum"));
            Date regDate = (Date) r.getAttribute("FmRegDate");
            if (regDate != null) {
                fmRegDate = regDate.dateValue();
            }
            Date saleDate = (Date) r.getAttribute("FmSaleDate");
            if (saleDate != null) {
                fmSaleDate = saleDate.dateValue();
            }
            Date insuDate = (Date) r.getAttribute("FmInsuranceDate");
            if (insuDate != null) {
                fmInsuDate = insuDate.dateValue();
            }
            st.setDate(33, fmRegDate);
            st.setDate(34, fmSaleDate);
            st.setDate(35, fmInsuDate);
            st.setInt(36, (Integer) r.getAttribute("FmSellingDealer"));
            st.setString(37, (String) r.getAttribute("FmSellingLocCd"));
            Date renewalDate = (Date) r.getAttribute("MiRenewalBy");
            java.sql.Date fmRenewalDate = renewalDate.dateValue();
            st.setDate(38, fmRenewalDate);
            st.setString(39, (String) r.getAttribute("CustomerId"));
            st.setString(40, (String) r.getAttribute("FmClientName"));
            st.setString(41, (String) r.getAttribute("FmClientContactNo"));
            st.setString(42, (String) r.getAttribute("FmClientAddress1"));
            st.setString(43, (String) r.getAttribute("FmClientAddress2"));
            st.setString(44, (String) r.getAttribute("FmClientAddress3"));
            st.setString(45, (String) r.getAttribute("FmClientMailId"));
            st.setString(46, (String) r.getAttribute("FmLeasingCompany"));
            st.setString(47, (String) r.getAttribute("FmRemarks"));
            Date foreClosDate = (Date) r.getAttribute("FmForeclosureDate");
            if (foreClosDate != null) {
                fmForeClosDate = foreClosDate.dateValue();
            }
            st.setDate(48, fmForeClosDate);
            st.setObject(49, r.getAttribute("FmForeclosureChrg"));
            st.setString(50, (String) r.getAttribute("FmFoeclosureRemarks"));
            st.setString(51, uName);
            st.registerOutParameter(52, Types.VARCHAR);
            st.executeUpdate();
            String error_msg = st.getString(52);
            System.out.println("error_msg------" + error_msg);


        } catch (SQLException sqle) {
            // TODO: Add catch code
            sqle.printStackTrace();
        } finally {
            try {
                if (st != null) {
                    st.close();
                }
            } catch (Exception e) {
                e.printStackTrace();
            }
        }
        return null;
    }

    /**
     * Container's getter for LMSCalenderUpdationSearchRO1.
     * @return LMSCalenderUpdationSearchRO1
     */

    public LMSCalenderUpdationSearchROImpl getLMSCalenderUpdationSearchRO1() {
        return (LMSCalenderUpdationSearchROImpl) findViewObject("LMSCalenderUpdationSearchRO1");
    }

    public Long searchLMSCalUpdPrgm(Map map) {
        Long returnVal = null;
        Map session = ADFContext.getCurrent().getSessionScope();
        ViewObjectImpl lMSCalUpdPrgmVO = this.getLMSCalUpdPrgmVO1();
        lMSCalUpdPrgmVO.clearViewCriterias();
        if ("MONTH".equalsIgnoreCase((String) map.get("p_calender_type")) && map.get("p_month_year") != null &&
            map.get("p_session_id") != null && map.get("p_channel") != null) {
            ViewCriteria vc = lMSCalUpdPrgmVO.getViewCriteriaManager().getViewCriteria("LMSCalUpdPrgmVC");
            VariableValueManager vvm = vc.ensureVariableManager();
            vvm.setVariableValue("bindCalenderId", map.get("p_session_id"));
            vvm.setVariableValue("bindCalenderType", map.get("p_calender_type"));
            vvm.setVariableValue("bindChannel", map.get("p_channel"));
            vvm.setVariableValue("bindFinYr", map.get("p_fin_yr"));
            vvm.setVariableValue("bindPrgStatus", map.get("p_prg_status"));
            vvm.setVariableValue("bindPrincipalMapCd", session.get("principalMapCd"));
            vvm.setVariableValue("bindRegionCd", map.get("p_region_cd"));
            vvm.setVariableValue("bindMonthYear", map.get("p_month_year"));
            lMSCalUpdPrgmVO.applyViewCriteria(vc);
        } else if ("MONTH".equalsIgnoreCase((String) map.get("p_calender_type")) && map.get("p_month_year") != null &&
                   map.get("p_session_id") == null && map.get("p_channel") != null) {
            ViewCriteria vc = lMSCalUpdPrgmVO.getViewCriteriaManager().getViewCriteria("NotSessionIdVC");
            VariableValueManager vvm = vc.ensureVariableManager();
            vvm.setVariableValue("bindCalenderType", map.get("p_calender_type"));
            vvm.setVariableValue("bindChannel", map.get("p_channel"));
            vvm.setVariableValue("bindFinYr", map.get("p_fin_yr"));
            vvm.setVariableValue("bindPrgStatus", map.get("p_prg_status"));
            vvm.setVariableValue("bindPrincipalMapCd", session.get("principalMapCd"));
            vvm.setVariableValue("bindRegionCd", map.get("p_region_cd"));
            vvm.setVariableValue("bindMonthYear", map.get("p_month_year"));
            lMSCalUpdPrgmVO.applyViewCriteria(vc);
        } else if (map.get("p_session_id") == null && map.get("p_channel") == null) {

            ViewCriteria vc = lMSCalUpdPrgmVO.getViewCriteriaManager().getViewCriteria("NotSessionIdAndChannelVC");
            VariableValueManager vvm = vc.ensureVariableManager();
            vvm.setVariableValue("bindCalenderType", map.get("p_calender_type"));
            vvm.setVariableValue("bindFinYr", map.get("p_fin_yr"));
            vvm.setVariableValue("bindPrgStatus", map.get("p_prg_status"));
            vvm.setVariableValue("bindPrincipalMapCd", session.get("principalMapCd"));
            vvm.setVariableValue("bindRegionCd", map.get("p_region_cd"));
            //vvm.setVariableValue("bindMonthYear", map.get("p_month_year"));
            lMSCalUpdPrgmVO.applyViewCriteria(vc);
        } else if (map.get("p_session_id") != null && map.get("p_channel") == null) {

            ViewCriteria vc = lMSCalUpdPrgmVO.getViewCriteriaManager().getViewCriteria("NotChannelVC");
            VariableValueManager vvm = vc.ensureVariableManager();
            vvm.setVariableValue("bindCalenderId", map.get("p_session_id"));
            vvm.setVariableValue("bindPrgStatus", map.get("p_prg_status"));
            vvm.setVariableValue("bindPrincipalMapCd", session.get("principalMapCd"));
            //vvm.setVariableValue("bindMonthYear", map.get("p_month_year"));
            lMSCalUpdPrgmVO.applyViewCriteria(vc);
        } else {
            ViewCriteria vc = lMSCalUpdPrgmVO.getViewCriteriaManager().getViewCriteria("LMSCalUpdPrgmVC");
            VariableValueManager vvm = vc.ensureVariableManager();
            vvm.setVariableValue("bindCalenderId", map.get("p_session_id"));
            vvm.setVariableValue("bindCalenderType", map.get("p_calender_type"));
            vvm.setVariableValue("bindChannel", map.get("p_channel"));
            vvm.setVariableValue("bindFinYr", map.get("p_fin_yr"));
            vvm.setVariableValue("bindPrgStatus", map.get("p_prg_status"));
            vvm.setVariableValue("bindPrincipalMapCd", session.get("principalMapCd"));
            vvm.setVariableValue("bindRegionCd", map.get("p_region_cd"));
            lMSCalUpdPrgmVO.applyViewCriteria(vc);
        }
        lMSCalUpdPrgmVO.executeQuery();
        returnVal = lMSCalUpdPrgmVO.getEstimatedRowCount();
        return returnVal;
    }

    /**
     * Container's getter for LMSCalUpdPrgmVO1.
     * @return LMSCalUpdPrgmVO1
     */
    public LMSCalUpdPrgmVOImpl getLMSCalUpdPrgmVO1() {
        return (LMSCalUpdPrgmVOImpl) findViewObject("LMSCalUpdPrgmVO1");
    }

    public void addNominationFilter(HashMap mapVal) {
        ViewObject trainFilter = this.getDealerTrainingFilterRO1();
        ViewObjectImpl trainResults = this.getGblTempParticipantsVO1();
        //        trainResults.executeEmptyRowSet();
                RowSetIterator rsrows = trainResults.createRowSetIterator(null);
                while(rsrows.hasNext()) {
                    Row rowrslts = rsrows.next();
                    rowrslts.remove();
                }
        Row r = trainFilter.getCurrentRow();
        DBTransaction trx = (DBTransaction) getTransaction();
        CallableStatement st = null;
        Map session = ADFContext.getCurrent().getSessionScope();
        Integer dealerMapCd = new Integer(session.get("dealerMapCd").toString());
        Integer principalMapCd = new Integer(session.get("principalMapCd").toString());
        String locCd = session.get("locCd").toString();
        String channelType = session.get("channelType").toString();
        String parentGrpCd = session.get("parentGroupCd").toString();
        try {
            // 1. Define the PL/SQL block for the statement to invoke
            String stmt = "begin SP_POPULATE_TRAN_PARTICIPANTS(?,?,?,?,?,?,?,?,?); end;";
            // 2. Create the CallableStatement for the PL/SQL block
            st = trx.createCallableStatement(stmt, 0);
            // 3. Register the positions and types of the OUT parameters

            // 4. Set the bind values of the IN parameters
            st.setString(1, (String) mapVal.get("CalndrId"));
            st.setString(2, (String) mapVal.get("PgrmId"));
            st.setInt(3, dealerMapCd);
            st.setString(4, locCd);
            st.setInt(5, principalMapCd);
            st.setString(6, channelType);
            st.registerOutParameter(7, OracleTypes.CURSOR);
            st.registerOutParameter(8, Types.INTEGER);
            st.registerOutParameter(9, Types.VARCHAR);
            // 5. Execute the statement
            st.executeUpdate();
            String error_msg = st.getString(9);
            int err = st.getInt(8);
            ResultSet cursor = st.getObject(7, ResultSet.class);
            //                        System.out.println("CursorNext***"+cursor.next());
            while (cursor.next()) {
                Row createAddPartRow = trainResults.createRow();
                createAddPartRow.setAttribute("EmpCd", cursor.getString(1));
                createAddPartRow.setAttribute("Mspin", cursor.getString(2));
                createAddPartRow.setAttribute("EmpName", cursor.getString(3));
                createAddPartRow.setAttribute("EmpDesgDesc", cursor.getString(4));
                createAddPartRow.setAttribute("EmpJoiningDate", cursor.getDate(5));

                ViewObjectImpl particpntsVO = this.getSmParticipantsVO1();
                particpntsVO.setApplyViewCriteriaName("SmParticipantsVOCriteria");
                particpntsVO.setNamedWhereClauseParam("bindCalndrId", (String) mapVal.get("CalndrId"));
                particpntsVO.setNamedWhereClauseParam("bindDealerMapCd", dealerMapCd);
                particpntsVO.setNamedWhereClauseParam("bindEmpCd", cursor.getString(1));
                particpntsVO.setNamedWhereClauseParam("bindLocCd", locCd);
                particpntsVO.setNamedWhereClauseParam("bindParentGroup", parentGrpCd);
                particpntsVO.executeQuery();

                if (particpntsVO.getEstimatedRowCount() > 0) {
                    createAddPartRow.setAttribute("SelectYN", "Y");
                    createAddPartRow.setAttribute("DefaultFlag", "Y");
                } else {
                    createAddPartRow.setAttribute("SelectYN", "N");
                }
                ViewObjectImpl redCountVoImpl = this.getRedCountSmParticipantsRO1();
                redCountVoImpl.setNamedWhereClauseParam("bind_calndrId", (String) mapVal.get("CalndrId"));
                redCountVoImpl.setNamedWhereClauseParam("bind_dealerMapCD", dealerMapCd);
                redCountVoImpl.setNamedWhereClauseParam("bind_locCd", locCd);
                redCountVoImpl.setNamedWhereClauseParam("bind_prg_Id", (String) mapVal.get("PgrmId"));
                redCountVoImpl.executeQuery();
                Row redCountVORow = redCountVoImpl.first();
                int redcount = (Integer) redCountVORow.getAttribute("RedCount");
                if (redcount > 0) {
                    for (int i = 1; i < redcount; i++)
                        createAddPartRow.setAttribute("RedFlag", "Y");
                }
                trainResults.insertRow(createAddPartRow);
//                this.getDBTransaction().commit();

            }
            cursor.close();
            //                        trainResults.executeQuery();
            //
        } catch (Exception sqle) {
            // TODO: Add catch code
            sqle.printStackTrace();
        } finally {
            try {
                if (st != null) {
                    st.close();
                }
            } catch (Exception e) {
            }
        }
    }

    /**
     * Container's getter for AddParticipantDlrTrainRO1.
     * @return AddParticipantDlrTrainRO1
     */
    public ViewObjectImpl getAddParticipantDlrTrainRO1() {
        return (ViewObjectImpl) findViewObject("AddParticipantDlrTrainRO1");
    }

    /**
     * Container's getter for ShOrdBookShInvoiceRO1.
     * @return ShOrdBookShInvoiceRO1
     */
    public ViewObjectImpl getShOrdBookShInvoiceRO1() {
        return (ViewObjectImpl) findViewObject("ShOrdBookShInvoiceRO1");
    }

    public void populateApporData() {
        ViewObjectImpl apporVO = this.getStApportionVO2();
        Row headRw = this.getShReceiptsVO1().getCurrentRow();
        String custCd = (String) headRw.getAttribute("CustCd");
        Date recDate = (Date) headRw.getAttribute("RecDate");

        ViewObjectImpl preBookVO = this.getSdPreBookDataLOV1();
        preBookVO.setNamedWhereClauseParam("bindCUST_CD", custCd);
        preBookVO.executeQuery();
        if (preBookVO.getAllRowsInRange().length > 0) {
            Row preBookArr[] = preBookVO.getAllRowsInRange();
            headRw.setAttribute("TransPreBookNum", preBookArr[0].getAttribute("PreBookingNum"));
        }

        ViewObjectImpl sdRecVO = this.getSdReceiptsVO2();
        RowSetIterator rsiRec = sdRecVO.createRowSetIterator(null);
        while (rsiRec.hasNext()) {
            Row rw = rsiRec.next();
            rw.setAttribute("TransCustCd", custCd);
        }

        if (apporVO.getAllRowsInRange().length > 0) {
            Row r[] = apporVO.getAllRowsInRange();
            for (Row s : r) {
                s.remove();
            }
        }
        System.out.println("Cust cd ----------" + custCd + "  " + recDate);
        if (custCd != null && recDate != null) {
            ViewObjectImpl popuVo = this.getShOrdBookShInvoiceRO1();
            popuVo.setNamedWhereClauseParam("bindCUSTCD", custCd);
            popuVo.setNamedWhereClauseParam("binRECDate", recDate);
            popuVo.executeQuery();
            RowSetIterator rsi = popuVo.createRowSetIterator(null);
            int i = 0;
            Map session = ADFContext.getCurrent().getSessionScope();
            String appNUm =
                exeGenNextNum(new Integer(session.get("dealerMapCd").toString()),
                              session.get("principalMapCd").toString(), session.get("locCd").toString(),
                              session.get("compCode").toString(), "RAP", 2021);
            while (rsi.hasNext()) {
                Row rsiRw = rsi.next();
                Row apprRw = apporVO.createRow();
                apprRw.setAttribute("SrlNum", i + 1);
                apprRw.setAttribute("DocType", rsiRw.getAttribute("DocType"));
                apprRw.setAttribute("DocNum", rsiRw.getAttribute("DocNum"));
                apprRw.setAttribute("BillAmt", rsiRw.getAttribute("BillAmt"));
                apprRw.setAttribute("RecdAmt", rsiRw.getAttribute("RecvAmt"));
                apprRw.setAttribute("BalAmt", rsiRw.getAttribute("BalAmt"));
                apprRw.setAttribute("TransVarCd", rsiRw.getAttribute("VarCd"));
                apprRw.setAttribute("TransEColorCd", rsiRw.getAttribute("EcolCd"));
                apprRw.setAttribute("AppNum", appNUm);
                apprRw.setAttribute("ApportionedAmt", BigDecimal.ZERO);
                apprRw.setAttribute("WriteoffAmt", BigDecimal.ZERO);
                apporVO.insertRow(apprRw);
                i++;
            }

        }
    }

    /**
     * Container's getter for SdPreBookDataLOV1.
     * @return SdPreBookDataLOV1
     */
    public ViewObjectImpl getSdPreBookDataLOV1() {
        return (ViewObjectImpl) findViewObject("SdPreBookDataLOV1");
    }

    /**
     * Container's getter for GblTempParticipantsVO1.
     * @return GblTempParticipantsVO1
     */
    public ViewObjectImpl getGblTempParticipantsVO1() {
        return (ViewObjectImpl) findViewObject("GblTempParticipantsVO1");
    }


    /**
     * Container's getter for TotalSeatsCountGmCaldnrRO1.
     * @return TotalSeatsCountGmCaldnrRO1
     */
    public ViewObjectImpl getTotalSeatsCountGmCaldnrRO1() {
        return (ViewObjectImpl) findViewObject("TotalSeatsCountGmCaldnrRO1");
    }

    public String saveAddedParticipants() {
                String error = "";
                ViewObjectImpl vo = this.getGblTempParticipantsVO1();
    //            vo.executeQuery();
                System.out.println(vo.getEstimatedRowCount()+"gbl count---");
                ViewObjectImpl smParticpnts = this.getSmParticipantsVO1();
                ViewObjectImpl totalSeatsVO = this.getTotalSeatsCountGmCaldnrRO1();
                //        vo.executeQuery();
                smParticpnts.executeQuery();
                Row filterRow = this.getDealerTrainingFilterRO1().getCurrentRow();
                RowSetIterator tempRsi = vo.createRowSetIterator(null);
                Map session = ADFContext.getCurrent().getSessionScope();
                Integer dealerMapCd = new Integer(session.get("dealerMapCd").toString());
                String UserId = session.get("userCode").toString();
                String locCd = session.get("locCd").toString();
                String parentGrpCd = session.get("parentGroupCd").toString();
                String finYear = session.get("Year").toString();
                String finYear1 = (String) filterRow.getAttribute("FinYear");
                Integer principalMapCd = new Integer(session.get("principalMapCd").toString());
                Integer count = 0;
                while (tempRsi.hasNext()) {
                    Row temprow =  tempRsi.next();
                    smParticpnts.setApplyViewCriteriaName("VCapCountCriteria1");
                    System.out.println("PgrmId***" + (String) filterRow.getAttribute("PgrmId"));
                    System.out.println("SessionId***" + (String) filterRow.getAttribute("SessionId"));
                    smParticpnts.setNamedWhereClauseParam("bindProgramID", (String) filterRow.getAttribute("PgrmId"));
                    smParticpnts.setNamedWhereClauseParam("bindCalendarID", (String) filterRow.getAttribute("SessionId"));
                    smParticpnts.executeQuery();
                    int vCap = (int) smParticpnts.getEstimatedRowCount();
                    System.out.println("vCap***" + vCap);
                    if ("2".equals(principalMapCd)) {
                        System.out.println("in 2 pmc");
                        totalSeatsVO.setNamedWhereClauseParam("bind_Fin_Yr", finYear1);
                    } else {
                        System.out.println("in 1 pmc");
                        totalSeatsVO.setNamedWhereClauseParam("bind_Fin_Yr", finYear);
                    }
                    totalSeatsVO.setNamedWhereClauseParam("bind_Principal_MapCd", principalMapCd);
                    totalSeatsVO.setNamedWhereClauseParam("bind_Calndr_Id", (String) filterRow.getAttribute("SessionId"));
                    System.out.println(filterRow.getAttribute("SessionId") + "sessionid----");
                    System.out.println(finYear + "finYear--");
                    System.out.println(totalSeatsVO.getNamedWhereClauseParam("bind_Calndr_Id"));
                    System.out.println(totalSeatsVO.getNamedWhereClauseParam("bind_Fin_Yr"));
                    System.out.println(totalSeatsVO.getNamedWhereClauseParam("bind_Principal_MapCd"));
                    //            System.out.println(totalSeatsVO.getEstimatedRowCount());
                    totalSeatsVO.executeQuery();
                    System.out.println(totalSeatsVO.getQuery() + "quer---");
                    System.out.println(totalSeatsVO.getEstimatedRowCount());
                    Row totalSeatsVORow = totalSeatsVO.first();
                    System.out.println("totalSeatsVORow---" + totalSeatsVORow);
                    if (totalSeatsVORow != null) {
                        //            System.out.println("totalSeatsVORow***" + (Integer) totalSeatsVORow.getAttribute("VSeats"));
                        Integer vSeats = 0;
                        vSeats = (Integer) totalSeatsVORow.getAttribute("VSeats");
                        if (vSeats == null) {
                            vSeats = 0;
                        }
                        System.out.println("vSeats.intValue()" + vSeats.intValue());
                        System.out.println(temprow + "temprow----");
                        System.out.println("SelectYN***" + temprow.getAttribute("SelectYN"));
                        System.out.println("DefaultFlag---"+temprow.getAttribute("DefaultFlag"));
                        if ("Y".equals(temprow.getAttribute("SelectYN")) && !"Y".equals(temprow.getAttribute("DefaultFlag"))) {
                            count = count + 1;
                            System.out.println("Enter After Selectyn Check");
                            if (vCap < vSeats.intValue()) {
                                System.out.println("Enter After Seats Check");
                                ViewObjectImpl amDealerVO = this.getAmDealerLocVO1();
                                amDealerVO.setApplyViewCriteriaName("AMDealerVOSmparticipantsCriteria");
                                amDealerVO.executeQuery();
                                Row amDealerrow = amDealerVO.first();

                                Row smParticipntsRow = smParticpnts.createRow();
                                smParticipntsRow.setAttribute("MulDealerCd", (String) amDealerrow.getAttribute("MulDealerCd"));
                                smParticipntsRow.setAttribute("Region", (String) amDealerrow.getAttribute("RegionCd"));
                                smParticipntsRow.setAttribute("ForCd", (String) amDealerrow.getAttribute("ForCd"));
                                smParticipntsRow.setAttribute("DealerMapCd", (Integer) amDealerrow.getAttribute("DealerMapCd"));
                                smParticipntsRow.setAttribute("LocCd", (String) amDealerrow.getAttribute("LocCd"));
                                smParticipntsRow.setAttribute("CalndrId", (String) filterRow.getAttribute("SessionId"));
                                smParticipntsRow.setAttribute("ProgramCd", (String) filterRow.getAttribute("PgrmId"));
                                smParticipntsRow.setAttribute("EmpCd", (String) temprow.getAttribute("EmpCd"));
                                smParticipntsRow.setAttribute("Mspin", (String) temprow.getAttribute("Mspin"));
                                smParticipntsRow.setAttribute("ParticipantsName", (String) temprow.getAttribute("EmpName"));
                                smParticipntsRow.setAttribute("EmpDesgCd", (String) temprow.getAttribute("EmpDesgDesc"));
                                smParticipntsRow.setAttribute("ParentGroup", (String) parentGrpCd);
                                smParticipntsRow.setAttribute("CreatedBy", UserId);
                                smParticipntsRow.setAttribute("NomConfirm", "A");
                                smParticpnts.insertRow(smParticipntsRow);

                                ViewObjectImpl gmCalndrVo = this.getGmCalndrVO1();
                                gmCalndrVo.setApplyViewCriteriaName("GmCalndrVOSeatsUpdateCriteria");
                                gmCalndrVo.setNamedWhereClauseParam("bind_CalndrId",
                                                                    (String) filterRow.getAttribute("SessionId"));
                                gmCalndrVo.setNamedWhereClauseParam("bind_FrYear", finYear);
                                gmCalndrVo.setNamedWhereClauseParam("bind_principalMapCd", principalMapCd);
                                gmCalndrVo.executeQuery();
                                Row gmCalndrVoRow = gmCalndrVo.first();
                                gmCalndrVoRow.setAttribute("CapturedSeats", vCap + 1);

                                this.getDBTransaction().commit();
                            } else {
                                System.out.println("Nomination Error");
                                error =
                                    "Nomination not possible, The nomination count for the session has exceeded the value entered by the FSDM.";
                            }
                        } 
                        else if("Y".equals(temprow.getAttribute("SelectYN")) && "Y".equals(temprow.getAttribute("DefaultFlag"))){
                            count = count+1;
                        }
                        }
                    }
                tempRsi.closeRowSetIterator();
                if( count == 0) {
                    error = "No Records Selected.";
                }
                
                return error;
            }

    /**
     * Container's getter for AmDealerLocVO1.
     * @return AmDealerLocVO1
     */
    public ViewObjectImpl getAmDealerLocVO1() {
        return (ViewObjectImpl) findViewObject("AmDealerLocVO1");
    }

    /**
     * Container's getter for GroupMasterST1.
     * @return GroupMasterST1
     */
    public ViewObjectImpl getGroupMasterST1() {
        return (ViewObjectImpl) findViewObject("GroupMasterST1");
    }

    /**
     * Container's getter for GroupMasterYNLOV1.
     * @return GroupMasterYNLOV1
     */
    public GroupMasterYNLOVImpl getGroupMasterYNLOV1() {
        return (GroupMasterYNLOVImpl) findViewObject("GroupMasterYNLOV1");
    }


    /**
     * Container's getter for GmGropdVO2.
     * @return GmGropdVO2
     */
    public GmGropdVOImpl getGmGropdVO2() {
        return (GmGropdVOImpl) findViewObject("GmGropdVO2");
    }

    /**
     * Container's getter for GrophToGropdVL1.
     * @return GrophToGropdVL1
     */
    public ViewLinkImpl getGrophToGropdVL1() {
        return (ViewLinkImpl) findViewLink("GrophToGropdVL1");
    }

    /**
     * Container's getter for MulCorporateVO2.
     * @return MulCorporateVO2
     */
    public ViewObjectImpl getMulCorporateVO2() {
        return (ViewObjectImpl) findViewObject("MulCorporateVO2");
    }

    /**
     * Container's getter for GropdToMulCorporateVL1.
     * @return GropdToMulCorporateVL1
     */
    public ViewLinkImpl getGropdToMulCorporateVL1() {
        return (ViewLinkImpl) findViewLink("GropdToMulCorporateVL1");
    }

    /**
     * Container's getter for ShLeaseFmCardRO1.
     * @return ShLeaseFmCardRO1
     */
    public ViewObjectImpl getShLeaseFmCardRO1() {
        return (ViewObjectImpl) findViewObject("ShLeaseFmCardRO1");
    }

    /**
     * Container's getter for NiNewMinsRO1.
     * @return NiNewMinsRO1
     */
    public ViewObjectImpl getNiNewMinsRO1() {
        return (ViewObjectImpl) findViewObject("NiNewMinsRO1");
    }

    /**
     * Container's getter for SiMiDmsEndorsRO1.
     * @return SiMiDmsEndorsRO1
     */
    public ViewObjectImpl getSiMiDmsEndorsRO1() {
        return (ViewObjectImpl) findViewObject("SiMiDmsEndorsRO1");
    }

    /**
     * Container's getter for RedCountSmParticipantsRO1.
     * @return RedCountSmParticipantsRO1
     */
    public ViewObjectImpl getRedCountSmParticipantsRO1() {
        return (ViewObjectImpl) findViewObject("RedCountSmParticipantsRO1");
    }

    /**
     * Container's getter for SiMiDmsEndorsInsertRO1.
     * @return SiMiDmsEndorsInsertRO1
     */
    public ViewObjectImpl getSiMiDmsEndorsInsertRO1() {
        return (ViewObjectImpl) findViewObject("SiMiDmsEndorsInsertRO1");
    }


    /**
     * Container's getter for GblPssRegVO1.
     * @return GblPssRegVO1
     */
    public ViewObjectImpl getGblPssRegVO1() {
        return (ViewObjectImpl) findViewObject("GblPssRegVO1");
    }

    public void searchGlbParticipants(String searchVal) {
            System.out.println(searchVal+"----searchVal---");
            System.out.println("cOUNTS IN _______-> "+getGblTempParticipantsVO1().getEstimatedRowCount());
        ViewObjectImpl gblVoImpl = this.getGblTempParticipantsVO1();
//        RowQualifier rowQualifier = new RowQualifier(gblVoImpl);
//        rowQualifier.setWhereClause("");
//        Row[] filteredRows = emp.getFilteredRows(rowQualifier);
            ViewCriteria vc = gblVoImpl.getViewCriteria("GblTempParticipantsVOCriteria");
            gblVoImpl.applyViewCriteria(vc);
            gblVoImpl.setNamedWhereClauseParam("bind_common", searchVal);

//            vvm.setVariableValue("bind_common", searchVal);
            
            System.out.println(gblVoImpl.getQuery()+"---query---");
            gblVoImpl.executeQuery();
            System.out.println(gblVoImpl.getQuery()+"---query---");
            System.out.println(gblVoImpl.getEstimatedRowCount()+"----search count---");

    }

    public void setDealerNmSdVO(String payMode) {
        ViewObjectImpl sdVO = this.getSdReceiptsVO2();
        RowSetIterator rsi = sdVO.createRowSetIterator(null);
        while (rsi.hasNext()) {
            Row r = rsi.next();
            r.setAttribute("PayModeCd", payMode);
            if (payMode.equalsIgnoreCase("PM1") || payMode.equalsIgnoreCase("PM2")) {
                r.setAttribute("InstrumentFavour",
                               getDealerName((String) r.getAttribute("ParentGroup"),
                                             (Integer) r.getAttribute("DealerMapCd")));
            } else {
                r.setAttribute("InstrumentFavour", null);
            }
        }
    }

    public String getDealerName(String pgCd, Integer dmCd) {
        DBTransaction trx = (DBTransaction) getTransaction();
        CallableStatement st = null;
        String dealerNm = null;

        try {
            // 1. Define the PL/SQL block for the statement to invoke
            String stmt = "begin SP_GET_DEALER_NAME (?,?,?,?,?); end;";
            // 2. Create the CallableStatement for the PL/SQL block
            st = trx.createCallableStatement(stmt, 0);
            // 3. Register the positions and types of the OUT parameters

            // 4. Set the bind values of the IN parameters
            st.setString(1, pgCd);
            st.setInt(2, dmCd);
            st.registerOutParameter(3, Types.VARCHAR);
            st.registerOutParameter(4, Types.VARCHAR);
            st.registerOutParameter(5, Types.INTEGER);
            // 5. Execute the statement
            st.executeUpdate();
            dealerNm = st.getString(3);
            String error_msg = st.getString(4);
            int err = st.getInt(5);


        } catch (Exception sqle) {
            // TODO: Add catch code
            sqle.printStackTrace();
        } finally {
            try {
                if (st != null) {
                    st.close();
                }
            } catch (Exception e) {
            }
        }

        return dealerNm;
    }

    public void paymentForValChange() {
        Row headerRw = this.getShReceiptsVO1().getCurrentRow();
        headerRw.setAttribute("Remarks", "MGA Booking");

        ViewObjectImpl apporVO = this.getStApportionVO2();
        RowSetIterator rsi = apporVO.createRowSetIterator(null);
        while (rsi.hasNext()) {
            Row r = rsi.next();
            r.setAttribute("ApportionedAmt", new BigDecimal(0));
        }
    }

    /**
     * Container's getter for GmVarGmEclrGmModLOV1.
     * @return GmVarGmEclrGmModLOV1
     */
    public ViewObjectImpl getGmVarGmEclrGmModLOV1() {
        return (ViewObjectImpl) findViewObject("GmVarGmEclrGmModLOV1");
    }

    public RowSetIterator getVariantCdEcolorCd(String docType, int dealerMapCd, String locCd, String compFa,
                                               String parentGrpCd, String ordNum) {
        Map session = ADFContext.getCurrent().getSessionScope();
        Object principalMapCd = session.get("principalMapCd");
        Integer principalMapCdi = new Integer(principalMapCd.toString());

        Row headRw = this.getShReceiptsVO1().getCurrentRow();

        String custCd = (String) headRw.getAttribute("CustCd");
        Date recDate = (Date) headRw.getAttribute("RecDate");

        if (docType.equalsIgnoreCase("INV")) {
            ViewObjectImpl ordVO = this.getShInvoiceRO1();
            ViewCriteria vc = ordVO.getViewCriteria("InvNumCustCdVC");
            ordVO.applyViewCriteria(vc);
            ordVO.setNamedWhereClauseParam("bindCompFa", compFa);
            ordVO.setNamedWhereClauseParam("bindCustCd", custCd);
            ordVO.setNamedWhereClauseParam("bindDMCd", dealerMapCd);
            ordVO.setNamedWhereClauseParam("bindLocCd", locCd);
            ordVO.setNamedWhereClauseParam("bindInvNum", ordNum);
            ordVO.setNamedWhereClauseParam("bindPgCd", parentGrpCd);
            ordVO.executeQuery();
            RowSetIterator rsi = ordVO.createRowSetIterator(null);
            return rsi;
        } else {
            ViewObjectImpl ordVO = this.getShOrdBookRO2();
            ViewCriteria vc = ordVO.getViewCriteria("OdreNumCustIdVC");
            ordVO.applyViewCriteria(vc);
            ordVO.setNamedWhereClauseParam("bindCompFa", compFa);
            ordVO.setNamedWhereClauseParam("bindCustCd", custCd);
            ordVO.setNamedWhereClauseParam("bindDMCd", dealerMapCd);
            ordVO.setNamedWhereClauseParam("bindLocCd", locCd);
            ordVO.setNamedWhereClauseParam("bindOrderNum", ordNum);
            ordVO.setNamedWhereClauseParam("bindParentGrpCd", parentGrpCd);
            ordVO.executeQuery();
            RowSetIterator rsi = ordVO.createRowSetIterator(null);
            return rsi;
        }
    }

    /**
     * Container's getter for ShInvoiceRO1.
     * @return ShInvoiceRO1
     */
    public ViewObjectImpl getShInvoiceRO1() {
        return (ViewObjectImpl) findViewObject("ShInvoiceRO1");
    }

    public void cancelReceipts() {
        ViewObjectImpl apporVO = this.getStApportionVO2();
        RowSetIterator rsi = apporVO.createRowSetIterator(null);
        Map session = ADFContext.getCurrent().getSessionScope();
        Timestamp timestamp = new Timestamp(System.currentTimeMillis());
        while (rsi.hasNext()) {
            Row r = rsi.next();
            BigDecimal stApporAmt = (BigDecimal) r.getAttribute("ApportionedAmt");
            BigDecimal stWritOffAmt = (BigDecimal) r.getAttribute("WriteoffAmt");
            if (stApporAmt.compareTo(BigDecimal.ZERO) > 0 || stWritOffAmt.compareTo(BigDecimal.ZERO) > 0) {
                if (((String) r.getAttribute("DocType")).equalsIgnoreCase("INV")) {
                    ViewObjectImpl vo = this.getShInvoiceVO1();
                    ViewCriteria vc = vo.getViewCriteria("ReceiptdataFilter");
                    vo.applyViewCriteria(vc);
                    vo.setNamedWhereClauseParam("bindInvoNum", r.getAttribute("DocNum"));
                    vo.setNamedWhereClauseParam("bindCustoCd", r.getAttribute("CustCd"));
                    vo.executeQuery();
                    RowSetIterator invRsi = vo.createRowSetIterator(null);
                    while (invRsi.hasNext()) {
                        Row invRw = invRsi.next();
                        BigDecimal recdAmt = (BigDecimal) invRw.getAttribute("RecdAmt");
                        BigDecimal writOffAmt = (BigDecimal) invRw.getAttribute("WriteoffAmt");

                        BigDecimal apporAmt = (BigDecimal) r.getAttribute("ApportionedAmt");
                        BigDecimal apporWriteOffAmt = (BigDecimal) r.getAttribute("WriteoffAmt");

                        recdAmt =
                            (recdAmt == null ? BigDecimal.ZERO : recdAmt)
                            .subtract(apporAmt == null ? BigDecimal.ZERO : apporAmt);
                        writOffAmt =
                            (writOffAmt == null ? BigDecimal.ZERO : writOffAmt)
                            .subtract(apporWriteOffAmt == null ? BigDecimal.ZERO : apporWriteOffAmt);

                        invRw.setAttribute("RecdAmt", recdAmt);
                        invRw.setAttribute("WriteoffAmt", writOffAmt);
                        invRw.setAttribute("ModifiedBy", session.get("userCode").toString());
//                        invRw.setAttribute("ModifiedDate", timestamp);
                    }
                } else if (((String) r.getAttribute("DocType")).equalsIgnoreCase("ORD")) {
                    ViewObjectImpl vo = this.getShOrdbookEOView1();
                    ViewCriteria vc = vo.getViewCriteria("OrderNumAndCustCodeVC");
                    vo.applyViewCriteria(vc);
                    vo.setNamedWhereClauseParam("bindOrderNum", r.getAttribute("DocNum"));
                    vo.setNamedWhereClauseParam("bindCustomerId", r.getAttribute("CustCd"));
                    vo.executeQuery();
                    RowSetIterator ordRsi = vo.createRowSetIterator(null);
                    while (ordRsi.hasNext()) {
                        Row ordRw = ordRsi.next();
                        BigDecimal recdAmt = (BigDecimal) ordRw.getAttribute("RecdAmt");
                        BigDecimal writOffAmt = (BigDecimal) ordRw.getAttribute("WriteoffAmt");

                        BigDecimal apporAmt = (BigDecimal) r.getAttribute("ApportionedAmt");
                        BigDecimal apporWriteOffAmt = (BigDecimal) r.getAttribute("WriteoffAmt");

                        recdAmt =
                            (recdAmt == null ? BigDecimal.ZERO : recdAmt)
                            .subtract(apporAmt == null ? BigDecimal.ZERO : apporAmt);
                        writOffAmt =
                            (writOffAmt == null ? BigDecimal.ZERO : writOffAmt)
                            .subtract(apporWriteOffAmt == null ? BigDecimal.ZERO : apporWriteOffAmt);

                        ordRw.setAttribute("RecdAmt", recdAmt);
                        ordRw.setAttribute("WriteoffAmt", writOffAmt);
                        ordRw.setAttribute("ModifiedBy", session.get("userCode").toString());
                        ordRw.setAttribute("ModifiedDate", timestamp);

                    }

                }
                r.setAttribute("RecStatus", "C");
                r.setAttribute("ModifiedBy", session.get("userCode").toString());
                r.setAttribute("ModifiedDate", timestamp);
            }
        }
        Row rw = this.getShReceiptsVO1().getCurrentRow();
        rw.setAttribute("RecStatus", "C");
        
//        rw.setAttribute("CancelDate", timestamp);
        rw.setAttribute("ModifiedDate", timestamp);
        updateOutstandingAmt((String) rw.getAttribute("ParentGroup"), (Integer) rw.getAttribute("DealerMapCd"),
                             (String) rw.getAttribute("LocCd"), (String) rw.getAttribute("CompFa"),
                             (String) rw.getAttribute("CustCd"), (BigDecimal) rw.getAttribute("ReceiptAmt"),
                             (Date) rw.getAttribute("RecDate"), (String) rw.getAttribute("RecNum"));

    }

    public void updateOutstandingAmt(String parentGrp, Integer dealerMapCd, String locCd, String compFa, String custCd,
                                     BigDecimal receiptAmt, Date recDate, String recNum) {
        String stmt = "begin sp_update_outstanding_amt(?,?,?,?,?,?,?,?,?,?,?,?); end;";
        DBTransaction dbtxn = (DBTransaction) getTransaction();
        CallableStatement cs = dbtxn.createCallableStatement(stmt.toString(), 1);
        String flag = null;
        try {
            cs.setString(1, parentGrp);
            cs.setInt(2, dealerMapCd);
            cs.setString(3, locCd);
            cs.setString(4, compFa);
            cs.setString(5, "CU");
            cs.setObject(6, null);
            cs.setObject(7, null);
            cs.setString(8, custCd);
            cs.setBigDecimal(9, receiptAmt);
            cs.setDate(10, recDate.dateValue());
            cs.registerOutParameter(11, OracleTypes.VARCHAR);
            cs.registerOutParameter(12, OracleTypes.VARCHAR);
            cs.executeUpdate();
            flag = cs.getString(12);
        } catch (SQLException sqlerr) {
            throw new JboException(sqlerr);
        } finally {
            try {
                if (cs != null) {
                    cs.close();
                }
            } catch (Exception e) {
            }
        }
        this.getDBTransaction().commit();
        Object result =
            callStoredFunction(Types.VARCHAR, "PKG_FDI.SF_VALID_DEALER(?,?,?)",
                               new Object[] { parentGrp, dealerMapCd, locCd });
        String res = result != null ? result.toString() : "";
        if (res.equalsIgnoreCase("Y")) {
            String st = "begin PKG_FDI.SP_INS_REC_FDI(?,?,?,?,?,?,?); end;";
            CallableStatement cstmt = dbtxn.createCallableStatement(st, 1);
            try {
                cstmt.setString(1, parentGrp);
                cstmt.setInt(2, dealerMapCd);
                cstmt.setString(3, locCd);
                cstmt.setString(4, compFa);
                cstmt.setString(5, recNum);
                cstmt.registerOutParameter(6, OracleTypes.VARCHAR);
                cstmt.registerOutParameter(7, OracleTypes.VARCHAR);
                cstmt.execute();
            } catch (SQLException sqlerr) {
                sqlerr.printStackTrace();
                throw new JboException(sqlerr);
            } finally {
                try {
                    if (cstmt != null) {
                        cstmt.close();
                    }
                } catch (Exception e) {
                }
            }
        }
    }

    public void saveReceipts() {
        Timestamp timestamp = new Timestamp(System.currentTimeMillis());
        Map session = ADFContext.getCurrent().getSessionScope();
        ViewObjectImpl apporVO = this.getStApportionVO2();
        RowSetIterator rsi = apporVO.createRowSetIterator(null);
        while (rsi.hasNext()) {
            Row r = rsi.next();
            if (r.getAttribute("ApportionedAmt") != null || r.getAttribute("WriteoffAmt") != null) {
                if (((String) r.getAttribute("DocType")).equalsIgnoreCase("INV")) {
                    ViewObjectImpl vo = this.getShInvoiceVO1();
                    ViewCriteria vc = vo.getViewCriteria("ReceiptdataFilter");
                    vo.applyViewCriteria(vc);
                    vo.setNamedWhereClauseParam("bindInvoNum", r.getAttribute("DocNum"));
                    vo.setNamedWhereClauseParam("bindCustoCd", r.getAttribute("CustCd"));
                    vo.executeQuery();
                    RowSetIterator invRsi = vo.createRowSetIterator(null);
                    while (invRsi.hasNext()) {
                        Row invRw = invRsi.next();
                        BigDecimal recdAmt = (BigDecimal) invRw.getAttribute("RecdAmt");
                        BigDecimal writOffAmt = (BigDecimal) invRw.getAttribute("WriteoffAmt");

                        BigDecimal apporAmt = (BigDecimal) r.getAttribute("ApportionedAmt");
                        BigDecimal apporWriteOffAmt = (BigDecimal) r.getAttribute("WriteoffAmt");

                        recdAmt =
                            (recdAmt == null ? BigDecimal.ZERO : recdAmt)
                            .add(apporAmt == null ? BigDecimal.ZERO : apporAmt);
                        writOffAmt =
                            (writOffAmt == null ? BigDecimal.ZERO : writOffAmt)
                            .add(apporWriteOffAmt == null ? BigDecimal.ZERO : apporWriteOffAmt);

                        invRw.setAttribute("RecdAmt", recdAmt);
                        invRw.setAttribute("WriteoffAmt", writOffAmt);
                        invRw.setAttribute("ModifiedBy", session.get("userCode").toString());
//                        invRw.setAttribute("ModifiedDate", timestamp);
                    }
                } else if (((String) r.getAttribute("DocType")).equalsIgnoreCase("ORD")) {
                    ViewObjectImpl vo = this.getShOrdbookEOView1();
                    ViewCriteria vc = vo.getViewCriteria("OrderNumAndCustCodeVC");
                    vo.applyViewCriteria(vc);
                    vo.setNamedWhereClauseParam("bindOrderNum", r.getAttribute("DocNum"));
                    vo.setNamedWhereClauseParam("bindCustomerId", r.getAttribute("CustCd"));
                    vo.executeQuery();
                    RowSetIterator ordRsi = vo.createRowSetIterator(null);
                    while (ordRsi.hasNext()) {
                        Row ordRw = ordRsi.next();
                        BigDecimal recdAmt = (BigDecimal) ordRw.getAttribute("RecdAmt");
                        BigDecimal writOffAmt = (BigDecimal) ordRw.getAttribute("WriteoffAmt");

                        BigDecimal apporAmt = (BigDecimal) r.getAttribute("ApportionedAmt");
                        BigDecimal apporWriteOffAmt = (BigDecimal) r.getAttribute("WriteoffAmt");

                        recdAmt =
                            (recdAmt == null ? BigDecimal.ZERO : recdAmt)
                            .add(apporAmt == null ? BigDecimal.ZERO : apporAmt);
                        writOffAmt =
                            (writOffAmt == null ? BigDecimal.ZERO : writOffAmt)
                            .add(apporWriteOffAmt == null ? BigDecimal.ZERO : apporWriteOffAmt);

                        ordRw.setAttribute("RecdAmt", recdAmt);
                        ordRw.setAttribute("WriteoffAmt", writOffAmt);
                        ordRw.setAttribute("ModifiedBy", session.get("userCode").toString());
                        ordRw.setAttribute("ModifiedDate", timestamp);
                    }
                }
            }
        }
        Row rw = this.getShReceiptsVO1().getCurrentRow();

        updateOutstandingAmt((String) rw.getAttribute("ParentGroup"), (Integer) rw.getAttribute("DealerMapCd"),
                             (String) rw.getAttribute("LocCd"), (String) rw.getAttribute("CompFa"),
                             (String) rw.getAttribute("CustCd"), (BigDecimal) rw.getAttribute("ReceiptAmt"),
                             (Date) rw.getAttribute("RecDate"), (String) rw.getAttribute("RecNum"));
        //        pushDmsMsgProcCall();
    }

    public void pushDmsMsgProcCall() {
        Row rw = this.getShReceiptsVO1().getCurrentRow();
        DBTransaction dbtxn = (DBTransaction) getTransaction();
        String st = "begin SP_PUSH_DMS_MESSAGE(?,?,?,?,?,?,?,?); end;";
        CallableStatement cstmt = dbtxn.createCallableStatement(st, 1);
        try {
            cstmt.setString(1, "DMS_RECEIPT");
            cstmt.setString(2, (String) rw.getAttribute("ParentGroup"));
            cstmt.setInt(3, (Integer) rw.getAttribute("DealerMapCd"));
            cstmt.setString(4, (String) rw.getAttribute("LocCd"));
            cstmt.setString(5, (String) rw.getAttribute("CompFa"));
            cstmt.setString(6, "REC");
            cstmt.setString(7, (String) rw.getAttribute("RecNum"));
            cstmt.setString(8, (String) rw.getAttribute("CreatedBy"));
        } catch (SQLException sqlerr) {
            throw new JboException(sqlerr);
        } finally {
            try {
                if (cstmt != null) {
                    cstmt.close();
                }
            } catch (Exception e) {
            }
        }
    }

    /**
     * Container's getter for ReceiptsST1.
     * @return ReceiptsST1
     */
    public ViewObjectImpl getReceiptsST1() {
        return (ViewObjectImpl) findViewObject("ReceiptsST1");
    }

    /**
     * Container's getter for NiNewMinsExpiredRO1.
     * @return NiNewMinsExpiredRO1
     */
    public ViewObjectImpl getNiNewMinsExpiredRO1() {
        return (ViewObjectImpl) findViewObject("NiNewMinsExpiredRO1");
    }

    /**
     * Container's getter for NiNewMinsCancelRO1.
     * @return NiNewMinsCancelRO1
     */
    public ViewObjectImpl getNiNewMinsCancelRO1() {
        return (ViewObjectImpl) findViewObject("NiNewMinsCancelRO1");
    }

    public void setApporRecdAmt(BigDecimal amt) {
        ViewObject stVo = this.getStApportionVO2();
        RowSetIterator rsi = stVo.createRowSetIterator(null);
        while (rsi.hasNext()) {
            Row r = rsi.next();
            r.setAttribute("RecdAmt", amt);
        }
    }

    /**
     * Container's getter for GroupMasterDocRO1.
     * @return GroupMasterDocRO1
     */
    public ViewObjectImpl getGroupMasterDocRO1() {
        return (ViewObjectImpl) findViewObject("GroupMasterDocRO1");
    }

    /**
     * Container's getter for LMSCalenderMasterRO1.
     * @return LMSCalenderMasterRO1
     */
    public LMSCalenderMasterROImpl getLMSCalenderMasterRO1() {
        return (LMSCalenderMasterROImpl) findViewObject("LMSCalenderMasterRO1");
    }

    /**
     * Container's getter for GmEmpAmListLOV1.
     * @return GmEmpAmListLOV1
     */
    public ViewObjectImpl getGmEmpAmListLOV1() {
        return (ViewObjectImpl) findViewObject("GmEmpAmListLOV1");
    }

    public Integer getEmpCount() {
        ViewObjectImpl cancalVO = this.getGmEmpAmListLOV1();
        cancalVO.executeQuery();
        Row r[] = cancalVO.getAllRowsInRange();
        return (Integer) r[0].getAttribute("EmpCount");
    }

    /**
     * Container's getter for LMSCalCityRO1.
     * @return LMSCalCityRO1
     */
    public LMSCalCityROImpl getLMSCalCityRO1() {
        return (LMSCalCityROImpl) findViewObject("LMSCalCityRO1");
    }

    /**
     * Container's getter for LMSCalAgencyMasterRO1.
     * @return LMSCalAgencyMasterRO1
     */
    public LMSCalAgencyMasterROImpl getLMSCalAgencyMasterRO1() {
        return (LMSCalAgencyMasterROImpl) findViewObject("LMSCalAgencyMasterRO1");
    }

    /**
     * Container's getter for LMSCalUploadErrorLogRO1.
     * @return LMSCalUploadErrorLogRO1
     */
    public LMSCalUploadErrorLogROImpl getLMSCalUploadErrorLogRO1() {
        return (LMSCalUploadErrorLogROImpl) findViewObject("LMSCalUploadErrorLogRO1");
    }

    /**
     * Container's getter for LMSCalenderUploadDualRO1.
     * @return LMSCalenderUploadDualRO1
     */
    public LMSCalenderUploadDualROImpl getLMSCalenderUploadDualRO1() {
        return (LMSCalenderUploadDualROImpl) findViewObject("LMSCalenderUploadDualRO1");
    }

    /**
     * Container's getter for CorporateMasterUploadRVO1.
     * @return CorporateMasterUploadRVO1
     */
    public ViewObjectImpl getCorporateMasterUploadRVO1() {
        return (ViewObjectImpl) findViewObject("CorporateMasterUploadRVO1");
    }

    /**Method to insert data from uploaded csv file to TEMP_MUL_CORPORATE table for Corporate Master Upload
     * @param csvVal
     * @param FinYear
     * @return
     */
    public HashMap<String, String> insertTempCorpMast(String[] csvVal, int FinYear, String batch) {
        LOGGER.info("** inside insertTempCorpMast - Corporate Master Upload");
        HashMap<String, String> mapVal = new HashMap<String, String>();

        String batchId = batch;
        DBTransaction trx = (DBTransaction) getTransaction();
        CallableStatement st = null;
        Map session = ADFContext.getCurrent().getSessionScope();
        Integer principalMapCd = Integer.valueOf(session.get("principalMapCd").toString());
        String userCd = session.get("userId").toString().toUpperCase();
        try {
            long millis = System.currentTimeMillis();
            java.sql.Date currdate = new java.sql.Date(millis);
            if (batchId != null) {
                String stmt =
                    "    INSERT INTO TEMP_MUL_CORPORATE\n" + "      (BATCH_ID,\n" + "       CP_TYPE,\n" +
                    "                        CP_NAME,\n" + "                        CP_HO_ADD1,\n" +
                    "                        CP_HO_ADD2,\n" + "                        CP_TOT_BRANCHES,\n" +
                    "                        CP_CEO_EMAIL,\n" + "                        CP_DIR_HEAD_VP_EMAIL,\n" +
                    "                        CP_ANNUAL_TURNOVER_IN_CRORES,\n" +
                    "                        CP_TOT_EMP,\n" + "                        CP_MBL_NUMBER,\n" +
                    "                        CP_OFF_NUMBER,\n" + "                        CP_DESIGNATION,\n" +
                    "                        HR_HEAD_NAME,\n" + "                        ADM_CONT_PERSON,\n" +
                    "                        EMAIL,\n" + "                        CITY_CD,\n" +
                    "                        STATE_CD,\n" + "                        FAX,\n" +
                    "                        HR_CONT_PHONE,\n" + "                        CP_ERR_FLAG,\n" +
                    "                        CP_ERR_REASON,\n" + "                        CREATED_BY,\n" +
                    "                        CREATED_DATE,\n" +
                    "                        PRINCIPAL_MAP_CD) values (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)";
                st = trx.createCallableStatement(stmt, 0);
                st.setString(1, batchId);
                st.setString(2, csvVal[0]);
                st.setString(3, csvVal[1]);
                st.setString(4, csvVal[2]);
                st.setString(5, csvVal[3]);
                st.setString(6, csvVal[4]);
                st.setString(7, csvVal[5]);
                st.setString(8, csvVal[6]);
                st.setBigDecimal(9, new BigDecimal(csvVal[7]));
                st.setBigDecimal(10, new BigDecimal(csvVal[8]));
                st.setString(11, csvVal[9]);
                st.setString(12, csvVal[10]);
                st.setString(13, csvVal[11]);
                st.setString(14, csvVal[12]);
                st.setString(15, csvVal[13]);
                st.setString(16, csvVal[14]);
                st.setString(17, csvVal[15]);
                st.setString(18, csvVal[16]);
                st.setString(19, csvVal.length >= 18 ? csvVal[17] : null);
                st.setString(20, csvVal.length >= 19 ? csvVal[18] : null);
                st.setString(21, "Y");
                st.setString(22, null);
                st.setString(23, userCd);
                st.setDate(24, currdate);
                st.setInt(25, principalMapCd);
                st.executeUpdate();
                getTransaction().commit();
                mapVal.put("error", "N");

            }
            LOGGER.info("** end of insertTempCorpMast - Corporate Master Upload");
            return mapVal;
        } catch (Exception e) {
            mapVal.put("error", "Y");
            mapVal.put("errMsg", e.getMessage());
            System.out.println(e.getMessage());
            e.printStackTrace();
        } finally {
            try {
                if (st != null) {
                    st.close();
                }
            } catch (Exception e) {
            }
        }
        return mapVal;
    }

    /**Method for update the Duplicate reason in table - Corporate Master Upload
     * @param batchIdVal
     */
    public void updateDupRecCorpMaster(String batchIdVal) {
        LOGGER.info("** inside updateDupRecCorpMaster - Corporate Master Upload");
        DBTransaction trx = (DBTransaction) getTransaction();
        CallableStatement st = null;
        Map session = ADFContext.getCurrent().getSessionScope();
        Integer PrincipalMapCd = Integer.valueOf(session.get("principalMapCd").toString());
        try {
            String sql =
                "SELECT ROWID,cp_type,cp_name,city_cd,state_cd\n" + "FROM muldms.temp_mul_corporate z\n" +
                "WHERE z.created_date >= TRUNC(SYSDATE) \n" + " AND z.batch_id = '" + batchIdVal + "'\n" +
                " AND z.principal_map_cd = '" + PrincipalMapCd + "'\n" + " AND z.cp_err_reason IS NULL\n" +
                "          AND ROWID NOT IN (SELECT MIN(ROWID) FROM temp_mul_corporate m\n" +
                "                  WHERE m.cp_type = z.cp_type\n" +
                "                     AND upper(m.cp_name) = upper(z.cp_name)\n" + "                     )";

            ResultSet rsSelect = getDBTransaction().createStatement(0).executeQuery(sql);
            while (rsSelect.next()) {
                String rowId = rsSelect.getString(1);
                String cpType = rsSelect.getString(2);
                String cpName = rsSelect.getString(3);

                String updateSql =
                    "        UPDATE muldms.temp_mul_corporate\n" + "                         SET cp_err_flag='D',\n" +
                    "                         cp_err_reason = 'Duplicate Corporate Type,Corporate Name Combination->" +
                    cpType + "," + cpName + "'\n" + "                           WHERE  ROWID='" + rowId + "'";
                st = trx.createCallableStatement(updateSql, 0);
                st.executeUpdate();

            }
            String sql1 =
                "SELECT ROWID,cp_type,cp_name,city_cd,state_cd\n" + "           FROM muldms.temp_mul_corporate z\n" +
                "           WHERE z.created_date >= TRUNC(SYSDATE) \n" + "     AND z.batch_id = '" + batchIdVal +
                "'\n" + "     AND z.principal_map_cd = '" + PrincipalMapCd + "'\n" +
                "     AND z.cp_err_reason IS NULL\n" +
                "                   AND EXISTS (SELECT 'X' FROM mul_corporate m\n" +
                "                           WHERE m.cp_type = z.cp_type\n" +
                "                     AND upper(m.cp_name) = upper(z.cp_name)\n" +
                "                     AND nvl(cp_close_date,sysdate)>=sysdate)";
            ResultSet rsSet = getDBTransaction().createStatement(0).executeQuery(sql1);
            while (rsSet.next()) {
                String rowIdVal = rsSet.getString(1);
                String cpType = rsSet.getString(2);
                String cpName = rsSet.getString(3);
                String updateSql1 =
                    " UPDATE muldms.temp_mul_corporate\n" + "                           SET cp_err_flag='E',\n" +
                    "                           cp_err_reason = 'Duplicate Corporate Type,Corporate Name Combination->" +
                    cpType + "," + cpName + "'\n" + "                             WHERE  ROWID='" + rowIdVal + "'";
                st = trx.createCallableStatement(updateSql1, 0);
                st.executeUpdate();
                LOGGER.info("** end of updateDupRecCorpMaster - Corporate Master Upload");


            }
            getTransaction().commit();

        } catch (SQLException e) {
            e.printStackTrace();
        } finally {
            try {
                if (st != null) {
                    st.close();
                }
            } catch (Exception e) {
            }
        }
    }

    /**Method to check the Count for total records and error rows - Corporate Master Upload
     * @param batchId
     * @return
     */
    public HashMap<String, String> checkErrsCorpMasUpload(String batchId) {
        LOGGER.info("** inside checkErrsCorpMasUpload -  Corporate Master Upload ");
        HashMap<String, String> hashMpVal = new HashMap<String, String>();
        Map session = ADFContext.getCurrent().getSessionScope();
        if (batchId != null) {
            try {
                Integer PrincipalMapCd = Integer.valueOf(session.get("principalMapCd").toString());
                String sql =
                    "SELECT COUNT(*),sum(decode(cp_err_flag, 'Y', 1, 0)),sum(decode(cp_err_flag, 'E', 1, 'D', 1, 0))\n" +
                    "      FROM muldms.temp_mul_corporate\n" + "     WHERE created_date >= TRUNC(SYSDATE) - 4\n" +
                    "       and created_date < TRUNC(SYSDATE) + 1\n" + "       and batch_id IS NOT NULL\n" +
                    "       and batch_id = '" + batchId + "'\n" + "       and principal_map_cd =" + PrincipalMapCd;

                ResultSet rsSelect = getDBTransaction().createStatement(0).executeQuery(sql);
                while (rsSelect.next()) {
                    hashMpVal.put("totalRecCount", rsSelect.getString(1));
                    hashMpVal.put("succRecCount", rsSelect.getString(2) != null ? rsSelect.getString(2) : "0");
                    hashMpVal.put("errRecCount", rsSelect.getString(3) != null ? rsSelect.getString(3) : "0");
                    LOGGER.info("** inside checkErrsCorpMasUpload -  Corporate Master Upload ");
                    return hashMpVal;


                }
            } catch (SQLException e) {
                e.printStackTrace();
            }
        }
        return hashMpVal;
    }

    /**
     * Container's getter for GmGropDocVO1.
     * @return GmGropDocVO1
     */
    public ViewObjectImpl getGmGropDocVO1() {
        return (ViewObjectImpl) findViewObject("GmGropDocVO1");
    }

    public void saveGroupDocInfo(String groupCode) {
        java.sql.Timestamp datetime = new java.sql.Timestamp(System.currentTimeMillis());
        Map session = ADFContext.getCurrent().getSessionScope();
        ViewObjectImpl groupDocRO = this.getGroupMasterDocRO1();
        ViewObjectImpl groupdocEVO = this.getGmGropDocVO1();
        ViewCriteria gropCDvc = groupdocEVO.getViewCriteriaManager().getViewCriteria("GropCDAndDocCDVC");
        VariableValueManager gropCDvvm = gropCDvc.ensureVariableManager();
        gropCDvvm.setVariableValue("bind_gropcode", groupCode);
        RowSetIterator groupDocRSI = groupDocRO.createRowSetIterator(null);
        while (groupDocRSI.hasNext()) {
            Row r = groupDocRSI.next();
            gropCDvvm.setVariableValue("bind_doc_list_code", r.getAttribute("ListCode"));
            groupdocEVO.applyViewCriteria(gropCDvc);
            groupdocEVO.executeQuery();
            if (groupdocEVO.getEstimatedRowCount() > 0) {
                Row docUpdateRow = groupdocEVO.first();
                docUpdateRow.setAttribute("ActiveYn", r.getAttribute("ActiveYn"));
                docUpdateRow.setAttribute("ModifiedDate", datetime);
                docUpdateRow.setAttribute("ModifiedBy", session.get("userId").toString());
            } else if ("Y".equalsIgnoreCase(r.getAttribute("ActiveYn").toString())) {
                Row newDocRow = groupdocEVO.createRow();
                newDocRow.setAttribute("GropCode", groupCode);
                newDocRow.setAttribute("DocListCode", r.getAttribute("ListCode"));
                newDocRow.setAttribute("ActiveYn", r.getAttribute("ActiveYn"));
                newDocRow.setAttribute("PrincipalMapCd", ADFContext.getCurrent()
                                                                   .getSessionScope()
                                                                   .get("principalMapCd"));
                groupdocEVO.insertRow(newDocRow);
            }
            LOGGER.info("List Code amimpl : " + r.getAttribute("ListCode") + " Active? amimpl " +
                        r.getAttribute("ActiveYn"));
        }
        groupDocRSI.closeRowSetIterator();
    }

    public String insertNewGroupMaster(Map insertParams) {
        ViewObjectImpl gmGropHVO = this.getGmGrophVO1();
        Row grophRow = gmGropHVO.createRow();
        grophRow.setAttribute("GropName", insertParams.get("GroupName"));
        grophRow.setAttribute("GropActvYn", insertParams.get("ActiveYNT"));
        grophRow.setAttribute("GropSeg", insertParams.get("Segment"));
        grophRow.setAttribute("PrincipalMapCd", ADFContext.getCurrent()
                                                          .getSessionScope()
                                                          .get("principalMapCd"));
        gmGropHVO.insertRow(grophRow);
        LOGGER.info("GropCode Generated" + grophRow.getAttribute("GropCode").toString());
        return grophRow.getAttribute("GropCode").toString();
    }

    /**
     * Container's getter for CustTypeLOVVO1.
     * @return CustTypeLOVVO1
     */
    public ViewObjectImpl getCustTypeLOVVO1() {
        return (ViewObjectImpl) findViewObject("CustTypeLOVVO1");
    }

    /**
     * Container's getter for VehServHistRO1.
     * @return VehServHistRO1
     */
    public ViewObjectImpl getVehServHistRO1() {
        return (ViewObjectImpl) findViewObject("VehServHistRO1");
    }

    /**
     * Container's getter for TempGmCalenderVO2.
     * @return TempGmCalenderVO2
     */
    public ViewObjectImpl getTempGmCalenderVO1() {
        return (ViewObjectImpl) findViewObject("TempGmCalenderVO1");
    }

    public int getUploadId() {
        Integer uploadId = null;
        String uploadIdQuery = null;
        ResultSet rs = null;
        Object queryResult = null;
        try {
            uploadIdQuery = " SELECT MAX(UPLOAD_ID)  FROM TEMP_GM_CALNDR";
            rs = getDBTransaction().createStatement(0).executeQuery(uploadIdQuery);
            if (rs.next()) {
                queryResult = rs.getInt(1);
                if ((Integer) queryResult == null) {
                    uploadId = 1000001;
                    queryResult = null;
                } else {
                    uploadId = (Integer) queryResult + 1;
                    queryResult = null;
                }
            }
        } catch (Exception e) {
            LOGGER.info("Exception " + e.getMessage());
        } finally {
            closeStatement(null, null, rs);
        }
        return uploadId;
    }

    /**
     * This method is to insert parsed CSV data to TempSMSchemaMastr table.
     * @param csvLines
     * @param params
     * @return
     */
    public Map createRowForTempGmCalender(String[] csvLines, Map paramsMap) {
        Map errorMap = new HashMap();
        errorMap.put("Error_String", null);
        Map session = ADFContext.getCurrent().getSessionScope();
        Integer principalMapCd = new Integer(session.get("principalMapCd").toString());
        DBTransaction trx = (DBTransaction) getTransaction();
        CallableStatement st = null;
        int recordsInserted = 0;
        ResultSet rs = null;
        String query = null;
        Object queryResult = null;
        String subQuery = null;
        String query3 = null;
        String errorFlag = "N";
        String errorDesc = "";
        String calndrId = "";
        java.sql.Date sqlFromDate = null;
        java.sql.Date sqlToDate = null;
        java.util.Date utilFromDate = null;
        java.util.Date utilToDate = null;
        oracle.jbo.domain.Date currentDate = new oracle.jbo.domain.Date(oracle.jbo
                                                                              .domain
                                                                              .Date
                                                                              .getCurrentDate());
        java.sql.Date currdate = currentDate.dateValue();
        try {
            if (csvLines != null) {
                String stmt =
                    "INSERT INTO TEMP_GM_CALNDR(CALNDR_ID,CALNDR_TYPE,FIN_YR,PRG_ID,REGN_CD,FOR_CD,PRG_VENUE,AGENCY_CD,CREATED_BY,CREATED_DATE,FAC_CD,PRINCIPAL_MAP_CD,CHANNEL,TOTAL_SEATS,BATCH,EAI_FLAG,ERR_REASON,UPLOAD_ID,RO_FRM_DATE,HO_FRM_DATE,HO_TO_DATE,RO_TO_DATE) VALUES (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)";
                // 2. Create the CallableStatement for the PL/SQL block
                st = trx.createCallableStatement(stmt, 0);
                // 3. Register the positions and types of the OUT parameters

                // 4. Set the bind values of the IN parameters
                String startDate = csvLines[3]; // Input String
                st.setString(2, (String) paramsMap.get("pCalenderType")); //calender type
                st.setString(3, (String) paramsMap.get("pFinYr")); //fin year
                st.setString(4, csvLines[1]); //prg id
                st.setString(5, csvLines[0]); //regn_cd
                st.setString(6, csvLines[2]); //for cd
                st.setString(7, csvLines[6]); //prg venue
                st.setString(8, csvLines[4]); //agency cd
                st.setString(9, "dms2test"); //created by
                st.setDate(10, currdate); //created date
                st.setString(11, csvLines[5]); //fac cd
                st.setInt(12, principalMapCd); //principal map cd
                st.setString(13, (String) paramsMap.get("pChannel")); //channel
                st.setInt(14, Integer.parseInt(csvLines[7])); //total seats
                st.setString(15, csvLines[8]); //batch
                st.setInt(18, (Integer) paramsMap.get("pUploadId")); //upload id
                //Region Code Check
                if (csvLines[0] != null) {
                    query =
                        "select COUNT(region_cd) from gm_regn where principal_map_cd=" + principalMapCd +
                        " and region_cd='" + csvLines[0] + "'";
                    rs = getDBTransaction().createStatement(0).executeQuery(query);
                    if (rs.next()) {
                        queryResult = rs.getInt(1);
                        if ((Integer) queryResult != 1) {
                            st.setString(16, "Y");
                            st.setString(17, "Region Code Not As Per Master");
                            errorFlag = "Y";
                            queryResult = null;
                        }
                    }
                }

                //City Code Check
                if (csvLines[2] != null) {
                    query =
                        "select COUNT(1)  from gm_for where principal_map_cd=" + principalMapCd + " and for_cd='" +
                        csvLines[2] + "'";
                    rs = getDBTransaction().createStatement(0).executeQuery(query);
                    if (rs.next()) {
                        queryResult = rs.getInt(1);
                        if ((Integer) queryResult != 1) {
                            errorFlag = "Y";
                            errorDesc = "City Code Not As Per Master";
                            queryResult = null;
                        }
                    }
                }
                //City Code Check
                if (errorFlag != "Y" && csvLines[2] != null) {
                    query =
                        "SELECT LENGTH(FOR_CD)  FROM GM_FOR WHERE principal_map_cd=" + principalMapCd +
                        " and for_cd='" + csvLines[2] + "'";
                    rs = getDBTransaction().createStatement(0).executeQuery(query);
                    if (rs.next()) {
                        queryResult = rs.getInt(1);
                        if ((Integer) queryResult == 1) {
                            subQuery =
                                "select COUNT(FOR_CD)  from gm_for where principal_map_cd=" + principalMapCd +
                                " and FOR_CD=lpad('" + csvLines[2] + "',2,0)";
                            rs = getDBTransaction().createStatement(0).executeQuery(subQuery);
                            if (rs.next()) {
                                queryResult = rs.getInt(1);
                                if ((Integer) queryResult != 1 && principalMapCd != '2') {
                                    errorFlag = "Y";
                                    errorDesc = "City Code Not As Per Master";
                                    queryResult = null;
                                } else if (principalMapCd == '2') {
                                    query3 =
                                        "select COUNT(1)  from gm_for where principal_map_cd=" + principalMapCd +
                                        " and FOR_CD=lpad('" + csvLines[2] + "',3,0)";
                                    rs = getDBTransaction().createStatement(0).executeQuery(query3);
                                    if (rs.next()) {
                                        queryResult = rs.getInt(1);
                                        if ((Integer) queryResult != 1) {
                                            errorFlag = "Y";
                                            errorDesc = "City Code Not As Per Master";
                                            queryResult = null;
                                        }
                                    }
                                }
                            }
                            queryResult = null;
                        } else {
                            subQuery =
                                "select COUNT(FOR_CD)  from gm_for where principal_map_cd=" + principalMapCd +
                                " and FOR_CD='" + csvLines[2] + "'";
                            rs = getDBTransaction().createStatement(0).executeQuery(subQuery);
                            if (rs.next()) {
                                queryResult = rs.getInt(1);
                                if ((Integer) queryResult != 1 && principalMapCd != '2') {
                                    errorFlag = "Y";
                                    errorDesc = "City Code Not As Per Master";
                                    queryResult = null;
                                } else if (principalMapCd == '2') {
                                    query3 =
                                        "select COUNT(1)  from gm_for where principal_map_cd=" + principalMapCd +
                                        " and FOR_CD=lpad('" + csvLines[2] + "',3,0)";
                                    rs = getDBTransaction().createStatement(0).executeQuery(query3);
                                    if (rs.next()) {
                                        queryResult = rs.getInt(1);
                                        if ((Integer) queryResult != 1) {
                                            errorFlag = "Y";
                                            errorDesc = "City Code Not As Per Master";
                                            queryResult = null;
                                        }
                                    }

                                }
                            }
                            queryResult = null;
                        }
                    }
                }

                //Program Code Check
                if (errorFlag != "Y" && csvLines[1] != null) {
                    query =
                        "select count(program_cd)  from sm_tra_program_master where program_cd='" + csvLines[1] +
                        "' and principal_map_cd=" + principalMapCd + "";
                    rs = getDBTransaction().createStatement(0).executeQuery(query);
                    if (rs.next()) {
                        queryResult = rs.getInt(1);
                        if ((Integer) queryResult != 1) {
                            errorFlag = "Y";
                            errorDesc = "Program Code Not As Per Master";
                            queryResult = null;
                        }
                    }
                }
                //Setting RO FROM DATE AND HO FROM DATE
                if (csvLines[3] != null) {
                    SimpleDateFormat sdf1 = new SimpleDateFormat("dd-MM-yyyy"); // New Pattern
                    utilFromDate = sdf1.parse(startDate); // Returns a Date format object with the pattern
                    sqlFromDate = new java.sql.Date(utilFromDate.getTime()); // Outputs : 2013-02-01
                }
                //financial year check
                if (errorFlag != "Y" && paramsMap.get("pFinYr") != null) {

                    if (compareDateInBetween(utilFromDate, (java.util.Date) paramsMap.get("pFinBeg"),
                                             (java.util.Date) paramsMap.get("pFinEnd"))) {
                        errorFlag = "Y";
                        errorDesc = "Start Date Not Between Selected Financial Year";
                    }
                }
                //Month year check
                if (errorFlag != "Y" && paramsMap.get("pMonthYear") != null) {
                    SimpleDateFormat simpleDateFormat = new SimpleDateFormat("MM-yy");
                    String date = simpleDateFormat.format(sqlFromDate);
                    if (!paramsMap.get("pMonthYear")
                                  .toString()
                                  .trim()
                                  .equalsIgnoreCase(date)) {
                        errorFlag = "Y";
                        errorDesc = "Start Date Not Between Given Month";
                    }
                }

                //Agency Code Check

                if (errorFlag != "Y" && csvLines[4] != null) {
                    query =
                        "select count(AGENCY_CD) from gm_agency_master  where agency_cd='" + csvLines[4] +
                        "' and principal_map_cd=" + principalMapCd + "";
                    rs = getDBTransaction().createStatement(0).executeQuery(query);
                    if (rs.next()) {
                        queryResult = rs.getInt(1);
                        if ((Integer) queryResult != 1) {
                            errorFlag = "Y";
                            errorDesc = "Agency Not Created";
                            queryResult = null;
                        }
                    }
                }

                //Batch Check
                if (errorFlag != "Y" && csvLines[8] != null) {
                    if (!("E".equalsIgnoreCase((String) csvLines[8]) || "M".equalsIgnoreCase((String) csvLines[8]))) {
                        errorFlag = "Y";
                        errorDesc = "Batch Not As Per Master";
                    }
                }

                //AGENCY VALID FOR PROGRAM
                if (errorFlag != "Y" && csvLines[4] != null && csvLines[1] != null) {
                    query =
                        " select count(agency_cd)  from sm_agency  where program_cd='" + csvLines[1] +
                        "' AND AGENCY_CD='" + csvLines[4] + "' and principal_map_cd=" + principalMapCd + "";
                    rs = getDBTransaction().createStatement(0).executeQuery(query);
                    if (rs.next()) {
                        queryResult = rs.getInt(1);
                        if ((Integer) queryResult == 0) {
                            errorFlag = "Y";
                            errorDesc = "Agency Not Valid For Program";
                            queryResult = null;
                        }
                    }
                }

                //TRAINER EXIST IN AGENCY OR NOT
                if (errorFlag != "Y" && csvLines[4] != null && csvLines[5] != null) {
                    query =
                        "        SELECT COUNT(FAC_CD)  FROM GM_FACULTY_MASTER WHERE FAC_CD='" + csvLines[5] +
                        "' AND AGENCY_CD='" + csvLines[4] + "' AND PRINCIPAL_MAP_CD=" + principalMapCd +
                        " AND nvl(ACTIVE_YN,'N')='Y'";
                    rs = getDBTransaction().createStatement(0).executeQuery(query);
                    if (rs.next()) {
                        queryResult = rs.getInt(1);
                        if ((Integer) queryResult == 0) {
                            errorFlag = "Y";
                            errorDesc = "Trainer Not Exist in  Agency";
                            queryResult = null;
                        }
                    }
                }
                //TRAINER CERTIFICATION CHECK
                if (errorFlag != "Y" && csvLines[1] != null && csvLines[5] != null) {
                    query =
                        "select COUNT(*) from gd_faculty_score where program_cd='" + csvLines[1] + "' AND FAC_CD='" +
                        csvLines[5] + "'  AND   NVL(CERT_YN,'N')='Y'";
                    rs = getDBTransaction().createStatement(0).executeQuery(query);
                    if (rs.next()) {
                        queryResult = rs.getInt(1);
                        if ((Integer) queryResult == 0) {
                            errorFlag = "Y";
                            errorDesc = "Trainer Not Certified For Program";
                            queryResult = null;
                        }
                    }
                }
                //Calender Id
                if ("Y".equalsIgnoreCase(errorFlag)) {
                    calndrId = null;
                } else {
                    query =
                        " SELECT  'SI'||SUBSTR(TO_CHAR(SYSDATE,'RRRR'),3,2)||LPAD(SEQ_SESSION_ID.NEXTVAL,6,0) FROM AM_DUAL";
                    rs = getDBTransaction().createStatement(0).executeQuery(query);
                    if (rs.next()) {
                        queryResult = rs.getString(1);
                        if ((String) queryResult != null) {
                            calndrId = (String) queryResult;
                            queryResult = null;
                        }
                    }

                }

                //Setting RoToDate and HoToDate

                if (csvLines[1] != null) {
                    query =
                        "SELECT NVL(PROG_DURATION,0)  FROM SM_TRA_PROGRAM_MASTER WHERE PROGRAM_CD='" + csvLines[1] +
                        "' AND PRINCIPAL_MAP_CD=" + principalMapCd + " ";
                    rs = getDBTransaction().createStatement(0).executeQuery(query);
                    if (rs.next()) {
                        queryResult = rs.getInt(1);
                        if ((Integer) queryResult > 1) {
                            Calendar c = Calendar.getInstance();
                            SimpleDateFormat sdf1 = new SimpleDateFormat("dd-MM-yyyy"); // New Pattern
                            utilToDate = sdf1.parse(startDate); // Returns a Date format object with the pattern
                            c.setTime(utilToDate);
                            c.add(Calendar.DATE, (Integer) queryResult - 1);
                            utilToDate = c.getTime();
                            sqlToDate = new java.sql.Date(utilToDate.getTime());
                            queryResult = null;
                        }

                        if ((Integer) queryResult <= 1) {
                            sqlToDate = sqlFromDate;
                            queryResult = null;
                        }

                    }
                }
                queryResult = null;
                st.setString(1, calndrId);
                st.setString(16, errorFlag);
                st.setString(17, errorDesc);
                st.setDate(19, sqlFromDate); //RoFrmDate
                st.setDate(20, sqlFromDate); //HoFrmDate
                st.setDate(21, sqlToDate); //Hotodate
                st.setDate(22, sqlToDate); //Rotodate
                st.executeUpdate();
                this.getDBTransaction().commit();
                recordsInserted = recordsInserted + 1;

            } else {
                if (recordsInserted == 0) {
                    errorMap.put("Error_String", "No Data Found in Excel.");
                    return errorMap;
                } else if (csvLines[0].length() > 3) {
                    errorMap.put("Error_String", "Please Check Excel Format");
                    return errorMap;
                }
            }

        } catch (NumberFormatException nfe) {
            LOGGER.info("NFE Exception " + nfe.getMessage());
            errorMap.put("Error_String", "Width problem/Incompatible Data while fetching detail.");
            return errorMap;
        } catch (Exception e) {
            LOGGER.info("Exception " + e.getMessage());
            errorMap.put("Error_String", "Unknown Error occurred, Please review the file and try again.");
            return errorMap;
        } finally {
            closeStatement(null, st, rs);
            queryResult = null;
        }
        return errorMap;
    }

    public static oracle.jbo.domain.Date convertUtilDateToDomainDate(java.util.Date utilDate) {
        oracle.jbo.domain.Date date = null;
        if (utilDate != null) {
            java.sql.Date sqldate = new java.sql.Date(utilDate.getTime());
            date = new oracle.jbo.domain.Date(sqldate);
        }
        return date;
    }

    public static java.util.Date convertDomainDateToUtilDate(oracle.jbo.domain.Date domainDate) {
        java.util.Date date = null;
        if (domainDate != null) {
            java.sql.Date sqldate = domainDate.dateValue();
            date = new java.util.Date(sqldate.getTime());
        }
        return date;
    }

    public static boolean compareDateInBetween(java.util.Date startDate, java.util.Date endDate,
                                               java.util.Date inputDate) {
        boolean invalid = false;
        if (inputDate != null) {
            if (inputDate.compareTo(startDate) >= 0) {
                if (endDate.compareTo(inputDate) <= 0) {
                    invalid = false;
                } else {
                    invalid = true;
                }
            } else {
                invalid = true;
            }

        }
        return invalid;
    }

    public static java.util.Date addOneDay(java.util.Date utilDate) {
        Calendar cal = Calendar.getInstance();
        cal.setTime(utilDate);
        cal.add(Calendar.DAY_OF_MONTH, 1);
        return cal.getTime();
    }

    public static java.util.Date addFourDayPrevious() {
        Calendar cal = Calendar.getInstance();
        java.util.Date sysDate = new java.util.Date();
        cal.setTime(sysDate);
        cal.add(Calendar.DAY_OF_MONTH, -4);
        return cal.getTime();
    }

    public static java.util.Date getPreviousDay() {
        Calendar cal = Calendar.getInstance();
        java.util.Date sysDate = new java.util.Date();
        cal.setTime(sysDate);
        cal.add(Calendar.DAY_OF_MONTH, -1);
        return cal.getTime();
    }

    /**
     *  @code To filter temp table with currently uploaded data
     * @param paramsMap
     */
    public void filterTempGmCalndrByUploadId(Map paramsMap) {
        Map session = ADFContext.getCurrent().getSessionScope();
        Integer principalMapCd = new Integer(session.get("principalMapCd").toString());
        ViewObjectImpl vo = this.getTempGmCalenderVO1();
        vo.clearViewCriterias();
        ViewCriteria vc = vo.getViewCriteria("filterTempSavedVC");
        vo.applyViewCriteria(vc);
        vo.setNamedWhereClauseParam("bindUploadId", (Integer) paramsMap.get("pUploadId"));
        vo.setNamedWhereClauseParam("bindPrincipalMapCd", principalMapCd);
        vo.executeQuery();
    }

    /**
     * @code To save uploaded data to Calender table
     * @param paramsMap
     */
    public Integer saveFilteredTempGmCalndr(Map paramsMap) {
        Integer rowCount = 0;
        Map session = ADFContext.getCurrent().getSessionScope();
        Integer principalMapCd = new Integer(session.get("principalMapCd").toString());
        Integer uploadId = (Integer) ADFContext.getCurrent()
                                               .getPageFlowScope()
                                               .get("uploadId");
        ViewObjectImpl vo = this.getTempGmCalenderVO1();
        ViewObjectImpl lmsCalVo = this.getLMSCalUpdPrgmVO1();
        vo.clearViewCriterias();
        ViewCriteria vc = vo.getViewCriteria("filterForSaveVC");
        vo.applyViewCriteria(vc);
        vo.setNamedWhereClauseParam("bindUploadId", uploadId);
        vo.setNamedWhereClauseParam("bindPrincipalMapCd", principalMapCd);
        vo.executeQuery();
        if (vo.getEstimatedRowCount() > 0) {
            RowSetIterator rsItr = vo.createRowSetIterator(null);
            while (rsItr.hasNext()) {
                Row row = rsItr.next();
                lmsCalVo.clearViewCriterias();
                ViewCriteria lmsCalVc = lmsCalVo.getViewCriteria("validateDuplicateEntryVC");
                lmsCalVo.applyViewCriteria(lmsCalVc);
                lmsCalVo.setNamedWhereClauseParam("bindCalenderId", row.getAttribute("CalndrId"));
                lmsCalVo.setNamedWhereClauseParam("bindFinYr", row.getAttribute("FinYr"));
                lmsCalVo.setNamedWhereClauseParam("bindPrincipalMapCd", principalMapCd);
                lmsCalVo.executeQuery();
                if (lmsCalVo.getEstimatedRowCount() > 0) {
                    rowCount = (int) lmsCalVo.getEstimatedRowCount();
                } else {
                    lmsCalVo.clearViewCriterias();
                    LMSCalUpdPrgmVORowImpl lmsCalRow = (LMSCalUpdPrgmVORowImpl) lmsCalVo.createRow();
                    lmsCalRow.setAttribute("CalndrId", row.getAttribute("CalndrId"));
                    lmsCalRow.setAttribute("RegnCd", row.getAttribute("RegnCd"));
                    lmsCalRow.setAttribute("PrgId", row.getAttribute("PrgId"));
                    lmsCalRow.setAttribute("ForCd", row.getAttribute("ForCd"));
                    lmsCalRow.setAttribute("HoFrmDate", row.getAttribute("HoFrmDate"));
                    lmsCalRow.setAttribute("RoFrmDate", row.getAttribute("RoFrmDate"));
                    lmsCalRow.setAttribute("AgencyCd", row.getAttribute("AgencyCd"));
                    lmsCalRow.setAttribute("FacCd", row.getAttribute("FacCd"));
                    lmsCalRow.setAttribute("PrgVenue", row.getAttribute("PrgVenue"));
                    lmsCalRow.setAttribute("TotalSeats", row.getAttribute("TotalSeats"));
                    lmsCalRow.setAttribute("Batch", row.getAttribute("Batch"));
                    lmsCalRow.setAttribute("PrincipalMapCd", row.getAttribute("PrincipalMapCd"));
                    lmsCalRow.setAttribute("FinYr", row.getAttribute("FinYr"));
                    lmsCalRow.setAttribute("CalndrType", row.getAttribute("CalndrType"));
                    lmsCalRow.setAttribute("Channel", row.getAttribute("Channel"));
                    lmsCalRow.setAttribute("PrgStatus", "NOMNT");
                    lmsCalRow.setAttribute("HoToDate", row.getAttribute("HoToDate"));
                    lmsCalRow.setAttribute("RoToDate", row.getAttribute("RoToDate"));
                    lmsCalRow.setAttribute("LastEnelDate", getPreviousDay());
                    lmsCalRow.setAttribute("CreatedBy", row.getAttribute("CreatedBy"));
                    lmsCalRow.setAttribute("ModifyBy", row.getAttribute("ModifyBy"));
                    lmsCalVo.insertRow(lmsCalRow);
                }
            }
            rsItr.closeRowSetIterator();
            this.getDBTransaction().commit();
        }
        return rowCount;
    }

    public Map validateImportData(String[] lines, Map params) {
        ViewObjectImpl tempGropdSTVO = this.getTempGropdST1();
        Row tempRow = tempGropdSTVO.createRow();
        String Error = null;
        if (lines != null && lines.length > 0) {
            LOGGER.info("Params Corp Code : " + lines[0] + " Group Code : " + params.get("groupCode") +
                        "In Validation");
            ViewObjectImpl mulCorpVO = this.getMulCorporateVO1();
            tempRow.setAttribute("CorporateName", lines[1]);
            tempRow.setAttribute("CorporateCode", lines[0]);
            tempRow.setAttribute("Active", "Y");
            if (params.get("isDuplicate") != null && "Y".equalsIgnoreCase((String) params.get("isDuplicate"))) {
                Error = "Duplicate Corporate Name in Export file";
                tempRow.setAttribute("Error", Error);
                tempGropdSTVO.insertRow(tempRow);
                return params;
            }
            ViewCriteria mulCorpVC = mulCorpVO.getViewCriteriaManager().getViewCriteria("populateCodeMasterDetails");
            VariableValueManager mulCorpVVM = mulCorpVC.ensureVariableManager();
            mulCorpVVM.setVariableValue("bind_cpNumber", lines[0]);
            mulCorpVO.applyViewCriteria(mulCorpVC);
            mulCorpVO.executeQuery();
            Row mulCorpRow = mulCorpVO.first();
            if (mulCorpVO.getEstimatedRowCount() > 0) {
                if (mulCorpRow.getAttribute("CpCloseDate") != null) {
                    Error = "Corporate closed on " + mulCorpRow.getAttribute("CpCloseDate");
                    //params.put("ErrorReason","Corporate closed on "+mulCorpRow.getAttribute("CpCloseDate"));//Corporate closed on '||LV_CLOSE_DATE
                }
                String cpNm = (String)mulCorpRow.getAttribute("CpName");
                tempRow.setAttribute("CorporateName", cpNm.trim());
            } else {
                Error = " Not Found in Corporate Master"; //CP_CODE||' Not Found in Corporate Master'
            }
            ViewObjectImpl gropDVO = this.getGmGropdVO1();
            ViewCriteria gropDVC = gropDVO.getViewCriteriaManager().getViewCriteria("CpCodeCheckVC");
            VariableValueManager gropDVVM = gropDVC.ensureVariableManager();
            gropDVVM.setVariableValue("bind_cp_code", lines[0]);
            gropDVVM.setVariableValue("bind_grop_code", params.get("groupCode"));
            gropDVO.applyViewCriteria(gropDVC);
            gropDVO.executeQuery();
            if (gropDVO.getEstimatedRowCount() > 0) {
                Error = "Already Exist in this Group";
                //params.put("ErrorReason","Already Exist in this Group");//Already Exist in this Group
            }
            ViewObjectImpl gropToCorpRO = this.getCorporateToGropCheckRO1();
            ViewCriteria gropToCorpVC = gropToCorpRO.getViewCriteriaManager().getViewCriteria("CorporateToGropCheckVC");
            VariableValueManager gropToCorpVVM = gropToCorpVC.ensureVariableManager();
            gropToCorpVVM.setVariableValue("bind_cp_code", lines[0]);
            gropToCorpRO.applyViewCriteria(gropToCorpVC);
            gropToCorpRO.executeQuery();
            if (gropToCorpRO.getEstimatedRowCount() == 1) {
                Row gropToCorprow = gropToCorpRO.first();
                tempRow.setAttribute("Error",
                                     "This Corporate is already active in " + gropToCorprow.getAttribute("GropName") +
                                     " Group, and Group Code is " + gropToCorprow.getAttribute("GropCode"));
                // params.put("ErrorReason","This Corporate is already active in "+ gropToCorprow.getAttribute("GropName") +" Group, and Group Code is " + gropToCorprow.getAttribute("GropCode"));//' This Corporate is already active in '||lv_grp_name||' Group, and Group Code is' ||lv_grp_code;
            } else if (gropToCorpRO.getEstimatedRowCount() > 1) {
                tempRow.setAttribute("Error", "This corporate is active more than one group");
                //params.put("ErrorReason","This corporate is active more than one group");//This corporate is active more than one group';
            }
            tempRow.setAttribute("Error", Error);
            tempGropdSTVO.insertRow(tempRow);
        }
        return params;
    }

    /**
     * Container's getter for CorporateToGropCheckRO1.
     * @return CorporateToGropCheckRO1
     */
    public ViewObjectImpl getCorporateToGropCheckRO1() {
        return (ViewObjectImpl) findViewObject("CorporateToGropCheckRO1");
    }

    /**
     * Container's getter for TempGropdST1.
     * @return TempGropdST1
     */
    public ViewObjectImpl getTempGropdST1() {
        return (ViewObjectImpl) findViewObject("TempGropdST1");
    }

    public int uploadCorporateRows(Map params) {
        ViewObject tempGropdVO = this.getTempGropdST1();
        ViewObject gmGropdVO = this.getGmGropdVO2();
        RowSetIterator tempGropdRSI = tempGropdVO.createRowSetIterator(null);
        int successCount = 0;
        while (tempGropdRSI.hasNext()) {
            Row r = tempGropdRSI.next();
            if (r.getAttribute("CorporateCode") != null && null == r.getAttribute("Error")) {
                Row childRow = gmGropdVO.createRow();
                childRow.setAttribute("CpCode", r.getAttribute("CorporateCode"));
                childRow.setAttribute("GropCode", params.get("GropCode"));
                childRow.setAttribute("CpActvYn", r.getAttribute("Active"));
                gmGropdVO.insertRow(childRow);
                LOGGER.info("Row inserted in GmGropdVO with CorpCode : " + r.getAttribute("CorporateCode"));
                successCount++;
            }
            this.getDBTransaction().commit();
        }
        return successCount;
    }

    /**
     * Container's getter for CorporateMasterUploadErrorRVO1.
     * @return CorporateMasterUploadErrorRVO1
     */
    public ViewObjectImpl getCorporateMasterUploadErrorRVO1() {
        return (ViewObjectImpl) findViewObject("CorporateMasterUploadErrorRVO1");
    }

    /**
     * This method is to insert parsed CSV data to TempBonusMastr table.
     * @param csvLines
     * @param params
     * @return
     */
    public Map bonusMasterUploadValidate(String[] csvLines, Map params) {
        System.out.println("inside bonusMasterUploadValidate");
        Map errorMap = new HashMap<String, String>();
        ViewObject tempSBonusMasterVO = this.getTempSmBonusMasterVO1();
        ViewObject getBatchIdVO = this.getGetBonusBatchIdRO1();
        String batchId = (String) getBatchIdVO.first().getAttribute("Batchid");
        System.out.println("batchId-->" + batchId);
        LOGGER.info("Batch Id is : " + batchId);
        int recordsInserted = 0;
        try {
            if (csvLines != null) {
                Row tempRow = tempSBonusMasterVO.createRow();
                tempRow.setAttribute("State", csvLines[0]);
                tempRow.setAttribute("ForCd", csvLines[1]);
                tempRow.setAttribute("FueltypeCd", csvLines[2]);
                tempRow.setAttribute("ModelCd", csvLines[3]);
                tempRow.setAttribute("VariantCd", csvLines[4]);
                tempRow.setAttribute("OldVehMake", null);
                tempRow.setAttribute("OldVehModel", null);
                tempRow.setAttribute("OldVehVariant", null);
                tempRow.setAttribute("SalesType", csvLines[5]);
                tempRow.setAttribute("SlabCd", csvLines[6]);
                tempRow.setAttribute("TotBonus", Integer.parseInt(csvLines[7]));
                tempRow.setAttribute("DlrShare", Integer.parseInt(csvLines[8]));
                tempRow.setAttribute("MsilShare", Integer.parseInt(csvLines[9]));
                tempRow.setAttribute("BatchId", batchId);
                tempRow.setAttribute("BonusType", (String) params.get("BonusType"));
                tempRow.setAttribute("Regn", (String) params.get("region"));
                //                     tempRow.setAttribute("Regn", "S2");
                tempRow.setAttribute("FromDate", (Date) params.get("Fromdate"));
                tempRow.setAttribute("ToDate", (Date) params.get("Todate"));
                tempRow.setAttribute("Channel", (String) params.get("Channel"));
                tempRow.setAttribute("EaiFlag", 'Y');
                tempRow.setAttribute("Yom", null);
                tempRow.setAttribute("BonusLoyAcqFlag", null);
                tempSBonusMasterVO.insertRow(tempRow);
                recordsInserted++;
            } else {
                if (recordsInserted == 0) {
                    errorMap.put("Error_String", "No Data Found in Excel.");
                    errorMap.put("Error_Code", "NDF");
                    errorMap.put("BatchId", null);
                    return errorMap;


                }
            }
            this.getDBTransaction().commit();
        } catch (NumberFormatException nfe) {
            LOGGER.info("NFE Exception " + nfe.getMessage());
            errorMap.put("Error_String", "Width problem/Incompatible Data while fetching detail.");
            errorMap.put("Error_Code", "NFE");
            errorMap.put("BatchId", null);
            return errorMap;
        } catch (Exception e) {
            System.out.println("Exception-->");
            e.printStackTrace();
            LOGGER.info("Exception " + e.getMessage());
            errorMap.put("Error_String", "Unknown Error occurred, Please review the file and try again.");
            errorMap.put("Error_Code", "OTH");
            errorMap.put("BatchId", null);
            return errorMap;
        }
        errorMap.put("Error_String", "N/A");
        errorMap.put("Error_Code", "SUC");
        errorMap.put("BatchId", batchId);
        System.out.println("returning from validate bonus");
        return errorMap;
    }


    /**
     * This method is used to update the duplicate records in TempSmBonusMaster table.
     * @param batchId
     */
    public Map updateDupRecordsBonusMaster(String batchId, String typeOfBonus) {
        System.out.println("entered update recordes");
        System.out.println("batchId-->" + batchId + "---typeOfBonus-->" + typeOfBonus);
        ViewObjectImpl updateDupRO1 = this.getUpdateDupRecordsBMTemp1RO1();
        ViewObjectImpl updateDupRO2 = this.getUpdateDupRecordsBMTemp2_1();
        ViewObjectImpl updateDupRO3 = this.getUpdateDupRecordsBMTemp3_1();
        ViewObjectImpl updateDupRO4 = this.getUpdateDupRecordsBMTemp4_1();
        ViewObjectImpl tempBonusMasterVO = this.getTempSmBonusMasterVO1();
        ViewObjectImpl countVO = this.getBMURecordsCountRO1();
        Map session = ADFContext.getCurrent().getSessionScope();
        SimpleDateFormat formatter = new SimpleDateFormat("MM/dd/yyyy");
        Integer principalMapCd = new Integer(session.get("principalMapCd").toString());
        RowSetIterator updateDupRORSI = null;
        RowSetIterator updateDupRORSI2 = null;
        RowSetIterator updateDupRORSI3 = null;
        RowSetIterator updateDupRORSI4 = null;
        Map returnMap = new HashMap<String, String>();
        try {
            if (typeOfBonus.equalsIgnoreCase("B")) {
                //implementation of update_Dup_record procedure in form : scheme master upload
                System.out.println("inside c1");
                VariableValueManager vvm1 = updateDupRO1.ensureVariableManager();
                System.out.println("inside c11");
                vvm1.setVariableValue("GLOBAL_PRINCIPAL", principalMapCd);
                System.out.println("inside c12");
                vvm1.setVariableValue("global_batch", batchId);
                System.out.println("inside c13");
                updateDupRO1.executeQuery();
                //
                LOGGER.info("update_Dup_record :- No. of Dups found in SMU tempSMSchemeMaster : " +
                            updateDupRO1.getEstimatedRowCount());
                System.out.println("update_Dup_record :- No. of Dups found in SMU tempSMSchemeMaster : " +
                                   updateDupRO1.getEstimatedRowCount());
                updateDupRORSI = updateDupRO1.createRowSetIterator(null);
                while (updateDupRORSI.hasNext()) {
                    Row updateRow = updateDupRORSI.next();
                    ViewCriteria tempBMUVC = tempBonusMasterVO.getViewCriteria("TempSmBonusMasterVOCriteria");
                    VariableValueManager tempVVM = tempBMUVC.ensureVariableManager();
                    tempVVM.setVariableValue("bind_rowId", updateRow.getAttribute("Rowid1"));
                    tempBonusMasterVO.applyViewCriteria(tempBMUVC);
                    tempBonusMasterVO.executeQuery();
                    Row tempRow = tempBonusMasterVO.first();
                    tempRow.setAttribute("EaiFlag", "D");
                    tempRow.setAttribute("ErrReason",
                                         "Duplicate Combination->" + updateRow.getAttribute("BonusType") + "," +
                                         updateRow.getAttribute("Regn") + "," + updateRow.getAttribute("State") + "," +
                                         updateRow.getAttribute("ForCd") + "," + updateRow.getAttribute("FueltypeCd") +
                                         "," + updateRow.getAttribute("ModelCd") + "," +
                                         updateRow.getAttribute("VariantCd") + "," +
                                         updateRow.getAttribute("FromDate") + "," + updateRow.getAttribute("ToDate") +
                                         "," + updateRow.getAttribute("SlabCd") + "," +
                                         updateRow.getAttribute("Channel"));
                    this.getDBTransaction().commit();
                    LOGGER.info("Duplicate marked for RowId : " + updateRow.getAttribute("Rowid1"));
                }
                updateDupRORSI.closeRowSetIterator();
            }

            //implementation of update_Dup_record_temp procedure in form : scheme master upload
            if (typeOfBonus == "S") {
                //implementation of update_Dup_record procedure in form : scheme master upload
                System.out.println("inside c3");
                VariableValueManager vvm2 = updateDupRO3.ensureVariableManager();
                vvm2.setVariableValue("GLOBAL_PRINCIPAL", principalMapCd);
                vvm2.setVariableValue("global_batch", batchId);
                updateDupRO3.executeQuery();
                //
                LOGGER.info("update_Dup_record :- No. of Dups found in SMU tempSMSchemeMaster : " +
                            updateDupRO3.getEstimatedRowCount());
                System.out.println("update_Dup_record :- No. of Dups found in SMU tempSMSchemeMaster : " +
                                   updateDupRO3.getEstimatedRowCount());
                updateDupRORSI2 = updateDupRO3.createRowSetIterator(null);
                while (updateDupRORSI2.hasNext()) {
                    Row updateRow2 = updateDupRORSI2.next();
                    ViewCriteria tempBMUVC2 = tempBonusMasterVO.getViewCriteria("TempSmBonusMasterVOCriteria");
                    VariableValueManager tempVVM2 = tempBMUVC2.ensureVariableManager();
                    tempVVM2.setVariableValue("bind_rowId", updateRow2.getAttribute("Rowid1"));
                    tempBonusMasterVO.applyViewCriteria(tempBMUVC2);
                    tempBonusMasterVO.executeQuery();
                    Row tempRow2 = tempBonusMasterVO.first();
                    formatter = new SimpleDateFormat("dd-MMM-yy");
                    String fromDate = formatter.format(updateRow2.getAttribute("FromDate"));
                    String toDate = formatter.format(updateRow2.getAttribute("ToDate"));
                    tempRow2.setAttribute("EaiFlag", "D");
                    tempRow2.setAttribute("ErrReason",
                                          "Duplicate Combination->" + updateRow2.getAttribute("BonusType") + "," +
                                          updateRow2.getAttribute("Regn") + "," + updateRow2.getAttribute("State") +
                                          "," + updateRow2.getAttribute("ForCd") + "," +
                                          updateRow2.getAttribute("FueltypeCd") + "," +
                                          updateRow2.getAttribute("ModelCd") + "," +
                                          updateRow2.getAttribute("VariantCd") + "," + fromDate + "," + toDate + "," +
                                          updateRow2.getAttribute("Yom") + "," + updateRow2.getAttribute("Channel"));
                    this.getDBTransaction().commit();
                    LOGGER.info("Duplicate marked for RowId : " + updateRow2.getAttribute("Rowid1"));
                }
                updateDupRORSI2.closeRowSetIterator();
            }

            if (typeOfBonus.equalsIgnoreCase("S")) {
                //implementation of update_Dup_record procedure in form : scheme master upload
                System.out.println("inside c4");
                VariableValueManager vvm3 = updateDupRO4.ensureVariableManager();
                vvm3.setVariableValue("GLOBAL_PRINCIPAL", principalMapCd);
                vvm3.setVariableValue("global_batch", batchId);
                updateDupRO4.executeQuery();
                //
                LOGGER.info("update_Dup_record :- No. of Dups found in  tempBonusMaster : " +
                            updateDupRO4.getEstimatedRowCount());
                System.out.println("update_Dup_record :- No. of Dups found in  tempBonusMaster : " +
                                   updateDupRO4.getEstimatedRowCount());
                updateDupRORSI3 = updateDupRO4.createRowSetIterator(null);
                while (updateDupRORSI3.hasNext()) {
                    Row updateRow3 = updateDupRORSI3.next();
                    ViewCriteria tempBMUVC3 = tempBonusMasterVO.getViewCriteria("TempSmBonusMasterVOCriteria");
                    VariableValueManager tempVVM3 = tempBMUVC3.ensureVariableManager();
                    tempVVM3.setVariableValue("bind_rowId", updateRow3.getAttribute("Rowid1"));
                    tempBonusMasterVO.applyViewCriteria(tempBMUVC3);
                    tempBonusMasterVO.executeQuery();
                    Row tempRow3 = tempBonusMasterVO.first();
                    formatter = new SimpleDateFormat("dd-MMM-yy");
                    String fromDate = formatter.format(updateRow3.getAttribute("FromDate"));
                    String toDate = formatter.format(updateRow3.getAttribute("ToDate"));
                    tempRow3.setAttribute("EaiFlag", "D");
                    tempRow3.setAttribute("ErrReason",
                                          "Duplicate Combination->" + updateRow3.getAttribute("BonusType") + "," +
                                          updateRow3.getAttribute("Regn") + "," + updateRow3.getAttribute("State") +
                                          "," + updateRow3.getAttribute("ForCd") + "," +
                                          updateRow3.getAttribute("FueltypeCd") + "," +
                                          updateRow3.getAttribute("ModelCd") + "," +
                                          updateRow3.getAttribute("VariantCd") + "," + fromDate + "," + toDate + "," +
                                          updateRow3.getAttribute("BonusLoyAcqFlag") + "," +
                                          updateRow3.getAttribute("Channel"));
                    this.getDBTransaction().commit();
                    LOGGER.info("Duplicate marked for RowId : " + updateRow3.getAttribute("Rowid1"));
                }
                updateDupRORSI3.closeRowSetIterator();
            }

            if (!typeOfBonus.equalsIgnoreCase("S") && !typeOfBonus.equalsIgnoreCase("B")) {
                //implementation of update_Dup_record procedure in form : scheme master upload
                System.out.println("inside c2");
                VariableValueManager vvm4 = updateDupRO2.ensureVariableManager();
                vvm4.setVariableValue("GLOBAL_PRINCIPAL", principalMapCd);
                vvm4.setVariableValue("global_batch", batchId);
                updateDupRO2.executeQuery();
                //
                LOGGER.info("update_Dup_record :- No. of Dups found in  tempBonusMaster : " +
                            updateDupRO2.getEstimatedRowCount());
                System.out.println("update_Dup_record :- No. of Dups found in  tempBonusMaster : " +
                                   updateDupRO2.getEstimatedRowCount());
                updateDupRORSI4 = updateDupRO2.createRowSetIterator(null);
                while (updateDupRORSI4.hasNext()) {
                    Row updateRow4 = updateDupRORSI4.next();
                    ViewCriteria tempBMUVC4 = tempBonusMasterVO.getViewCriteria("TempSmBonusMasterVOCriteria");
                    VariableValueManager tempVVM4 = tempBMUVC4.ensureVariableManager();
                    tempVVM4.setVariableValue("bind_rowId", updateRow4.getAttribute("Rowid1"));
                    tempBonusMasterVO.applyViewCriteria(tempBMUVC4);
                    tempBonusMasterVO.executeQuery();
                    Row tempRow4 = tempBonusMasterVO.first();
                    formatter = new SimpleDateFormat("dd-MMM-yy");
                    String fromDate = formatter.format(updateRow4.getAttribute("FromDate"));
                    String toDate = formatter.format(updateRow4.getAttribute("ToDate"));
                    tempRow4.setAttribute("EaiFlag", "D");
                    tempRow4.setAttribute("ErrReason",
                                          "Duplicate Combination->" + updateRow4.getAttribute("BonusType") + "," +
                                          updateRow4.getAttribute("Regn") + "," + updateRow4.getAttribute("State") +
                                          "," + updateRow4.getAttribute("ForCd") + "," +
                                          updateRow4.getAttribute("FueltypeCd") + "," +
                                          updateRow4.getAttribute("ModelCd") + "," +
                                          updateRow4.getAttribute("VariantCd") + "," + fromDate + "," + toDate);
                    this.getDBTransaction().commit();
                    LOGGER.info("Duplicate marked for RowId : " + updateRow4.getAttribute("Rowid1"));
                }
                updateDupRORSI4.closeRowSetIterator();
            }
            VariableValueManager countVM = countVO.ensureVariableManager();
            countVM.setVariableValue("bind_pmc", principalMapCd);
            countVM.setVariableValue("bind_batchId", batchId);
            countVO.executeQuery();
            Row countRow = countVO.first();
            if (countRow != null) {
                returnMap.put("TotalCount", countRow.getAttribute("Totalcount").toString());
                returnMap.put("SuccessCount", countRow.getAttribute("Successcount").toString());
                returnMap.put("FailedCount", countRow.getAttribute("Failedcount").toString());
            }
            return returnMap;

        } catch (Exception e) {
            e.printStackTrace();
            LOGGER.severe("Exception : " + e.getMessage());
            return null;
        } finally {

            if (updateDupRORSI != null) {
                updateDupRORSI.closeRowSetIterator();
            }
            if (updateDupRORSI2 != null) {
                updateDupRORSI2.closeRowSetIterator();
            }
            if (updateDupRORSI3 != null) {
                updateDupRORSI3.closeRowSetIterator();
            }
            if (updateDupRORSI4 != null) {
                updateDupRORSI4.closeRowSetIterator();
            }
        }
    }

    /**
     * This method is used to insert uploaded data to Master table Form Name : BONUS MASTRE UPLOAD
     * @param batchId
     */
    public void uploadToBonusMaster(String batchId) {
        Map session = ADFContext.getCurrent().getSessionScope();
        Object principalMapCd = session.get("principalMapCd");
        Integer principalMapCdi = new Integer(principalMapCd.toString());
        ViewObjectImpl tempBonusVO = this.getTempSmBonusMasterVO1();
        System.out.println("entering add master vo");
        ViewObjectImpl BMUMasterVO = this.getSmAddBonusMasterUploadVO1();
        System.out.println("exiting add master vo");
        try {
            ViewCriteria temptoMasterVC = tempBonusVO.getViewCriteria("TempToMasterVC");
            VariableValueManager tempToMastervvm = temptoMasterVC.ensureVariableManager();
            tempToMastervvm.setVariableValue("bind_batchId", batchId);
            tempToMastervvm.setVariableValue("bind_pmc", principalMapCdi);
            tempBonusVO.applyViewCriteria(temptoMasterVC);
            tempBonusVO.executeQuery();
            LOGGER.info("No.Of rows selected to insert to SMSchemeMaster : " + tempBonusVO.getEstimatedRowCount());
            System.out.println("No.Of rows selected to insert to SMSchemeMaster : " +
                               tempBonusVO.getEstimatedRowCount());
            RowSetIterator tempRSI = tempBonusVO.createRowSetIterator(null);
            while (tempRSI.hasNext()) {
                Row tempRow = tempRSI.next();
                Row masterRow = BMUMasterVO.createRow();
                System.out.println("created new row");
                masterRow.setAttribute("BonusType", tempRow.getAttribute("BonusType"));
                masterRow.setAttribute("Regn", tempRow.getAttribute("Regn"));
                masterRow.setAttribute("State", tempRow.getAttribute("State"));
                masterRow.setAttribute("ForCd", tempRow.getAttribute("ForCd"));
                masterRow.setAttribute("Fuel", tempRow.getAttribute("FueltypeCd"));
                masterRow.setAttribute("Model", tempRow.getAttribute("ModelCd"));
                masterRow.setAttribute("VariantCd", tempRow.getAttribute("VariantCd"));
                masterRow.setAttribute("OldVehMake", tempRow.getAttribute("OldVehMake"));
                masterRow.setAttribute("OldVehModel", tempRow.getAttribute("OldVehModel"));
                masterRow.setAttribute("OldVehVariant", tempRow.getAttribute("OldVehVariant"));
                masterRow.setAttribute("FromDate", tempRow.getAttribute("FromDate"));
                masterRow.setAttribute("ToDate", tempRow.getAttribute("ToDate"));
                masterRow.setAttribute("TotBonusAdd", tempRow.getAttribute("TotBonus"));
                masterRow.setAttribute("DlrShareAdd", tempRow.getAttribute("DlrShare"));
                masterRow.setAttribute("Status", "A");
                masterRow.setAttribute("PrincipalMapCd", principalMapCdi);
                masterRow.setAttribute("Channel", tempRow.getAttribute("Channel"));
                BMUMasterVO.insertRow(masterRow);
                System.out.println("inserted");
                this.getDBTransaction().commit();
                System.out.println("comit");
                tempRow.setAttribute("EaiFlag", "U");
                System.out.println("value set to U");
                this.getDBTransaction().commit();
                System.out.println("commited");
            }
        } catch (Exception e) {
            LOGGER.info("Exception : " + e.getMessage());
        }
    }

    /**
     * Container's getter for UpdateDupRecordsBMTemp1_1.
     * @return UpdateDupRecordsBMTemp1_1
     */
    public ViewObjectImpl getUpdateDupRecordsBMTemp1_1() {
        return (ViewObjectImpl) findViewObject("UpdateDupRecordsBMTemp1_1");
    }

    /**
     * Container's getter for UpdateDupRecordsBMTemp3_1.
     * @return UpdateDupRecordsBMTemp3_1
     */
    public ViewObjectImpl getUpdateDupRecordsBMTemp3_1() {
        return (ViewObjectImpl) findViewObject("UpdateDupRecordsBMTemp3_1");
    }

    /**
     * Container's getter for UpdateDupRecordsBMTemp4_1.
     * @return UpdateDupRecordsBMTemp4_1
     */
    public ViewObjectImpl getUpdateDupRecordsBMTemp4_1() {
        return (ViewObjectImpl) findViewObject("UpdateDupRecordsBMTemp4_1");
    }

    /**
     * Container's getter for UpdateDupRecordsBMTemp2_1.
     * @return UpdateDupRecordsBMTemp2_1
     */
    public ViewObjectImpl getUpdateDupRecordsBMTemp2_1() {
        return (ViewObjectImpl) findViewObject("UpdateDupRecordsBMTemp2_1");
    }

    /**
     * Container's getter for UpdateDupRecordsBMTemp1RO1.
     * @return UpdateDupRecordsBMTemp1RO1
     */
    public ViewObjectImpl getUpdateDupRecordsBMTemp1RO1() {
        return (ViewObjectImpl) findViewObject("UpdateDupRecordsBMTemp1RO1");
    }

    /**
     * Container's getter for BMURecordsCountRO1.
     * @return BMURecordsCountRO1
     */
    public ViewObjectImpl getBMURecordsCountRO1() {
        return (ViewObjectImpl) findViewObject("BMURecordsCountRO1");
    }


    /**
     * Container's getter for CorporateMasterUploadErrorStatusRVO1.
     * @return CorporateMasterUploadErrorStatusRVO1
     */
    public ViewObjectImpl getCorporateMasterUploadErrorStatusRVO1() {
        return (ViewObjectImpl) findViewObject("CorporateMasterUploadErrorStatusRVO1");
    }

    /**
     * Container's getter for AdditionalBonusHORO1.
     * @return AdditionalBonusHORO1
     */
    public ViewObjectImpl getAdditionalBonusHORO1() {
        return (ViewObjectImpl) findViewObject("AdditionalBonusHORO1");
    }


    /**
     * Container's getter for BonusMasterHORO1.
     * @return BonusMasterHORO1
     */
    public ViewObjectImpl getBonusMasterHORO1() {
        return (ViewObjectImpl) findViewObject("BonusMasterHORO1");
    }

    /**
     * Container's getter for StockLiquidationHORO1.
     * @return StockLiquidationHORO1
     */
    public ViewObjectImpl getStockLiquidationHORO1() {
        return (ViewObjectImpl) findViewObject("StockLiquidationHORO1");
    }

    /**
     * Container's getter for BonusMasterSearchRO1.
     * @return BonusMasterSearchRO1
     */
    public ViewObjectImpl getBonusMasterSearchRO1() {
        return (ViewObjectImpl) findViewObject("BonusMasterSearchRO1");
    }

    public String filterDataBonusMasterAccptReject(Integer pmc) {
        ViewObjectImpl voiBonusSt = this.getBonusMasterSearchRO1();
        BonusMasterSearchRORowImpl bonusStRw = (BonusMasterSearchRORowImpl) voiBonusSt.getCurrentRow();
        ViewObjectImpl voiBonusRo = this.getBonusMasterHORO1();
        ViewObjectImpl voiAdditionalRo = this.getAdditionalBonusHORO1();
        ViewObjectImpl voiStokcRo = this.getStockLiquidationHORO1();

        Map session = ADFContext.getCurrent().getSessionScope();
        String userCode = (String) session.get("userCode");

        if (bonusStRw.getMasterType() == null) {
            return "N";
        }
        if (bonusStRw.getMasterType().equalsIgnoreCase("B")) {
            voiBonusRo.setNamedWhereClauseParam("p_bonus_type", bonusStRw.getBonusType());
            voiBonusRo.setNamedWhereClauseParam("bind_channel", bonusStRw.getChannelType());
            voiBonusRo.setNamedWhereClauseParam("bind_forCode", bonusStRw.getCityDesc());
            voiBonusRo.setNamedWhereClauseParam("bind_fromDate", bonusStRw.getFromDate());
            voiBonusRo.setNamedWhereClauseParam("bind_fuelType", bonusStRw.getFuelTypeDesc());
            voiBonusRo.setNamedWhereClauseParam("bind_modelCode", bonusStRw.getModelDesc());
            voiBonusRo.setNamedWhereClauseParam("bind_pmc", pmc);
            voiBonusRo.setNamedWhereClauseParam("p_regn", bonusStRw.getRegion());
            voiBonusRo.setNamedWhereClauseParam("bind_state", bonusStRw.getStateDesc());
            voiBonusRo.setNamedWhereClauseParam("bind_toDate", bonusStRw.getTODate());
            voiBonusRo.setNamedWhereClauseParam("bind_variantCode", bonusStRw.getVariantDesc());
            voiBonusRo.setNamedWhereClauseParam("bind_userId", userCode);
            voiBonusRo.executeQuery();
            if (voiBonusRo.getEstimatedRowCount() <= 0) {
                return null;
            }
        } else if (bonusStRw.getMasterType().equalsIgnoreCase("A")) {
            voiAdditionalRo.setNamedWhereClauseParam("bind_bonusType", bonusStRw.getBonusType());
            voiAdditionalRo.setNamedWhereClauseParam("bind_channel", bonusStRw.getChannelType());
            voiAdditionalRo.setNamedWhereClauseParam("bind_forCode", bonusStRw.getCityDesc());
            voiAdditionalRo.setNamedWhereClauseParam("bind_fromDate", bonusStRw.getFromDate());
            voiAdditionalRo.setNamedWhereClauseParam("bind_fuelType", bonusStRw.getFuelTypeDesc());
            voiAdditionalRo.setNamedWhereClauseParam("bind_modelCode", bonusStRw.getModelDesc());
            voiAdditionalRo.setNamedWhereClauseParam("bind_pmc", pmc);
            voiAdditionalRo.setNamedWhereClauseParam("bind_region", bonusStRw.getRegion());
            voiAdditionalRo.setNamedWhereClauseParam("bind_state", bonusStRw.getStateDesc());
            voiAdditionalRo.setNamedWhereClauseParam("bind_toDate", bonusStRw.getTODate());
            voiAdditionalRo.setNamedWhereClauseParam("bind_variantCode", bonusStRw.getVariantDesc());
            voiAdditionalRo.setNamedWhereClauseParam("bind_userId", userCode);
            voiAdditionalRo.executeQuery();
            if (voiAdditionalRo.getEstimatedRowCount() <= 0) {
                return null;
            }
        } else if (bonusStRw.getMasterType().equalsIgnoreCase("S")) {
            voiStokcRo.setNamedWhereClauseParam("p_bonus_type", bonusStRw.getBonusType());
            voiStokcRo.setNamedWhereClauseParam("bind_channel", bonusStRw.getChannelType());
            voiStokcRo.setNamedWhereClauseParam("bind_forCode", bonusStRw.getCityDesc());
            voiStokcRo.setNamedWhereClauseParam("bind_fromDate", bonusStRw.getFromDate());
            voiStokcRo.setNamedWhereClauseParam("bind_fuelType", bonusStRw.getFuelTypeDesc());
            voiStokcRo.setNamedWhereClauseParam("bind_modelCode", bonusStRw.getModelDesc());
            voiStokcRo.setNamedWhereClauseParam("bind_pmc", pmc);
            voiStokcRo.setNamedWhereClauseParam("p_regn", bonusStRw.getRegion());
            voiStokcRo.setNamedWhereClauseParam("bind_state", bonusStRw.getStateDesc());
            voiStokcRo.setNamedWhereClauseParam("bind_toDate", bonusStRw.getTODate());
            voiStokcRo.setNamedWhereClauseParam("bind_variantCode", bonusStRw.getVariantDesc());
            voiStokcRo.setNamedWhereClauseParam("bind_userId", userCode);
            voiStokcRo.executeQuery();
            if (voiStokcRo.getEstimatedRowCount() <= 0) {
                return null;
            }
        }
        return "Y";
    }

    /**
     * Purpose of this method is to reset page data on click of Reset Button.
     * Form Name:-Bonus Master Closure
     **/
    public void resetBonusMastrHOAcptRjctVO() {
        this.getBonusMasterSearchRO1().executeQuery();
        this.getBonusMasterHORO1().executeEmptyRowSet();
        this.getAdditionalBonusHORO1().executeEmptyRowSet();
        this.getStockLiquidationHORO1().executeEmptyRowSet();
    }

    /**Method to insert data from Temp table to Main table for Corporate Master Upload
     * @param batchId
     * @param rw
     * @return
     */
    public HashMap<String, String> insertMulCorporate(String batchId, Row rw) {
        LOGGER.info("** inside insertMulCorporate - Corporate Mater Upload **");
        HashMap<String, String> hashMpVal = new HashMap<String, String>();

        String cpId = null;
        String errMsg = null;
        DBTransaction trx = (DBTransaction) getTransaction();
        CallableStatement st = null;
        Map session = ADFContext.getCurrent().getSessionScope();
        Integer principalMapCd = Integer.valueOf(session.get("principalMapCd").toString());
        String userCd = session.get("userId").toString().toUpperCase();
        if (batchId != null && rw != null) {
            String cpType = rw.getAttribute("CpType") != null ? (String) rw.getAttribute("CpType") : "";
            String cpName = rw.getAttribute("CpName") != null ? (String) rw.getAttribute("CpName") : "";
            if (rw.getAttribute("selChBx") != null && (Boolean) rw.getAttribute("selChBx")) {
                String sql = "SELECT seq_cp_num.NEXTVAL  FROM DUAL WHERE DUMMY = 'X'";
                try {
                    long millis = System.currentTimeMillis();
                    java.sql.Date currdate = new java.sql.Date(millis);
                    ResultSet rs = getDBTransaction().createStatement(0).executeQuery(sql);
                    if (rs.next()) {
                        cpId = rs.getString(1);
                        hashMpVal.put("cpId", cpId);
                    }
                    if (cpId != null) {

                        String stmt =
                            "INSERT INTO mul_corporate\n" + "    (CP_NUMBER,\n" + "     CP_TYPE,\n" +
                            "     CP_NAME,\n" + "     CP_HO_ADD1,\n" + "     CP_HO_ADD2,\n" +
                            "     CP_TOT_BRANCHES,\n" + "     CP_CEO_EMAIL,\n" + "     CP_DIR_HEAD_VP_EMAIL,\n" +
                            "     CP_ANNUAL_TURNOVER_IN_CRORES,\n" + "     CP_TOT_EMP,\n" + "     CP_MBL_NUMBER,\n" +
                            "     CP_OFF_NUMBER,\n" + "     CP_DESIGNATION,\n" + "     HR_HEAD_NAME,\n" +
                            "     ADM_CONT_PERSON,\n" + "     EMAIL,\n" + "     CITY_CD,\n" + "     STATE_CD,\n" +
                            "     FAX,\n" + "     HR_CONT_PHONE,\n" + "     CREATED_BY,\n" + "     CREATED_DATE,\n" +
                            "     PRINCIPAL_MAP_CD)\n" + "  VALUES (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)";
                        st = trx.createCallableStatement(stmt, 0);
                        st.setString(1, cpId);
                        st.setString(2, rw.getAttribute("CpType") != null ? (String) rw.getAttribute("CpType") : "");
                        st.setString(3, rw.getAttribute("CpName") != null ? (String) rw.getAttribute("CpName") : "");
                        st.setString(4,
                                     rw.getAttribute("CpHoAdd1") != null ? (String) rw.getAttribute("CpHoAdd1") : "");
                        st.setString(5,
                                     rw.getAttribute("CpHoAdd2") != null ? (String) rw.getAttribute("CpHoAdd2") : "");
                        st.setString(6,
                                     rw.getAttribute("CpTotBranches") != null ?
                                     (String) rw.getAttribute("CpTotBranches") : "");
                        st.setString(7,
                                     rw.getAttribute("CpCeoEmail") != null ? (String) rw.getAttribute("CpCeoEmail") :
                                     "");
                        st.setString(8,
                                     rw.getAttribute("CpDirHeadVpEmail") != null ?
                                     (String) rw.getAttribute("CpDirHeadVpEmail") : "");
                        st.setBigDecimal(9,
                                         rw.getAttribute("CpAnnualTurnoverInCrores") != null ?
                                         (BigDecimal) rw.getAttribute("CpAnnualTurnoverInCrores") : BigDecimal.ZERO);
                        st.setLong(10, rw.getAttribute("CpTotEmp") != null ? (Long) rw.getAttribute("CpTotEmp") : 0);
                        st.setString(11,
                                     rw.getAttribute("CpMblNumber") != null ? (String) rw.getAttribute("CpMblNumber") :
                                     "");
                        st.setString(12,
                                     rw.getAttribute("CpOffNumber") != null ? (String) rw.getAttribute("CpOffNumber") :
                                     "");
                        st.setString(13,
                                     rw.getAttribute("CpDesignation") != null ?
                                     (String) rw.getAttribute("CpDesignation") : "");
                        st.setString(14,
                                     rw.getAttribute("HrHeadName") != null ? (String) rw.getAttribute("HrHeadName") :
                                     "");
                        st.setString(15,
                                     rw.getAttribute("AdmContPerson") != null ?
                                     (String) rw.getAttribute("AdmContPerson") : "");
                        st.setString(16, rw.getAttribute("Email") != null ? (String) rw.getAttribute("Email") : "");
                        st.setString(17, rw.getAttribute("CityCd") != null ? (String) rw.getAttribute("CityCd") : "");
                        st.setString(18, rw.getAttribute("StateCd") != null ? (String) rw.getAttribute("StateCd") : "");
                        st.setString(19, rw.getAttribute("Fax") != null ? (String) rw.getAttribute("Fax") : "");
                        st.setString(20,
                                     rw.getAttribute("HrContPhone") != null ? (String) rw.getAttribute("HrContPhone") :
                                     "");
                        st.setString(21, userCd);
                        st.setDate(22, currdate);
                        st.setInt(23, principalMapCd);
                        st.executeUpdate();

                        String updateSql =
                            "UPDATE temp_mul_corporate\n" + "       SET CP_ERR_FLAG = 'U'\n" +
                            "     WHERE created_date >= TRUNC(SYSDATE) - 4\n" +
                            "                AND created_date < TRUNC(SYSDATE) + 1\n" +
                            "                AND batch_id is not null\n" + "                AND batch_id = '" +
                            batchId + "'\n" + "                AND cp_err_flag = 'Y'\n" +
                            "                AND cp_type = '" + cpType + "'\n" + "                AND cp_name = '" +
                            cpName + "' \n" + "                AND principal_map_cd =" + principalMapCd;
                        st = trx.createCallableStatement(updateSql, 0);
                        st.executeUpdate();
                        errMsg = "N";
                        hashMpVal.put("errMsg", errMsg);


                    }

                } catch (Exception e) {
                    errMsg = "Y";
                    hashMpVal.put("errMsg", errMsg);

                    e.printStackTrace();
                } finally {
                    try {
                        if (st != null) {
                            st.close();
                        }
                    } catch (Exception e) {
                    }
                }
            }
        }
        LOGGER.info("** end insertMulCorporate - Corporate Mater Upload **");
        return hashMpVal;
    }

    /**Mrthod to delete data from temp table for Corporate Master Upload
     * @param batch string value
     */
    public void deleteTempCorporateMast(String batch) {
        LOGGER.info("** inside deleteTempCorporateMast -- Corporate Master Upload **");
        DBTransaction trx = (DBTransaction) getTransaction();
        CallableStatement st = null;
        Map session = ADFContext.getCurrent().getSessionScope();
        Integer principalMapCd = Integer.valueOf(session.get("principalMapCd").toString());
        try {
            if (batch != null) {

                String delQuery =
                    "DELETE FROM temp_mul_corporate \n" + "     WHERE created_date >= TRUNC(SYSDATE) - 4\n" +
                    "                AND created_date < TRUNC(SYSDATE) + 1\n" +
                    "                AND batch_id is not null\n" + "                AND batch_id = '" + batch + "'\n" +
                    "                AND cp_err_flag!='U'\n" + "                AND principal_map_cd =" +
                    principalMapCd;
                st = trx.createCallableStatement(delQuery, 0);
                st.executeUpdate();
            }
        } catch (Exception e) {
            e.printStackTrace();
        } finally {
            try {
                if (st != null) {
                    st.close();
                }
            } catch (Exception e) {
            }
        }
        LOGGER.info("** end deleteTempCorporateMast -- Corporate Master Upload **");

    }

    /**Method to execcute Empty rowset for corporate Master Upload
     */
    public void emptyRowsCorpMastUpload() {
        LOGGER.info("** inside emptyRowsCorpMastUpload- Corporate Master Upload");
        this.getCorpMasterUploadFetchDtlsRVO1().executeEmptyRowSet();
        LOGGER.info("** end of emptyRowsCorpMastUpload- Corporate Master Upload");

    }


    /**
     * Container's getter for ExportGroupMasterRO1.
     * @return ExportGroupMasterRO1
     */
    public ViewObjectImpl getExportGroupMasterRO1() {
        return (ViewObjectImpl) findViewObject("ExportGroupMasterRO1");
    }

    public String acceptBonusMasterHOAccptRject() {
        ViewObjectImpl bonusMFilterVO = this.getBonusMasterSearchRO1();
        BonusMasterSearchRORowImpl bonusStRw = (BonusMasterSearchRORowImpl) bonusMFilterVO.getCurrentRow();
        ViewObjectImpl bonusMHOVO = this.getBonusMasterHORO1();
        ViewObjectImpl addBMHOVO = this.getAdditionalBonusHORO1();
        ViewObjectImpl StockBMHOVO = this.getStockLiquidationHORO1();

        ViewObjectImpl voiBonusMaster = this.getSmBonusMasterVO1();
        ViewObjectImpl voiAddBonus = this.getSmAddBonusMasterVO1();
        ViewObjectImpl voiBonusStkl = this.getSmBonusStklMasterVO1();

        Map session = ADFContext.getCurrent().getSessionScope();
        Object principalMapCd = session.get("principalMapCd");
        Integer principalMapCdi = new Integer(principalMapCd.toString());
        String userCode = (String) session.get("userId");

        java.sql.Timestamp datetime = new java.sql.Timestamp(System.currentTimeMillis());
        oracle.jbo.domain.Date daTime = new oracle.jbo.domain.Date(datetime);
        String result = "";

        String masterType = (String) bonusStRw.getMasterType();
        if (masterType == null) {
            result = "N";
        }
        if ("B".equals(masterType)) {
            RowSetIterator bonusMHOVORsi = bonusMHOVO.createRowSetIterator(null);
            while (bonusMHOVORsi.hasNext()) {
                Row bonusRoRw = bonusMHOVORsi.next();
                if ("Y".equals(bonusRoRw.getAttribute("BonusSelectYN"))) {
                    ViewCriteria bonusMasterVC = voiBonusMaster.getViewCriteria("PmcAndIdVC");
                    VariableValueManager vvBonusMaster = bonusMasterVC.ensureVariableManager();
                    vvBonusMaster.setVariableValue("bind_rowId", bonusRoRw.getAttribute("Rowid1"));
                    vvBonusMaster.setVariableValue("bind_pmc", principalMapCdi);
                    voiBonusMaster.applyViewCriteria(bonusMasterVC);
                    voiBonusMaster.executeQuery();
                    if (voiBonusMaster.getEstimatedRowCount() > 0) {
                        Row bonusRow = voiBonusMaster.first();
                        bonusRow.setAttribute("ModifiedBy", userCode);
                        bonusRow.setAttribute("ModifiedDate", daTime);
                        bonusRow.setAttribute("Status", "A");
                        getDBTransaction().commit();
                    } else {
                        return null;
                    }
                    getDBTransaction().commit();
                }
            }
            bonusMHOVORsi.closeRowSetIterator();
        } else if ("A".equals(masterType)) {
            RowSetIterator additionalRsi = addBMHOVO.createRowSetIterator(null);
            while (additionalRsi.hasNext()) {
                Row additionalRw = additionalRsi.next();
                if ("Y".equals(additionalRw.getAttribute("SelectYN"))) {
                    ViewCriteria addBonusVC = voiAddBonus.getViewCriteria("PmcAndIdVC");
                    VariableValueManager vvAddBonus = addBonusVC.ensureVariableManager();
                    vvAddBonus.setVariableValue("bind_rowId", additionalRw.getAttribute("Rowid1"));
                    vvAddBonus.setVariableValue("bind_pmc", principalMapCdi);
                    voiAddBonus.applyViewCriteria(addBonusVC);
                    voiAddBonus.executeQuery();
                    if (voiAddBonus.getEstimatedRowCount() > 0) {
                        Row addBonusRow = voiAddBonus.first();
                        addBonusRow.setAttribute("ModifiedBy", userCode);
                        addBonusRow.setAttribute("ModifiedDate", daTime);
                        addBonusRow.setAttribute("Status", "A");
                    } else {
                        return null;
                    }
                    getDBTransaction().commit();
                }
            }
            additionalRsi.closeRowSetIterator();
        }
        if ("S".equals(masterType)) {
            RowSetIterator stockRsi = StockBMHOVO.createRowSetIterator(null);
            while (stockRsi.hasNext()) {
                Row stockRw = stockRsi.next();
                if ("Y".equals(stockRw.getAttribute("StockSelectYN"))) {
                    System.out.println("STOCK ROWID-->" + stockRw.getAttribute("Rowid1"));
                    ViewCriteria bonusStklVC = voiBonusStkl.getViewCriteria("PmcAndIdVC");
                    VariableValueManager vvBonusStkl = bonusStklVC.ensureVariableManager();
                    vvBonusStkl.setVariableValue("bind_rowId", stockRw.getAttribute("Rowid1"));
                    vvBonusStkl.setVariableValue("bind_pmc", principalMapCdi);
                    voiBonusStkl.applyViewCriteria(bonusStklVC);
                    voiBonusStkl.executeQuery();
                    if (voiBonusStkl.getEstimatedRowCount() > 0) {
                        Row bonusStklRow = voiBonusStkl.first();
                        bonusStklRow.setAttribute("ModifiedBy", userCode);
                        bonusStklRow.setAttribute("ModifiedDate", daTime);
                        bonusStklRow.setAttribute("Status", "A");
                    } else {
                        return null;
                    }
                    getDBTransaction().commit();
                }
            }
            stockRsi.closeRowSetIterator();
        }
        return result;
    }

    /**
     * Container's getter for SmBonusMasterHistVO1.
     * @return SmBonusMasterHistVO1
     */
    public ViewObjectImpl getSmBonusMasterHistVO1() {
        return (ViewObjectImpl) findViewObject("SmBonusMasterHistVO1");
    }

    /**
     * Container's getter for BonusMasterRejectQueryRO1.
     * @return BonusMasterRejectQueryRO1
     */
    public ViewObjectImpl getBonusMasterRejectQueryRO1() {
        return (ViewObjectImpl) findViewObject("BonusMasterRejectQueryRO1");
    }

    public String rejectBonusMasterHOAccptRject() {
        ViewObjectImpl bonusMFilterVO = this.getBonusMasterSearchRO1();
        BonusMasterSearchRORowImpl bonusStRw = (BonusMasterSearchRORowImpl) bonusMFilterVO.getCurrentRow();
        ViewObjectImpl bonusMHOVO = this.getBonusMasterHORO1();
        ViewObjectImpl addBMHOVO = this.getAdditionalBonusHORO1();
        ViewObjectImpl StockBMHOVO = this.getStockLiquidationHORO1();
        ViewObject rejectQueryVO = this.getBonusMasterRejectQueryRO1().getViewObject();
        ViewObjectImpl bonusMHistVO = this.getSmBonusMasterHistVO1();

        ViewObjectImpl voiBonusMaster = this.getSmBonusMasterVO1();
        ViewObjectImpl voiAddBonus = this.getSmAddBonusMasterVO1();
        ViewObjectImpl voiBonusStkl = this.getSmBonusStklMasterVO1();

        Map session = ADFContext.getCurrent().getSessionScope();
        Object principalMapCd = session.get("principalMapCd");
        Integer principalMapCdi = new Integer(principalMapCd.toString());
        String userId = (String) session.get("userId");

        java.sql.Timestamp datetime = new java.sql.Timestamp(System.currentTimeMillis());
        oracle.jbo.domain.Date daTime = new oracle.jbo.domain.Date(datetime);
        String result = "";

        String masterType = (String) bonusStRw.getMasterType();
        if (masterType == null) {
            result = "N";
        }
        if ("B".equals(masterType)) {

            RowSetIterator bonusMHOVORsi = bonusMHOVO.createRowSetIterator(null);
            while (bonusMHOVORsi.hasNext()) {
                Row bonusRoRw = bonusMHOVORsi.next();
                if ("Y".equals(bonusRoRw.getAttribute("BonusSelectYN"))) {
                    rejectQueryVO.setNamedWhereClauseParam("bind_rowid", bonusRoRw.getAttribute("Rowid1"));
                    rejectQueryVO.executeQuery();
                    if (rejectQueryVO.getEstimatedRowCount() > 0) {
                        Row rjectbonusRow = rejectQueryVO.first();
                        Row bonusMHistRow = bonusMHistVO.createRow();
                        bonusMHistRow.setAttribute("BonusType", rjectbonusRow.getAttribute("BonusType"));
                        bonusMHistRow.setAttribute("Regn", rjectbonusRow.getAttribute("Regn"));
                        bonusMHistRow.setAttribute("State", rjectbonusRow.getAttribute("State"));
                        bonusMHistRow.setAttribute("ForCd", rjectbonusRow.getAttribute("ForCd"));
                        bonusMHistRow.setAttribute("FueltypeCd", rjectbonusRow.getAttribute("FueltypeCd"));
                        bonusMHistRow.setAttribute("ModelCd", rjectbonusRow.getAttribute("ModelCd"));
                        bonusMHistRow.setAttribute("VariantCd", rjectbonusRow.getAttribute("VariantCd"));
                        bonusMHistRow.setAttribute("FromDate", rjectbonusRow.getAttribute("FromDate"));
                        bonusMHistRow.setAttribute("ToDate", rjectbonusRow.getAttribute("ToDate"));
                        bonusMHistRow.setAttribute("TotBonus", rjectbonusRow.getAttribute("TotBonus"));
                        bonusMHistRow.setAttribute("DlrShare", rjectbonusRow.getAttribute("DlrShare"));
                        bonusMHistRow.setAttribute("MsilShare", rjectbonusRow.getAttribute("MsilShare"));
                        bonusMHistRow.setAttribute("CreatedBy", rjectbonusRow.getAttribute("CreatedBy"));
                        bonusMHistRow.setAttribute("ModifiedBy", userId);
                        bonusMHistRow.setAttribute("ActionDate", rjectbonusRow.getAttribute("ActionDate"));
                        bonusMHistRow.setAttribute("CloseDate", rjectbonusRow.getAttribute("CloseDate"));
                        bonusMHistRow.setAttribute("Status", "R");
                        bonusMHistRow.setAttribute("PrincipalMapCd", principalMapCdi);
                        bonusMHistRow.setAttribute("SlabCd", rjectbonusRow.getAttribute("SlabCd"));
                        bonusMHistRow.setAttribute("BonusLoyAcqFlag", rjectbonusRow.getAttribute("BonusLoyAcqFlag"));
                        bonusMHistRow.setAttribute("CreatedDate", datetime);
                        bonusMHistRow.setAttribute("ModifiedDate", datetime);
                        rejectQueryVO.insertRow(bonusMHistRow);
                        getDBTransaction().commit();
                    }
                    ViewCriteria bonusMasterVC = voiBonusMaster.getViewCriteria("PmcAndIdVC");
                    VariableValueManager vvBonusMaster = bonusMasterVC.ensureVariableManager();
                    vvBonusMaster.setVariableValue("bind_rowId", bonusRoRw.getAttribute("Rowid1"));
                    System.out.println("Rowid1" + bonusRoRw.getAttribute("Rowid1"));
                    vvBonusMaster.setVariableValue("bind_pmc", principalMapCdi);
                    voiBonusMaster.applyViewCriteria(bonusMasterVC);
                    voiBonusMaster.executeQuery();
                    if (voiBonusMaster.getEstimatedRowCount() > 0) {
                        Row bonusRow = voiBonusMaster.first();
                        System.out.println("rowdelete1" + bonusRow.getAttribute("ModelCd"));
                        bonusRow.remove();
                        getDBTransaction().commit();
                    } else {
                        return null;
                    }
                    getDBTransaction().commit();
                }
            }
            bonusMHOVORsi.closeRowSetIterator();
        } else if ("A".equals(masterType)) {
            RowSetIterator additionalRsi = addBMHOVO.createRowSetIterator(null);
            while (additionalRsi.hasNext()) {
                Row additionalRw = additionalRsi.next();
                if ("Y".equals(additionalRw.getAttribute("SelectYN"))) {
                    ViewCriteria addBonusVC = voiAddBonus.getViewCriteria("PmcAndIdVC");
                    VariableValueManager vvAddBonus = addBonusVC.ensureVariableManager();
                    vvAddBonus.setVariableValue("bind_rowId", additionalRw.getAttribute("Rowid1"));
                    vvAddBonus.setVariableValue("bind_pmc", principalMapCdi);
                    voiAddBonus.applyViewCriteria(addBonusVC);
                    voiAddBonus.executeQuery();
                    if (voiAddBonus.getEstimatedRowCount() > 0) {
                        Row addBonusRow = voiAddBonus.first();
                        addBonusRow.setAttribute("ModifiedBy", userId);
                        addBonusRow.setAttribute("ModifiedDate", daTime);
                        addBonusRow.setAttribute("Status", "R");
                    } else {
                        return null;
                    }
                    getDBTransaction().commit();
                }
            }
            additionalRsi.closeRowSetIterator();
        }
        if ("S".equals(masterType)) {
            RowSetIterator stockRsi = StockBMHOVO.createRowSetIterator(null);
            while (stockRsi.hasNext()) {
                Row stockRw = stockRsi.next();
                if ("Y".equals(stockRw.getAttribute("StockSelectYN"))) {
                    System.out.println("STOCK ROWID-->" + stockRw.getAttribute("Rowid1"));
                    ViewCriteria bonusStklVC = voiBonusStkl.getViewCriteria("PmcAndIdVC");
                    VariableValueManager vvBonusStkl = bonusStklVC.ensureVariableManager();
                    vvBonusStkl.setVariableValue("bind_rowId", stockRw.getAttribute("Rowid1"));
                    vvBonusStkl.setVariableValue("bind_pmc", principalMapCdi);
                    voiBonusStkl.applyViewCriteria(bonusStklVC);
                    voiBonusStkl.executeQuery();
                    if (voiBonusStkl.getEstimatedRowCount() > 0) {
                        Row bonusStklRow = voiBonusStkl.first();
                        bonusStklRow.setAttribute("ModifiedBy", userId);
                        bonusStklRow.setAttribute("ModifiedDate", daTime);
                        bonusStklRow.setAttribute("Status", "R");
                    } else {
                        return null;
                    }
                    getDBTransaction().commit();
                }
            }
            stockRsi.closeRowSetIterator();
        }
        return result;
    }

    /**To generate batchId for Corporate Master Upload
     * @param FinYear
     * @return
     */
    public String generateCorporateMastUploadBatch(int FinYear) {
        LOGGER.info("** inside generateCorporateMastUploadBatch()- Corporate Master Upload**");
        BigDecimal cnt = new BigDecimal(0);
        String batchId = null;
        Map session = ADFContext.getCurrent().getSessionScope();
        Integer principalMapCd = Integer.valueOf(session.get("principalMapCd").toString());
        String sql =
            "SELECT  nvl(max(to_number(substr(batch_id,7,14))),0)+1   FROM muldms.temp_mul_corporate WHERE created_date >= trunc(SYSDATE - 60)\n" +
            "       and principal_map_cd =" + principalMapCd;
        try {
            ResultSet rs = getDBTransaction().createStatement(0).executeQuery(sql);
            if (rs.next()) {
                cnt = rs.getBigDecimal(1);

            }
            String sql1 = "select 'CORP'||substr('" + FinYear + "',3,2)||lpad(" + cnt + ",8,'0') from dual";
            ResultSet rs1;
            rs1 = getDBTransaction().createStatement(0).executeQuery(sql1);
            if (rs1.next()) {
                batchId = rs1.getString(1);
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
        LOGGER.info("** end of generateCorporateMastUploadBatch()- Corporate Master Upload**");
        return batchId;

    }


    /**
     * Container's getter for DealerQueryRO1.
     * @return DealerQueryRO1
     */
    public DealerQueryROImpl getDealerQueryRO1() {
        return (DealerQueryROImpl) findViewObject("DealerQueryRO1");
    }

    /**
     * Container's getter for OutletQueryRO1.
     * @return OutletQueryRO1
     */
    public OutletQueryROImpl getOutletQueryRO1() {
        return (OutletQueryROImpl) findViewObject("OutletQueryRO1");
    }

    /**
     * Container's getter for ZonalApprvRejectSchemeSearchRO1.
     * @return ZonalApprvRejectSchemeSearchRO1
     */
    public ZonalApprvRejectSchemeSearchROImpl getZonalApprvRejectSchemeSearchRO1() {
        return (ZonalApprvRejectSchemeSearchROImpl) findViewObject("ZonalApprvRejectSchemeSearchRO1");
    }

    /**
     * Container's getter for TempSmSchemeMasterRO1.
     * @return TempSmSchemeMasterRO1
     */
    public ViewObjectImpl getTempSmSchemeMasterRO1() {
        return (ViewObjectImpl) findViewObject("TempSmSchemeMasterRO1");
    }

    public String addCustomerColorOrNameChnge(String pType, String pModel, String pVariant, java.sql.Date pStartDate,
                                              java.sql.Date pEndDate, java.sql.Date pClosureDate, String pParentGroup,
                                              Integer pDealerMapCd, String pLocCd, String pDlrcdForCd,
                                              String pBookingNum, String pColor, String pCustName, String pFlag,
                                              String PUserId) {

        System.out.println("pTypeInsideAmimpl***" + pType);
        DBTransaction trx = (DBTransaction) getTransaction();
        CallableStatement st = null;
        String error_msg = null;
        ViewObject colorVo = this.getCustomerColorChangeRO1();
        Row colorRow = colorVo.getCurrentRow();
        ViewObject nameVo = this.getCustomerNameChangeRO1();
        Row nameRow = nameVo.getCurrentRow();

        try {
            // 1. Define the PL/SQL block for the statement to invoke
            String stmt = "begin SP_INSERT_VEHNAME_CLRCHANGE (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?); commit;end;";
            // 2. Create the CallableStatement for the PL/SQL block
            st = trx.createCallableStatement(stmt, 0);
            // 3. Register the positions and types of the OUT parameters

            // 4. Set the bind values of the IN parameters
            System.out.println((String) nameRow.getAttribute("DealerCdForCd"));
            System.out.println((String) nameRow.getAttribute("BookingNo"));
            System.out.println("pType***" + pType);
            st.setString(1, pType);
            if ("C".equalsIgnoreCase(pType)) {
                st.setString(2, (String) colorRow.getAttribute("ModelCode"));
                st.setString(3, (String) colorRow.getAttribute("VarientCode"));
                st.setDate(4, (java.sql.Date) colorRow.getAttribute("BookingStartDate"));
                st.setDate(5, (java.sql.Date) colorRow.getAttribute("BookingEndDate"));
                st.setDate(6, (java.sql.Date) colorRow.getAttribute("ClosureDate"));
            } else {
                st.setString(2, null);
                st.setDate(4, null);
                st.setDate(5, null);
                st.setDate(6, null);
            }
            if ("V".equalsIgnoreCase(pType)) {
                st.setString(3, (String) nameRow.getAttribute("VarientCode"));
                st.setString(7, (String) nameRow.getAttribute("ParentGroup"));
                st.setInt(8, (Integer) nameRow.getAttribute("DealerMapCd"));
                st.setString(9, (String) nameRow.getAttribute("LocCd"));
                st.setString(10, (String) nameRow.getAttribute("DealerCdForCd"));
                st.setString(11, (String) nameRow.getAttribute("BookingNo"));
                st.setString(12, (String) nameRow.getAttribute("ColorCode"));
                st.setString(13, (String) nameRow.getAttribute("CustomerName"));
                st.setString(14, (String) nameRow.getAttribute("Flag"));
                st.setString(15, (String) nameRow.getAttribute("VariantChange"));
                st.setString(16, (String) nameRow.getAttribute("ColorChange"));
            } else {
                st.setString(7, null);
                st.setInt(8, 0);
                st.setString(9, null);
                st.setString(10, null);
                st.setString(11, null);
                st.setString(12, null);
                st.setString(13, null);
                st.setString(14, null);
                st.setString(15, null);
                st.setString(16, null);
            }

            st.setString(17, PUserId);

            st.registerOutParameter(18, Types.INTEGER);
            st.registerOutParameter(19, Types.VARCHAR);
            // 5. Execute the statement
            st.executeUpdate();
            this.getDBTransaction().commit();
            int err = st.getInt(18);
            error_msg = st.getString(19);
            return error_msg;


        } catch (Exception sqle) {
            // TODO: Add catch code
            sqle.printStackTrace();
        } finally {
            try {
                if (st != null) {
                    st.close();
                }
            } catch (Exception e) {
            }
        }
        return error_msg;

    }

    public String custColorChangeSearch(String variantCd, String modelCd, java.sql.Date startDate,
                                        java.sql.Date endDate, java.sql.Date closureDate) {
        try {
            ViewObjectImpl vo = this.getSmBookClrAllowVO1();
            // System.out.println(vo.getQuery());
            ViewCriteria vc = vo.getViewCriteria("SmBookClrAllowVOCriteria");
            vo.applyViewCriteria(vc);
            vo.setNamedWhereClauseParam("bind_closureDate", closureDate);
            vo.setNamedWhereClauseParam("bind_endDate", endDate);
            vo.setNamedWhereClauseParam("bind_modelCd", modelCd);
            vo.setNamedWhereClauseParam("bind_startDate", startDate);
            vo.setNamedWhereClauseParam("bind_variantCd", variantCd);
            //   System.out.println(vo.getQuery());
            vo.executeQuery();
            System.out.println(vo.getEstimatedRowCount() + "rowcount---");
            if (vo.getEstimatedRowCount() > 0) {
                return "Y";
            }
            vo.setApplyViewCriteriaName("SmBookClrAllowVOCriteria", false);
            vo.removeApplyViewCriteriaName("SmBookClrAllowVOCriteria");
            vo.executeQuery();
        } catch (Exception e) {
            // TODO: Add catch code
            e.printStackTrace();
        }
        return "N";
    }

    public String custNameChangeSearch(Integer dealerMapCd, String bookingNo, String dlrMapCd, String locCd,
                                       String parentGroup) {
        try {
            ViewObjectImpl vo = this.getSmBookNameChngAllowVO1();
            // System.out.println(vo.getQuery());
            ViewCriteria vc = vo.getViewCriteria("SmBookNameChngAllowVOCriteria");
            vo.applyViewCriteria(vc);
            vo.setNamedWhereClauseParam("bind_DealerMapCd", dealerMapCd);
            vo.setNamedWhereClauseParam("bind_bookingNo", bookingNo);
            vo.setNamedWhereClauseParam("bind_dlrMapCd", dlrMapCd);
            vo.setNamedWhereClauseParam("bind_locCd", locCd);
            vo.setNamedWhereClauseParam("bind_parentGroup", parentGroup);
            //   System.out.println(vo.getQuery());
            vo.executeQuery();
            if (vo.getEstimatedRowCount() > 0) {
                return "Y";
            }
            vo.setApplyViewCriteriaName("SmBookNameChngAllowVOCriteria", false);
            vo.removeApplyViewCriteriaName("SmBookNameChngAllowVOCriteria");
            System.out.println(vo.getEstimatedRowCount() + "rowcount---");
            vo.executeQuery();
        } catch (Exception e) {
            // TODO: Add catch code
            e.printStackTrace();
        }
        return "N";
    }

    /**
     * Container's getter for ModelForOBMLovVO1.
     * @return ModelForOBMLovVO1
     */
    public ViewObjectImpl getModelForOBMLovVO1() {
        return (ViewObjectImpl) findViewObject("ModelForOBMLovVO1");
    }

    /**
     * Container's getter for OnlineBookingManagementTVO1.
     * @return OnlineBookingManagementTVO1
     */
    public ViewObjectImpl getOnlineBookingManagementTVO1() {
        return (ViewObjectImpl) findViewObject("OnlineBookingManagementTVO1");
    }

    /**
     * Container's getter for RegionForOBMLOV1.
     * @return RegionForOBMLOV1
     */
    public ViewObjectImpl getRegionForOBMLOV1() {
        return (ViewObjectImpl) findViewObject("RegionForOBMLOV1");
    }

    /**
     * Container's getter for DealerObmLOV1.
     * @return DealerObmLOV1
     */
    public ViewObjectImpl getDealerObmLOV1() {
        return (ViewObjectImpl) findViewObject("DealerObmLOV1");
    }

    public void exeSpOnlineBookingData(String rbBook) {
        DBTransaction trx = (DBTransaction) getTransaction();
        CallableStatement st = null;
        System.out.println("RbBook-----" + rbBook);
        ViewObject vo = this.getOnlineBookingManagementTVO1();
        ViewObject ro = this.getOnlineBookingManagementRO1();
        ro.executeEmptyRowSet();
        try {

            Row r = vo.getCurrentRow();
            System.out.println("model-----" + r.getAttribute("Model"));
            System.out.println("region-----" + r.getAttribute("RegionCd"));
            System.out.println("dealer-----" + r.getAttribute("DealerCode"));
            String stmt = "begin PKG_ONLINE_BOOKING.sp_online_booking_data (?,?,?,?,?,?,?,?,?,?); end;";
            st = trx.createCallableStatement(stmt, 0);
            st.setObject(1, r.getAttribute("RegionCd"));
            st.setObject(2, r.getAttribute("DealerCode"));
            st.setObject(3, r.getAttribute("LocationCode"));
            st.setObject(4, r.getAttribute("FromDate"));
            st.setObject(5, r.getAttribute("ToDate"));
            st.setObject(6, rbBook); // rb book hardcoded
            st.setObject(7, r.getAttribute("Model"));
            st.registerOutParameter(8, OracleTypes.CURSOR);
            st.registerOutParameter(9, Types.NUMERIC);
            st.registerOutParameter(10, Types.VARCHAR);
            st.executeUpdate();
            ResultSet cursor = st.getObject(8, ResultSet.class);
            while (cursor.next()) {
                System.out.println("-----" + cursor.getObject(1));
                System.out.println("-----" + cursor.getObject(2));
                System.out.println("-----" + cursor.getObject(3));
                System.out.println("-----" + cursor.getObject(4));
                System.out.println("-----" + cursor.getObject(5));
                System.out.println("-----" + cursor.getObject(6));
                System.out.println("-----" + cursor.getObject(7));
                System.out.println("-----" + cursor.getObject(8));
                System.out.println("-----" + cursor.getObject(9));
                System.out.println("-----" + cursor.getObject(10));
                System.out.println("-----" + cursor.getObject(11));
                System.out.println("-----" + cursor.getObject(12));
                System.out.println("-----" + cursor.getObject(13));
                System.out.println("-----" + cursor.getObject(14));
                System.out.println("-----" + cursor.getObject(15)); /*  */
                System.out.println("-----" + cursor.getObject(16));
                System.out.println("-----" + cursor.getObject(17));
                System.out.println("-----" + cursor.getObject(18));
                System.out.println("-----" + cursor.getObject(19));
                System.out.println("-----" + cursor.getObject(20));
                System.out.println("-----" + cursor.getObject(21));
                System.out.println("-----" + cursor.getObject(22));
                System.out.println("-----" + cursor.getObject(23));
                System.out.println("-----" + cursor.getObject(24));
                System.out.println("-----" + cursor.getObject(25));

                Row rw = ro.createRow();
                rw.setAttribute("SrlNo", cursor.getObject(1));
                rw.setAttribute("RegionT", cursor.getObject(2));
                rw.setAttribute("DealerCdT", cursor.getObject(3)); //
                rw.setAttribute("ForCdT", cursor.getObject(4));
                rw.setAttribute("DealerNameF", cursor.getObject(5));
                rw.setAttribute("DealerCityF", cursor.getObject(6)); // for desc
                rw.setAttribute("EnquiryNoT", cursor.getObject(7));
                rw.setAttribute("BookingNoT", cursor.getObject(8)); // order num
                rw.setAttribute("BookingDateT", cursor.getObject(9)); // order date
                rw.setAttribute("BookingCancelDate", cursor.getObject(10));
                rw.setAttribute("CustomerName", cursor.getObject(11));
                rw.setAttribute("PromDeliveryDate", cursor.getObject(12));
                rw.setAttribute("SalesExeName", cursor.getObject(13)); // empl name
                rw.setAttribute("BCRPrinted", cursor.getObject(14));
                rw.setAttribute("BCRDate", cursor.getObject(15));
                rw.setAttribute("ModelF", cursor.getObject(16));
                rw.setAttribute("VariantF", cursor.getObject(17));
                rw.setAttribute("ColorF", cursor.getObject(18));
                rw.setAttribute("BuyerTypeF", cursor.getObject(19));
                rw.setAttribute("BookingAmmdDateF", cursor.getObject(20));
                rw.setAttribute("RevPromDateF", cursor.getObject(21));
                rw.setAttribute("AllotDateF", cursor.getObject(22));
                rw.setAttribute("BookingAmdColorF", cursor.getObject(23)); //amnd_first_clr_cd
                rw.setAttribute("AmdCustNameF", cursor.getObject(24));
                rw.setAttribute("DSEAssgndDateF", cursor.getObject(25));
                ro.insertRow(rw);
            }

        } catch (SQLException sqle) {
            // TODO: Add catch code
            sqle.printStackTrace();
        } finally {
            try {
                if (st != null) {
                    st.close();
                }
            } catch (Exception e) {
            }

        }
    }

    /**
     * Container's getter for OnlineBookingManagementRO1.
     * @return OnlineBookingManagementRO1
     */
    public ViewObjectImpl getOnlineBookingManagementRO1() {
        return (ViewObjectImpl) findViewObject("OnlineBookingManagementRO1");
    }

    /**
     * Container's getter for CorporateGroupMasterUploadRVO1.
     * @return CorporateGroupMasterUploadRVO1
     */
    public CorporateGroupMasterUploadRVOImpl getCorporateGroupMasterUploadRVO1() {
        return (CorporateGroupMasterUploadRVOImpl) findViewObject("CorporateGroupMasterUploadRVO1");
    }

    /**
     * Container's getter for CorporateGroupMasterUploadDetailsRVO1.
     * @return CorporateGroupMasterUploadDetailsRVO1
     */
    public CorporateGroupMasterUploadDetailsRVOImpl getCorporateGroupMasterUploadDetailsRVO1() {
        return (CorporateGroupMasterUploadDetailsRVOImpl) findViewObject("CorporateGroupMasterUploadDetailsRVO1");
    }

    /**
     * Method use for Updating CSV file to Table
     */
    public void createRowCoprGrpMst(String[] lineValues) {

    }

    /**
     * Container's getter for CorporateGroupMasterUploadErrorRVO1.
     * @return CorporateGroupMasterUploadErrorRVO1
     */
    public CorporateGroupMasterUploadErrorRVOImpl getCorporateGroupMasterUploadErrorRVO1() {
        return (CorporateGroupMasterUploadErrorRVOImpl) findViewObject("CorporateGroupMasterUploadErrorRVO1");
    }

    /**
     * Container's getter for CorporateGroupMasterUploadStatusRVO1.
     * @return CorporateGroupMasterUploadStatusRVO1
     */
    public CorporateGroupMasterUploadStatusRVOImpl getCorporateGroupMasterUploadStatusRVO1() {
        return (CorporateGroupMasterUploadStatusRVOImpl) findViewObject("CorporateGroupMasterUploadStatusRVO1");
    }

    /**
     * Container's getter for OrderRefundRVO1.
     * @return OrderRefundRVO1
     */
    public ViewObjectImpl getOrderRefundRVO1() {
        return (ViewObjectImpl) findViewObject("OrderRefundRVO1");
    }

    /**
     * Container's getter for GmModVO1.
     * @return GmModVO1
     */
    public ViewObjectImpl getGmModVO1() {
        return (ViewObjectImpl) findViewObject("GmModVO1");
    }

    /**
     * Container's getter for VmSvarVO1.
     * @return VmSvarVO1
     */
    public ViewObjectImpl getVmSvarVO1() {
        return (ViewObjectImpl) findViewObject("VmSvarVO1");
    }

    /**Method to fetch the customer name for Order Refund
     * @param custId, passing from Bean class
     * @return Hash map values
     */
    public HashMap<String, String> getCustomerNameOrderRefund(String custId) {
        LOGGER.info("** inside getCustomerNameOrderRefund() - Order Refund");
        HashMap<String, String> CustVal = new HashMap<String, String>();
        DBTransaction trx = (DBTransaction) getTransaction();
        CallableStatement st = null;
        Map session = ADFContext.getCurrent().getSessionScope();
        Integer principalMapCd = Integer.valueOf(session.get("principalMapCd").toString());
        String stmt = "begin SP_GET_CUSTOMER_NAME (?,?,?,?,?); end;";
        try {
            st = trx.createCallableStatement(stmt, 0);
            st.setInt(1, principalMapCd);
            st.setString(2, custId);
            st.registerOutParameter(3, Types.VARCHAR);
            st.registerOutParameter(4, Types.VARCHAR);
            st.registerOutParameter(5, Types.INTEGER);
            st.executeUpdate();
            String custName = st.getString(3);
            String errMsg = st.getString(4);
            Integer errCd = st.getInt(5);
            if (errCd == 0) {
                CustVal.put("errMsg", "N");
                CustVal.put("custName", custName != null ? custName : "");
            } else {
                CustVal.put("custName", null);
                CustVal.put("errMsg", errMsg);
            }
        } catch (SQLException sqle) {
            sqle.printStackTrace();
        } finally {
            try {
                if (st != null) {
                    st.close();
                }
            } catch (Exception e) {
            }
        }
        LOGGER.info("** end of getCustomerNameOrderRefund() - Order Refund");

        return CustVal;
    }

    /**
     * Container's getter for OrderRefundNoCheckRVO1.
     * @return OrderRefundNoCheckRVO1
     */
    public ViewObjectImpl getOrderRefundNoCheckRVO1() {
        return (ViewObjectImpl) findViewObject("OrderRefundNoCheckRVO1");
    }

    /**
     * Container's getter for OrderRefundOrderNoCheckRVO1.
     * @return OrderRefundOrderNoCheckRVO1
     */
    public ViewObjectImpl getOrderRefundOrderNoCheckRVO1() {
        return (ViewObjectImpl) findViewObject("OrderRefundOrderNoCheckRVO1");
    }


    /**
     * Container's getter for GMModModelLOV1.
     * @return GMModModelLOV1
     */
    public ViewObjectImpl getGMModModelLOV1() {
        return (ViewObjectImpl) findViewObject("GMModModelLOV1");
    }

    public Boolean exeFnNameAlphaNumCheck(String alphaNum) {
        LOGGER.warning("** Start SalseModuleAMImpl exeFnNameAlphaNumCheck() **");
        Boolean error = null;
        try {
            LOGGER.warning("Email: " + alphaNum);
            Object errMsg = callStoredFunction(Types.VARCHAR, "fn_name_alpha_num_check(?)", new Object[] { alphaNum });
            if (errMsg != null) {
                error = new Boolean(errMsg.toString());
            }
        } catch (Exception sqle) {
            LOGGER.warning("Error message" + sqle.getMessage());
        }
        LOGGER.warning("** End SalseModuleAMImpl exeFnNameAlphaNumCheck() **");
        return error;
    }

    /**
     * Container's getter for RegionCdObmRO1.
     * @return RegionCdObmRO1
     */
    public ViewObjectImpl getRegionCdObmRO1() {
        return (ViewObjectImpl) findViewObject("RegionCdObmRO1");
    }

    public String exeSpInsUpdCustData() {
        Map session = ADFContext.getCurrent().getSessionScope();
        Object userId = session.get("userId");
        DBTransaction trx = (DBTransaction) getTransaction();
        CallableStatement st = null;
        ViewObjectImpl vo1 = this.getShLeaseCinVO(); // this code is to populate refered by field
        Row row = vo1.getCurrentRow();
        String errMsg = null;
        try {
            String stmt =
                "begin pkg_msl.SP_INS_UPD_CUST_DATA (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?); commit;end;";
            st = trx.createCallableStatement(stmt, 0);
            System.out.println(row.getAttribute("CustomerId") + "customerID****");
            st.setString(1, (String) row.getAttribute("CustomerId"));
            st.setString(2, (String) row.getAttribute("CompanyName"));
            st.setString(3, (String) row.getAttribute("BusinessType"));
            st.setString(4, (String) row.getAttribute("SystemAcquisition"));
            st.setString(5, (String) row.getAttribute("ContactPersonName"));
            st.setString(6, (String) row.getAttribute("Address1"));
            st.setString(7, (String) row.getAttribute("Address2"));
            st.setString(8, (String) row.getAttribute("Address3"));
            st.setString(9, (String) row.getAttribute("ContactNo"));
            st.setString(10, (String) row.getAttribute("EmailId"));
            st.setString(11, (String) row.getAttribute("Pan"));
            st.setString(12, (String) row.getAttribute("Gstn"));
            st.setString(13, (String) row.getAttribute("Tin"));
            st.setString(14, (String) row.getAttribute("StateCd"));
            st.setString(15, (String) row.getAttribute("CityCd"));
            st.setString(16, (String) row.getAttribute("Pin"));
            st.setString(17, (String) row.getAttribute("ServDealerCity"));
            st.setString(18, (String) row.getAttribute("Remarks"));
            st.setString(19, (String) userId);
            st.setString(20, (String) row.getAttribute("City"));
            st.setString(21, (String) row.getAttribute("State"));
            st.registerOutParameter(22, Types.VARCHAR);
            errMsg = st.getString(22);
            st.executeUpdate();

        } catch (SQLException sqle) {
            // TODO: Add catch code
            sqle.printStackTrace();
        } finally {
            try {
                if (st != null) {
                    st.close();
                }
            } catch (Exception e) {
            }
        }

        return errMsg;

    }

    public String getCustData(String customerId) {
        String error = null;
        ViewObjectImpl vo = this.getShLeaseCinVO();
        Row currentRow = vo.getCurrentRow();
        ViewCriteria vc = vo.getViewCriteria("filterByCustomerIdCriteria");
        vo.applyViewCriteria(vc);
        vo.setNamedWhereClauseParam("bindCustomerId", customerId);
        vo.executeQuery();
        System.out.println("rowcount***" + vo.getEstimatedRowCount());
        if (vo.getEstimatedRowCount() == 0) {
            error = "Please enter valid Customer Id";
            return error;
        } else {
            while (vo.hasNext()) {
                Row voRow = vo.first();
                System.out.println(customerId + "CustomerId1****");
                System.out.println(voRow.getAttribute("CustomerId") + "CustomerId****");
                //                currentRow.setAttribute("CustomerId",voRow.getAttribute("CustomerId"));
                currentRow.setAttribute("CompanyName", voRow.getAttribute("CompanyName"));
                currentRow.setAttribute("BusinessType", voRow.getAttribute("BusinessType"));
                currentRow.setAttribute("SystemAcquisition", voRow.getAttribute("SystemAcquisition"));
                currentRow.setAttribute("ContactPersonName", voRow.getAttribute("ContactPersonName"));
                currentRow.setAttribute("Address1", voRow.getAttribute("Address1"));
                currentRow.setAttribute("Address2", voRow.getAttribute("Address2"));
                currentRow.setAttribute("Address3", voRow.getAttribute("Address3"));
                currentRow.setAttribute("ContactNo", voRow.getAttribute("ContactNo"));
                currentRow.setAttribute("EmailId", voRow.getAttribute("EmailId"));
                currentRow.setAttribute("Pan", voRow.getAttribute("Pan"));
                currentRow.setAttribute("Gstn", voRow.getAttribute("Gstn"));
                currentRow.setAttribute("Tin", voRow.getAttribute("Tin"));
                currentRow.setAttribute("State", voRow.getAttribute("State"));
                currentRow.setAttribute("City", voRow.getAttribute("City"));
                currentRow.setAttribute("Pin", voRow.getAttribute("Pin"));
                currentRow.setAttribute("ServDealerCity", voRow.getAttribute("ServDealerCity"));
                currentRow.setAttribute("Remarks", voRow.getAttribute("Remarks"));
                currentRow.setAttribute("StateCd", voRow.getAttribute("StateCd"));
                currentRow.setAttribute("CityCd", voRow.getAttribute("CityCd"));

            }
        }
        return error;
    }

    /**
     * Container's getter for OrderRefundGmEclrRVO1.
     * @return OrderRefundGmEclrRVO1
     */
    public ViewObjectImpl getOrderRefundGmEclrRVO1() {
        return (ViewObjectImpl) findViewObject("OrderRefundGmEclrRVO1");
    }

    /**
     * Container's getter for ReportsRO1.
     * @return ReportsRO1
     */
    public ViewObjectImpl getReportsRO1() {
        return (ViewObjectImpl) findViewObject("ReportsRO1");
    }


    /**
     * Container's getter for OrderRefundGmPartyRVO1.
     * @return OrderRefundGmPartyRVO1
     */
    public ViewObjectImpl getOrderRefundGmPartyRVO1() {
        return (ViewObjectImpl) findViewObject("OrderRefundGmPartyRVO1");
    }

    /**
     * Container's getter for OrderRefundGmVarRVO1.
     * @return OrderRefundGmVarRVO1
     */
    public ViewObjectImpl getOrderRefundGmVarRVO1() {
        return (ViewObjectImpl) findViewObject("OrderRefundGmVarRVO1");
    }


    /**
     * Container's getter for GmVarVO1.
     * @return GmVarVO1
     */
    public ViewObjectImpl getGmVarVO1() {
        return (ViewObjectImpl) findViewObject("GmVarVO1");
    }

    /**
     * Container's getter for ModelVariantLOV1.
     * @return ModelVariantLOV1
     */
    public ViewObjectImpl getModelVariantLOV1() {
        return (ViewObjectImpl) findViewObject("ModelVariantLOV1");
    }

    /**
     * Container's getter for SmForms21VO1.
     * @return SmForms21VO1
     */
    public ViewObjectImpl getSmForms21VO1() {
        return (ViewObjectImpl) findViewObject("SmForms21VO1");
    }

    /**
     * Container's getter for AddForm21ST1.
     * @return AddForm21ST1
     */
    public ViewObjectImpl getAddForm21ST1() {
        return (ViewObjectImpl) findViewObject("AddForm21ST1");
    }

    /**
     * Container's getter for AddModelVariantModelLOV1.
     * @return AddModelVariantModelLOV1
     */
    public ViewObjectImpl getAddModelVariantModelLOV1() {
        return (ViewObjectImpl) findViewObject("AddModelVariantModelLOV1");
    }

    /**
     * Container's getter for vmSvarLOV1.
     * @return vmSvarLOV1
     */
    public ViewObjectImpl getvmSvarLOV1() {
        return (ViewObjectImpl) findViewObject("vmSvarLOV1");
    }

    /**
     * Container's getter for StdModelCdLOV1.
     * @return StdModelCdLOV1
     */
    public ViewObjectImpl getStdModelCdLOV1() {
        return (ViewObjectImpl) findViewObject("StdModelCdLOV1");
    }

    public void resetFmPartyMaster() {
        try {
            ViewObjectImpl vo = this.getShLeaseCinVO();
            // System.out.println(vo.getQuery());
            initEmptyRowSetForFmPartyMaster();
            Row fmPartyMasterVO = this.getFmPartyMasterST().getCurrentRow();
            fmPartyMasterVO.setAttribute("CustomerId", null);
            fmPartyMasterVO.setAttribute("BusinessType", null);
        } catch (Exception e) {
            // TODO: Add catch code
            e.printStackTrace();
        }
        this.getShLeaseCinVO().executeEmptyRowSet();
        //            this.getFmPartyMasterRVO().executeEmptyRowSet();
        //            this.getFmPartyMasterST().executeEmptyRowSet();
    }

    /**
     * Container's getter for SalesInvoiceVO1.
     * @return SalesInvoiceVO1
     */
    public ViewObjectImpl getSalesInvoiceVO1() {
        return (ViewObjectImpl) findViewObject("SalesInvoiceVO1");
    }

    /**
     * Container's getter for AddVariantST1.
     * @return AddVariantST1
     */
    public ViewObjectImpl getAddVariantST1() {
        return (ViewObjectImpl) findViewObject("AddVariantST1");
    }

    /**
     * Container's getter for OrderRefundGmModRVO1.
     * @return OrderRefundGmModRVO1
     */
    public ViewObjectImpl getOrderRefundGmModRVO1() {
        return (ViewObjectImpl) findViewObject("OrderRefundGmModRVO1");
    }

    /**
     * Container's getter for GstST1.
     * @return GstST1
     */
    public GstSTImpl getGstST1() {
        return (GstSTImpl) findViewObject("GstST1");
    }

    public void initGRN() {
//        this.getShGrnVO1().executeEmptyRowSet();
        this.getSdGrnVO2().executeEmptyRowSet();
        this.getGRNSearchResultsRO1().executeEmptyRowSet();
    }

    /**
     * Container's getter for PartyDetailsALOV1.
     * @return PartyDetailsALOV1
     */
    public PartyDetailsALOVImpl getPartyDetailsALOV1() {
        return (PartyDetailsALOVImpl) findViewObject("PartyDetailsALOV1");
    }

    /**
     * Container's getter for PartyDetailsILOV1.
     * @return PartyDetailsILOV1
     */
    public PartyDetailsILOVImpl getPartyDetailsILOV1() {
        return (PartyDetailsILOVImpl) findViewObject("PartyDetailsILOV1");
    }

    /**
     * Container's getter for SalesCertificateDetailsRVO1.
     * @return SalesCertificateDetailsRVO1
     */
    public SalesCertificateDetailsRVOImpl getSalesCertificateDetailsRVO1() {
        return (SalesCertificateDetailsRVOImpl) findViewObject("SalesCertificateDetailsRVO1");
    }


    /**
     * Container's getter for OrderRefundReceiptRVO1.
     * @return OrderRefundReceiptRVO1
     */
    public ViewObjectImpl getOrderRefundReceiptRVO1() {
        return (ViewObjectImpl) findViewObject("OrderRefundReceiptRVO1");
    }

    /**
     * Container's getter for OrderRefundPreviousRVO1.
     * @return OrderRefundPreviousRVO1
     */
    public ViewObjectImpl getOrderRefundPreviousRVO1() {
        return (ViewObjectImpl) findViewObject("OrderRefundPreviousRVO1");
    }

    /**
     * Container's getter for OrderRefundStOrderCanRefundVO1.
     * @return OrderRefundStOrderCanRefundVO1
     */
    public ViewObjectImpl getOrderRefundStOrderCanRefundVO1() {
        return (ViewObjectImpl) findViewObject("OrderRefundStOrderCanRefundVO1");
    }

    /**method to clear VO data for Order Refund
     */
    public void exeEmptyRowOrderRefund() {
        LOGGER.info("** inside exeEmptyRowOrderRefund() - order refund");
        this.getOrderRefundRVO1().executeEmptyRowSet();
        this.getOrderRefundPreviousRVO1().executeEmptyRowSet();
        this.getOrderRefundReceiptRVO1().executeEmptyRowSet();
        this.getOrderRefundStOrderCanRefundVO1().executeEmptyRowSet();
        LOGGER.info("** end of exeEmptyRowOrderRefund() - order refund");

    }

    /**Method for update the closedYn value for Refund
     * @param closedYn string value
     * @param custId String value
     * @param ordNo String value
     */
    public void updateOrderRefund(String closedYn, String custId, String ordNo) {
        LOGGER.info("** inside updateOrderRefund()- Order Refund");
        DBTransaction trx = (DBTransaction) getTransaction();
        CallableStatement st = null;
        Map session = ADFContext.getCurrent().getSessionScope();
        Integer dealer = new Integer(session.get("dealerMapCd").toString());
        String parentGroupCd = session.get("parentGroupCd").toString();
        String locCd = session.get("locCd").toString();
        String comp = session.get("compCode").toString();
        try {
            if (closedYn != null) {
                if (closedYn.equalsIgnoreCase("Y")) {
                    String updateQuery =
                        "UPDATE SH_ORDBOOK \n" + "				     SET ORDER_STATUS ='L'\n" +
                        "				     WHERE DEALER_MAP_CD = '" + dealer + "' \n" + "						 AND   LOC_CD ='" + locCd +
                        "' \n" + "						 AND   COMP_FA = '" + comp + "' \n" + "						 AND   PARENT_GROUP = '" +
                        parentGroupCd + "'\n" + "						 AND   CUST_CD='" + custId + "'\n" +
                        "						 AND   ORDER_NUM ='" + ordNo + "'";
                    st = trx.createCallableStatement(updateQuery, 0);
                    st.executeUpdate();
                } else if (closedYn.equalsIgnoreCase("N")) {
                    String updateQueryVal =
                        " UPDATE SH_ORDBOOK \n" + "											     SET ORDER_STATUS ='C'\n" +
                        "											     WHERE DEALER_MAP_CD = '" + dealer + "'\n" + "													 AND   LOC_CD ='" +
                        locCd + "'\n" + "													 AND   COMP_FA = '" + comp + "' \n" +
                        "													 AND   PARENT_GROUP = '" + parentGroupCd + "'\n" +
                        "													 AND   CUST_CD='" + custId + "'\n" + "													 AND   ORDER_NUM ='" + ordNo +
                        "'";
                    st = trx.createCallableStatement(updateQueryVal, 0);
                    st.executeUpdate();
                }
            }
            LOGGER.info("** end updateOrderRefund()- Order Refund");
        } catch (Exception sqle) {
            sqle.printStackTrace();
        } finally {
            try {
                if (st != null) {
                    st.close();
                }
            } catch (Exception e) {
            }
        }
    }

     /**
          * Container's getter for ReportsQueryRO1.
          * @return ReportsQueryRO1
          */
         public ReportsQueryROImpl getReportsQueryRO1() {
             return (ReportsQueryROImpl) findViewObject("ReportsQueryRO1");
         }   


    /**
     * Container's getter for DestinationRLOV1.
     * @return DestinationRLOV1
     */
    public ViewObjectImpl getDestinationRLOV1() {
        return (ViewObjectImpl) findViewObject("DestinationRLOV1");
    }

    /**
     * Container's getter for FormatLOV1.
     * @return FormatLOV1
     */
    public ViewObjectImpl getFormatLOV1() {
        return (ViewObjectImpl) findViewObject("FormatLOV1");
    }

    /**
     * Container's getter for Sale1.
     * @return Sale1
     */
    public ViewObjectImpl getSale1() {
        return (ViewObjectImpl) findViewObject("Sale1");
    }

    /**
     * Container's getter for EligibleEmployeeOutOfTrainingRO1.
     * @return EligibleEmployeeOutOfTrainingRO1
     */
    public ViewObjectImpl getEligibleEmployeeOutOfTrainingRO1() {
        return (ViewObjectImpl) findViewObject("EligibleEmployeeOutOfTrainingRO1");
    }

    /**
     * Container's getter for MonthLastDateRO1.
     * @return MonthLastDateRO1
     */
    public ViewObjectImpl getMonthLastDateRO1() {
        return (ViewObjectImpl) findViewObject("MonthLastDateRO1");
    }

    /**
     * Container's getter for DealerOutletQueryRO1.
     * @return DealerOutletQueryRO1
     */
    public ViewObjectImpl getDealerOutletQueryRO1() {
        return (ViewObjectImpl) findViewObject("DealerOutletQueryRO1");
    }

    public String populateno(Integer dealerMapCd, String principalMapCd, String locCd, String compFa,
                             String parentgroupcd, String pinvtype, String pBillNature, String ordernum, Date InvDate,
                             String pricefor) {


        DBTransaction trx = (DBTransaction) getTransaction();
        CallableStatement st = null;
        String docNum = null;
        java.sql.Date orderDate = null;
        String alotNum = null;
        java.sql.Date alotDate = null;
        String areacd = null;
        String salesCd = null;
        String salesType = null;
        String fiCd = null;
        String finCash = null;
        String branch = null;
        String finAmt = null;
        String billAddress1 = null;
        String billAddress2 = null;
        String billAddress3 = null;
        String cityCd = null;
        String cityDesc = null;
        String pinCode = null;
        String modelCd = null;
        String modelDesc = null;
        String varriant = null;
        String varriantDesc = null;
        String colorcd = null;
        String colordesc = null;
        String vin = null;
        String chasisNum = null;
        String engNum = null;
        String engPf = null;
        String keyNum = null;
        Integer bookAmt = null;
        Integer recdAmt = null;
        Integer sellPrice = null;
        Integer accPrice = null;
        Integer ndp = null;
        String relation = null;
        String relationname = null;
        String vehstatus = null;
        Integer rectcnt = null;
        String schemecd = null;
        Map session = ADFContext.getCurrent().getSessionScope();

        parentgroupcd = session.get("parentGroupCd").toString();
        locCd = session.get("locCd").toString();
        Integer i = new Integer(session.get("dealerMapCd").toString());
        Integer j = new Integer(session.get("principalMapCd").toString());

        java.sql.Date invdate = InvDate.dateValue();
        try {
            // 1. Define the PL/SQL block for the statement to invoke
            String stmt =
                "begin DMS2_Sp_Get_Alt_Ord_Detail_Stk (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?);commit; end;";
            // 2. Create the CallableStatement for the PL/SQL block
            st = trx.createCallableStatement(stmt, 0);
            // 3. Register the positions and types of the OUT parameters


            // 4. Set the bind values of the IN parameters

            st.setInt(1, i.intValue());
            st.setInt(2, j.intValue());
            st.setString(3, locCd);
            st.setString(4, compFa);
            st.setString(5, parentgroupcd);
            st.setString(6, pinvtype);
            st.setString(7, pBillNature);
            st.setString(8, ordernum);
            st.setDate(9, invdate);
            st.setString(10, pricefor);
            // st.setDate(9, InvDate);
            st.registerOutParameter(11, Types.DATE);
            st.registerOutParameter(12, Types.VARCHAR);
            st.registerOutParameter(13, Types.DATE);
            st.registerOutParameter(14, Types.VARCHAR);
            st.registerOutParameter(15, Types.VARCHAR);
            st.registerOutParameter(16, Types.VARCHAR);
            st.registerOutParameter(17, Types.VARCHAR);
            st.registerOutParameter(18, Types.VARCHAR);
            st.registerOutParameter(19, Types.VARCHAR);
            st.registerOutParameter(20, Types.VARCHAR);
            st.registerOutParameter(21, Types.VARCHAR);
            st.registerOutParameter(22, Types.VARCHAR);
            st.registerOutParameter(23, Types.VARCHAR);
            st.registerOutParameter(24, Types.VARCHAR);
            st.registerOutParameter(25, Types.VARCHAR);
            st.registerOutParameter(26, Types.VARCHAR);
            st.registerOutParameter(27, Types.VARCHAR);
            st.registerOutParameter(28, Types.VARCHAR);
            st.registerOutParameter(29, Types.VARCHAR);
            st.registerOutParameter(30, Types.VARCHAR);
            st.registerOutParameter(31, Types.VARCHAR);
            st.registerOutParameter(32, Types.VARCHAR);
            st.registerOutParameter(33, Types.VARCHAR);
            st.registerOutParameter(34, Types.VARCHAR);
            st.registerOutParameter(35, Types.VARCHAR);
            st.registerOutParameter(36, Types.VARCHAR);
            st.registerOutParameter(37, Types.VARCHAR);
            st.registerOutParameter(38, Types.INTEGER);
            st.registerOutParameter(39, Types.INTEGER);
            st.registerOutParameter(40, Types.INTEGER);
            st.registerOutParameter(41, Types.INTEGER);
            st.registerOutParameter(42, Types.INTEGER);
            st.registerOutParameter(43, Types.VARCHAR);
            st.registerOutParameter(44, Types.VARCHAR);
            st.registerOutParameter(45, Types.VARCHAR);
            st.registerOutParameter(46, Types.VARCHAR);
            st.registerOutParameter(47, Types.INTEGER);
            st.registerOutParameter(48, Types.INTEGER);
            st.registerOutParameter(49, Types.VARCHAR);

            //st.registerOutParameter(33, Types.INTEGER);
            //.setInt(9, finYear);
            // 5. Execute the statement
            st.executeUpdate();
            orderDate = st.getDate(11);
            System.out.println("OrderDate" + orderDate);
            alotNum = st.getString(12);
            System.out.println("alotNum" + alotNum);
            alotDate = st.getDate(13);
            System.out.println("alotDate" + alotDate);
            areacd = st.getString(14);
            System.out.println("areacd" + areacd);
            salesCd = st.getString(15);
            System.out.println("salesCd" + salesCd);
            salesType = st.getString(16);
            System.out.println("salesType" + salesType);
            fiCd = st.getString(17);
            System.out.println("fiCd" + fiCd);
            finCash = st.getString(18);
            System.out.println("finCash" + finCash);
            branch = st.getString(19);
            finAmt = st.getString(20);
            billAddress1 = st.getString(21);
            billAddress2 = st.getString(22);
            billAddress3 = st.getString(23);
            cityCd = st.getString(24);
            cityDesc = st.getString(25);
            pinCode = st.getString(26);
            modelCd = st.getString(27);
            modelDesc = st.getString(28);
            varriant = st.getString(29);
            varriantDesc = st.getString(30);
            colorcd = st.getString(31);
            colordesc = st.getString(32);
            vin = st.getString(33);
            chasisNum = st.getString(34);
            engNum = st.getString(35);
            engPf = st.getString(36);
            keyNum = st.getString(37);
            bookAmt = st.getInt(38);
            recdAmt = st.getInt(39);
            sellPrice = st.getInt(40);
            accPrice = st.getInt(41);
            ndp = st.getInt(42);
            relation = st.getString(43);
            relationname = st.getString(44);
            vehstatus = st.getString(45);
            String error_msg = st.getString(46);
            int err = st.getInt(47);
            rectcnt = st.getInt(48);


            schemecd = st.getString(49);


        } catch (Exception sqle) {
            // TODO: Add catch code
            sqle.printStackTrace();
            docNum = "Data didnt get Populated";
        } finally {
            try {
                if (st != null) {
                    st.close();
                }
            } catch (Exception e) {
            }
        }

        ViewObjectImpl salesInvoice = this.getSalesInvoiceVO1();
        Row salesInvoiceR = salesInvoice.getCurrentRow();
        salesInvoiceR.setAttribute("OrderDate", orderDate);
        salesInvoiceR.setAttribute("AllotNum", alotNum);
        salesInvoiceR.setAttribute("AllotDate", alotDate);
        salesInvoiceR.setAttribute("AreaCd", areacd);
        salesInvoiceR.setAttribute("SalesmanCd", salesCd);
        salesInvoiceR.setAttribute("SalesType", salesType);
        salesInvoiceR.setAttribute("FiCd", fiCd);
        salesInvoiceR.setAttribute("FinCash", finCash);
        salesInvoiceR.setAttribute("Branch", branch);
        salesInvoiceR.setAttribute("FinancedAmt", finAmt);
        salesInvoiceR.setAttribute("BillAddress1", billAddress1);
        salesInvoiceR.setAttribute("BillAddress2", billAddress2);
        salesInvoiceR.setAttribute("BillAddress3", billAddress3);
        salesInvoiceR.setAttribute("CityCd", cityCd);
        salesInvoiceR.setAttribute("CityDesc", cityDesc);
        salesInvoiceR.setAttribute("PinCode", pinCode);
        salesInvoiceR.setAttribute("ModelCd", modelCd);
        salesInvoiceR.setAttribute("ModelDesc", modelDesc);
        salesInvoiceR.setAttribute("VariantCd", varriant);
        salesInvoiceR.setAttribute("VariantDesc", varriantDesc);
        salesInvoiceR.setAttribute("EcolorCd", colorcd);
        salesInvoiceR.setAttribute("ColorDesc", colordesc);
        salesInvoiceR.setAttribute("Vin", vin);
        salesInvoiceR.setAttribute("ChasisNum", chasisNum);
        salesInvoiceR.setAttribute("EngineNum", engNum);
        salesInvoiceR.setAttribute("EnginePf", engPf);
        salesInvoiceR.setAttribute("KeyNum", keyNum);
        salesInvoiceR.setAttribute("BookingAmt", bookAmt);
        salesInvoiceR.setAttribute("RecdAmt", recdAmt);
        salesInvoiceR.setAttribute("SellPrice", sellPrice);
        salesInvoiceR.setAttribute("AccessoryPrice", accPrice);
        salesInvoiceR.setAttribute("Ndp", ndp);
        salesInvoiceR.setAttribute("Relation", relation);
        salesInvoiceR.setAttribute("RelationName", relationname);
        salesInvoiceR.setAttribute("VehStatus", vehstatus);
        salesInvoiceR.setAttribute("RecCount", rectcnt);
        salesInvoiceR.setAttribute("SchemeCd", schemecd);

        return docNum;
    }

    /**
     * Container's getter for ShippingDataRO1.
     * @return ShippingDataRO1
     */
    public ViewObjectImpl getShippingDataRO1() {
        return (ViewObjectImpl) findViewObject("ShippingDataRO1");
    }

    public String populateshippingdata() {
        ViewObjectImpl vo = this.getSalesInvoiceVO1();
        ViewObjectImpl vo1 = this.getShippingDataRO1();
        String orderNum = (String) vo.getCurrentRow().getAttribute("OrderNum");
        vo1.setNamedWhereClauseParam("ORDER_NUM", orderNum);
        vo1.executeQuery();
        if (vo1.getEstimatedRowCount() > 0) {
            return "Y";
        }
        return "Z";
    }

    public void populatecharges() {


    }

    /**
     * Container's getter for ChargesDetailsRO1.
     * @return ChargesDetailsRO1
     */
    public ViewObjectImpl getChargesDetailsRO1() {
        return (ViewObjectImpl) findViewObject("ChargesDetailsRO1");
    }

    public String getmsgData(Integer dealerMapCd, String Loc, String Parent, String CompFa, String Customer,
                             String OrderNum, String InvType, String BillNature) {
        CallableStatement st = null;
        String stmt = "begin SP_VALIDATE_ORDER_NUM(?,?,?,?,?,?,?,?,?,?); end;";
        DBTransaction trx = (DBTransaction) getTransaction();
        st = trx.createCallableStatement(stmt, 0);

        String flag = null;
        Map session = ADFContext.getCurrent().getSessionScope();

        Parent = session.get("parentGroupCd").toString();
        Loc = session.get("locCd").toString();
        CompFa = session.get("compCode").toString();
        Integer i = new Integer(session.get("dealerMapCd").toString());
        // Integer j = new Integer(session.get("principalMapCd").toString());

        try {
            st.setInt(1, i.intValue());
            st.setString(2, Loc);
            st.setString(3, Parent);
            st.setString(4, CompFa);
            st.setString(5, Customer);
            st.setString(6, OrderNum);
            st.setString(7, InvType);
            st.setString(8, BillNature);
            st.registerOutParameter(9, Types.VARCHAR);
            st.registerOutParameter(10, Types.INTEGER);
            st.execute();
            flag = st.getString(9);
            System.out.println("vCLVal--------------------->" + flag);
            return flag;
        } catch (SQLException sqlerr) {
            throw new JboException(sqlerr);
        }

    }


    /**
     * Container's getter for ReciptDetailsRO1.
     * @return ReciptDetailsRO1
     */
    public ViewObjectImpl getReciptDetailsRO1() {
        return (ViewObjectImpl) findViewObject("ReciptDetailsRO1");
    }

    public void updatefindetails(String Parent, int dealerMapCd, String locCd, String compFa, String InvNum,
                                 String ficd, String Branch, String UserName) {

        DBTransaction trx = (DBTransaction) getTransaction();
        CallableStatement st = null;

        try {
            // 1. Define the PL/SQL block for the statement to invoke
            String stmt = "begin SP_UPDATE_FIN_DETAILS (?,?,?,?,?,?,?,?,?,?);commit; end;";
            // 2. Create the CallableStatement for the PL/SQL block
            st = trx.createCallableStatement(stmt, 0);
            // 3. Register the positions and types of the OUT parameters

            // 4. Set the bind values of the IN parameters
            st.setString(1, Parent);
            st.setInt(2, dealerMapCd);

            st.setString(3, locCd);
            st.setString(4, compFa);
            st.setString(5, InvNum);
            st.setString(6, ficd);
            st.setString(7, Branch);
            st.setString(8, UserName);
            st.registerOutParameter(9, Types.VARCHAR);

            st.registerOutParameter(10, Types.INTEGER);

            // 5. Execute the statement
            st.executeUpdate();

            String error_msg = st.getString(10);
            int err = st.getInt(9);
        } catch (Exception sqle) {
            // TODO: Add catch code
            sqle.printStackTrace();
        } finally {
            try {
                if (st != null) {
                    st.close();
                }
            } catch (Exception e) {
            }
        }


    }

    /**
     * Container's getter for ChargesDetailsVO1.
     * @return ChargesDetailsVO1
     */
    public ChargesDetailsVOImpl getChargesDetailsVO1() {
        return (ChargesDetailsVOImpl) findViewObject("ChargesDetailsVO1");
    }


    public void calculateChargeAmount(String lv_type,String param) {
        Map session = ADFContext.getCurrent().getSessionScope();
        String locCd = session.get("locCd").toString();
        Integer dealerMp = new Integer(session.get("dealerMapCd").toString());
        // System.out.println("SELL PRICE" + variantRw.getAttribute("SellingPrice"));
        
        String stmt = "begin Evaluate_Expr_PSS (?,?,?,?,?,?); end;";
        DBTransaction dbtxn = (DBTransaction) getTransaction();
        CallableStatement cs = dbtxn.createCallableStatement(stmt.toString(), 1);
        String resultExpr = "";
        BigDecimal exprVal = BigDecimal.ZERO;
        try {
            cs.setObject(1, lv_type);
            cs.setObject(2, param);
            cs.setObject(3, dealerMp);
            cs.setObject(4, locCd);
            cs.registerOutParameter(5, OracleTypes.VARCHAR);
            cs.registerOutParameter(6, OracleTypes.VARCHAR);
            cs.executeUpdate();
            
            resultExpr = (String) cs.getObject(5);
            
            exprVal = new BigDecimal(cs.getString(6));
            
            
            System.out.println("ExprVal" + exprVal);
            System.err.println("Result of the procedure-----LV_Value----------" + resultExpr + "  " + exprVal);
            //    if (exprVal != null) {
            //  getEnqDetailsST1().getCurrentRow().setAttribute("TotalPiAmt", new BigDecimal(exprVal));
            //  getSalesInvoiceVO1().getCurrentRow().setAttribute("TotalPiAmt", new BigDecimal(exprVal));
            //    }
            updateDatabase(resultExpr, exprVal);
        } catch (SQLException sqle) {
            // TODO: AdLLd catch code
            sqle.printStackTrace();
        }

    }

    public String setChargeDetails(Integer dealerMapCd, String parentGroup, String locCd, String compFa, String ordnumb,
                                 Integer principal, String variant, String colour, String areaCd, String CustType,
                                 Date InvDate, String InvType, String BillNature) {
        System.err.println("SET CHARGE DETAILS &&&&&&&&&&&&&&&&");
        ViewObjectImpl vo = this.getChargesDetailsVO2();
        vo.executeEmptyRowSet();
//        RowSetIterator chargeRSI = vo.createRowSetIterator(null);
//        while (chargeRSI.hasNext()) {
//            Row r = chargeRSI.next();
//            r.remove();
//        }
//        chargeRSI.closeRowSetIterator();
//        vo.executeQuery();
        //    DBTransaction trx = (DBTransaction) getTransaction();
        CallableStatement cs = null;
        System.out.println("CHARGE DETAILS ESTI<Ated COUNT ------- " + vo.getEstimatedRowCount());
        String stmt = "begin DMS2_sp_get_inv_charges_ord (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?);commit; end;";
        DBTransaction txn = (DBTransaction) getTransaction();
        //  CallableStatement cs = dbtxn.createCallableStatement(stmt.toString(), 1);
        cs = txn.createCallableStatement(stmt, 0);
        java.sql.Timestamp datetime = new java.sql.Timestamp(System.currentTimeMillis());
        //   oracle.jbo.domain.Date datetime = new oracle.jbo.domain.Date(datetime);
        String errMsg = null;
        Map session = ADFContext.getCurrent().getSessionScope();
        String user = session.get("userId").toString();
        String batchId = user + datetime + "INVC";
        
        
        
        Map pageFlow = ADFContext.getCurrent().getPageFlowScope();
        String gstState = null;
        ViewObjectImpl invVO = this.getSalesInvoiceVO1();
        Row headRw = invVO.getCurrentRow();
        if(headRw.getAttribute("InvType").toString().equalsIgnoreCase("VSC")){
            gstState = (String)headRw.getAttribute("GstStatecd");
        }else{
            gstState = pageFlow.get("DEALER_GST_CD").toString();
        }
        
        String flag = "INS";
        String ordInv = "FI";
        
        try {
            cs.setObject(1, dealerMapCd); //p_dealer
            cs.setObject(2, parentGroup); //pmc
            cs.setObject(3, locCd); //locd
            cs.setObject(4, compFa); //parntgrp
            cs.setObject(5, ordnumb); // compfa
            cs.setObject(6, principal); //enqnum
            cs.setObject(7, variant); //pareacd
            cs.setObject(8, colour); //psales
            cs.setObject(9, gstState); //lstYN
            cs.setObject(10, CustType); // datetime
            cs.setObject(11, InvDate); //pricelsitfor
            cs.setObject(12, InvType); //price flag
            cs.setObject(13, BillNature); // userId
            cs.setObject(14, ordInv);
            cs.registerOutParameter(15, OracleTypes.NUMBER);
            cs.registerOutParameter(16, OracleTypes.VARCHAR);
            cs.setObject(17, batchId); //p_color
            cs.setObject(18, flag);
            cs.execute();
            // System.out.println("sdfgh"+ cs.execute());
            
            errMsg = cs.getString(16);
            
            ViewObjectImpl voSpValTab = this.getSpInvChargeEOView1();
            System.out.println("voSpValTab  getEstimatedRowCount" + voSpValTab.getEstimatedRowCount());
            if (errMsg == null) {
                //  ViewObjectImpl voSpValTab = this.getSpInvChargeEOView1();
                ViewCriteria vc = voSpValTab.getViewCriteria("SpInvChargeEOViewCriteria");
                voSpValTab.applyViewCriteria(vc);
                voSpValTab.setNamedWhereClauseParam("bind_batchId", batchId);
                voSpValTab.executeQuery();
                System.out.println("estimatedrowcont=========" + voSpValTab.getEstimatedRowCount());
                int count = 1;
                if (voSpValTab.getEstimatedRowCount() > 0) {
                    String itrFlag = headRw.getAttribute("ItrFlag")!=null?headRw.getAttribute("ItrFlag").toString():"Y";
                    String tcsFlag = headRw.getAttribute("TcsFlag")!=null?headRw.getAttribute("TcsFlag").toString():"Y";
                    String kcesState = pageFlow.get("P_KCES_STATE").toString();
                    String custGSTN = (String)headRw.getAttribute("BillGstn");
                    pageFlow.put("#{pageFlowScope.P_COUNT_FOR_GST}", 0);
                    pageFlow.put("#{pageFlowScope.P_COUNT_FOR_KFC}", 0);
                    setPageFlowParameters("#{pageFlowScope.P_COUNT_FOR_GST}",0);
                    setPageFlowParameters("#{pageFlowScope.P_COUNT_FOR_KFC}",0);
                    RowSetIterator rst = voSpValTab.createRowSetIterator(null);
                    while (rst.hasNext()) {
                        Row r = rst.next();
                        System.out.println();
                        if(r.getAttribute("Col2")!=null && r.getAttribute("Col2").toString().equalsIgnoreCase("TRT") &&
                           (itrFlag.equalsIgnoreCase("Y") || tcsFlag.equalsIgnoreCase("N"))){
                                r = rst.next();
                        }else if(kcesState!=null && kcesState.equalsIgnoreCase("Y") && !(custGSTN.equalsIgnoreCase("GSTUNREGISTERED")) 
                        && r.getAttribute("Col2")!=null && r.getAttribute("Col2").toString().equalsIgnoreCase("CE1")){
                            continue;
                        }else if(kcesState!=null && kcesState.equalsIgnoreCase("N") && r.getAttribute("Col2")!=null && r.getAttribute("Col2").toString().equalsIgnoreCase("CE1")){
                            continue;
                        }else{
                            Row row = vo.createRow();
                            System.out.println("***************************************");
                            row.setAttribute("ChargeSrl", count);
                            row.setAttribute("ChargeCd", r.getAttribute("Col1"));
                            row.setAttribute("ChargeType", r.getAttribute("Col2")); //
                            row.setAttribute("ChargeInd", r.getAttribute("Col3"));
                            if (r.getAttribute("Col3") != null && r.getAttribute("Col3")
                                                                   .toString()
                                                                   .equalsIgnoreCase("A")) {
                                row.setAttribute("ChargeIndDesc", "Amount");
                            } else {
                                row.setAttribute("ChargeIndDesc", "Percentage");
                            }
                            
                            if (r.getAttribute("Col4") != null) {
                                row.setAttribute("ChargeValue", new BigDecimal(r.getAttribute("Col4").toString()));
                            } else {
                                row.setAttribute("ChargeValue", BigDecimal.ZERO);
                            }
                            row.setAttribute("CommonInd", r.getAttribute("Col5"));
                            row.setAttribute("ModifyYNT", r.getAttribute("Col5"));
                            row.setAttribute("CheckT", "Y");
                            
                            if (r.getAttribute("Col3") != null && r.getAttribute("Col3")
                                                                   .toString()
                                                                   .equalsIgnoreCase("A")) {
                                if(row.getAttribute("ChargeAmt")==null){
                                    row.setAttribute("ChargeAmt",row.getAttribute("ChargeValue"));
                                }
                            }
                            
                            row.setAttribute("ChargeTypeDesc", r.getAttribute("Col7"));
                            
                            if(row.getAttribute("ChargeType").toString().equalsIgnoreCase("CGS")){
                                pageFlow.put("#{pageFlowScope.p_charge_type}", "CGS");
                                setPageFlowParameters("#{pageFlowScope.p_charge_type}","CGS");
                                System.out.println("CGSSSSSSSSSSS value->" + pageFlow.get("p_charge_type"));
                            }else if(row.getAttribute("ChargeType").toString().equalsIgnoreCase("IGS")){
                                pageFlow.put("#{pageFlowScope.p_charge_type}", "IGS");
                                setPageFlowParameters("#{pageFlowScope.p_charge_type}","IGS");
                                System.out.println("IGSSSSSSSSSSS value->" + pageFlow.get("p_charge_type"));
                            }
                                                        
                            if((row.getAttribute("ChargeType").toString().equalsIgnoreCase("CGS") ||
                               row.getAttribute("ChargeType").toString().equalsIgnoreCase("SGS") ||
                               row.getAttribute("ChargeType").toString().equalsIgnoreCase("SGS")) &&
                               (BillNature.equalsIgnoreCase("V") || BillNature.equalsIgnoreCase("VC"))){
                                   Integer countGST = (Integer)pageFlow.get("P_COUNT_FOR_GST");
                                   countGST = countGST + 1;
                                   pageFlow.put("#{pageFlowScope.P_COUNT_FOR_GST}",countGST);
                                setPageFlowParameters("#{pageFlowScope.P_COUNT_FOR_GST}",countGST);
                            }
                            
                            if(row.getAttribute("ChargeType").toString().equalsIgnoreCase("CE1") &&
                               (BillNature.equalsIgnoreCase("C") || BillNature.equalsIgnoreCase("VC"))){
                                   Integer countKFC = (Integer)pageFlow.get("P_COUNT_FOR_KFC");
                                   countKFC = countKFC + 1;
                                   pageFlow.put("#{pageFlowScope.P_COUNT_FOR_KFC}",countKFC);
                                   setPageFlowParameters("#{pageFlowScope.P_COUNT_FOR_KFC}",countKFC);
                               }
                            vo.insertRow(row);
                            count = count + 1;

                        }
                    }
                    rst.closeRowSetIterator();
                }
                vo.setSortBy("ChargeSrl");
                vo.setQueryMode(ViewObject.QUERY_MODE_SCAN_VIEW_ROWS);
                vo.executeQuery();
//                calculateChargeAmount();
            }else{
                return errMsg;
            }
        } catch (SQLException sqle) {
            // TODO: Add catch code
            sqle.printStackTrace();
        }finally {
            try {
                if (cs != null) {
                    cs.close();
                }
            } catch (Exception e) {
            }
        }
        return errMsg;
    }

    public String formParam(String param) {
        ViewObjectImpl chargeVO = this.getChargesDetailsVO2();
        RowSetIterator rsi = chargeVO.createRowSetIterator(null);
        String chargeType = null;
        BigDecimal chargeVal = BigDecimal.ZERO;
        Integer divisor = null;
        String chargeInd = null;
        while (rsi.hasNext()) {
            Row chargeRw = rsi.next();
            
            System.out.println("CheckT------>" + chargeRw.getAttribute("CheckT"));
            if (chargeRw.getAttribute("CheckT") != null && chargeRw.getAttribute("CheckT").toString().equalsIgnoreCase("Y")) {
                chargeType = (String) chargeRw.getAttribute("ChargeType");
                
                if (chargeRw.getAttribute("ChargeInd") != null && chargeRw.getAttribute("ChargeInd")
                                                                          .toString()
                                                                          .equalsIgnoreCase("P")) {
                    chargeVal = chargeRw.getAttribute("ChargeValue") != null ?
                        (BigDecimal) chargeRw.getAttribute("ChargeValue") : chargeVal;  
                    divisor = 100;
                }else{
                    chargeVal = chargeRw.getAttribute("ChargeAmt") != null ?
                        (BigDecimal) chargeRw.getAttribute("ChargeAmt") : chargeVal;
                    divisor = 1;
                }
                
                Map pageFlow = ADFContext.findCurrent().getPageFlowScope();
                BigDecimal divide = chargeVal.divide(new BigDecimal(divisor));
                BigDecimal P_MSSF = pageFlow.get("P_MSSF")!=null?(BigDecimal)pageFlow.get("P_MSSF"):BigDecimal.ZERO;
                BigDecimal P_NMSSF = pageFlow.get("P_NMSSF")!=null?(BigDecimal)pageFlow.get("P_NMSSF"):BigDecimal.ZERO;
                if(chargeType.equalsIgnoreCase("DIS")){
                    param = param + chargeType + ";" + P_MSSF.toString()+P_NMSSF.toString() + ";" + chargeInd + ";";
                }else{
                    param = param + chargeType + ";" + divide.toString() + ";" + chargeInd + ";";    
                }
                

            }
        }
        rsi.closeRowSetIterator();
        System.out.println("Param returned------ " + param);
        return param;
    }

    public void updateDatabase(String expr, BigDecimal exprVal) {
        Map session = ADFContext.getCurrent().getSessionScope();
        String locCd = session.get("locCd").toString();
        Integer dealerMp = new Integer(session.get("dealerMapCd").toString());
        String parentGrp = session.get("parentGroupCd").toString();
        String compFa = session.get("compCode").toString();
        String token = "";
        BigDecimal val = null;
        Row headRw = this.getSalesInvoiceVO1().getCurrentRow();
        while (expr != null) {
            try {
                token = expr.substring(0, expr.indexOf(";"));
                expr = expr.substring(expr.indexOf(";") + 1);
                val = new BigDecimal(expr.substring(0, expr.indexOf(";")));
                expr = expr.substring(expr.indexOf(";") + 1);

                ViewObjectImpl chargeVO = this.getChargesDetailsVO2();
                RowSetIterator rsi = chargeVO.createRowSetIterator(null);

                while (rsi.hasNext()) {
                    Row chargeRw = rsi.next();
                    if (chargeRw.getAttribute("ChargeValue") != null &&
                        ((BigDecimal) chargeRw.getAttribute("ChargeValue")).compareTo(BigDecimal.ZERO) > 0) {
                        String chargeTyp = (String) chargeRw.getAttribute("ChargeType");
                        if (chargeTyp.equalsIgnoreCase(token)) {
                            if ((token.equalsIgnoreCase("ESD") || token.equalsIgnoreCase("DEP"))) {
                                headRw.setAttribute("DepAmt", val);
                            }
                            if (token.equalsIgnoreCase("DIS")) {
                                headRw.setAttribute("DisAmt", val);
                            }
                            if (token.equalsIgnoreCase("EXB")) {
                                headRw.setAttribute("ExbAmt", val);
                            }
                            if (token.equalsIgnoreCase("DIC")) {
                                headRw.setAttribute("DisSsl", val);
                            }
                            if (token.equalsIgnoreCase("MDS")) {
                                headRw.setAttribute("MdsAmt", val);
                            }
                            if (token.equalsIgnoreCase("SSD")) {
                                headRw.setAttribute("SsdAmt", val);
                            }
                            if (chargeRw.getAttribute("ChargeInd")
                                        .toString()
                                        .equalsIgnoreCase("P")) {
                                chargeRw.setAttribute("ChargeAmt", val);
                            }
                        }
                    }
                }
                rsi.closeRowSetIterator();
            } catch (Exception e) {
                break;
            }

            Row variantVO = this.getSalesInvoiceVO1().getCurrentRow();
            BigDecimal totAmt = BigDecimal.ZERO;
            //                     BigDecimal bd = totAmt.subtract((((BigDecimal)(headRw.getAttribute("NbDepartmentAmt")!=null?headRw.getAttribute("NbDepartmentAmt"):BigDecimal.ZERO)).multiply(new BigDecimal(2))).add((((BigDecimal)(headRw.getAttribute("NbdisAmount")!=null?headRw.getAttribute("NbdisAmount"):BigDecimal.ZERO)).multiply(new BigDecimal(2)))));
            //                      headRw.setAttribute("TempTotal", bd);


            variantVO.setAttribute("InvAmt", exprVal);
            totAmt = exprVal.subtract((BigDecimal) variantVO.getAttribute("SellPrice"));
            headRw.setAttribute("TempTot", totAmt);
            headRw.setAttribute("ChargeAmt", totAmt);

            //        System.out.println("DEPT AMT "+headRw.getAttribute("NbDepartmentAmt")+" DiscAmt "+headRw.getAttribute("NbdisAmount"));
        }
    }

    public void executeOninit() {
        FmCardSTImpl fmCardSearchObj = getFmCardST1();
        fmCardSearchObj.executeEmptyRowSet();
    }

    public void updateDataForFMCard(String fmApprovalRemarks, oracle.jbo.domain.Date modifiedDate, String mpdifiedBy,
                                    String leaseFmCardNo, String fmCardStatus) {
        ViewObjectImpl vo = this.getShLeaseFmCardVO1();
        ViewCriteria vc = vo.getViewCriteria("ShLeaseFmCardVOCriteria");
        vo.setNamedWhereClauseParam("bind_LeaseFMCardNo", leaseFmCardNo);
        vo.appendViewCriteria(vc);
        vo.executeQuery();
        if (vo.getEstimatedRowCount() > 0) {
            Row row = (Row) vo.first();
            System.err.println("Row data :::::" + row);
            row.setAttribute("FmCardStatus", fmCardStatus);
            row.setAttribute("FmApprovalRemarks", fmApprovalRemarks);
            row.setAttribute("ModifiedDate", modifiedDate);
            row.setAttribute("ModifiedBy", mpdifiedBy);
            this.getDBTransaction().commit();
        }
    }


    /**
     * Container's getter for SpInvChargeEOView1.
     * @return SpInvChargeEOView1
     */
    public ViewObjectImpl getSpInvChargeEOView1() {
        return (ViewObjectImpl) findViewObject("SpInvChargeEOView1");
    }

    public void emptyroeset() {

        ViewObjectImpl vo = this.getChargesDetailsVO1();
        vo.executeEmptyRowSet();
        ViewObjectImpl invVO = this.getSalesInvoiceVO1();
        invVO.executeEmptyRowSet();

        //setting parameters

        //        ViewObjectImpl amUser = this.getAmUserDealerMasterRO1();
        //        amUser.executeQuery();
        //
        //        if(amUser.first()!=null){
        //            String role = (String)amUser.first().getAttribute("RoleCd");
        //            Map param = ADFFacesContext.getCurrentInstance().getPageFlowScope();
        //        }
    }

    public void salesinvoicesearch(String ordernum, String invoicenum, Date fromorderDate, Date toorderDate,
                                   Date frominvDate, Date toinvdate) {
        try {
            ViewObjectImpl vo = this.getSalesInvoiceVO1();
            // System.out.println(vo.getQuery());
            SaleRowImpl search = (SaleRowImpl)this.getSale1().getCurrentRow();
            ViewCriteria vc = vo.getViewCriteria("SalesInvoiceVOCriteria");
            vo.applyViewCriteria(vc);
            //  System.out.println(fromDate);
            //            SimpleDateFormat DateFor = new SimpleDateFormat("dd/MM/yyyy");
            ////           // Date fromD = DateFgor.format(d);
            ////            String fD= DateFor.format(fromDate);
            ////            String tD= DateFor.format(toDate);
            ////              java.sql.Date fromDate1 = fromDate.dateValue();
            ////            java.sql.Date toDate1 = toDate.dateValue();
            ////            Date date = DateFor.parse(fD);
            ////            System.out.println(date);
            vo.setNamedWhereClauseParam("BindOrderNum", ordernum);
            vo.setNamedWhereClauseParam("BindInvNum", invoicenum);
            vo.setNamedWhereClauseParam("BindFromOrderDate", fromorderDate);
            vo.setNamedWhereClauseParam("BindToOrderDate", toorderDate);
            vo.setNamedWhereClauseParam("BindFromInvDate", frominvDate);
            vo.setNamedWhereClauseParam("BindToInvDate", toinvdate);
            vo.setNamedWhereClauseParam("bindCustomerNo", search.getCustomerId());
            //   System.out.println(vo.getQuery());
            vo.executeQuery();
        } catch (Exception e) {
            // TODO: Add catch code
            e.printStackTrace();
        }
    }

    public void salesinvoicereset() {
        try {
            ViewObjectImpl vo = this.getSalesInvoiceVO1();
            vo.executeEmptyRowSet();
//            this.getSale1().executeEmptyRowSet();
            this.getSale1().executeQuery();
        } catch (Exception e) {
            // TODO: Add catch code
            e.printStackTrace();
        }
    }

    /**
     * Container's getter for ZonalApprvRejectSmBonusMasterVO1.
     * @return ZonalApprvRejectSmBonusMasterVO1
     */
    public ViewObjectImpl getZonalApprvRejectSmBonusMasterVO1() {
        return (ViewObjectImpl) findViewObject("ZonalApprvRejectSmBonusMasterVO1");
    }

    /**
     * Container's getter for ZonalApprvRejectSmAddBonusMasterRO1.
     * @return ZonalApprvRejectSmAddBonusMasterRO1
     */
    public ZonalApprvRejectSmAddBonusMasterROImpl getZonalApprvRejectSmAddBonusMasterRO1() {
        return (ZonalApprvRejectSmAddBonusMasterROImpl) findViewObject("ZonalApprvRejectSmAddBonusMasterRO1");
    }

    /**
     * Container's getter for ZonalApprvRejectSmBonusMasterRO1.
     * @return ZonalApprvRejectSmBonusMasterRO1
     */
    public ZonalApprvRejectSmBonusMasterROImpl getZonalApprvRejectSmBonusMasterRO1() {
        return (ZonalApprvRejectSmBonusMasterROImpl) findViewObject("ZonalApprvRejectSmBonusMasterRO1");
    }

    /**
     * Container's getter for ZonalApprvRejectSmBonusStklMaster1.
     * @return ZonalApprvRejectSmBonusStklMaster1
     */
    public ZonalApprvRejectSmBonusStklMasterImpl getZonalApprvRejectSmBonusStklMaster1() {
        return (ZonalApprvRejectSmBonusStklMasterImpl) findViewObject("ZonalApprvRejectSmBonusStklMaster1");
    }

    /**
     * @code To search Zonal Approve/Reject Scheme
     * @param map
     * @return
     */
    public Long searchZonalApproveRejectScheme(Map map) {
        Long returnVal = null;
        try {
            ViewObjectImpl bonusVo = null;
            if ("B".equalsIgnoreCase((String) map.get("pMasterType")) && map.get("pMasterType") != null) {
                bonusVo = this.getZonalApprvRejectSmBonusMasterRO1();
            } else if ("S".equalsIgnoreCase((String) map.get("pMasterType")) && map.get("pMasterType") != null) {
                bonusVo = this.getZonalApprvRejectSmBonusStklMaster1();
            } else if ("A".equalsIgnoreCase((String) map.get("pMasterType")) && map.get("pMasterType") != null) {
                bonusVo = this.getZonalApprvRejectSmAddBonusMasterRO1();
            }
            bonusVo.clearViewCriterias();
            bonusVo.setNamedWhereClauseParam("p_bonus_type", map.get("pBonusType"));
            bonusVo.setNamedWhereClauseParam("p_regn", map.get("pRegionCd"));
            bonusVo.setNamedWhereClauseParam("p_status", map.get("pStatus"));
            bonusVo.setNamedWhereClauseParam("p_from_date", map.get("pFromDate"));
            bonusVo.setNamedWhereClauseParam("p_to_date", map.get("pToDate"));
            bonusVo.setNamedWhereClauseParam("p_channel", map.get("pChannel"));
            bonusVo.setNamedWhereClauseParam("p_for_cd", map.get("pForCd"));
            bonusVo.setNamedWhereClauseParam("p_fueltype_cd", map.get("pFuelType"));
            bonusVo.setNamedWhereClauseParam("p_model_cd", map.get("pModelCd"));
            bonusVo.setNamedWhereClauseParam("p_state", map.get("pStateCd"));
            bonusVo.setNamedWhereClauseParam("p_variant_cd", map.get("pVariantCd"));
            bonusVo.executeQuery();
            returnVal = bonusVo.getEstimatedRowCount();
        } catch (Exception e) {
            // TODO: Add catch code
            e.printStackTrace();
        }
        return returnVal;
    }

    /**
     * @code This method is used to Accept or Reject Zonal Approve /Reject Scheme
     * @param map
     * @return
     */
    public int zonalApproveRejectScheme(Map map) {
        String masterType = (String) ADFContext.getCurrent()
                                               .getPageFlowScope()
                                               .get("pMasterType");
        String zonalAcceptRejectType = (String) ADFContext.getCurrent()
                                                          .getPageFlowScope()
                                                          .get("zonalAcceptRejectType");
        ViewObjectImpl bonusVo = null;
        String zonalAcceptRejectVal = null;
        int returnVal = 0;
        try {
            if (masterType != null && "B".equalsIgnoreCase(masterType)) {
                bonusVo = this.getZonalApprvRejectSmBonusMasterVO1();
            } else if (masterType != null && "S".equalsIgnoreCase(masterType)) {
                bonusVo = this.getZonalApprvRejectSmBonusStklMasterVO1();
            } else if (masterType != null && "A".equalsIgnoreCase(masterType)) {
                bonusVo = this.getZonalApprvRejectSmAddBonusMasterVO1();
            }
            if ("ACCEPT".equalsIgnoreCase(zonalAcceptRejectType)) {
                zonalAcceptRejectVal = "H";
            } else if ("REJECT".equalsIgnoreCase(zonalAcceptRejectType)) {
                zonalAcceptRejectVal = "R";
            }
            bonusVo.clearViewCriterias();
            ViewCriteria vc = bonusVo.getViewCriteriaManager().getViewCriteria("filterByRowIdVC");
            VariableValueManager vvm = vc.ensureVariableManager();
            vvm.setVariableValue("bindRowID", map.get("p_rowid"));
            bonusVo.applyViewCriteria(vc);
            bonusVo.executeQuery();
            if (bonusVo.getEstimatedRowCount() > 0) {
                Row row = bonusVo.first();
                row.setAttribute("Status", zonalAcceptRejectVal);
                returnVal = 1;
                this.getDBTransaction().commit();
            }
        } catch (Exception e) {
            // TODO: Add catch code
            e.printStackTrace();
        }
        return returnVal;
    }

    /**
     * Container's getter for ZonalApprvRejectSmBonusStklMasterVO1.
     * @return ZonalApprvRejectSmBonusStklMasterVO1
     */
    public ViewObjectImpl getZonalApprvRejectSmBonusStklMasterVO1() {
        return (ViewObjectImpl) findViewObject("ZonalApprvRejectSmBonusStklMasterVO1");
    }

    /**
     * Container's getter for ZonalApprvRejectSmAddBonusMasterVO1.
     * @return ZonalApprvRejectSmAddBonusMasterVO1
     */
    public ViewObjectImpl getZonalApprvRejectSmAddBonusMasterVO1() {
        return (ViewObjectImpl) findViewObject("ZonalApprvRejectSmAddBonusMasterVO1");
    }

    public void searchSalesCancellationAM(String CustID, String Inv, Date From, Date To) {
        System.out.println("Start query execute" + CustID + "   " + Inv + "   " + From + "   " + To);
        Map session = ADFContext.getCurrent().getSessionScope();
        System.out.println("session.get(\"parentGroupCd\")" + session.get("parentGroupCd"));
        System.out.println("session.get(\"dealerMapCd\")" + session.get("dealerMapCd"));
        System.out.println("session.get(\"locCd\")" + session.get("locCd"));

        System.out.println("session.get(\"compCode\")" + session.get("compCode"));
        ViewObjectImpl vo = this.getShInvoiceEOView1();

        vo.applyViewCriteria(vo.getViewCriteria("ShInvoiceEOViewCriteria"));
        vo.setNamedWhereClauseParam("bindCustomerId", CustID);
        vo.setNamedWhereClauseParam("bindInvoiceNum", Inv);
        vo.setNamedWhereClauseParam("FromDate", From);
        vo.setNamedWhereClauseParam("ToDate", To);

        //this.setRangeSize(15);
        //this.setAccessMode(RowSet.RANGE_PAGING_INCR);
        //this.setRangePagingCacheFactor(5);
        vo.executeQuery();
        Row a[] = vo.getAllRowsInRange();
        System.out.println("End query execute range " + a.length);
        System.out.println("End query execute" + vo.getEstimatedRowCount());
    }

    /**
     * Container's getter for ExchangeLoyaltySearchRO1.
     * @return ExchangeLoyaltySearchRO1
     */
    public ViewObjectImpl getExchangeLoyaltySearchRO1() {
        return (ViewObjectImpl) findViewObject("ExchangeLoyaltySearchRO1");
    }


    /**
     * Container's getter for GatePassNullLOV1.
     * @return GatePassNullLOV1
     */
    public ViewObjectImpl getGatePassNullLOV1() {
        return (ViewObjectImpl) findViewObject("GatePassNullLOV1");
    }

    /**
     * Container's getter for ExchangeClaimSubmissionRO1.
     * @return ExchangeClaimSubmissionRO1
     */
    public ViewObjectImpl getExchangeClaimSubmissionRO1() {
        return (ViewObjectImpl) findViewObject("ExchangeClaimSubmissionRO1");
    }

    /**
     * Container's getter for LoyaltyAcquistionClaimSubmissionRO1.
     * @return LoyaltyAcquistionClaimSubmissionRO1
     */
    public ViewObjectImpl getLoyaltyAcquistionClaimSubmissionRO1() {
        return (ViewObjectImpl) findViewObject("LoyaltyAcquistionClaimSubmissionRO1");
    }

    /**
     * Container's getter for DefaultPrntCreditNoteLOV1.
     * @return DefaultPrntCreditNoteLOV1
     */
    public DefaultPrntCreditNoteLOVImpl getDefaultPrntCreditNoteLOV1() {
        return (DefaultPrntCreditNoteLOVImpl) findViewObject("DefaultPrntCreditNoteLOV1");
    }

    /**
     * Container's getter for LoyaltyExchangeClaimNsRO2.
     * @return LoyaltyExchangeClaimNsRO2
     */
    public ViewObjectImpl getLoyaltyExchangeClaimNsRO2() {
        return (ViewObjectImpl) findViewObject("LoyaltyExchangeClaimNsRO2");
    }


    /**
     * Container's getter for LoyaltyExchangeClaimNsRO1.
     * @return LoyaltyExchangeClaimNsRO1
     */
    public ViewObjectImpl getLoyaltyExchangeClaimNsRO1() {
        return (ViewObjectImpl) findViewObject("LoyaltyExchangeClaimNsRO1");
    }

    /**
     * Container's getter for DlvryNoteCancelChallanRO1.
     * @return DlvryNoteCancelChallanRO1
     */
    public DlvryNoteCancelChallanROImpl getDlvryNoteCancelChallanRO1() {
        return (DlvryNoteCancelChallanROImpl) findViewObject("DlvryNoteCancelChallanRO1");
    }

    /**
     * Container's getter for DlvryNoteAMChannelRO1.
     * @return DlvryNoteAMChannelRO1
     */
    public DlvryNoteAMChannelROImpl getDlvryNoteAMChannelRO1() {
        return (DlvryNoteAMChannelROImpl) findViewObject("DlvryNoteAMChannelRO1");
    }

    public Integer validateCancelDeliveryChallan() {
        String channelCd = null;
        Integer rowCount = null;
        Map session = ADFContext.getCurrent().getSessionScope();
        try {
            ViewObjectImpl cancelChallanRo = this.getDlvryNoteCancelChallanRO1();
            ViewObjectImpl channelRo = this.getDlvryNoteAMChannelRO1();
            channelRo.setNamedWhereClauseParam("bindDealerMapCd", session.get("dealerMapCd"));
            channelRo.setNamedWhereClauseParam("bindLocCd", session.get("locCd"));
            channelRo.setNamedWhereClauseParam("bindParentGroup", session.get("parentGroupCd"));
            channelRo.executeQuery();
            if (channelRo.getEstimatedRowCount() > 0) {
                Row channelCurrentRow = channelRo.first();
                if (channelCurrentRow != null) {
                    channelCd = (String) channelCurrentRow.getAttribute("Channel");
                }
            }
            cancelChallanRo.setNamedWhereClauseParam("bindChannelCd", channelCd);
            cancelChallanRo.setNamedWhereClauseParam("bindDealerMapCd", session.get("dealerMapCd"));
            cancelChallanRo.setNamedWhereClauseParam("bindPrincipalMapCd", session.get("principalMapCd"));
            cancelChallanRo.setNamedWhereClauseParam("bindUserId", session.get("userId"));
            cancelChallanRo.executeQuery();
            if (cancelChallanRo.getEstimatedRowCount() > 0) {
                Row challanCurrentRow = cancelChallanRo.first();
                if (challanCurrentRow != null) {
                    rowCount = (Integer) challanCurrentRow.getAttribute("Selectobjects0");
                }
            }
        } catch (Exception e) {
            // TODO: Add catch code
            e.printStackTrace();
        }
        return rowCount;
    }

    /**
     * Container's getter for DeliveryNoteSearchRO1.
     * @return DeliveryNoteSearchRO1
     */
    public DeliveryNoteSearchROImpl getDeliveryNoteSearchRO1() {
        return (DeliveryNoteSearchROImpl) findViewObject("DeliveryNoteSearchRO1");
    }

    /**
     * Container's getter for DeliveryNoteGMVinRO1.
     * @return DeliveryNoteGMVinRO1
     */
    public ViewObjectImpl getDeliveryNoteGMVinRO1() {
        return (ViewObjectImpl) findViewObject("DeliveryNoteGMVinRO1");
    }

    /**
     * @code To search Delivery Note
     * @param map
     * @return
     */
    public Map searchDeliveryNote() {
        Map map = new HashMap();
        LOGGER.info("START of searchDeliveryNote");
        Long returnVal = null;
        String chassisNum = null;
        String modelCd = null;
        String dnNum = null;
        java.util.Date toDateUtil = null;
        oracle.jbo.domain.Date toDateDomain = null;
        try {
            ViewObjectImpl resultVo = this.getDeliveryNoteGmVinVO1();
            ViewObjectImpl searchVo = this.getDeliveryNoteSearchRO1();
            Row searchRow = searchVo.getCurrentRow();
            if (searchRow != null) {
                if (searchRow.getAttribute("ToDate") != null) {
                    toDateUtil = convertDomainDateToUtilDate((oracle.jbo.domain.Date) searchRow.getAttribute("ToDate"));
                    toDateDomain = convertUtilDateToDomainDate(addOneDay(toDateUtil));
                }
                resultVo.clearViewCriterias();
                ViewCriteria amListChkListvc = resultVo.getViewCriteria("DeliveryNoteGmVinVOCriteria");
                VariableValueManager vvm1 = amListChkListvc.ensureVariableManager();
                vvm1.setVariableValue("bindChassisNum", searchRow.getAttribute("ChassisNo"));
                vvm1.setVariableValue("bindModelCd", searchRow.getAttribute("ModelCd"));
                vvm1.setVariableValue("bindFromDate", searchRow.getAttribute("FromDate"));
                vvm1.setVariableValue("bindToDate", toDateDomain);
                vvm1.setVariableValue("bindInvNum", searchRow.getAttribute("InvoiceNumber"));
                vvm1.setVariableValue("bindOrderNum", searchRow.getAttribute("OrderNumber"));
                resultVo.applyViewCriteria(amListChkListvc);
                resultVo.executeQuery();
                if (resultVo.getEstimatedRowCount() > 0) {
                    Row channelCurrentRow = resultVo.first();
                    if (channelCurrentRow != null) {
                        modelCd = (String) channelCurrentRow.getAttribute("ModelCd");
                        chassisNum = (String) channelCurrentRow.getAttribute("ChassisNum");
                        dnNum = (String) channelCurrentRow.getAttribute("DnNum");
                    }
                }
            }
            returnVal = resultVo.getEstimatedRowCount();
            map.put("modelCd", modelCd);
            map.put("chassisNum", chassisNum);
            map.put("DnNum", dnNum);
            map.put("returnVal", returnVal);
        } catch (Exception e) {
            // TODO: Add catch code
            e.printStackTrace();
        }
        LOGGER.info("END of searchDeliveryNote");
        return map;
    }

    /**
     * This method is used to execute SpValidateVinDelnote procedure and fetch details related to the vehicle.
     */
    public String exeSpValidateVinDelnoteForSearch(String prtGrp, int dealer, String pmc, String locCd, String compFa,
                                                   String vin, Map map) {
        String invNum = null;
        java.util.Date invDate;
        String altNum = null;
        java.util.Date altDate;
        String errMsg = null;
        int errCd = 0;
        CallableStatement cs = null;
        try {
            String stmt = "begin SP_VALIDATE_VIN_DELNOTE(?,?,?,?,?,?,?,?,?,?,?,?); end;";
            DBTransaction dbtxn = (DBTransaction) getTransaction();
            cs = dbtxn.createCallableStatement(stmt.toString(), 1);
            cs.setString(1, prtGrp);
            cs.setInt(2, dealer);
            cs.setString(3, pmc);
            cs.setString(4, locCd);
            cs.setString(5, compFa);
            cs.setString(6, vin);
            cs.registerOutParameter(7, Types.VARCHAR);
            cs.registerOutParameter(8, Types.DATE);
            cs.registerOutParameter(9, Types.VARCHAR);
            cs.registerOutParameter(10, Types.DATE);
            cs.registerOutParameter(11, Types.VARCHAR);
            cs.registerOutParameter(12, Types.INTEGER);
            cs.executeUpdate();
            invNum = cs.getString(7);
            invDate = cs.getDate(8);
            altNum = cs.getString(9);
            altDate = cs.getDate(10);
            errMsg = cs.getString(11);
            errCd = cs.getInt(12);
            if (errMsg == null) {
                ViewObjectImpl vo = this.getStDeliveryNoteVO1();
                vo.applyViewCriteria(vo.getViewCriteria("filterByDnNumVC"));
                vo.setNamedWhereClauseParam("bindDnNum", map.get("DnNum"));
                vo.executeQuery();
                if (vo.getEstimatedRowCount() > 0) {
                    Row r = vo.first();
                    r.setAttribute("InvNum", invNum);
                    r.setAttribute("InvDate", invDate);
                    r.setAttribute("AltNum", altNum);
                    r.setAttribute("AltDate", altDate);
                    r.setAttribute("Vin", vin);
                }
            }
        } catch (SQLException sqle) {
            // TODO: Add catch code
            sqle.printStackTrace();
        } finally {
            try {
                if (cs != null) {
                    cs.close();
                }
            } catch (Exception e) {
            }
        }
        return errMsg;
    }

    public void setOldCarDetails(String buyid) {
        Map session = ADFContext.getCurrent().getSessionScope();
        Row r1 = getSdLoyltyExchClaimEOView1().getCurrentRow();
        ViewObjectImpl vo = getOldCarDetailsRO1();
        vo.setNamedWhereClauseParam("bindBuyingID", buyid);
        vo.setNamedWhereClauseParam("BindInvDate", r1.getAttribute("InvDate"));
        vo.executeQuery();
        Row row[] = vo.getAllRowsInRange();
        System.out.println("lengt" + row.length);

        System.out.println("NewOldCarAge " + row[0].getAttribute("NewOldcarAge"));
        r1.setAttribute("OldCarMake", row[0].getAttribute("Make"));
        r1.setAttribute("OldCarMakeDesc", row[0].getAttribute("Makedesc"));
        r1.setAttribute("OldCarModel", row[0].getAttribute("Model"));
        r1.setAttribute("OldCarChassis", row[0].getAttribute("Chassis"));
        r1.setAttribute("OldCarVin", row[0].getAttribute("Vin"));
        r1.setAttribute("OldCarCustName", row[0].getAttribute("Custname"));
        r1.setAttribute("EngineNum", row[0].getAttribute("Engine"));
        r1.setAttribute("OldCarSubModel", row[0].getAttribute("Submodel"));
        r1.setAttribute("PocBuyingPrice", row[0].getAttribute("BuyPrice"));
        r1.setAttribute("OldCarRegNum", row[0].getAttribute("RegNo"));
        r1.setAttribute("NewOldCarAge", row[0].getAttribute("NewOldcarAge"));
        r1.setAttribute("ClaimType", "E");

        String MI_OLD_CAR_CUST_NAME = null;
        String mi_query =
            "SELECT YY.MINS_CUST_NAME FROM NI_NEW_MINS YY WHERE YY.MINS_REG_NUM = '" + row[0].getAttribute("RegNo") +
            "' AND NVL(YY.CANCELLATION_STATUS, 'N') != 'Y' AND YY.MINS_EXP_DATE >= TRUNC(SYSDATE) AND   YY.PRINCIPAL_MAP_CD=" +
            session.get("principalMapCd") +
            " AND NOT EXISTS (SELECT 1 FROM NI_NEW_MINS ZZ WHERE ZZ.MINS_VIN = YY.MINS_VIN AND ZZ.Mins_Policy_No = yy.mins_policy_no AND NVL(ZZ.CANCELLATION_STATUS, 'N') = 'Y' AND ZZ.PRINCIPAL_MAP_CD=YY.PRINCIPAL_MAP_CD) AND ROWNUM = 1";
        ResultSet rs;
        try {
            rs = getDBTransaction().createStatement(0).executeQuery(mi_query);
            if (rs.next()) {
                MI_OLD_CAR_CUST_NAME = rs.getString(1);
                System.out.println("MI_OLD_CAR_CUST_NAME " + MI_OLD_CAR_CUST_NAME);
                r1.setAttribute("MiOldCarCustName", MI_OLD_CAR_CUST_NAME);

            }
        } catch (SQLException e) {
            e.printStackTrace();
        }


        Object OldCarCustVsNewMiFlag =
            callStoredFunction(Types.VARCHAR, "SF_NAME_MATCH_FLAG(?,?)",
                               new Object[] { row[0].getAttribute("Custname"), r1.getAttribute("InvMiName") });
        System.out.println(" OldCarCustVsNewMiFlag " + OldCarCustVsNewMiFlag);
        r1.setAttribute("OldCarCustVsNewMiFlag", (String) OldCarCustVsNewMiFlag);

        Object OldMiVsNewMiFlag =
            callStoredFunction(Types.VARCHAR, "SF_NAME_MATCH_FLAG(?,?)",
                               new Object[] { r1.getAttribute("MiOldCarCustName"), r1.getAttribute("InvMiName") });
        System.out.println(" OldMiVsNewMiFlag " + OldMiVsNewMiFlag);
        r1.setAttribute("OldMiVsNewMiFlag", (String) OldMiVsNewMiFlag);

        String old_car_cust_name =
            r1.getAttribute("MiOldCarCustName") == null ? (String) row[0].getAttribute("Custname") :
            (String) r1.getAttribute("MiOldCarCustName");
        Object VehmCustVsNewMiFlag =
            callStoredFunction(Types.VARCHAR, "SF_NAME_MATCH_FLAG(?,?)",
                               new Object[] { old_car_cust_name, r1.getAttribute("InvMiName") });
        System.out.println(" VehmCustVsNewMiFlag " + VehmCustVsNewMiFlag);
        r1.setAttribute("VehmCustVsNewMiFlag", (String) VehmCustVsNewMiFlag);

        Object OldCarCustVsOldMiFlag =
            callStoredFunction(Types.VARCHAR, "SF_NAME_MATCH_FLAG(?,?)",
                               new Object[] { row[0].getAttribute("Custname"), r1.getAttribute("MiOldCarCustName") });
        System.out.println(" OldCarCustVsOldMiFlag " + OldCarCustVsOldMiFlag);
        r1.setAttribute("OldCarCustVsOldMiFlag", (String) OldCarCustVsOldMiFlag);

        Object NewCarCustVsNewMiFlag =
            callStoredFunction(Types.VARCHAR, "SF_NAME_MATCH_FLAG(?,?)",
                               new Object[] { r1.getAttribute("InvCustName"), r1.getAttribute("InvMiName") });
        System.out.println(" NewCarCustVsNewMiFlag " + NewCarCustVsNewMiFlag);
        r1.setAttribute("NewCarCustVsNewMiFlag", (String) NewCarCustVsNewMiFlag);

    }

    public String getInvMiName(String vin) {
        Map session = ADFContext.getCurrent().getSessionScope();
        String mi_query =
            "SELECT YY.MINS_CUST_NAME FROM NI_NEW_MINS YY WHERE YY.MINS_VIN = '" + vin +
            "' AND NVL(YY.CANCELLATION_STATUS, 'N') != 'Y' AND YY.MINS_EXP_DATE >= TRUNC(SYSDATE) AND	YY.PRINCIPAL_MAP_CD=" +
            session.get("principalMapCd") +
            " AND NOT EXISTS (SELECT 1 FROM NI_NEW_MINS ZZ WHERE ZZ.MINS_VIN = YY.MINS_VIN AND ZZ.Mins_Policy_No = yy.mins_policy_no AND NVL(ZZ.CANCELLATION_STATUS, 'N') = 'Y' AND ZZ.PRINCIPAL_MAP_CD=YY.PRINCIPAL_MAP_CD) AND ROWNUM = 1";
        ResultSet rs;
        String mi_name = null;
        try {
            rs = getDBTransaction().createStatement(0).executeQuery(mi_query);
            if (rs.next()) {
                mi_name = rs.getString(1);
                System.out.println("mi_name " + mi_name);
                return mi_name;

            }
        } catch (SQLException e) {
            e.printStackTrace();
        }


        return null;
    }

    /**
     * Container's getter for DeliveryNoteGmVinVO1.
     * @return DeliveryNoteGmVinVO1
     */
    public DeliveryNoteGmVinVOImpl getDeliveryNoteGmVinVO1() {
        return (DeliveryNoteGmVinVOImpl) findViewObject("DeliveryNoteGmVinVO1");
    }

    public void resetDeliveryNoteSearchResultsVO() {
        ViewObjectImpl resultVo1 = this.getDeliveryNoteGmVinVO1();
        resultVo1.executeEmptyRowSet();
    }


    /**
     * Container's getter for CsdCustDetailsRO1.
     * @return CsdCustDetailsRO1
     */
    public ViewObjectImpl getCsdCustDetailsRO1() {
        return (ViewObjectImpl) findViewObject("CsdCustDetailsRO1");
    }

    public Map getModelWiseSummary(String modelCd) {
        Map returnParams = new HashMap<String, Object>();
        try {
            String errMsg = "";
            int errCd = 0;
            Map session = ADFContext.getCurrent().getSessionScope();
            CallableStatement cs = null;
            int dealerCd = Integer.parseInt(session.get("dealerMapCd").toString());
            int pmc = Integer.parseInt(session.get("principalMapCd").toString());
            java.sql.Timestamp datetime = new java.sql.Timestamp(System.currentTimeMillis());
            String batch_id = (String) session.get("userCode") + dealerCd + "" + pmc + "" + datetime;
            LOGGER.info("Model summary proc with insertion and batch Id : " + batch_id);
            ViewObjectImpl vo = this.getdms2VehSumTable1();
            if(vo.getEstimatedRowCount()>0){
                String batChId = (String)vo.first().getAttribute("BatchId");
                clearModelWiseSummary(batChId);
            }
            try {
                String stmt = "begin dms2_sp_veh_smry_mdl_wise(?,?,?,?,?,?,?,?,?,?,?);commit; end;";
                DBTransaction dbtxn = (DBTransaction) getTransaction();
                cs = dbtxn.createCallableStatement(stmt.toString(), 1);
                cs.setInt(1, dealerCd);
                cs.setInt(2, pmc);
                cs.setString(3, (String) session.get("locCd"));
                cs.setString(4, (String) session.get("parentGroupCd"));
                cs.setString(5, (String) session.get("compCode"));
                cs.setString(6, modelCd);
                cs.setString(7, (String) session.get("userCode"));
                cs.setString(8, batch_id);
                cs.setString(9, "INS");
                cs.registerOutParameter(10, Types.VARCHAR);
                cs.registerOutParameter(11, Types.NUMERIC);
                cs.executeUpdate();
                errMsg = cs.getString(10);
                errCd = cs.getInt(11);

            } catch (SQLException sqle) {
                sqle.printStackTrace();
            } finally {
                try {
                    if (cs != null) {
                        cs.close();

                    }
                } catch (Exception e) {
                    e.printStackTrace();
                }
            }
            returnParams.put("errorMessage", errMsg);
            returnParams.put("errorCode", errCd);
            returnParams.put("batchId", batch_id);
        } catch (NumberFormatException nfe) {
            nfe.printStackTrace();
        } catch (Exception e) {
            e.printStackTrace();
        }
        return returnParams;
    }

    /**
     * Container's getter for AmDealerVO1.
     * @return AmDealerVO1
     */
    public ViewObjectImpl getAmDealerVO1() {
        return (ViewObjectImpl) findViewObject("AmDealerVO1");
    }

    public Map getColorWiseSummary(String modelCd) {
        Map returnParams = new HashMap<String, Object>();
        try {
            String errMsg = "";
            int errCd = 0;
            Map session = ADFContext.getCurrent().getSessionScope();
            CallableStatement cs = null;
            int dealerCd = Integer.parseInt(session.get("dealerMapCd").toString());
            int pmc = Integer.parseInt(session.get("principalMapCd").toString());
            java.sql.Timestamp datetime = new java.sql.Timestamp(System.currentTimeMillis());
            String batch_id = (String) session.get("userCode") + dealerCd + "" + pmc + "" + datetime;
            LOGGER.info("Color summary proc with insertion and batch Id : " + batch_id);
            ViewObjectImpl vo = this.getdms2VehSumTable1();
            if(vo.getEstimatedRowCount()>0){
                String batChId = (String)vo.first().getAttribute("BatchId");
                clearColorWiseSummary(batChId);
            }
            try {
                String stmt = "begin dms2_sp_veh_sry_clr_wise(?,?,?,?,?,?,?,?,?,?,?); commit; end;";
                DBTransaction dbtxn = (DBTransaction) getTransaction();
                cs = dbtxn.createCallableStatement(stmt.toString(), 1);
                cs.setInt(1, dealerCd);
                cs.setInt(2, pmc);
                cs.setString(3, (String) session.get("locCd"));
                cs.setString(4, (String) session.get("parentGroupCd"));
                cs.setString(5, (String) session.get("compCode"));
                cs.setString(6, modelCd);
                cs.setString(7, (String) session.get("userCode"));
                cs.setString(8, batch_id);
                cs.setString(9, "INS");
                cs.registerOutParameter(10, Types.VARCHAR);
                cs.registerOutParameter(11, Types.NUMERIC);
                cs.executeUpdate();
                errMsg = cs.getString(10);
                errCd = cs.getInt(11);
            } catch (SQLException sqle) {
                sqle.printStackTrace();
            } finally {
                try {
                    if (cs != null) {
                        cs.close();
                    }
                } catch (Exception e) {
                    e.printStackTrace();
                }
            }
            returnParams.put("errorMessage", errMsg);
            returnParams.put("errorCode", errCd);
            returnParams.put("batchId", batch_id);
        } catch (NumberFormatException nfe) {
            nfe.printStackTrace();
        } catch (Exception e) {
            e.printStackTrace();
        }
        return returnParams;
    }

    public Map clearModelWiseSummary(String batch_id) {
        Map returnParams = new HashMap<String, Object>();
        String errMsg = "";
        int errCd = 0;
        try {
            CallableStatement cs = null;
            LOGGER.info("Model summary proc with deletion and batch Id : " + batch_id);
            try {
                String stmt = "begin dms2_sp_veh_smry_mdl_wise(?,?,?,?,?,?,?,?,?,?,?); end;";
                DBTransaction dbtxn = (DBTransaction) getTransaction();
                cs = dbtxn.createCallableStatement(stmt.toString(), 1);
                cs.setInt(1, 0);
                cs.setInt(2, 0);
                cs.setString(3, null);
                cs.setString(4, null);
                cs.setString(5, null);
                cs.setString(6, null);
                cs.setString(7, null);
                cs.setString(8, batch_id);
                cs.setString(9, "DEL");
                cs.registerOutParameter(10, Types.VARCHAR);
                cs.registerOutParameter(11, Types.NUMERIC);
                cs.executeUpdate();
                errMsg = cs.getString(10);
                errCd = cs.getInt(11);

            } catch (SQLException sqle) {
                sqle.printStackTrace();
            } finally {
                try {
                    if (cs != null) {
                        cs.close();
                    }
                } catch (Exception e) {
                    e.printStackTrace();
                }
            }
            returnParams.put("errorMessage", errMsg);
            returnParams.put("errorCode", errCd);
            returnParams.put("batchId", batch_id);

        } catch (NumberFormatException nfe) {
            nfe.printStackTrace();
        } catch (Exception e) {
            e.printStackTrace();
        }
        return returnParams;
    }

    public Map clearColorWiseSummary(String batch_id) {
        Map returnParams = new HashMap<String, Object>();
        String errMsg = "";
        int errCd = 0;
        try {
            CallableStatement cs = null;
            LOGGER.info("Model summary proc with deletion and batch Id : " + batch_id);
            try {
                String stmt = "begin dms2_sp_veh_sry_clr_wise(?,?,?,?,?,?,?,?,?,?,?); end;";
                DBTransaction dbtxn = (DBTransaction) getTransaction();
                cs = dbtxn.createCallableStatement(stmt.toString(), 1);
                cs.setInt(1, 0);
                cs.setInt(2, 0);
                cs.setString(3, null);
                cs.setString(4, null);
                cs.setString(5, null);
                cs.setString(6, null);
                cs.setString(7, null);
                cs.setString(8, batch_id);
                cs.setString(9, "DEL");
                cs.registerOutParameter(10, Types.VARCHAR);
                cs.registerOutParameter(11, Types.NUMERIC);
                cs.executeUpdate();
                errMsg = cs.getString(10);
                errCd = cs.getInt(11);

            } catch (SQLException sqle) {
                sqle.printStackTrace();
            } finally {
                try {
                    if (cs != null) {
                        cs.close();
                    }
                } catch (Exception e) {
                    e.printStackTrace();
                }
            }
            returnParams.put("errorMessage", errMsg);
            returnParams.put("errorCode", errCd);
            returnParams.put("batchId", batch_id);

        } catch (NumberFormatException nfe) {
            nfe.printStackTrace();
        } catch (Exception e) {
            e.printStackTrace();
        }
        return returnParams;
    }

    /**
     * Container's getter for dms2VehSumTable1.
     * @return dms2VehSumTable1
     */
    public ViewObjectImpl getdms2VehSumTable1() {
        return (ViewObjectImpl) findViewObject("dms2VehSumTable1");
    }

    /**
     * Container's getter for SdLoyaltyExchClaimVO1.
     * @return SdLoyaltyExchClaimVO1
     */
    public ViewObjectImpl getSdLoyaltyExchClaimVO1() {
        return (ViewObjectImpl) findViewObject("SdLoyaltyExchClaimVO1");
    }

    /**

     * This method is used for generating indent number in receipts form.
     */
    public String exeGenRecNum(int dealerMapCd, String principalMapCd, String locCd, String compFa, String docType,
                               int finYear) {

        DBTransaction trx = (DBTransaction) getTransaction();
        CallableStatement st = null;
        String docNum = null;

        try {
            // 1. Define the PL/SQL block for the statement to invoke
            String stmt = "begin Generate_Next_Num (?,?,?,?,?,?,?,?,?);commit; end;";
            // 2. Create the CallableStatement for the PL/SQL block
            st = trx.createCallableStatement(stmt, 0);
            // 3. Register the positions and types of the OUT parameters

            // 4. Set the bind values of the IN parameters
            st.setInt(1, dealerMapCd);
            st.setString(2, principalMapCd);
            st.setString(3, locCd);
            st.setString(4, compFa);
            st.setString(5, docType);
            st.registerOutParameter(6, Types.VARCHAR);
            st.registerOutParameter(7, Types.VARCHAR);
            st.registerOutParameter(8, Types.INTEGER);
            st.setInt(9, finYear);
            // 5. Execute the statement
            st.executeUpdate();
            docNum = st.getString(6);
            String error_msg = st.getString(7);
            int err = st.getInt(8);
        } catch (Exception sqle) {
            // TODO: Add catch code
            sqle.printStackTrace();
        } finally {
            try {
                if (st != null) {
                    st.close();
                }
            } catch (Exception e) {
            }
        }

        return docNum;


    }

    /**
     * Container's getter for SdGrnAllotmentVO1.
     * @return SdGrnAllotmentVO1
     */
    public SdGrnAllotmentVOImpl getSdGrnAllotmentVO1() {
        return (SdGrnAllotmentVOImpl) findViewObject("SdGrnAllotmentVO1");
    }

    /**Method to pass the journal Voucher for Order Refund
     * @return the error message value
     */
    public String orderRefundJournalVoucher(String refundNo) {
        LOGGER.info("** inside orderRefundJournalVoucher()- Order Refund");
        String errMsg = null;
        String errStatus = null;
        DBTransaction trx = (DBTransaction) getTransaction();
        CallableStatement st = null;
        Map session = ADFContext.getCurrent().getSessionScope();
        Integer principalMapCd = Integer.valueOf(session.get("principalMapCd").toString());
        String parentGrp = (String) session.get("parentGroupCd");
        Integer dlrMapCd = Integer.valueOf(session.get("dealerMapCd").toString());
        ;
        String locCd = (String) session.get("locCd");
        String compCd = (String) session.get("compCode");
        String userCd = (String) session.get("userCode");
        try {
            long millis = System.currentTimeMillis();
            java.sql.Date currdate = new java.sql.Date(millis);
            String stmt = "begin DMS2_SALES_ORD_REF_BOOKING_REF(?,?,?,?,?,?,?,?,?,?,?,?); end;";
            st = trx.createCallableStatement(stmt, 1);
            st.setInt(1, principalMapCd);
            st.setString(2, parentGrp);
            st.setInt(3, dlrMapCd);
            st.setString(4, locCd);
            st.setString(5, compCd);
            st.setString(6, "Journal");
            st.setString(7, refundNo);
            st.setString(8, userCd);
            st.setDate(9, currdate);
            st.setString(10, "O");
            st.registerOutParameter(11, Types.VARCHAR);
            st.registerOutParameter(12, Types.VARCHAR);
            st.executeUpdate();
            errStatus = st.getString(11);
            errMsg = st.getString(12) != null ? (String) st.getString(12) : null;
            LOGGER.info("** end of orderRefundJournalVoucher()- Order Refund");
            return errStatus;
        } catch (Exception sqle) {
            sqle.printStackTrace();
        } finally {
            try {
                if (st != null) {
                    st.close();
                }
            } catch (Exception e) {
            }
        }
        return errStatus;

    }


    /**
     * Container's getter for GmSchemeSMVO2.
     * @return GmSchemeSMVO2
     */
    public ViewObjectImpl getGmSchemeSMVO2() {
        return (ViewObjectImpl) findViewObject("GmSchemeSMVO2");
    }

    /**
     * Container's getter for CorpMasterUploadFetchDtlsRVO1.
     * @return CorpMasterUploadFetchDtlsRVO1
     */
    public ViewObjectImpl getCorpMasterUploadFetchDtlsRVO1() {
        return (ViewObjectImpl) findViewObject("CorpMasterUploadFetchDtlsRVO1");
    }

    public void updateSmBookChangeRecord() {
        java.sql.Timestamp datetime = new java.sql.Timestamp(System.currentTimeMillis());
        Map session = ADFContext.getCurrent().getSessionScope();
        ViewObjectImpl vo = this.getSmBookNameChngAllowVO1();
        ViewObjectImpl vo1 = this.getCustomerNameChangeRO1();
        
        Row row = vo1.getCurrentRow();
        vo.applyViewCriteria(vo.getViewCriteria("updateSmBookNameChngAllowVOCriteria"));
        vo.setNamedWhereClauseParam("bind_bkngNo", row.getAttribute("BookingNo"));
        vo.setNamedWhereClauseParam("bind_dealer_map_cd", row.getAttribute("DealerMapCd"));
        vo.setNamedWhereClauseParam("bind_loc_cd", row.getAttribute("LocCd"));
        vo.setNamedWhereClauseParam("bind_parentGrp", row.getAttribute("ParentGroup"));
        vo.executeQuery();
        Row row1 = vo.first();
        row1.setAttribute("VariantChange", (String) row.getAttribute("VariantChange"));
        row1.setAttribute("ColorChange", (String) row.getAttribute("ColorChange"));
        row1.setAttribute("ModifiedDate", datetime);
        row1.setAttribute("ModifiedBy", session.get("userId").toString());
        row1.setAttribute("Flag", (String) row.getAttribute("Flag"));
        this.getDBTransaction().commit();
        vo.setApplyViewCriteriaName("updateSmBookNameChngAllowVOCriteria", false);
        vo.removeApplyViewCriteriaName("updateSmBookNameChngAllowVOCriteria");
        vo.executeQuery();
        System.out.println(vo.getEstimatedRowCount() + "rowcount---");
    }

    public void defaultBookNameValues() {
        ViewObjectImpl vo = this.getSmBookNameChngAllowVO1();
        ViewObjectImpl vo1 = this.getCustomerNameChangeRO1();
        Row row = vo1.getCurrentRow();
        vo.applyViewCriteria(vo.getViewCriteria("updateSmBookNameChngAllowVOCriteria"));
        vo.setNamedWhereClauseParam("bind_bkngNo", row.getAttribute("BookingNo"));
        vo.setNamedWhereClauseParam("bind_dealer_map_cd", row.getAttribute("DealerMapCd"));
        vo.setNamedWhereClauseParam("bind_loc_cd", row.getAttribute("LocCd"));
        vo.setNamedWhereClauseParam("bind_parentGrp", row.getAttribute("ParentGroup"));
        vo.executeQuery();
        Row row1 = vo.first();
        if (row1 != null) {
            System.out.println("colorchnge--" + row1.getAttribute("ColorChange"));
            row.setAttribute("ColorChange", "Y");
            System.out.println((String) row1.getAttribute("VariantChange"));
            row.setAttribute("VariantChange", "Y");
            System.out.println("flag--" + row1.getAttribute("Flag"));
            row.setAttribute("Flag", "Y");
        }
    }

    public void callInvStockRemove(Integer dealerMapCd, String parentGroup, String locCd, String compFa) {
        CallableStatement cs = null;
        String stmt = "begin sp_invc_stock_remove(?,?,?,?); end;";
        DBTransaction txn = (DBTransaction) getTransaction();
        cs = txn.createCallableStatement(stmt, 0);
        try {
            cs.setObject(1, dealerMapCd); //p_dealer
            cs.setObject(2, parentGroup); //pmc
            cs.setObject(3, locCd); //locd
            cs.setObject(4, compFa);
            cs.executeUpdate();
        } catch (SQLException e) {
            e.printStackTrace();
        } finally {
            try {
                if (cs != null) {
                    cs.close();
                }
            } catch (Exception e) {
            }
        }
    }

    /**
     * Container's getter for ShOrdbookMainVO1.
     * @return ShOrdbookMainVO1
     */
    public ShOrdbookMainVOImpl getShOrdbookMainVO1() {
        return (ShOrdbookMainVOImpl) findViewObject("ShOrdbookMainVO1");
    }


    public void newInstanceSalesInv(Integer dealerMapCd, String parentGroup, String locCd, String compFa) {

    }


    public void clearDataOrderBooking() {
        System.out.println("in impl methoddd");
        ViewObjectImpl vo = this.getShOrdbookMainVO1();
        vo.executeEmptyRowSet();
		ViewObjectImpl vo1 = this.getOrderBookingRO1();
        vo1.executeQuery();
        this.getOrderBookingEnquiryRO1().executeEmptyRowSet();

    }

    /**
     * Container's getter for OrderBookCustCdLOV1.
     * @return OrderBookCustCdLOV1
     */
    public OrderBookCustCdLOVImpl getOrderBookCustCdLOV1() {
        return (OrderBookCustCdLOVImpl) findViewObject("OrderBookCustCdLOV1");
    }

    /**
     * Container's getter for OrderBookingRO1.
     * @return OrderBookingRO1
     */
    public OrderBookingROImpl getOrderBookingRO1() {
        return (OrderBookingROImpl) findViewObject("OrderBookingRO1");
    }
	
		public void setLoanStageValues(){
	    //BigDecimal amount = new BigDecimal(0.0);
        try{
	
		 Map session = ADFContext.getCurrent().getSessionScope();
		ViewObjectImpl vo = this.getShOrdbookMainVO1();
        Row r = vo.getCurrentRow();
		
       // String OrderId = r.getAttribute("OrderId")==null? null:r.getAttribute("OrderId").toString();
		String loc = session.get("locCd").toString();
        String parent = session.get("parentGroupCd").toString();
        String comp = session.get("compCode").toString();
        String user = session.get("userCode").toString();
        Integer pmc = Integer.parseInt(session.get("principalMapCd").toString());
		Integer dealer = Integer.parseInt(session.get("dealerMapCd").toString());
		String EnqNum = (String) r.getAttribute("EnqNum");
		
		ResultSet rs;
        //Integer LN_TOT_AMT = 0;
		String q1 = null;
				

				
			q1 ="SELECT loan_stage,list_desc FROM RH_ENQ re,AM_LIST al WHERE re.ENQ_NUM = '"+EnqNum+"' AND re.DEALER_MAP_CD = "+dealer+
    " AND re.PARENT_GROUP = '" +parent+ "' AND re.LOC_CD = '"+ loc + "' AND re.COMP_FA = '" +comp+ "' AND al.LIST_NAME='LOAN_STAGE'"+
    " AND al.PRINCIPAL_MAP_CD= "+pmc+" AND al.LIST_CODE=loan_stage";
			
			rs = getDBTransaction().createStatement(0).executeQuery(q1);
           
            if (rs.next()) {
				//Object CHARGE_AMT= rs.getObject(1);
                                r.setAttribute("LoanStage",rs.getString(1));
								r.setAttribute("LoanStageDesc",rs.getString(2));
                }
				
				
		
	}
	catch(Exception e){
		e.printStackTrace();
	}
	
	//return amount;
	}
	
	public void setCorporateDetail(){
	    //BigDecimal amount = new BigDecimal(0.0);
        try{
		
		 Map session = ADFContext.getCurrent().getSessionScope();
		ViewObjectImpl vo = this.getShOrdbookMainVO1();
        Row r = vo.getCurrentRow();
		
       // String OrderId = r.getAttribute("OrderId")==null? null:r.getAttribute("OrderId").toString();
		String loc = session.get("locCd").toString();
        String parent = session.get("parentGroupCd").toString();
        String comp = session.get("compCode").toString();
        String user = session.get("userCode").toString();
        Integer pmc = Integer.parseInt(session.get("principalMapCd").toString());
		Integer dealer = Integer.parseInt(session.get("dealerMapCd").toString());
		String EnqNum = (String) r.getAttribute("EnqNum");
		
		ResultSet rs;
        //Integer LN_TOT_AMT = 0;
		String q1 = null;
				
				//into :B_SH_ORDBOOK.CORPORATE_NAME,:B_SH_ORDBOOK.CORPORATE,:B_SH_ORDBOOK.WORKPLACE

					
			q1 ="SELECT mul.CP_NAME,rh.workplace_id,rh.work_place FROM mul_corporate mul, rh_enq rh WHERE rh.ENQ_NUM = '"+EnqNum +
				    "' AND rh.DEALER_MAP_CD = "+dealer+" AND rh.PARENT_GROUP = '"+parent+"' AND rh.LOC_CD = '"+loc +
				    "' AND rh.COMP_FA = '"+comp+"' and rh.workplace_id =cp_number and mul.principal_map_cd= "+pmc;
			
			rs = getDBTransaction().createStatement(0).executeQuery(q1);
           
            if (rs.next()) {
				//Object CHARGE_AMT= rs.getObject(1);
				String CorporateName = rs.getString(1);
				System.out.println("Corporate"+rs.getString(2));
				System.out.println("dummyCorpName"+CorporateName.trim());
				System.out.println("Workplace"+rs.getString(3));
                                r.setAttribute("Corporate",rs.getString(2));
								
								r.setAttribute("dummyCorpName",CorporateName.trim());
								r.setAttribute("Workplace",rs.getString(3));
                }
				
				
		
	}
	catch(Exception e){
		e.printStackTrace();
	}
	
	//return amount;
	}
	
	public String checkOldVehicle(){
		String ret = "Y";
	    DBTransaction trx = (DBTransaction) getTransaction();
	    CallableStatement st = null;
	    
	    //BigDecimal amount = new BigDecimal(0.0);
        try{
		
		 Map session = ADFContext.getCurrent().getSessionScope();
		ViewObjectImpl vo = this.getShOrdbookMainVO1();
        Row r = vo.getCurrentRow();
		
       // String OrderId = r.getAttribute("OrderId")==null? null:r.getAttribute("OrderId").toString();
		String loc = session.get("locCd").toString();
        String parent = session.get("parentGroupCd").toString();
        String comp = session.get("compCode").toString();
        String user = session.get("userCode").toString();
        Integer pmc = Integer.parseInt(session.get("principalMapCd").toString());
		Integer dealer = Integer.parseInt(session.get("dealerMapCd").toString());
		String EnqNum = (String) r.getAttribute("EnqNum");
		ResultSet rs;
        //Integer LN_TOT_AMT = 0;
		String q1 = null;
				
				//into :B_SH_ORDBOOK.CORPORATE_NAME,:B_SH_ORDBOOK.CORPORATE,:B_SH_ORDBOOK.WORKPLACE

					
			 String stmt =
                                    "begin PKG_ENQ_POC_DETAIL.SP_CHECK_OLD_VEH(?,?,?,?,?,?,?); end;";
                                st = trx.createCallableStatement(stmt, 0);
                                st.setString(1, parent);
                                st.setInt(2, dealer);
                                st.setString(3, loc);
                                st.setString(4, comp);
                                st.setString(5, EnqNum);
                                st.registerOutParameter(6, Types.INTEGER);
                                st.registerOutParameter(7, Types.VARCHAR);
								
                                st.executeUpdate();
								
									Integer errCode = st.getInt(6);
		                			String errMsg = st.getString(7);
									
									if(errCode.compareTo(1)==0){
										return errMsg;
									}
				
		
	}
	catch(Exception e){
		e.printStackTrace();
	}
	 finally {
                    try {
                        if (st != null) {
                            st.close();
                        }
                    } catch (Exception e) {
                        e.printStackTrace();
                        LOGGER.log(LOGGER.ERROR, e.getMessage());
                        //return errMsg;

                    }
                }
	return ret;
	}
	
	
	
	public String returnSalesManCode(){
	    //BigDecimal amount = new BigDecimal(0.0);
		String AssgEmpCd = null;
        try{
		
		 Map session = ADFContext.getCurrent().getSessionScope();
		ViewObjectImpl vo = this.getShOrdbookMainVO1();
        Row r = vo.getCurrentRow();
		
       // String OrderId = r.getAttribute("OrderId")==null? null:r.getAttribute("OrderId").toString();
		String loc = session.get("locCd").toString();
        String parent = session.get("parentGroupCd").toString();
        String comp = session.get("compCode").toString();
        String user = session.get("userCode").toString();
        Integer pmc = Integer.parseInt(session.get("principalMapCd").toString());
		Integer dealer = Integer.parseInt(session.get("dealerMapCd").toString());
		String EnqNum = (String) r.getAttribute("EnqNum");
	    EnqNum = EnqNum.toUpperCase();
		ResultSet rs;
        //Integer LN_TOT_AMT = 0;
		String q1 = null;
				
				//into :B_SH_ORDBOOK.CORPORATE_NAME,:B_SH_ORDBOOK.CORPORATE,:B_SH_ORDBOOK.WORKPLACE
               
					
			q1 ="SELECT DISTINCT (ASSG_EMP_CD) as ASSG_EMP_CD FROM RD_ENQ WHERE ENQ_NUM = '"+ EnqNum +"' AND ENQ_VAR_SRL = 1 AND DEALER_MAP_CD = "+dealer+
               "AND PARENT_GROUP = '"+parent+"' AND LOC_CD = '"+loc+"' AND COMP_FA = '"+comp+"'";
			
			rs = getDBTransaction().createStatement(0).executeQuery(q1);
           
            if (rs.next()) {
				System.out.println("value of ASSG_EMP_CD"+rs.getString(1));
				//Object CHARGE_AMT= rs.getObject(1);
				 AssgEmpCd = rs.getString(1);
                            //    r.setAttribute("Corporate",rs.getString(2));
							//	r.setAttribute("dummyCorpName",rs.getString(1));
							//	r.setAttribute("Workplace",rs.getString(3));
                }
				
				if(null == AssgEmpCd){
					//return "Enquiry "+EnqNum +"not found";
					return "N";
				}
				
				System.out.println("value of ASSG_EMP_CD"+AssgEmpCd);
				
				
		
	}
	catch(Exception e){
		e.printStackTrace();
	}
	
	return AssgEmpCd;
	}
	
	
	public String returnRefModeDSAName(){
	    //BigDecimal amount = new BigDecimal(0.0);
		String ret = "Y";
        try{
		
		 Map session = ADFContext.getCurrent().getSessionScope();
		ViewObjectImpl vo = this.getShOrdbookMainVO1();
        Row r = vo.getCurrentRow();
		
       // String OrderId = r.getAttribute("OrderId")==null? null:r.getAttribute("OrderId").toString();
		String loc = session.get("locCd").toString();
        String parent = session.get("parentGroupCd").toString();
        String comp = session.get("compCode").toString();
        String user = session.get("userCode").toString();
        Integer pmc = Integer.parseInt(session.get("principalMapCd").toString());
		Integer dealer = Integer.parseInt(session.get("dealerMapCd").toString());
		String EnqNum = (String) r.getAttribute("EnqNum");
		String CustCd = (String) r.getAttribute("CustCd");
		ResultSet rs;
        //Integer LN_TOT_AMT = 0;
		String q1 = null;
				
				//INTO LV_REF_MODE, LV_ENQ_CUSTCD, LV_REF_NAME,lv_type_of_buyer
               
					String ENQ_REF_MODE = null;
					String LV_ENQ_CUSTCD = null;
					String LV_REF_NAME = null;
					String type_of_buyer = null;
			q1 ="SELECT ENQ_REF_MODE, ENQ_CUSTCD, ENQ_REF_CUSTCD,type_of_buyer FROM RH_ENQ WHERE ENQ_NUM = '"+EnqNum +
                     "' AND DEALER_MAP_CD = "+dealer+" AND PARENT_GROUP = '" +parent+ "' AND LOC_CD = '"+ loc +
                     "' AND COMP_FA = '"+ comp+ "'";
			
			rs = getDBTransaction().createStatement(0).executeQuery(q1);
           
            if (rs.next()) {
				//Object CHARGE_AMT= rs.getObject(1);
				 ENQ_REF_MODE = rs.getString(1);
				 LV_ENQ_CUSTCD = rs.getString(2);
				 LV_REF_NAME = rs.getString(3);
				 type_of_buyer = rs.getString(4);
                            //    r.setAttribute("Corporate",rs.getString(2));
							//	r.setAttribute("dummyCorpName",rs.getString(1));
							//	r.setAttribute("Workplace",rs.getString(3));
                }
				
				if(null != ENQ_REF_MODE && ENQ_REF_MODE.equalsIgnoreCase("DD")){
					//return "Enquiry "+EnqNum +"not found";
					r.setAttribute("DsaName",LV_REF_NAME);
				}
				if(null != LV_ENQ_CUSTCD && !LV_ENQ_CUSTCD.equalsIgnoreCase(CustCd)){
					return "N";
				}		
		
	}
	catch(Exception e){
		e.printStackTrace();
	}
	
	return ret;
	}
	
	public String checkEnqNumUsed(){
	    //BigDecimal amount = new BigDecimal(0.0);
		String ret = "Y";
        try{
		
		 Map session = ADFContext.getCurrent().getSessionScope();
		ViewObjectImpl vo = this.getShOrdbookMainVO1();
        Row r = vo.getCurrentRow();
		
       // String OrderId = r.getAttribute("OrderId")==null? null:r.getAttribute("OrderId").toString();
		String loc = session.get("locCd").toString();
        String parent = session.get("parentGroupCd").toString();
        String comp = session.get("compCode").toString();
        String user = session.get("userCode").toString();
        Integer pmc = Integer.parseInt(session.get("principalMapCd").toString());
		Integer dealer = Integer.parseInt(session.get("dealerMapCd").toString());
		String EnqNum = (String) r.getAttribute("EnqNum");
		
		ResultSet rs;
        //Integer LN_TOT_AMT = 0;
		String q1 = null;
				
				//into :B_SH_ORDBOOK.CORPORATE_NAME,:B_SH_ORDBOOK.CORPORATE,:B_SH_ORDBOOK.WORKPLACE
              
					
			q1 ="SELECT COUNT(1) FROM RD_ENQ WHERE PARENT_GROUP = '"+parent+"' AND DEALER_MAP_CD = "+dealer+
               " AND LOC_CD = '"+loc+"' AND COMP_FA = '"+comp+"' AND ENQ_NUM = '"+ EnqNum+"' AND NVL(ENQ_STATUS, 'ZZ') IN ('O', 'L', 'D', 'C','H')";
			System.out.println("Query count for enq num"+q1);
			rs = getDBTransaction().createStatement(0).executeQuery(q1);
           Integer count = 0;
            if (rs.next()) {
				//Object CHARGE_AMT= rs.getObject(1);
				 count = rs.getInt(1);
                            //    r.setAttribute("Corporate",rs.getString(2));
							//	r.setAttribute("dummyCorpName",rs.getString(1));
							//	r.setAttribute("Workplace",rs.getString(3));
                }
				System.out.println("count val"+count);
				if(count.compareTo(0)>0){
					System.out.println("inside if count"+count);
					//return "Enquiry "+EnqNum +"not found";
					return "N";
				}
				
				
		
	}
	catch(Exception e){
		e.printStackTrace();
	}
	
	return ret;
	}
	
	
	
	public String populateEnquiryDetails(){
		String ret_val = "Y";
	    Map session = ADFContext.getCurrent().getSessionScope();
	    
		String loc = session.get("locCd").toString();
        String parent = session.get("parentGroupCd").toString();
        String comp = session.get("compCode").toString();
        String user = session.get("userCode").toString();
        Integer pmc = Integer.parseInt(session.get("principalMapCd").toString());
		Integer dealer = Integer.parseInt(session.get("dealerMapCd").toString());
		String DSE = null;
		DBTransaction trx = (DBTransaction) getTransaction();
                CallableStatement st = null;
		try{
			
			
			
			
            ViewObjectImpl vo = this.getShOrdbookMainVO1();
            //vo.appendViewCriteria(vo.getViewCriteria("ShOrdbookMainSearchVC"));

           // vo.setNamedWhereClauseParam("bindCustId", CustomerId);
			//vo.setNamedWhereClauseParam("bindOrdNum", OrderId);

            //vo.executeQuery();
			
			Row r = vo.getCurrentRow();
                    String OrderId = (String)r.getAttribute("OrderNum");
			String EnqNum = (String)r.getAttribute("EnqNum");
		    String orderStatus = (String)r.getAttribute("OrderStatus");
                        this.setLoanStageValues();
			this.setCorporateDetail();
			ret_val = this.checkOldVehicle();
			
			if(!ret_val.equalsIgnoreCase("Y")){
				return ret_val;
			}
			
			ret_val = this.returnSalesManCode();
			if(null != ret_val && ret_val.equalsIgnoreCase("N")){
				return "Enquiry "+EnqNum +"not found";
			}
			
			else{
				r.setAttribute("SalesManCd",ret_val);
				DSE = this.returnDseNameForPI(ret_val);
			}
			
			ret_val = this.checkEnqNumUsed();
			System.out.println("ret_val"+ret_val);
			if(null != ret_val && ret_val.equalsIgnoreCase("N")){
				return "Already the enquiry has been either Ordered / Invoiced / Dropped / Lost.Order cannot be created for the enquiry";
			}
			
			Timestamp timestamp = new Timestamp(System.currentTimeMillis());
			r.setAttribute("OrderDate",timestamp);
			r.setAttribute("OrderStatus","B");
			r.setAttribute("DummyStatusDesc","Booked");
            
			ret_val = this.returnRefModeDSAName();
System.out.println("ret_val 2 ----"+ret_val);
			if(null == ret_val || ret_val.equalsIgnoreCase("N")){
				return "Different customer found in enquiry";
			}
			
			System.out.println("DSE ----"+DSE);
			r.setAttribute("DummySalesCdTemp",DSE);
			ret_val = "Y";
			//to populate the Enquery detail read only table using shubham helunde code query from method doFilterDataOrderBooking -- starts here
			String model_desc = null, varient_desc = null, color_desc = null, enqvarSrl = null;
                String modelCd = null, varientCd = null, colorCd = null;
                String query16 = null;
				String queryA = null;
				String queryB = null;
                ResultSet rs16;
				ResultSet rsA;
				ResultSet rsB;
                int d=0;
				
                if(null !=r.getAttribute("EnqNum")){
                        query16 =
                            "       select PARENT_GROUP," + " DEALER_MAP_CD," + "  LOC_CD," + "    COMP_FA," +
                            "   ENQ_NUM," + "   ENQ_VAR_SRL," + "   ENQ_VARIANTCD," + "   ENQ_ECOLORCD," +
                            "  CREATED_DATE," + "  ASSG_EMP_CD," + "  ENQ_STATUS," + "  CREATED_BY," + "  MODIFIED_DATE," +
                            "  MODIFIED_BY," + "  MODEL_CD" + "  from rd_enq" + " where ENQ_NUM = '" +
                            String.valueOf(r.getAttribute("EnqNum")) + "'" +
                            "   AND NVL(ENQ_STATUS, 'AA') IN ('H', 'W', 'P', 'AA', 'E')" + "  AND DEALER_MAP_CD = '" +
                            dealer + "'" + "  AND LOC_CD = '" + String.valueOf(loc) +
                            "'" + "  AND COMP_FA = '" + String.valueOf(comp) + "'" + "  AND PARENT_GROUP = '" +
                            String.valueOf(parent) + "'   order by enq_var_srl";
                        System.out.println("queryyyy1111---" + query16);
                        rs16 = getDBTransaction().createStatement(0).executeQuery(query16);
                        int k = 1;
                        ViewObjectImpl ob1 = this.getOrderBookingEnquiryRO1();
                        ob1.executeEmptyRowSet();
                        while (rs16.next()) {
                            d++;
                            System.out.println("dddddd----"+d);
                            modelCd = rs16.getString("MODEL_CD");
                            varientCd = rs16.getString("ENQ_VARIANTCD");
                            colorCd = rs16.getString("ENQ_ECOLORCD");
                            enqvarSrl = rs16.getString("ENQ_VAR_SRL");

                            String query17 = null;
                            ResultSet rs17;

                            query17 =
                                "       select (select model_desc from gm_mod where principal_map_cd = "+ pmc +" and model_cd ='" +
                                modelCd + "') AS model_desc," +
                                " (select variant_desc from gm_var where principal_map_cd = "+ pmc +" and variant_cd = '" +
                                varientCd + "' ) AS varient_desc," +
                                " ( select  ecolor_desc from gm_eclr where principal_map_cd   = "+ pmc +" and   ecolor_cd = '" +
                                colorCd + "' ) AS color_desc from dual   ";

                            rs17 = getDBTransaction().createStatement(0).executeQuery(query17);
                            if (rs17.next()) {
                                model_desc = rs17.getString("model_desc");
                                varient_desc = rs17.getString("varient_desc");
                                color_desc = rs17.getString("color_desc");

                            }

                            String modeldesc1 = model_desc + "-" + modelCd;
                            String variantdesc1 = varient_desc + "-" + varientCd;
                            String colordesc1 = color_desc + "-" + colorCd;
                            ViewObjectImpl ordEnquiryVO = this.getOrderBookingEnquiryRO1();
                            Row createSdGrn = ordEnquiryVO.createRow();
                            createSdGrn.setAttribute("ModelDesc", modeldesc1);
                            createSdGrn.setAttribute("VarientDesc", variantdesc1);
                            createSdGrn.setAttribute("ColorDesc", colordesc1);
							createSdGrn.setAttribute("EnqVarSrl", enqvarSrl);
							
                            createSdGrn.setAttribute("ParentGroup", parent);
							createSdGrn.setAttribute("DealerMapCd", dealer);
							createSdGrn.setAttribute("LocCd", loc);
							createSdGrn.setAttribute("CompFa", comp);
							createSdGrn.setAttribute("EnqNum", rs16.getString("ENQ_NUM"));
							createSdGrn.setAttribute("EnqVarCode", varientCd);
							createSdGrn.setAttribute("EnqEcolorCode", colorCd);
							createSdGrn.setAttribute("EnqStatus", rs16.getString("ENQ_STATUS"));
							createSdGrn.setAttribute("ModelCd", modelCd);
							createSdGrn.setAttribute("AssgEmpCd", rs16.getString("ASSG_EMP_CD"));
														
                            System.err.println(k + "--");
                            if (k == 1) {
//                                createSdGrn.setAttribute("CheckBoolean", true);
                                System.err.println(k + "--" + createSdGrn.getAttribute("CheckBoolean"));
                            }

                            ordEnquiryVO.insertRow(createSdGrn);
                            k++;
                        }
						
						
						 queryA ="select type_of_buyer FROM RH_ENQ WHERE ENQ_NUM = '"+ r.getAttribute("EnqNum") +
						 "' and dealer_map_cd  = "+  dealer + "  AND LOC_CD = '" + String.valueOf(loc) +
                            "'" + "  AND COMP_FA = '" + String.valueOf(comp) + "'" + "  AND PARENT_GROUP = '" +
                            String.valueOf(parent) + "'";
                        System.out.println("queryyyy1111 type_of_buyer ---" + queryA);
                        rsA = getDBTransaction().createStatement(0).executeQuery(queryA);
                      
                        while (rsA.next()) {
                           String type_of_buyer = rsA.getString("type_of_buyer");
						   if(type_of_buyer.equalsIgnoreCase("01")){
						   r.setAttribute("ExchangeFlag","Y");
						   
						       queryB ="select buying_num,reg_no FROM sh_tv_eval WHERE ENQ_NUM = '"+ r.getAttribute("EnqNum") +
						 "' and dealer_map_cd  = "+  dealer + "  AND LOC_CD = '" + String.valueOf(loc) +
                            "'" + "  AND COMP_FA = '" + String.valueOf(comp) + "'" + "  AND PARENT_GROUP = '" +
                            String.valueOf(parent) + "'";
                        System.out.println("queryyyy1111 type_of_buyer ---" + queryB);
                        rsB = getDBTransaction().createStatement(0).executeQuery(queryB);
                      
                        while (rsB.next()) {
                           String buying_num = rsB.getString("buying_num");
						   String reg_no = rsB.getString("reg_no");
						   
						   r.setAttribute("ExchBuyId",buying_num);
						   r.setAttribute("DummyExchRegNo",reg_no);
						   
						   }
						   
						   
						   
						   }
						   }
						r.setAttribute("DummyEnqVarSrl", enqvarSrl);
						
                    }
			//to populate the Enquery detail read only table using shubham helunde code query from method doFilterDataOrderBooking- ends here
			
			
			
			
//            return timestamp;
			
		}
		catch(Exception e){
			e.printStackTrace();
		}
	    return ret_val;
	}
	
	public String doSearchDataOrderBooking(){
		String message = "success";
		DBTransaction trx = (DBTransaction) getTransaction();
                CallableStatement st = null;
				Map session = ADFContext.getCurrent().getSessionScope();
			
		String loc = session.get("locCd").toString();
        String parent = session.get("parentGroupCd").toString();
        String comp = session.get("compCode").toString();
        String user = session.get("userCode").toString();
        Integer pmc = Integer.parseInt(session.get("principalMapCd").toString());
		Integer dealer = Integer.parseInt(session.get("dealerMapCd").toString());
		try{
			
			String ret_val = "Y";
			
			ViewObjectImpl vo1 = this.getOrderBookingRO1();
        Row r = vo1.getCurrentRow();
		
		String OrderId = r.getAttribute("OrderId").toString();
		String CustomerId = r.getAttribute("CustomerId").toString();
		System.out.println("OrderId"+OrderId);
		    System.out.println("CustomerId"+CustomerId);
            ViewObjectImpl vo = this.getShOrdbookMainVO1();
            vo.appendViewCriteria(vo.getViewCriteria("ShOrdbookMainSearchVC"));

            vo.setNamedWhereClauseParam("bindCustId", CustomerId);
			vo.setNamedWhereClauseParam("bindOrdNum", OrderId);

            vo.executeQuery();
			
			Row rr = vo.getCurrentRow();
			String VariantCd = (String)rr.getAttribute("VariantCd");
			String ColorCd = (String)rr.getAttribute("FirstEcolorCd");
		    String SecondColorCd = (String)rr.getAttribute("SecondEcolorCd");
			String StateCd = (String)rr.getAttribute("StateCd");
			String gstStateCd = this.returnGstCustStateCd(StateCd);
			Object OrderDate = rr.getAttribute("OrderDate");
			String salesType = (String)rr.getAttribute("SalesType");
			String prebookingNum = (String)rr.getAttribute("PreBookingNum");
			String areaCode = (String)rr.getAttribute("AreaCd");
			//String ModelCd =  (String)rr.getAttribute("ModelCd");
			BigDecimal RecdAmt = (BigDecimal) rr.getAttribute("RecdAmt") == null ? new BigDecimal(0.0) : (BigDecimal)rr.getAttribute("RecdAmt") ;
			BigDecimal P_SELL_PRICE = new BigDecimal(0.0);
			BigDecimal P_ACC_PRICE = new BigDecimal(0.0);
			BigDecimal P_NET_DLR_PRICE = new BigDecimal(0.0);
			String orderStatus = (String)rr.getAttribute("OrderStatus");
			String salesManCd = (String) rr.getAttribute("SalesManCd");
			
		
          System.out.println("inside customerDetailFetch"+CustomerId);
         
                                String stmt =
                                    "begin PK_GET_CUST_DETAILS.SP_VALIDATE_CIN(?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?); end;";
                                st = trx.createCallableStatement(stmt, 0);
                                st.setString(1, CustomerId);
                                st.setString(2, parent);
                                st.setInt(3, pmc);
                                st.setInt(4, dealer);
                                st.setString(5, loc);
                                st.registerOutParameter(6, Types.VARCHAR);
                                st.registerOutParameter(7, Types.VARCHAR);
								st.registerOutParameter(8, Types.VARCHAR);
								st.registerOutParameter(9, Types.VARCHAR);
								st.registerOutParameter(10, Types.VARCHAR);
								st.registerOutParameter(11, Types.VARCHAR);
								st.registerOutParameter(12, Types.VARCHAR);
								st.registerOutParameter(13, Types.VARCHAR);
								st.registerOutParameter(14, Types.VARCHAR);
								st.registerOutParameter(15, Types.VARCHAR);
								st.registerOutParameter(16, Types.VARCHAR);
								st.registerOutParameter(17, Types.VARCHAR);
								st.registerOutParameter(18, Types.VARCHAR);
								st.registerOutParameter(19, Types.VARCHAR);
								st.registerOutParameter(20, Types.VARCHAR);
								st.registerOutParameter(21, Types.VARCHAR);
								st.registerOutParameter(22, Types.VARCHAR);
								st.registerOutParameter(23, Types.VARCHAR);
								st.registerOutParameter(24, Types.VARCHAR);
								st.registerOutParameter(25, Types.VARCHAR);
								st.registerOutParameter(26, Types.VARCHAR);
								st.registerOutParameter(27, Types.VARCHAR);
								st.registerOutParameter(28, Types.VARCHAR);
								st.registerOutParameter(29, Types.VARCHAR);
								st.registerOutParameter(30, Types.VARCHAR);
								st.registerOutParameter(31, Types.DATE);
								st.registerOutParameter(32, Types.DATE);
								st.registerOutParameter(33, Types.VARCHAR);
								st.registerOutParameter(34, Types.VARCHAR);
								st.registerOutParameter(35, Types.VARCHAR);
								st.registerOutParameter(36, Types.VARCHAR);
                                st.executeUpdate();
								
									String LV_CUST_TYPE = st.getString(6);
		                			String NB_TITLE_CD = st.getString(7);
		                			String NB_COMMUNICATION_IND = st.getString(8);
		                			String NB_FULL_NAME = st.getString(9);
		                			String LV_RADDR1 = st.getString(10);
		                			String LV_RADDR2 = st.getString(11);
		                			String LV_RADDR3 = st.getString(12);
		                			String LV_RCITY = st.getString(13);
		                			String LV_RCITY_DESC = st.getString(14);
		                			String LV_RPIN = st.getString(15);
		                			String LV_OADDR1 = st.getString(16);
		                			String LV_OADDR2 = st.getString(17);
		                			String LV_OADDR3 = st.getString(18);
		                			String LV_OCITY = st.getString(19);
		                			String LV_OCITY_DESC = st.getString(20);
		                			String LV_OPIN = st.getString(21);
		                			String PRE_RES_PHONE = st.getString(22);
		                			String PRE_MOB_PHONE = st.getString(23);
		                			String PRE_OFF_PHONE = st.getString(24);
		                			String LV_PREFAX = st.getString(25);
		                			String RES_PHONE = st.getString(26);
		                			String MOBILE = st.getString(27);
		                			String LV_EMAIL = st.getString(28);
		                			String OFF_PHONE = st.getString(29);
		                			String LV_FAX = st.getString(30);
		                			String NB_DOB = st.getString(31);
		                			String NB_DOA = st.getString(32);
		                			String NB_NOMINEE = st.getString(33);
		                			String NB_OCCN_CD = st.getString(34);
		                			String PAN_NUM = st.getString(35);
		                			 message = st.getString(36);
								
if(null != message){
	return message;
}

rr.setAttribute("DummyFullName",NB_FULL_NAME);			
rr.setAttribute("dummyDob",NB_DOB);		
rr.setAttribute("dummyDoa",NB_DOA);
rr.setAttribute("DummyOccnCd",NB_OCCN_CD);
			
			
			if(null != VariantCd){
			String stmtPrice =
                                    "begin SP_GET_PRICE_DETAILS(?,?,?,?,?,?,?,?,?,?,?,?,?,?); end;";
                                st = trx.createCallableStatement(stmtPrice, 0);
                                st.setInt(1, dealer);
								st.setInt(2, pmc);
								st.setString(3, loc);
                                st.setString(4, parent);
                                st.setString(5, VariantCd);
								st.setString(6, ColorCd);
                                st.setString(7, gstStateCd);
                                st.setObject(8, OrderDate);
								st.setString(9, salesType);
                                st.registerOutParameter(10, Types.NUMERIC);
                                st.registerOutParameter(11, Types.NUMERIC);
								st.registerOutParameter(12, Types.NUMERIC);
								st.registerOutParameter(13, Types.VARCHAR);
								st.registerOutParameter(14, Types.NUMERIC);
                                st.executeUpdate();
			
			
									P_SELL_PRICE = new BigDecimal(st.getObject(10).toString()) == null ? new BigDecimal(0.0): new BigDecimal(st.getObject(10).toString());
		                			P_ACC_PRICE = new BigDecimal(st.getObject(11).toString()) == null ? new BigDecimal(0.0): new BigDecimal(st.getObject(11).toString());
		                			P_NET_DLR_PRICE = new BigDecimal(st.getObject(12).toString()) == null ? new BigDecimal(0.0): new BigDecimal(st.getObject(12).toString());
			    rr.setAttribute("NbAccessoryPrice",P_ACC_PRICE);
			    rr.setAttribute("NbNdp",P_NET_DLR_PRICE);
		                			Integer errcode = st.getInt(14);
		                			message = st.getString(13);
									
								if(errcode.compareTo(0)>0){
									return message;
								}
			}
			
			
			if(null != NB_OCCN_CD){
                           ResultSet rsn;
		    String LIST_DESC=null;
                           String  q1n =
                                " SELECT LIST_DESC  FROM AM_LIST WHERE LIST_NAME='NATURE_OF_PROF'" +
                                " AND LIST_CODE='" + NB_OCCN_CD + "'" + " AND PRINCIPAL_MAP_CD= "+pmc;

                            rsn = getDBTransaction().createStatement(0).executeQuery(q1n);
                            if (rsn.next()) {
                                LIST_DESC= rsn.getString(1);
                            }
                            rr.setAttribute("dummyOccupDesc", LIST_DESC);
		}
			
			if(null != VariantCd && null == prebookingNum){
									System.out.println("00--");
									String stmt2 =
                                    "begin SP_GET_BOOKING_AMT(?,?,?,?,?,?,?,?); end;";
                                st = trx.createCallableStatement(stmt2, 0);
								st.setInt(1, dealer);
                                st.setString(2, loc);
                                st.setString(3, VariantCd);
								st.setString(4, areaCode);
                                st.setObject(5, OrderDate);
                                st.registerOutParameter(6, Types.NUMERIC);
								st.registerOutParameter(7, Types.VARCHAR);
								st.registerOutParameter(8, Types.NUMERIC);
                                st.executeUpdate();
			
			
									//BigDecimal P_SELL_PRICE = new BigDecimal(st.getObject(10).toString());
		                			//BigDecimal P_ACC_PRICE = new BigDecimal(st.getObject(11).toString());
		                			//BigDecimal P_NET_DLR_PRICE = new BigDecimal(st.getObject(12).toString());
		                			Integer errcode = st.getInt(8);
		                			message = st.getString(7);
									System.out.println("errcode"+errcode);
									System.out.println("message"+message);
								if(errcode.compareTo(0)>0){
									System.out.println("0---");
									//return message; this message need to be displayed only and continue from bean
								}
								else{
									System.out.println("0--");
									rr.setAttribute("BookingAmt",st.getObject(6));
								}
								
								
								
								}
			System.out.println("1--"+P_SELL_PRICE.setScale(2, RoundingMode.HALF_EVEN));
			
			rr.setAttribute("DummySellingPrice",P_SELL_PRICE.setScale(2, RoundingMode.HALF_EVEN));
			BigDecimal totChargeAmt = this.returnTotalAmtExDepri() == null? new BigDecimal(0.00):this.returnTotalAmtExDepri();
			BigDecimal totChrgAmtDepri = this.returnTotalAmtDepri()== null? new BigDecimal(0.00):this.returnTotalAmtDepri();
			BigDecimal balanceAmount1 = totChargeAmt.add(P_SELL_PRICE);
			BigDecimal balanceAmount2 = totChrgAmtDepri.add(RecdAmt);
			BigDecimal DummyBalanceAmt = balanceAmount1.subtract(balanceAmount2);
		    rr.setAttribute("DummyBalanceAmt" , DummyBalanceAmt.setScale(2, RoundingMode.HALF_EVEN));
		    rr.setAttribute("DummyChargeAmt" , totChargeAmt.setScale(2, RoundingMode.HALF_EVEN));
			
			//BigDecimal NB_BALANCE = 
			String cancelAppr = this.returnCancelAppr();
			
			System.out.println("3--");
			
			if(!cancelAppr.equalsIgnoreCase("P") && !cancelAppr.equalsIgnoreCase("B")){
				if(orderStatus.equalsIgnoreCase("I")){
					String fullName = this.returnInvoiceName() == null?null:this.returnInvoiceName();
					rr.setAttribute("DummyFullName" , fullName);
				}
			}
			System.out.println("4--");
			String DSE = this.returnDseNameForPI(salesManCd);
			rr.setAttribute("DummySalesCdTemp",DSE);
			
			
			
			
			//to populate the Enquery detail read only table using shubham helunde code query from method doFilterDataOrderBooking -- starts here
			String modelCd = null, varientCd = null, colorCd = null, enqvarSrl = null;
                String query16 = null;
                ResultSet rs16;
if (orderStatus.equals("C")) {

                    query16 =
                        " select PARENT_GROUP,  " + "      DEALER_MAP_CD,  " + "     LOC_CD,  " + "     COMP_FA,  " +
                        "     ENQ_NUM,  " + "    ENQ_VAR_SRL,  " + "    ENQ_VARIANTCD,  " + "    ENQ_ECOLORCD,  " +
                        "    CREATED_DATE,  " + "   ASSG_EMP_CD,  " + "   ENQ_STATUS,  " + "   CREATED_BY,  " +
                        "    MODIFIED_DATE,  " + "    MODIFIED_BY,  " + "    MODEL_CD  " + "   from rd_enq  " +
                        "  where ENQ_NUM = '" + String.valueOf(rr.getAttribute("EnqNum")) + "'  " +
                        "   AND DEALER_MAP_CD = '" + Integer.parseInt(dealer.toString()) + "'  " +
                        "  AND LOC_CD = '" + String.valueOf(loc) + "'  " + "  AND COMP_FA = '" +
                        String.valueOf(comp) + "'  " + "  AND PARENT_GROUP = '" + String.valueOf(parent) +
                        "'  " + "  AND ENQ_VAR_SRL =  " + "    (SELECT ENQ_VAR_SRL  " + "      FROM RD_ENQFOLLOW  " +
                        "    WHERE REMARKS LIKE  " + "         '%' || '" +
                        OrderId + "' || '%Cancelled%'  " +
                        "     AND ENQ_NUM = '" + String.valueOf(rr.getAttribute("EnqNum")) + "'  " +
                        "    AND ENQ_FOLLOWSTATUS <> 'O'  " + "    AND DEALER_MAP_CD = '" +
                        Integer.parseInt(dealer.toString()) + "'  " + "    AND LOC_CD = '" +
                        String.valueOf(loc) + "'  " + "  AND COMP_FA = '" + String.valueOf(comp) + "'  " +
                        "  AND PARENT_GROUP = '" + String.valueOf(parent) + "')  " + "   order by enq_var_srl  ";


                } else {


                    query16 =
                        "       select PARENT_GROUP," + " DEALER_MAP_CD," + "  LOC_CD," + "    COMP_FA," +
                        "   ENQ_NUM," + "   ENQ_VAR_SRL," + "   ENQ_VARIANTCD," + "   ENQ_ECOLORCD," +
                        "  CREATED_DATE," + "  ASSG_EMP_CD," + "  ENQ_STATUS," + "  CREATED_BY," + "  MODIFIED_DATE," +
                        "  MODIFIED_BY," + "  MODEL_CD" + "  from rd_enq" + " where ENQ_NUM = '" +
                        String.valueOf(rr.getAttribute("EnqNum")) + "'" +
                        "  AND DEALER_MAP_CD = '" +
                        Integer.parseInt(dealer.toString()) + "'" + "  AND LOC_CD = '" + String.valueOf(loc) +
                        "'" + "  AND COMP_FA = '" + String.valueOf(comp) + "'" + "  AND PARENT_GROUP = '" +
                        String.valueOf(parent) + "'" +

                        "  AND ENQ_VARIANTCD = '"  +
                       String.valueOf(rr.getAttribute("VariantCd")) + "'    AND ROWNUM <= 1 order by enq_var_srl";
                }
				System.out.println("query16 for model"+query16);
				rs16 = getDBTransaction().createStatement(0).executeQuery(query16);
                int k = 1;
                ViewObjectImpl ob1 = this.getOrderBookingEnquiryRO1();
                ob1.executeEmptyRowSet();
                String model_desc = null, varient_desc = null, color_desc = null;
                
                while (rs16.next()) {
                    modelCd = rs16.getString("MODEL_CD");
                    varientCd = rs16.getString("ENQ_VARIANTCD");
                    colorCd = rs16.getString("ENQ_ECOLORCD");

                    enqvarSrl = rs16.getString("ENQ_VAR_SRL");
				
				
				System.out.println("5--");
                //              Object modelCd=rs1.getAttribute("DummyModelCd");
                //              Object varientCd=rs1.getAttribute("VariantCd");
                //              Object colorCd=rs1.getAttribute("FirstEcolorCd");
                String query17 = null;
                ResultSet rs17;

                query17 =
                    "       select (select model_desc from gm_mod where principal_map_cd ="+pmc+" and model_cd ='" + modelCd +
                    "') AS model_desc," +
                    " (select variant_desc from gm_var where principal_map_cd = "+pmc+" and variant_cd = '" + varientCd +
                    "' ) AS varient_desc," +
                    " ( select  ecolor_desc from gm_eclr where principal_map_cd   = "+pmc+" and   ecolor_cd = '" + colorCd +
                    "' ) AS color_desc from dual   ";

                rs17 = getDBTransaction().createStatement(0).executeQuery(query17);
                if (rs17.next()) {
                    model_desc = rs17.getString("model_desc");
                    varient_desc = rs17.getString("varient_desc");
                    color_desc = rs17.getString("color_desc");

                }
System.out.println("6--");
                String modeldesc1 = model_desc + "-" + modelCd;
                String variantdesc1 = varient_desc + "-" + varientCd;
                String colordesc1 = color_desc + "-" + colorCd;
				if(null != modelCd && null != varientCd && null != colorCd){               
                ViewObjectImpl ordEnquiryVO = this.getOrderBookingEnquiryRO1();
                Row createSdGrn = ordEnquiryVO.createRow();
                createSdGrn.setAttribute("ModelDesc", modeldesc1);
                createSdGrn.setAttribute("VarientDesc", variantdesc1);
                createSdGrn.setAttribute("ColorDesc", colordesc1);

                createSdGrn.setAttribute("CheckBoolean", "Y");
createSdGrn.setAttribute("ParentGroup", parent);
							createSdGrn.setAttribute("DealerMapCd", dealer);
							createSdGrn.setAttribute("LocCd", loc);
							createSdGrn.setAttribute("CompFa", comp);
							createSdGrn.setAttribute("EnqNum", rs16.getString("ENQ_NUM"));
							createSdGrn.setAttribute("EnqVarCode", varientCd);
							createSdGrn.setAttribute("EnqEcolorCode", colorCd);
							createSdGrn.setAttribute("EnqStatus", rs16.getString("ENQ_STATUS"));
							createSdGrn.setAttribute("ModelCd", modelCd);
							createSdGrn.setAttribute("AssgEmpCd", rs16.getString("ASSG_EMP_CD"));

                ordEnquiryVO.insertRow(createSdGrn);
				System.out.println(varientCd+model_desc+varient_desc);
				
				}
				k++;
				}
			
				System.out.println("model_desc + "+model_desc);
				System.out.println("color_desc + "+color_desc);
				rr.setAttribute("VariantCd",varientCd);
				rr.setAttribute("DummyModelDesc1",model_desc);
				//rr.setAttribute("VariantDesc",varient_desc);
				rr.setAttribute("DummyModelCd",model_desc);
			rr.setAttribute("DummyColorDesc1",color_desc);
			rr.setAttribute("DummyVariantDesc",varient_desc);
				
			//to populate the Enquery detail read only table using shubham helunde code query from method doFilterDataOrderBooking- ends here
			
			//When-new-block-instance code ends here and Post query code start heres
			
			
			  String q4 = null;
                    ResultSet rs4;
                    String state_cd = null;
                    String district = null;
                    String tehsil = null;
                    String village = null;
                    q4 =
                        " select gm.state_cd,gm.district,gm.tehsil_cd,gm.village_cd  from gm_cin gm where gm.cust_cd = '" +
                        CustomerId + "'  and gm.principal_map_cd = "+pmc;

                    rs4 = getDBTransaction().createStatement(0).executeQuery(q4);
                    if (rs4.next()) {
                        if (null != rs4.getString("district")) {
							state_cd = rs4.getString("state_cd");
                            district = rs4.getString("district");
							tehsil = rs4.getString("tehsil_cd");
							village = rs4.getString("village_cd");
                           
                        }}
						
					String gst_State_Cd =null;	
						 if (null != state_cd) {
                            String query8 = null;
                            ResultSet rs8;
                            String state_desc = null;
                            
                            query8 =
                                "  select st.state_desc,ST.GST_STATE_CD from gm_state st where st.state_Cd ='" +
                                state_cd + "' and st.principal_map_cd = "+pmc;

                            rs8 = getDBTransaction().createStatement(0).executeQuery(query8);
                            if (rs8.next()) {
                                state_desc = rs8.getString(1);
                                gst_State_Cd = rs8.getString(2);
                                rr.setAttribute("dummyStateDesc", state_desc);

                            }
                        }
						
						 
						
					System.out.println("7--");	
						
			String stmt8 =
                                    "begin SP_GET_ORDER_BOOK_QUERY(?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?); end;";
                                st = trx.createCallableStatement(stmt8, 0);
                                st.setInt(1, dealer);
								st.setString(2, loc);
								st.setInt(3, pmc);
								st.setString(4, comp);
                                st.setString(5, CustomerId);
                                st.setString(6, gst_State_Cd);
								st.setString(7, ColorCd);
                                st.setString(8, SecondColorCd);
								st.setString(9, areaCode);
                                st.setObject(10, OrderId);
								
                                st.registerOutParameter(11, Types.VARCHAR);
                                st.registerOutParameter(12, Types.VARCHAR);
                                st.registerOutParameter(13, Types.VARCHAR);
                                st.registerOutParameter(14, Types.VARCHAR);
                                st.registerOutParameter(15, Types.VARCHAR);
                                st.registerOutParameter(16, Types.VARCHAR);
                                st.registerOutParameter(17, Types.VARCHAR);
                                st.registerOutParameter(18, Types.VARCHAR);
                                st.registerOutParameter(19, Types.NUMERIC);
                                st.registerOutParameter(20, Types.VARCHAR);
                                st.registerOutParameter(21, Types.NUMERIC);
                                st.executeUpdate();
System.out.println("st.getString(14)"+st.getString(14)+"st.getString(17)"+st.getString(17)+"st.getString(13)"+st.getString(13));
                                rr.setAttribute("DummyFullName", st.getString(11));
                                rr.setAttribute("dummyNominee", st.getString(12));
                                //rr.setAttribute("DummyVariantDesc", st.getString(13));
                                //rr.setAttribute("DummyColorDesc1", st.getString(14));
                                rr.setAttribute("DummyColorDesc2", st.getString(15));
                                //rr.setAttribute("DummyModelCd", st.getString(17));
								
								System.out.println("8--");
								Object CityCd = rr.getAttribute("CityCd");
								if(null != CityCd){
                 String stmt2 = "begin SP_GET_CITY_DESC(?,?,?,?,?); end;";
                    st = trx.createCallableStatement(stmt2, 0);
                    st.setInt(1, pmc);
                    st.setObject(2, CityCd);
                    st.registerOutParameter(3, Types.VARCHAR);
                                        st.registerOutParameter(4, Types.VARCHAR);
                                        st.registerOutParameter(5, Types.INTEGER);
                    st.executeUpdate();
                Integer errCd = (Integer)st.getInt(5);
                if(errCd.compareTo(0)!=0){
                 message = st.getString(4);
                return message;}
                else{
                rr.setAttribute("CityDescT",st.getString(3));
                }
                }
				
				String querys = null;
                ResultSet rss;
                Object queryResults = null;
String EnqNum = (String)rr.getAttribute("EnqNum");
                if(null != EnqNum){
				/*querys =
                    "SELECT CP_NAME FROM MUL_CORPORATE WHERE CP_NUMBER='" +
                    String.valueOf(Corporate) + "' AND PRINCIPAL_MAP_CD = '1'";

                rss = getDBTransaction().createStatement(0).executeQuery(querys);
                if (rss.next()) {
                    queryResults = rss.getString(1);
                    System.out.println("Name---" + queryResults);
                    rr.setAttribute("dummyCorpName", String.valueOf(queryResults));

                }*/
				this.setCorporateDetail();
				}
				
				
				
				System.out.println("ORDER_STATUS"+orderStatus);
				String orderStatusDesc = this.returnListDescForPI(orderStatus,"ORDER_STATUS");
				System.out.println("ORDER_STATUS DESC"+orderStatusDesc);
				if(null != orderStatusDesc){
				rr.setAttribute("DummyStatusDesc",orderStatusDesc);
				}
				/*
				String orderStatusDesc = this.returnListDescForPI(orderStatus,"ORDER_STATUS");
				System.out.println("ORDER_STATUS DESC"+orderStatusDesc);
				if(null != orderStatusDesc){
				rr.setAttribute("DummyStatusDesc",orderStatusDesc);
				}*/
				
				String BillPin = (String) rr.getAttribute("BillPin");
				if(null != BillPin){
				String PinDesc = returnPinDescForPI(BillPin);
				rr.setAttribute("PinCodeDescT",PinDesc);
				}
				/* this need to be done from bean in order to set the property
				String fuelType = this.returnCheckVariant(VariantCd,modelCd); 
				if(null != fuelType){
					
				}
				else{
					return "Not Match Variant Found in Enquiry";
				}*/
				String tehsil1 =(String) rr.getAttribute("TehsilCd");
				String village1 = (String) rr.getAttribute("VillageCd");
				 if (null != tehsil1) {
                            String query9 = null;
                            ResultSet rs9;
                            String tehsil_desc = null;
                            query9 =
                                "  select th.tehsil_desc from gm_tehsil th where th.tehsil_cd = '" + tehsil1 +
                                "' and th.principal_map_cd = "+pmc;

                            rs9 = getDBTransaction().createStatement(0).executeQuery(query9);
                            if (rs9.next()) {
                                tehsil_desc = rs9.getString(1);
                                rr.setAttribute("dummyTehsilDesc", tehsil_desc);

                            }

                        }
                        if (null != village1) {
                            String query10 = null;
                            ResultSet rs10;
                            String village_desc = null;
                            query10 =
                                "   select vl.village_name from gm_village vl where vl.village_Cd ='" + village1 +
                                "' and vl.principal_map_cd = "+pmc;

                            rs10 = getDBTransaction().createStatement(0).executeQuery(query10);
                            if (rs10.next()) {
								village_desc = rs10.getString(1);
                                rr.setAttribute("dummyVillageDesc", village_desc);
                            }
                        }
						
						String ShipState = (String)rr.getAttribute("ShipState");
						String ShipTehsil = (String)rr.getAttribute("ShipTehsil");
						String ShipVillage = (String)rr.getAttribute("ShipVillage");
						String LoanStage = (String)rr.getAttribute("LoanStage");
						 if (null != ShipState) {
                            String query8 = null;
                            ResultSet rs8;
                            String shipstate_desc = null;
                           
                            query8 =
                                "  select st.state_desc from gm_state st where st.state_Cd ='" +
                                ShipState + "' and st.principal_map_cd = "+pmc;

                            rs8 = getDBTransaction().createStatement(0).executeQuery(query8);
                            if (rs8.next()) {
                                shipstate_desc = rs8.getString(1);
                               rr.setAttribute("dummyshipStateDesc", shipstate_desc);
                            }
                        }
						
						if (null != ShipTehsil) {
                            String query14 = null;
                            ResultSet rs14;
                            String shiptehsil_desc = null;
                            query14 =
                                "SELECT tehsil_desc FROM gm_tehsil      WHERE PRINCIPAL_MAP_CD = '1' AND tehsil_cd = '" +
                                ShipTehsil + "'";

                            rs14 = getDBTransaction().createStatement(0).executeQuery(query14);
                            if (rs14.next()) {
                                shiptehsil_desc = rs14.getString(1);
                               rr.setAttribute("dummyShipTehsil", shiptehsil_desc);
                            }
                        }

                        if (null != ShipVillage) {
                            String query15 = null;
                            ResultSet rs15;
                            String shipvillage_desc = null;
                            query15 =
                                "       SELECT village_name FROM gm_village WHERE PRINCIPAL_MAP_CD = '1' AND village_Cd = '" +
                                ShipVillage + "'";

                            rs15 = getDBTransaction().createStatement(0).executeQuery(query15);
                            if (rs15.next()) {
                                shipvillage_desc = rs15.getString(1);
                                rr.setAttribute("dummyShipVillage", shipvillage_desc);
                            }
                        }
						/* need to enable this code after adding attribute of loan description in vo and jsff
						
						String orderStatusDesc = this.returnListDescForPI(LoanStage,"LOAN_STAGE");
				if(null != orderStatusDesc){
				rr.setAttribute("DummyStatusDesc",orderStatusDesc);
				}*/
				//String LoanStage = (String)rr.getAttribute("LoanStage");
				if(null != LoanStage){
				String LS = this.returnListDescForPI(LoanStage,"LOAN_STAGE");
				rr.setAttribute("LoanStageDesc",LS);}
				
				String query30 = null;
                    ResultSet rs30;
                    String channel = null;
                    query30 =
                        "  SELECT CHANNEL " + "  FROM am_dealer_loc " + " WHERE DEALER_MAP_CD = '" + dealer+
                        "' " + "  AND PARENT_GROUP ='" + parent + "' " + "  AND LOC_CD ='" + loc + "'";

                    rs30 = getDBTransaction().createStatement(0).executeQuery(query30);
                    if (rs30.next()) {
                        channel = rs30.getString(1);
                    }
                    rr.setAttribute("dummyDealerChannel", channel);

				
				
		}
		catch(Exception e){
			e.printStackTrace();
		}
	    return message;
	}
	
	public String returnCheckVariant(String var_cd , String mod_cd){
	    String FuelType = null;
        try{
		
		 Map session = ADFContext.getCurrent().getSessionScope();
		ViewObjectImpl vo = this.getOrderBookingRO1();
        Row r = vo.getCurrentRow();
		
        Integer pmc = Integer.parseInt(session.get("principalMapCd").toString());
		
		ResultSet rs;
        //Integer LN_TOT_AMT = 0;
		String q1 = null;
		//String FuelType = null;
					q1 = "SELECT NVL(gm.FUELTYPE_CD,'PET') FROM GM_VAR GM WHERE GM.VARIANT_CD= '"+var_cd +
		                 "' AND GM.MODEL_CD = '" + mod_cd + "' AND GM.PRINCIPAL_MAP_CD = " +pmc;		
			
			rs = getDBTransaction().createStatement(0).executeQuery(q1);
           //Object CHARGE_AMT= rs.getObject(1);
            if (rs.next()) {
                 FuelType =  rs.getString(1);
                }
				
				
		
	}
	catch(Exception e){
		e.printStackTrace();
	}
	
	return FuelType;
	}

    public String doFilterDataOrderBooking(String customerId) {
        try {
            String ret_val = "Y";
            ViewObjectImpl voiPreInv = this.getShOrdbookMainVO1();
            voiPreInv.appendViewCriteria(voiPreInv.getViewCriteria("ShOrdbookMainVOCriteria"));

            voiPreInv.setNamedWhereClauseParam("bindCustId", customerId);

            voiPreInv.executeQuery();
            Row row1 = voiPreInv.first();
            if (voiPreInv.getRowCount() > 0) {
                row1 = voiPreInv.getCurrentRow();
                voiPreInv.setCurrentRow(row1);
                String pin1 = row1.getAttribute("BillPin").toString();

                String query1 = null;
                ResultSet rs1;
                Object queryResult1 = null;


                query1 =
                    " SELECT CUST_TYPE,TITLE_CD,COMMUNICATION_IND," + "FULL_NAME," + " PERMANENT_ADDRESS1," +
                    " PERMANENT_ADDRESS2," + " PERMANENT_ADDRESS3," + " CITY_CD," + " PPIN," + " OFF_ADDRESS1," +
                    "  OFF_ADDRESS2," + " OFF_ADDRESS3," + "  OFF_CITY_CD," + "  OFF_PIN," + "  PRE_RES_PHONE," +
                    "PRE_MOB_PHONE," + " PRE_OFF_PHONE," + " PRE_FAX_PHONE," + "  RES_PHONE," + " MOBILE_PHONE," +
                    "  EMAIL," + "  WORK_PHONE," + " FAX," + "  DOB," + "  DOA," + " NOMINEE," + " OCCN_CD," +
                    "  PAN_NUM," + " SELLING_DEALER_CD" + " FROM GM_CIN " + "  WHERE PRINCIPAL_MAP_CD = '1'" +
                    "AND CUST_CD = '" + customerId + "'";
                String gst_State_Cd = null;
                rs1 = getDBTransaction().createStatement(0).executeQuery(query1);
                if (rs1.next()) {

                    // String full_name = rs1.getString("FULL_NAME");

                    if (null != rs1.getString("FULL_NAME")) {
                        this.getShOrdbookMainVO1()
                            .getCurrentRow()
                            .setAttribute("DummyFullName", rs1.getString("FULL_NAME"));
                    }
                    if (null != rs1.getString("NOMINEE")) {
                        this.getShOrdbookMainVO1()
                            .getCurrentRow()
                            .setAttribute("dummyNominee", rs1.getString("NOMINEE"));
                    }


                    if (null != pin1) {
                        String query2 = null;
                        ResultSet rs2;
                        String queryResult2 = null;
                        query2 =
                            "select location location_name from gm_pin  where pin_cd = '" + pin1 +
                            "' and principal_map_cd = '1'";

                        rs2 = getDBTransaction().createStatement(0).executeQuery(query2);
                        if (rs2.next()) {
                            queryResult2 = rs2.getString(1);
                        }
                        this.getShOrdbookMainVO1()
                            .getCurrentRow()
                            .setAttribute("PinCodeDescT", queryResult2);
                    }


                    if (null != row1.getAttribute("CityCd")) {
                        String city1 = row1.getAttribute("CityCd").toString();
                        String query3 = null;
                        ResultSet rs3;
                        String queryResult3 = null;
                        query3 =
                            " SELECT CITY_DESC" + " FROM GM_CITY" + " WHERE CITY_CD = '" + city1 + "'" +
                            " AND PRINCIPAL_MAP_CD = '1'";

                        rs3 = getDBTransaction().createStatement(0).executeQuery(query3);
                        if (rs3.next()) {
                            queryResult3 = rs3.getString(1);
                        }
                        this.getShOrdbookMainVO1()
                            .getCurrentRow()
                            .setAttribute("CityDescT", queryResult3);
                    }


                    if (null != rs1.getString("OCCN_CD")) {
                        String occuCode = rs1.getString("OCCN_CD");
                        String query4 = null;
                        ResultSet rs4;
                        Object queryResult4 = null;
                        query4 =
                            " SELECT LIST_DESC  " + "FROM AM_LIST" + "  WHERE LIST_NAME='NATURE_OF_PROF'" +
                            " AND LIST_CODE='" + occuCode + "'" + " AND PRINCIPAL_MAP_CD='1'";

                        rs4 = getDBTransaction().createStatement(0).executeQuery(query4);
                        if (rs4.next()) {
                            queryResult4 = rs4.getString(1);
                        }
                        this.getShOrdbookMainVO1()
                            .getCurrentRow()
                            .setAttribute("dummyOccupDesc", queryResult4);
                    }


                    String query5 = null;
                    ResultSet rs5;
                    Object profession_desc = null;
                    query5 =
                        " select am.act_profession_desc   from gm_act_prof am,gm_cin gm" +
                        " where am.profession_cd=gm.occn_cd " + " and am.act_profession_cd=gm.act_prof_cd " +
                        " and am.principal_map_cd=gm.principal_map_cd   " + " and gm.cust_cd='" + customerId + "' " +
                        " and gm.principal_map_cd = '1'";

                    rs5 = getDBTransaction().createStatement(0).executeQuery(query5);
                    if (rs5.next()) {
                        profession_desc = rs5.getString(1);
                        this.getShOrdbookMainVO1()
                            .getCurrentRow()
                            .setAttribute("dummyProfession", profession_desc);
                    }


                    String query6 = null;
                    ResultSet rs6;
                    String income_desc = null;
                    query6 =
                        "  select am.list_desc from am_list am,gm_cin gm" + " where am.list_name='DESIGNATION'  " +
                        " and am.list_code=gm.designation " + " and am.principal_map_cd=gm.principal_map_cd   " +
                        " and gm.cust_cd='" + customerId + "' " + " and gm.principal_map_cd ='1'";

                    rs6 = getDBTransaction().createStatement(0).executeQuery(query6);
                    if (rs6.next()) {
                        income_desc = rs6.getString(1);
                        this.getShOrdbookMainVO1()
                            .getCurrentRow()
                            .setAttribute("dummyIncome", income_desc);
                    }


                    String query7 = null;
                    ResultSet rs7;
                    String state_cd = null;
                    String district = null;
                    String tehsil = null;
                    String village = null;
                    query7 =
                        " select gm.state_cd,gm.district,gm.tehsil_cd,gm.village_cd  from gm_cin gm where gm.cust_cd = '" +
                        customerId + "'  and gm.principal_map_cd = '1'";

                    rs7 = getDBTransaction().createStatement(0).executeQuery(query7);
                    if (rs7.next()) {
                        if (null != rs7.getString("district")) {
                            district = rs7.getString("district");
                            this.getShOrdbookMainVO1()
                                .getCurrentRow()
                                .setAttribute("District", district);
                        }


                        if (null != rs7.getString("state_cd")) {
                            state_cd = rs7.getString("state_cd");
                            String query8 = null;
                            ResultSet rs8;
                            String state_desc = null;
                            query8 =
                                "  select st.state_desc,ST.GST_STATE_CD from gm_state st where st.state_Cd ='" +
                                state_cd + "' and st.principal_map_cd = '1'";

                            rs8 = getDBTransaction().createStatement(0).executeQuery(query8);
                            if (rs8.next()) {
                                state_desc = rs8.getString(1);
                                gst_State_Cd = rs8.getString("GST_STATE_CD");
                                this.getShOrdbookMainVO1()
                                    .getCurrentRow()
                                    .setAttribute("StateCd", state_cd);
                                this.getShOrdbookMainVO1()
                                    .getCurrentRow()
                                    .setAttribute("dummyStateDesc", state_desc);

                            }
                        }

                        if (null != rs7.getString("tehsil_cd")) {
                            tehsil = rs7.getString("tehsil_cd");
                            String query9 = null;
                            ResultSet rs9;
                            String tehsil_desc = null;
                            query9 =
                                "  select th.tehsil_desc from gm_tehsil th where th.tehsil_cd = '" + tehsil +
                                "' and th.principal_map_cd = '1'";

                            rs9 = getDBTransaction().createStatement(0).executeQuery(query9);
                            if (rs9.next()) {
                                tehsil_desc = rs9.getString(1);
                                this.getShOrdbookMainVO1()
                                    .getCurrentRow()
                                    .setAttribute("TehsilCd", tehsil);
                                this.getShOrdbookMainVO1()
                                    .getCurrentRow()
                                    .setAttribute("dummyTehsilDesc", tehsil_desc);

                            }

                        }
                        if (null != rs7.getString("village_cd")) {
                            village = rs7.getString("village_cd");
                            String query10 = null;
                            ResultSet rs10;
                            String village_desc = null;
                            query10 =
                                "   select vl.village_name from gm_village vl where vl.village_Cd ='" + village +
                                "' and vl.principal_map_cd = '1'";

                            rs10 = getDBTransaction().createStatement(0).executeQuery(query10);
                            if (rs10.next()) {
                                village_desc = rs10.getString(1);
                                this.getShOrdbookMainVO1()
                                    .getCurrentRow()
                                    .setAttribute("VillageCd", village);
                                this.getShOrdbookMainVO1()
                                    .getCurrentRow()
                                    .setAttribute("dummyVillageDesc", village_desc);
                            }
                        }


                    }

                }

                this.getShOrdbookMainVO1()
                    .getCurrentRow()
                    .setAttribute("DummyEnqNum", " ");
                //                this.getShOrdbookMainVO1().getCurrentRow().setAttribute("dummyVillageDesc",village_desc);
                //                this.getShOrdbookMainVO1().getCurrentRow().setAttribute("dummyVillageDesc",village_desc);
            }

            return ret_val;
        } catch (Exception e) {
            // TODO: Add catch code
            e.printStackTrace();
        }
        return null;
    }


    /**
     * Container's getter for ShOrdPreBookingRO1.
     * @return ShOrdPreBookingRO1
     */
    public ShOrdPreBookingROImpl getShOrdPreBookingRO1() {
        return (ShOrdPreBookingROImpl) findViewObject("ShOrdPreBookingRO1");
    }

    /**
     * Container's getter for ShOrdReceiptDetailRO1.
     * @return ShOrdReceiptDetailRO1
     */
    public ShOrdReceiptDetailROImpl getShOrdReceiptDetailRO1() {
        return (ShOrdReceiptDetailROImpl) findViewObject("ShOrdReceiptDetailRO1");
    }


    public void orderBookCustomerCd(String custCode) {
        //LOGGER.info("CUST CODE " + custCode + "\n PMC=" + pmc);
        try {
            System.out.println(custCode + "in implll methoddd");
            Map session = ADFContext.getCurrent().getSessionScope();
            Object principalMapCd = session.get("principalMapCd");
            Object dealerMapCd = session.get("dealerMapCd");
            Object locCd = session.get("locCd");
            Object compCode = session.get("compCode");
            Object parentGrp = session.get("parentGroupCd");
            //        String orderNo=null;
            //         orderNo = exeGenNextNum(Integer.parseInt(dealerMapCd.toString()), String.valueOf(principalMapCd), String.valueOf(locCd), String.valueOf(compCode), "ORD", 2021);
            //     System.out.println(orderNo.length()+"--order no---"+orderNo);
            ViewObjectImpl voiOrderBook = this.getShOrdbookMainVO1();
            Row orderbookRow = voiOrderBook.getCurrentRow();
            voiOrderBook.setCurrentRow(orderbookRow);

            //            orderbookRow.setAttribute("OrderNum", "SOB21000012");
            //                orderbookRow.setAttribute("dummyOrderNo", "SOB21000012");
            //           orderbookRow.setAttribute("DummyOrderNumLov", orderNo);


            //            orderbookRow.setOrderNum(orderNo);
            //            orderbookRow.setdummyOrderNo(orderNo);
            //            orderbookRow.setDummyOrderNumLov(orderNo);
            //            System.out.println("---"+orderbookRow.getOrderNum());

            ViewObjectImpl ordVO = this.getShOrdBookRO2();
            ViewCriteria vc = ordVO.getViewCriteria("ShOrdBookROCriteria");
            ordVO.applyViewCriteria(vc);
            ordVO.setNamedWhereClauseParam("pCompFa", String.valueOf(compCode));
            ordVO.setNamedWhereClauseParam("pCustCd", custCode);
            ordVO.setNamedWhereClauseParam("pDealerMapCd", Integer.parseInt(dealerMapCd.toString()));
            ordVO.setNamedWhereClauseParam("pLocdCd", String.valueOf(locCd));

            ordVO.setNamedWhereClauseParam("pParentGrp", String.valueOf(parentGrp));
            ordVO.executeQuery();
            if (ordVO.getRowCount() > 0) {

                Row row1 = ordVO.first();

                this.getShOrdbookMainVO1()
                    .getCurrentRow()
                    .setAttribute("CustCd", custCode);
                System.out.println("Order numm---" + this.getShOrdbookMainVO1()
                                                         .getCurrentRow()
                                                         .getAttribute("OrderNum"));
                this.getShOrdbookMainVO1()
                    .getCurrentRow()
                    .setAttribute("EnqNum", String.valueOf(row1.getAttribute("EnqNum")));
                this.getShOrdbookMainVO1()
                    .getCurrentRow()
                    .setAttribute("OrderDate", String.valueOf(row1.getAttribute("OrderDate")));
                this.getShOrdbookMainVO1()
                    .getCurrentRow()
                    .setAttribute("OrderStatus", row1.getAttribute("OrderStatus"));
                if (row1.getAttribute("OrderStatus")
                        .toString()
                        .equals("B")) {

                    this.getShOrdbookMainVO1()
                        .getCurrentRow()
                        .setAttribute("DummyStatusDesc", "Booked");
                } else if (row1.getAttribute("OrderStatus")
                               .toString()
                               .equals("C")) {
                    this.getShOrdbookMainVO1()
                        .getCurrentRow()
                        .setAttribute("DummyStatusDesc", "Cancelled");

                } else if (row1.getAttribute("OrderStatus")
                               .toString()
                               .equals("A")) {
                    this.getShOrdbookMainVO1()
                        .getCurrentRow()
                        .setAttribute("DummyStatusDesc", "Alloted");

                } else if (row1.getAttribute("OrderStatus")
                               .toString()
                               .equals("I")) {
                    this.getShOrdbookMainVO1()
                        .getCurrentRow()
                        .setAttribute("DummyStatusDesc", "Invoiced");


                } else if (row1.getAttribute("OrderStatus")
                               .toString()
                               .equals("L")) {
                    this.getShOrdbookMainVO1()
                        .getCurrentRow()
                        .setAttribute("DummyStatusDesc", "Closed");

                }


                this.getShOrdbookMainVO1()
                    .getCurrentRow()
                    .setAttribute("PromDod", row1.getAttribute("PromDod"));
                this.getShOrdbookMainVO1()
                    .getCurrentRow()
                    .setAttribute("FinCash", String.valueOf(row1.getAttribute("FinCash")));
                this.getShOrdbookMainVO1()
                    .getCurrentRow()
                    .setAttribute("SalesType", String.valueOf(row1.getAttribute("SalesType")));
                this.getShOrdbookMainVO1()
                    .getCurrentRow()
                    .setAttribute("Corporate", String.valueOf(row1.getAttribute("Corporate")));

                String query = null;
                ResultSet rs;
                Object queryResult = null;

                query =
                    "SELECT CP_NAME FROM MUL_CORPORATE WHERE CP_NUMBER='" +
                    String.valueOf(row1.getAttribute("Corporate")) + "' AND PRINCIPAL_MAP_CD = '1'";

                rs = getDBTransaction().createStatement(0).executeQuery(query);
                if (rs.next()) {
                    queryResult = rs.getString(1);
                    System.out.println("Name---" + queryResult);
                    this.getShOrdbookMainVO1()
                        .getCurrentRow()
                        .setAttribute("dummyCorpName", String.valueOf(queryResult));

                }
                String query1 = null;
                ResultSet rs1;
                Object queryResult1 = null;


                query1 =
                    " SELECT CUST_TYPE,TITLE_CD,COMMUNICATION_IND," + "FULL_NAME," + " PERMANENT_ADDRESS1," +
                    " PERMANENT_ADDRESS2," + " PERMANENT_ADDRESS3," + " CITY_CD," + " PPIN," + " OFF_ADDRESS1," +
                    "  OFF_ADDRESS2," + " OFF_ADDRESS3," + "  OFF_CITY_CD," + "  OFF_PIN," + "  PRE_RES_PHONE," +
                    "PRE_MOB_PHONE," + " PRE_OFF_PHONE," + " PRE_FAX_PHONE," + "  RES_PHONE," + " MOBILE_PHONE," +
                    "  EMAIL," + "  WORK_PHONE," + " FAX," + "  DOB," + "  DOA," + " NOMINEE," + " OCCN_CD," +
                    "  PAN_NUM," + " SELLING_DEALER_CD" + " FROM GM_CIN " + "  WHERE PRINCIPAL_MAP_CD = '1'" +
                    "AND CUST_CD = '" + custCode + "'";
                String gst_State_Cd = null;
                rs1 = getDBTransaction().createStatement(0).executeQuery(query1);
                if (rs1.next()) {

                    // String full_name = rs1.getString("FULL_NAME");

                    if (null != rs1.getString("FULL_NAME")) {
                        this.getShOrdbookMainVO1()
                            .getCurrentRow()
                            .setAttribute("DummyFullName", rs1.getString("FULL_NAME"));
                    }
                    if (null != rs1.getString("NOMINEE")) {
                        this.getShOrdbookMainVO1()
                            .getCurrentRow()
                            .setAttribute("dummyNominee", rs1.getString("NOMINEE"));
                    }

                    String occuCode = null;
                    if (null != rs1.getString("COMMUNICATION_IND")) {

                        String communcationInd = rs1.getString("COMMUNICATION_IND");
                        String addr1 = null;
                        String add2 = null;
                        String add3 = null;
                        String city1 = null;
                        String pin1 = null;
                        if (communcationInd.equals("O")) {
                            if (null != rs1.getString("OFF_ADDRESS1")) {
                                addr1 = rs1.getString("OFF_ADDRESS1");
                            }
                            if (null != rs1.getString("OFF_ADDRESS2")) {
                                add2 = rs1.getString("OFF_ADDRESS2");
                            }
                            if (null != rs1.getString("OFF_ADDRESS3")) {
                                add3 = rs1.getString("OFF_ADDRESS3");
                            }
                            if (null != rs1.getString("CITY_CD")) {
                                city1 = rs1.getString("CITY_CD");
                            }

                            if (null != rs1.getString("OFF_PIN")) {
                                pin1 = rs1.getString("OFF_PIN");
                            }


                        } else {
                            if (null != rs1.getString("PERMANENT_ADDRESS1")) {
                                addr1 = rs1.getString("PERMANENT_ADDRESS1");
                            }
                            if (null != rs1.getString("PERMANENT_ADDRESS2")) {
                                add2 = rs1.getString("PERMANENT_ADDRESS2");
                            }
                            if (null != rs1.getString("PERMANENT_ADDRESS3")) {
                                add3 = rs1.getString("PERMANENT_ADDRESS3");
                            }
                            if (null != rs1.getString("CITY_CD")) {
                                city1 = rs1.getString("CITY_CD");
                            }
                            if (null != rs1.getString("PPIN")) {
                                pin1 = rs1.getString("PPIN");

                            }

                        }
                        if (null != addr1) {
                            this.getShOrdbookMainVO1()
                                .getCurrentRow()
                                .setAttribute("BillAddress1", addr1);
                        }
                        if (null != add2) {
                            this.getShOrdbookMainVO1()
                                .getCurrentRow()
                                .setAttribute("BillAddress2", add2);
                        }
                        if (null != add3) {
                            this.getShOrdbookMainVO1()
                                .getCurrentRow()
                                .setAttribute("BillAddress3", add3);
                        }

                        if (null != rs1.getString("MOBILE_PHONE")) {

                            this.getShOrdbookMainVO1()
                                .getCurrentRow()
                                .setAttribute("Mobile", rs1.getString("MOBILE_PHONE"));
                        }

                        if (null != city1) {
                            this.getShOrdbookMainVO1()
                                .getCurrentRow()
                                .setAttribute("CityCd", city1);
                        }
                        if (null != pin1) {
                            this.getShOrdbookMainVO1()
                                .getCurrentRow()
                                .setAttribute("BillPin", pin1);
                        }

                        //String   preresphone = rs1.getString("PRE_RES_PHONE");
                        //String   preoffphone = rs1.getString("PRE_OFF_PHONE");
                        // String   resphone = rs1.getString("RES_PHONE");
                        //String   workphone = rs1.getString("WORK_PHONE");
                        // String   mobile = rs1.getString("MOBILE_PHONE");

                        //                String   dob = rs1.getString("DOB");
                        //                String   doa = rs1.getString("DOA");
                        //                String   nominee = rs1.getString("NOMINEE");
                        if (null != rs1.getString("OCCN_CD")) {
                            occuCode = rs1.getString("OCCN_CD");
                        }
                        // String   pannum = rs1.getString("PAN_NUM");
                        if (null != rs1.getString("PRE_RES_PHONE")) {
                            this.getShOrdbookMainVO1()
                                .getCurrentRow()
                                .setAttribute("PreResPhone", rs1.getString("PRE_RES_PHONE"));
                        }
                        if (null != rs1.getString("PRE_OFF_PHONE")) {
                            this.getShOrdbookMainVO1()
                                .getCurrentRow()
                                .setAttribute("PreOffPhone", rs1.getString("PRE_OFF_PHONE"));
                        }
                        if (null != rs1.getString("PAN_NUM")) {
                            this.getShOrdbookMainVO1()
                                .getCurrentRow()
                                .setAttribute("PanNum", rs1.getString("PAN_NUM"));
                        }

                        if (null != rs1.getString("RES_PHONE")) {
                            this.getShOrdbookMainVO1()
                                .getCurrentRow()
                                .setAttribute("ResPhone", rs1.getString("RES_PHONE"));
                        }

                        if (null != rs1.getString("WORK_PHONE")) {
                            this.getShOrdbookMainVO1()
                                .getCurrentRow()
                                .setAttribute("OffPhone", rs1.getString("WORK_PHONE"));
                        }

                        if (null != rs1.getString("DOB")) {
                            this.getShOrdbookMainVO1()
                                .getCurrentRow()
                                .setAttribute("dummyDob", rs1.getString("DOB"));
                        }

                        if (null != rs1.getString("DOA")) {
                            this.getShOrdbookMainVO1()
                                .getCurrentRow()
                                .setAttribute("dummyDoa", rs1.getString("DOA"));
                        }


                        if (null != pin1) {
                            String query2 = null;
                            ResultSet rs2;
                            String queryResult2 = null;
                            query2 =
                                "select location location_name from gm_pin  where pin_cd = '" + pin1 +
                                "' and principal_map_cd = '1'";

                            rs2 = getDBTransaction().createStatement(0).executeQuery(query2);
                            if (rs2.next()) {
                                queryResult2 = rs2.getString(1);
                            }
                            this.getShOrdbookMainVO1()
                                .getCurrentRow()
                                .setAttribute("PinCodeDescT", queryResult2);
                        }

                        if (null != city1) {
                            String query3 = null;
                            ResultSet rs3;
                            String queryResult3 = null;
                            query3 =
                                " SELECT CITY_DESC" + " FROM GM_CITY" + " WHERE CITY_CD = '" + city1 + "'" +
                                " AND PRINCIPAL_MAP_CD = '1'";

                            rs3 = getDBTransaction().createStatement(0).executeQuery(query3);
                            if (rs3.next()) {
                                queryResult3 = rs3.getString(1);
                            }
                            this.getShOrdbookMainVO1()
                                .getCurrentRow()
                                .setAttribute("CityDescT", queryResult3);
                        }

                        if (null != occuCode) {
                            String query4 = null;
                            ResultSet rs4;
                            Object queryResult4 = null;
                            query4 =
                                " SELECT LIST_DESC  " + "FROM AM_LIST" + "  WHERE LIST_NAME='NATURE_OF_PROF'" +
                                " AND LIST_CODE='" + occuCode + "'" + " AND PRINCIPAL_MAP_CD='1'";

                            rs4 = getDBTransaction().createStatement(0).executeQuery(query4);
                            if (rs4.next()) {
                                queryResult4 = rs4.getString(1);
                            }
                            this.getShOrdbookMainVO1()
                                .getCurrentRow()
                                .setAttribute("dummyOccupDesc", queryResult4);
                        }


                        String query5 = null;
                        ResultSet rs5;
                        Object profession_desc = null;
                        query5 =
                            " select am.act_profession_desc   from gm_act_prof am,gm_cin gm" +
                            " where am.profession_cd=gm.occn_cd " + " and am.act_profession_cd=gm.act_prof_cd " +
                            " and am.principal_map_cd=gm.principal_map_cd   " + " and gm.cust_cd='" + custCode + "' " +
                            " and gm.principal_map_cd = '1'";

                        rs5 = getDBTransaction().createStatement(0).executeQuery(query5);
                        if (rs5.next()) {
                            profession_desc = rs5.getString(1);
                            this.getShOrdbookMainVO1()
                                .getCurrentRow()
                                .setAttribute("dummyProfession", profession_desc);
                        }


                        String query6 = null;
                        ResultSet rs6;
                        String income_desc = null;
                        query6 =
                            "  select am.list_desc from am_list am,gm_cin gm" + " where am.list_name='DESIGNATION'  " +
                            " and am.list_code=gm.designation " + " and am.principal_map_cd=gm.principal_map_cd   " +
                            " and gm.cust_cd='" + custCode + "' " + " and gm.principal_map_cd ='1'";

                        rs6 = getDBTransaction().createStatement(0).executeQuery(query6);
                        if (rs6.next()) {
                            income_desc = rs6.getString(1);
                            this.getShOrdbookMainVO1()
                                .getCurrentRow()
                                .setAttribute("dummyIncome", income_desc);
                        }


                    }


                    String query7 = null;
                    ResultSet rs7;
                    String state_cd = null;
                    String district = null;
                    String tehsil = null;
                    String village = null;
                    query7 =
                        " select gm.state_cd,gm.district,gm.tehsil_cd,gm.village_cd  from gm_cin gm where gm.cust_cd = '" +
                        custCode + "'  and gm.principal_map_cd = '1'";

                    rs7 = getDBTransaction().createStatement(0).executeQuery(query7);
                    if (rs7.next()) {
                        if (null != rs7.getString("district")) {
                            district = rs7.getString("district");
                            this.getShOrdbookMainVO1()
                                .getCurrentRow()
                                .setAttribute("District", district);
                        }


                        if (null != rs7.getString("state_cd")) {
                            state_cd = rs7.getString("state_cd");
                            String query8 = null;
                            ResultSet rs8;
                            String state_desc = null;
                            query8 =
                                "  select st.state_desc,ST.GST_STATE_CD from gm_state st where st.state_Cd ='" +
                                state_cd + "' and st.principal_map_cd = '1'";

                            rs8 = getDBTransaction().createStatement(0).executeQuery(query8);
                            if (rs8.next()) {
                                state_desc = rs8.getString(1);
                                gst_State_Cd = rs8.getString("GST_STATE_CD");
                                this.getShOrdbookMainVO1()
                                    .getCurrentRow()
                                    .setAttribute("StateCd", state_cd);
                                this.getShOrdbookMainVO1()
                                    .getCurrentRow()
                                    .setAttribute("dummyStateDesc", state_desc);

                            }
                        }

                        if (null != rs7.getString("tehsil_cd")) {
                            tehsil = rs7.getString("tehsil_cd");
                            String query9 = null;
                            ResultSet rs9;
                            String tehsil_desc = null;
                            query9 =
                                "  select th.tehsil_desc from gm_tehsil th where th.tehsil_cd = '" + tehsil +
                                "' and th.principal_map_cd = '1'";

                            rs9 = getDBTransaction().createStatement(0).executeQuery(query9);
                            if (rs9.next()) {
                                tehsil_desc = rs9.getString(1);
                                this.getShOrdbookMainVO1()
                                    .getCurrentRow()
                                    .setAttribute("TehsilCd", tehsil);
                                this.getShOrdbookMainVO1()
                                    .getCurrentRow()
                                    .setAttribute("dummyTehsilDesc", tehsil_desc);

                            }

                        }
                        if (null != rs7.getString("village_cd")) {
                            village = rs7.getString("village_cd");
                            String query10 = null;
                            ResultSet rs10;
                            String village_desc = null;
                            query10 =
                                "   select vl.village_name from gm_village vl where vl.village_Cd ='" + village +
                                "' and vl.principal_map_cd = '1'";

                            rs10 = getDBTransaction().createStatement(0).executeQuery(query10);
                            if (rs10.next()) {
                                village_desc = rs10.getString(1);
                                this.getShOrdbookMainVO1()
                                    .getCurrentRow()
                                    .setAttribute("VillageCd", village);
                                this.getShOrdbookMainVO1()
                                    .getCurrentRow()
                                    .setAttribute("dummyVillageDesc", village_desc);
                            }
                        }


                    }

                    String query11 = null;
                    ResultSet rs11;
                    String shipaddr1 = null, shipaddr2 = null, shipaddr3 = null, shipcityCd = null, shipPin =
                        null, shipDistrict = null, shiptehsil = null, shipVillage = null, shipState = null, shipPan =
                        null, shipFullName = null, shipGstNum = null, shipuin = null, gstNum = null, uin = null;
                    query11 =
                        " select gm.SHIP_ADDRESS1,gm.SHIP_ADDRESS2,gm.SHIP_ADDRESS3,gm.SHIP_CITY_CD,gm.SHIP_PIN,gm.SHIP_DISTRICT, gm.SHIP_TEHSIL,gm.SHIP_VILLAGE,gm.SHIP_STATE,gm.SHIP_PAN,gm.SHIP_FULL_NAME,gm.ship_gst_num,gm.ship_uin,gm.GST_NUM,GM.UIN" +
                        " from gm_cin gm" + " where gm.cust_cd = '" + custCode + "'" + " and gm.principal_map_cd = '1'";

                    rs11 = getDBTransaction().createStatement(0).executeQuery(query11);
                    if (rs11.next()) {
                        if (null != rs11.getString("SHIP_ADDRESS1")) {
                            this.getShOrdbookMainVO1()
                                .getCurrentRow()
                                .setAttribute("ShipAddress1", rs11.getString("SHIP_ADDRESS1"));
                        }
                        if (null != rs11.getString("SHIP_ADDRESS2")) {
                            shipaddr2 = rs11.getString("SHIP_ADDRESS2");
                            this.getShOrdbookMainVO1()
                                .getCurrentRow()
                                .setAttribute("ShipAddress2", shipaddr2);
                        }
                        if (null != rs11.getString("SHIP_ADDRESS3")) {
                            shipaddr3 = rs11.getString("SHIP_ADDRESS3");
                            this.getShOrdbookMainVO1()
                                .getCurrentRow()
                                .setAttribute("ShipAddress3", shipaddr3);
                        }
                        //shipcityCd = rs11.getString("SHIP_CITY_CD");
                        if (null != rs11.getString("SHIP_PIN")) {
                            shipPin = rs11.getString("SHIP_PIN");
                            this.getShOrdbookMainVO1()
                                .getCurrentRow()
                                .setAttribute("ShipPin", shipPin);
                        }
                        if (null != rs11.getString("SHIP_DISTRICT")) {
                            shipDistrict = rs11.getString("SHIP_DISTRICT");
                            this.getShOrdbookMainVO1()
                                .getCurrentRow()
                                .setAttribute("ShipDistrict", shipDistrict);
                        }

                        //shiptehsil = rs11.getString("SHIP_TEHSIL");
                        //shipVillage = rs11.getString("SHIP_VILLAGE");
                        //shipState = rs11.getString("SHIP_STATE");
                        if (null != rs11.getString("SHIP_PAN")) {
                            shipPan = rs11.getString("SHIP_PAN");
                            this.getShOrdbookMainVO1()
                                .getCurrentRow()
                                .setAttribute("ShipPan", shipPan);
                        }
                        if (null != rs11.getString("SHIP_FULL_NAME")) {
                            shipFullName = rs11.getString("SHIP_FULL_NAME");
                            this.getShOrdbookMainVO1()
                                .getCurrentRow()
                                .setAttribute("ShipFullName", shipFullName);
                        }
                        if (null != rs11.getString("ship_gst_num")) {
                            shipGstNum = rs11.getString("ship_gst_num");
                            this.getShOrdbookMainVO1()
                                .getCurrentRow()
                                .setAttribute("ShipGstNum", shipGstNum);
                        }
                        if (null != rs11.getString("ship_uin")) {
                            shipuin = rs11.getString("ship_uin");
                            this.getShOrdbookMainVO1()
                                .getCurrentRow()
                                .setAttribute("ShipUin", shipuin);
                        }
                        if (null != rs11.getString("GST_NUM")) {
                            gstNum = rs11.getString("GST_NUM");
                            this.getShOrdbookMainVO1()
                                .getCurrentRow()
                                .setAttribute("CustGstNum", gstNum);
                        }
                        if (null != rs11.getString("UIN")) {
                            uin = rs11.getString("UIN");
                            this.getShOrdbookMainVO1()
                                .getCurrentRow()
                                .setAttribute("CustUin", uin);
                        }


                        if (null != rs11.getString("SHIP_STATE")) {
                            String query12 = null;
                            ResultSet rs12;
                            String shipstate_desc = null;
                            query12 =
                                "       SELECT state_desc FROM gm_state WHERE PRINCIPAL_MAP_CD ='1'  AND state_Cd ='" +
                                rs11.getString("SHIP_STATE") + "'";

                            rs12 = getDBTransaction().createStatement(0).executeQuery(query12);
                            if (rs12.next()) {
                                shipstate_desc = rs12.getString(1);
                                this.getShOrdbookMainVO1()
                                    .getCurrentRow()
                                    .setAttribute("ShipState", rs11.getString("SHIP_STATE"));
                                this.getShOrdbookMainVO1()
                                    .getCurrentRow()
                                    .setAttribute("dummyshipStateDesc", shipstate_desc);
                            }
                        }

                        if (null != rs11.getString("SHIP_CITY_CD")) {
                            String query13 = null;
                            ResultSet rs13;
                            String shipcity_desc = null;
                            query13 =
                                " select t.city_desc from gm_city t where t.principal_map_cd='1' and t.city_cd='" +
                                rs11.getString("SHIP_CITY_CD") + "'";

                            rs13 = getDBTransaction().createStatement(0).executeQuery(query13);
                            if (rs13.next()) {
                                shipcity_desc = rs13.getString(1);
                                this.getShOrdbookMainVO1()
                                    .getCurrentRow()
                                    .setAttribute("ShipCityCd", rs11.getString("SHIP_CITY_CD"));
                                this.getShOrdbookMainVO1()
                                    .getCurrentRow()
                                    .setAttribute("dummyShipCitydesc", shipcity_desc);
                            }
                        }

                        if (null != rs11.getString("SHIP_TEHSIL")) {
                            String query14 = null;
                            ResultSet rs14;
                            String shiptehsil_desc = null;
                            query14 =
                                "SELECT tehsil_desc FROM gm_tehsil      WHERE PRINCIPAL_MAP_CD = '1' AND tehsil_cd = '" +
                                rs11.getString("SHIP_TEHSIL") + "'";

                            rs14 = getDBTransaction().createStatement(0).executeQuery(query14);
                            if (rs14.next()) {
                                shiptehsil_desc = rs14.getString(1);
                                this.getShOrdbookMainVO1()
                                    .getCurrentRow()
                                    .setAttribute("ShipTehsil", rs11.getString("SHIP_TEHSIL"));
                                this.getShOrdbookMainVO1()
                                    .getCurrentRow()
                                    .setAttribute("dummyShipTehsil", shiptehsil_desc);
                            }
                        }

                        if (null != rs11.getString("SHIP_VILLAGE")) {
                            String query15 = null;
                            ResultSet rs15;
                            String shipvillage_desc = null;
                            query15 =
                                "       SELECT village_name FROM gm_village WHERE PRINCIPAL_MAP_CD = '1' AND village_Cd = '" +
                                rs11.getString("SHIP_VILLAGE") + "'";

                            rs15 = getDBTransaction().createStatement(0).executeQuery(query15);
                            if (rs15.next()) {
                                shipvillage_desc = rs15.getString(1);
                                this.getShOrdbookMainVO1()
                                    .getCurrentRow()
                                    .setAttribute("ShipVillage", rs11.getString("SHIP_VILLAGE"));
                                this.getShOrdbookMainVO1()
                                    .getCurrentRow()
                                    .setAttribute("dummyShipVillage", shipvillage_desc);
                            }
                        }
                    }

                    //  this.getShOrdbookMainVO1().getCurrentRow().setAttribute("dummyCorpName", String.valueOf(queryResult));

                }
                String model_desc = null, varient_desc = null, color_desc = null, enqvarSrl = null;
                String modelCd = null, varientCd = null, colorCd = null;
                String query16 = null;
                ResultSet rs16;
                int d=0;
                if(null !=row1.getAttribute("EnqNum")){
                        query16 =
                            "       select PARENT_GROUP," + " DEALER_MAP_CD," + "  LOC_CD," + "    COMP_FA," +
                            "   ENQ_NUM," + "   ENQ_VAR_SRL," + "   ENQ_VARIANTCD," + "   ENQ_ECOLORCD," +
                            "  CREATED_DATE," + "  ASSG_EMP_CD," + "  ENQ_STATUS," + "  CREATED_BY," + "  MODIFIED_DATE," +
                            "  MODIFIED_BY," + "  MODEL_CD" + "  from rd_enq" + " where ENQ_NUM = '" +
                            String.valueOf(row1.getAttribute("EnqNum")) + "'" +
                            "   AND NVL(ENQ_STATUS, 'AA') IN ('H', 'W', 'P', 'AA', 'E')" + "  AND DEALER_MAP_CD = '" +
                            Integer.parseInt(dealerMapCd.toString()) + "'" + "  AND LOC_CD = '" + String.valueOf(locCd) +
                            "'" + "  AND COMP_FA = '" + String.valueOf(compCode) + "'" + "  AND PARENT_GROUP = '" +
                            String.valueOf(parentGrp) + "'   order by enq_var_srl";
                        System.out.println("queryyyy1111---" + query16);
                        rs16 = getDBTransaction().createStatement(0).executeQuery(query16);
                        int k = 1;
                        ViewObjectImpl ob1 = this.getOrderBookingEnquiryRO1();
                        ob1.executeEmptyRowSet();
                        while (rs16.next()) {
                            d++;
                            System.out.println("dddddd----"+d);
                            modelCd = rs16.getString("MODEL_CD");
                            varientCd = rs16.getString("ENQ_VARIANTCD");
                            colorCd = rs16.getString("ENQ_ECOLORCD");
                            enqvarSrl = rs16.getString("ENQ_VAR_SRL");

                            String query17 = null;
                            ResultSet rs17;

                            query17 =
                                "       select (select model_desc from gm_mod where principal_map_cd =1 and model_cd ='" +
                                modelCd + "') AS model_desc," +
                                " (select variant_desc from gm_var where principal_map_cd = 1 and variant_cd = '" +
                                varientCd + "' ) AS varient_desc," +
                                " ( select  ecolor_desc from gm_eclr where principal_map_cd   = 1 and   ecolor_cd = '" +
                                colorCd + "' ) AS color_desc from dual   ";

                            rs17 = getDBTransaction().createStatement(0).executeQuery(query17);
                            if (rs17.next()) {
                                model_desc = rs17.getString("model_desc");
                                varient_desc = rs17.getString("varient_desc");
                                color_desc = rs17.getString("color_desc");

                            }

                            String modeldesc1 = model_desc + "-" + modelCd;
                            String variantdesc1 = varient_desc + "-" + varientCd;
                            String colordesc1 = color_desc + "-" + colorCd;
                            ViewObjectImpl ordEnquiryVO = this.getOrderBookingEnquiryRO1();
                            Row createSdGrn = ordEnquiryVO.createRow();
                            createSdGrn.setAttribute("ModelDesc", modeldesc1);
                            createSdGrn.setAttribute("VarientDesc", variantdesc1);
                            createSdGrn.setAttribute("ColorDesc", colordesc1);
                            System.err.println(k + "--");
                            if (k == 1) {
                                createSdGrn.setAttribute("CheckBoolean", true);
                                System.err.println(k + "--" + createSdGrn.getAttribute("CheckBoolean"));
                            }

                            ordEnquiryVO.insertRow(createSdGrn);
                            k++;
                        }
                    }
                System.out.println("Status---"+row1.getAttribute("OrderStatus"));
                 if(row1.getAttribute("OrderStatus")
                        .toString()
                        .equals("B")){
                   System.out.println("dddd else iff-----"+d);
                    if(d==0){
                    query16 =
                        "       select PARENT_GROUP," + " DEALER_MAP_CD," + "  LOC_CD," + "    COMP_FA," +
                        "   ENQ_NUM," + "   ENQ_VAR_SRL," + "   ENQ_VARIANTCD," + "   ENQ_ECOLORCD," +
                        "  CREATED_DATE," + "  ASSG_EMP_CD," + "  ENQ_STATUS," + "  CREATED_BY," + "  MODIFIED_DATE," +
                        "  MODIFIED_BY," + "  MODEL_CD" + "  from rd_enq" + " where ENQ_NUM = '" +
                        String.valueOf(row1.getAttribute("EnqNum")) + "'" +
                        "   AND NVL(ENQ_STATUS, 'AA') IN ('O', 'C', 'AA')" + "  AND DEALER_MAP_CD = '" +
                        Integer.parseInt(dealerMapCd.toString()) + "'" + "  AND LOC_CD = '" + String.valueOf(locCd) +
                        "'" + "  AND COMP_FA = '" + String.valueOf(compCode) + "'" + "  AND PARENT_GROUP = '" +
                        String.valueOf(parentGrp) + "'" +

                        "  AND ENQ_VAR_SRL IN" + "     (SELECT ENQ_VAR_SRL" + "       FROM RD_ENQFOLLOW" +
                        //  "       REMARKS LIKE '%' || '"+orderNo+"' || '%'"+
                        "      WHERE  ENQ_NUM = '" + String.valueOf(row1.getAttribute("EnqNum")) + "'" +
                        "      AND DEALER_MAP_CD = '" + Integer.parseInt(dealerMapCd.toString()) + "'" +
                        "      AND LOC_CD = '" + String.valueOf(locCd) + "'" + "      AND COMP_FA =  '" +
                        String.valueOf(compCode) + "'" + "     AND PARENT_GROUP = '" + String.valueOf(parentGrp) + "')";
                    System.out.println("queryyyy---" + query16);
                    rs16 = getDBTransaction().createStatement(0).executeQuery(query16);
                    int k = 1;
                    ViewObjectImpl ob1 = this.getOrderBookingEnquiryRO1();
                    ob1.executeEmptyRowSet();
                    while (rs16.next()) {
                        modelCd = rs16.getString("MODEL_CD");
                        varientCd = rs16.getString("ENQ_VARIANTCD");
                        colorCd = rs16.getString("ENQ_ECOLORCD");
                        enqvarSrl = rs16.getString("ENQ_VAR_SRL");

                        String query17 = null;
                        ResultSet rs17;

                        query17 =
                            "       select (select model_desc from gm_mod where principal_map_cd =1 and model_cd ='" +
                            modelCd + "') AS model_desc," +
                            " (select variant_desc from gm_var where principal_map_cd = 1 and variant_cd = '" +
                            varientCd + "' ) AS varient_desc," +
                            " ( select  ecolor_desc from gm_eclr where principal_map_cd   = 1 and   ecolor_cd = '" +
                            colorCd + "' ) AS color_desc from dual   ";

                        rs17 = getDBTransaction().createStatement(0).executeQuery(query17);
                        if (rs17.next()) {
                            model_desc = rs17.getString("model_desc");
                            varient_desc = rs17.getString("varient_desc");
                            color_desc = rs17.getString("color_desc");

                        }

                        String modeldesc1 = model_desc + "-" + modelCd;
                        String variantdesc1 = varient_desc + "-" + varientCd;
                        String colordesc1 = color_desc + "-" + colorCd;
                        ViewObjectImpl ordEnquiryVO = this.getOrderBookingEnquiryRO1();
                        Row createSdGrn = ordEnquiryVO.createRow();
                        createSdGrn.setAttribute("ModelDesc", modeldesc1);
                        createSdGrn.setAttribute("VarientDesc", variantdesc1);
                        createSdGrn.setAttribute("ColorDesc", colordesc1);
                        System.err.println(k + "--");
                        if (k == 1) {
                            createSdGrn.setAttribute("CheckBoolean", true);
                            System.err.println(k + "--" + createSdGrn.getAttribute("CheckBoolean"));
                        }

                        ordEnquiryVO.insertRow(createSdGrn);
                        k++;
                    }
                }
                }
                // "  order by enq_var_srl)";
                  

                    this.getShOrdbookMainVO1()
                        .getCurrentRow()
                        .setAttribute("DummyModelCd", model_desc);
                    this.getShOrdbookMainVO1()
                        .getCurrentRow()
                        .setAttribute("DummyVariantDesc", varient_desc);
                    this.getShOrdbookMainVO1()
                        .getCurrentRow()
                        .setAttribute("VariantCd", varientCd);
                    this.getShOrdbookMainVO1()
                        .getCurrentRow()
                        .setAttribute("FirstEcolorCd", colorCd);
                    this.getShOrdbookMainVO1()
                        .getCurrentRow()
                        .setAttribute("DummyColorDesc1", color_desc);

                    this.getShOrdbookMainVO1()
                        .getCurrentRow()
                        .setAttribute("DummyEnqVarSrl", enqvarSrl);


                

                BigDecimal b2 = BigDecimal.ZERO;
                if (null != varientCd) {
                    gstApplyMethod(custCode);
                    String query18 = null;
                    ResultSet rs18;
                    BigDecimal booking_Amt;
                    BigDecimal sellingPrice = BigDecimal.ZERO;
                    BigDecimal accessoryPrice = BigDecimal.ZERO;
                    BigDecimal ndPrice = BigDecimal.ZERO;
                    query18 =
                        "  SELECT BOOK_AMT" + "  FROM SM_BPRICE" + "   WHERE VARIANT_CD = '" + varientCd + "'" +
                        "   AND (NVL('" + row1.getAttribute("OrderDate") + "',SYSDATE) >= BOOK_FROM_DATE" +
                        "   AND NVL('" + row1.getAttribute("OrderDate") + "',SYSDATE) <= NVL(BOOK_TO_DATE,SYSDATE))" +
                        "   AND NVL(AREA_CD,'" + gst_State_Cd + "') = '" + gst_State_Cd + "'" +
                        "   AND DEALER_MAP_CD = '" + dealerMapCd + "'" + "   AND LOC_CD = '" + locCd + "'";

                    rs18 = getDBTransaction().createStatement(0).executeQuery(query18);
                    if (rs18.next()) {
                        booking_Amt = rs18.getBigDecimal(1);

                    } else {
                        booking_Amt = BigDecimal.ZERO;
                    }
                    this.getShOrdbookMainVO1()
                        .getCurrentRow()
                        .setAttribute("BookingAmt", booking_Amt);

                    String query19 = null;
                    ResultSet rs19;
                    String mulForCd;
                    query19 =
                        "  select for_cd" + "     from am_dealer_loc" + "    where PARENT_GROUP = '" + parentGrp + "'" +
                        "     and DEALER_MAP_CD = '" + dealerMapCd + "'" + "     and LOC_CD = '" + locCd + "'";

                    rs19 = getDBTransaction().createStatement(0).executeQuery(query19);
                    if (rs19.next()) {
                        mulForCd = rs19.getString(1);
                        SimpleDateFormat formatter = new SimpleDateFormat("yyyy-MM-dd");

                        String formatOrderDt = formatter.format(row1.getAttribute("OrderDate"));
                        System.out.println("date from order---" + formatOrderDt);

                        String query20 = null;
                        ResultSet rs20;

                        query20 =
                            " SELECT NVL(SELL_PRICE_L, 0) selling_price, NVL(ACCESSORY_PRICE, 0) accessory_price, NVL(ND_PRICE, 0) nd_price" +
                            "   FROM SM_SPRICE_for" + "  WHERE MUL_FOR_CD = '" + mulForCd + "'" +
                            "    AND VARIANT_CD = '" + varientCd + "'  " + "  AND (NVL(to_date('" + formatOrderDt +
                            "','YYYY-MM-DD'), SYSDATE) >= FROM_DATE AND  " + "        NVL(to_date('" + formatOrderDt +
                            "','YYYY-MM-DD'), SYSDATE) <= NVL(TO_DATE, SYSDATE))  " + "   AND SALES_TYPE = decode('" +
                            String.valueOf(row1.getAttribute("SalesType")) +
                            "','HCI','IND','HNC','IND','LEA','IND','N2N','IND','" +
                            String.valueOf(row1.getAttribute("SalesType")) + "')  " +
                            "   AND PRINCIPAL_MAP_CD = '1'     " + "  AND COLOR_IND =  " + "     DECODE('" + colorCd +
                            "',  " + "            'M',  " + "           'M',  " + "          'NM',  " +
                            "          'NM',  " + "         (SELECT CTYPE_CD  " + "            FROM GM_ECLR  " +
                            "          WHERE ECOLOR_CD = '" + colorCd + "'  " +
                            "           AND PRINCIPAL_MAP_CD = '1'))";
                        System.out.println("query20===" + query20);

                        rs20 = getDBTransaction().createStatement(0).executeQuery(query20);
                        if (rs20.next()) {
                            sellingPrice = rs20.getBigDecimal("selling_price");
                            accessoryPrice = rs20.getBigDecimal("accessory_price");
                            ndPrice = rs20.getBigDecimal("nd_price");

                        } else {

                        }
                        MathContext m = new MathContext(4); // 4 precision

                        // b1 is rounded using m
                        b2 = sellingPrice.round(m);
                        this.getShOrdbookMainVO1()
                            .getCurrentRow()
                            .setAttribute("DummySellingPrice", b2);
                        // this.getShOrdbookMainVO1().getCurrentRow().setAttribute("BookingAmt",accessoryPrice);
                        // this.getShOrdbookMainVO1().getCurrentRow().setAttribute("BookingAmt",ndPrice);


                    } else {

                        this.getShOrdbookMainVO1()
                            .getCurrentRow()
                            .setAttribute("DummySellingPrice", b2);
                    }


                    this.getShOrdbookMainVO1()
                        .getCurrentRow()
                        .setAttribute("DummyBalanceAmt", b2);
                    this.getShOrdbookMainVO1()
                        .getCurrentRow()
                        .setAttribute("RecdAmt", BigDecimal.ZERO);
                    this.getShOrdbookMainVO1()
                        .getCurrentRow()
                        .setAttribute("DummyChargeAmt", BigDecimal.ZERO);
                    String query30 = null;
                    ResultSet rs30;
                    String channel = null;
                    query30 =
                        "  SELECT CHANNEL " + "  FROM am_dealer_loc " + " WHERE DEALER_MAP_CD = '" + dealerMapCd +
                        "' " + "  AND PARENT_GROUP ='" + parentGrp + "' " + "  AND LOC_CD ='" + locCd + "'";

                    rs30 = getDBTransaction().createStatement(0).executeQuery(query30);
                    if (rs30.next()) {
                        channel = rs30.getString(1);
                    }
                    this.getShOrdbookMainVO1()
                        .getCurrentRow()
                        .setAttribute("dummyDealerChannel", channel);


                    String userId = String.valueOf(session.get("userId")).toLowerCase();
                    System.out.println("Username---" + userId);

                    String query99 = null;
                    ResultSet rs99;
                    String emp_Cd = null, emp_name_temp = null;
                    query99 =
                        " SELECT AM.EMP_CD FROM AM_USERS AM,GM_EMP GM WHERE USER_ID = '" + userId +
                        "'  AND AM.EMP_CD = GM.EMP_CD AND GM.EMP_CATEG = 'S' AND GM.DEALER_MAP_CD = '" + dealerMapCd +
                        "'";

                    rs99 = getDBTransaction().createStatement(0).executeQuery(query99);
                    if (rs99.next()) {
                        emp_Cd = rs99.getString("EMP_CD");


                        String query98 = null;
                        ResultSet rs98;

                        query98 =
                            "Select emp_name  from gm_emp where dealer_map_cd   = '" + dealerMapCd +
                            "' and emp_cd      = '" + emp_Cd + "' and emp_categ = 'S'";
                        rs98 = getDBTransaction().createStatement(0).executeQuery(query98);
                        if (rs98.next()) {
                            emp_name_temp = rs98.getString("emp_name");

                        }
                        System.out.println(emp_name_temp + "Code---" + emp_Cd);
                        this.getShOrdbookMainVO1()
                            .getCurrentRow()
                            .setAttribute("SalesManCd", emp_Cd);
                        this.getShOrdbookMainVO1()
                            .getCurrentRow()
                            .setAttribute("DummySalesCdTemp", emp_name_temp);
                    }

                }

                this.getSdMgaBookingVO1().executeEmptyRowSet();
                getShOrdCommitmentVO1().executeEmptyRowSet();

                this.getShOrdChargesVO1().executeEmptyRowSet();

            }
            LOGGER.info(custCode + "____________ONE____________________");
            System.out.println(ordVO.getRowCount() + "---in implll methoddd");

            LOGGER.info("____________SIX____________________");
        } catch (Exception ex) {
            ex.printStackTrace();
        }
    }

    /**
     * Container's getter for OrderBookingEnquiryRO1.
     * @return OrderBookingEnquiryRO1
     */
    public ViewObjectImpl getOrderBookingEnquiryRO1() {
        return (ViewObjectImpl) findViewObject("OrderBookingEnquiryRO1");
    }

    public void calculateEwAmountWithTax(String ewType) {

        try {
            Map session = ADFContext.getCurrent().getSessionScope();
            Integer principalMapCd = Integer.parseInt(session.get("principalMapCd").toString());
            Integer dealerMapCd = Integer.parseInt(session.get("dealerMapCd").toString());
            String locCd = String.valueOf(session.get("locCd"));
            String compCode = String.valueOf(session.get("compCode"));
            String parentGrp = String.valueOf(session.get("parentGroupCd"));
            String query6 = null;
            ResultSet rs6;
            String gststate_cd = null, sac_code = null;
            query6 =
                "  SELECT gst_state_cd, sac_code " + "      FROM vm_ew_param " + "     WHERE principal_map_cd = '" +
                principalMapCd + "' " + "      AND ew_option = 'II' " +
                "    AND TRUNC(SYSDATE) BETWEEN valid_from_date AND valid_to_date";
System.out.println("query6 "+query6);
            rs6 = getDBTransaction().createStatement(0).executeQuery(query6);
            if (rs6.next()) {
                gststate_cd = rs6.getString(1);
                sac_code = rs6.getString(2);
            }
            String query7 = null;
            ResultSet rs7;
            String maingst_state_cd = null;
            query7 =
                "   SELECT st.gst_state_cd " + "    FROM am_dealer_loc l, gm_state st " + "  WHERE l.dealer_map_cd ='" +
                dealerMapCd + "' " + "   AND l.loc_cd = '" + locCd + "' " +
                "   AND st.principal_map_cd = l.principal_map_cd " + "  AND st.state_cd = l.state_cd";
            System.out.println("query7 "+query7);

            rs7 = getDBTransaction().createStatement(0).executeQuery(query7);
            if (rs7.next()) {
                maingst_state_cd = rs7.getString(1);

            }
            BigDecimal igst = BigDecimal.ZERO;
            BigDecimal cgst = BigDecimal.ZERO, sgst_ugst = BigDecimal.ZERO;
            String gstType = null;
            if (gststate_cd.equals(maingst_state_cd)) {
                String query8 = null;
                ResultSet rs8;
                gstType = "S";
                query8 =
                    "  SELECT cgst, sgst_ugst " + "         FROM gst_charge " + "      WHERE hsn_sac_catg = '" +
                    sac_code + "' " + "       AND state_cd = '" + maingst_state_cd + "' " +
                    "      AND TRUNC(SYSDATE) BETWEEN from_date AND NVL(to_date,TRUNC(SYSDATE))";
System.out.println("query8 "+query8);
                rs8 = getDBTransaction().createStatement(0).executeQuery(query8);
                if (rs8.next()) {
                    cgst = rs8.getBigDecimal(1);
                    sgst_ugst = rs8.getBigDecimal(2);
                }
            } else {

                gstType = "I";
                String query9 = null;
                ResultSet rs9;

                query9 =
                    "  SELECT igst " + "      FROM gst_charge " + "     WHERE hsn_sac_catg = '" + sac_code + "' " +
                    "      AND state_cd = '" + maingst_state_cd + "' " +
                    "     AND TRUNC(SYSDATE) BETWEEN from_date AND NVL(to_date,TRUNC(SYSDATE))";
System.out.println("query9 "+query9);
                rs9 = getDBTransaction().createStatement(0).executeQuery(query9);
                if (rs9.next()) {

                    igst = rs9.getBigDecimal(1);
                }
            }
            String variantCd = this.getShOrdbookMainVO1()
                                   .getCurrentRow()
                                   .getAttribute("VariantCd")
                                   .toString();
            BigDecimal premAmt = BigDecimal.ZERO, prem_cgstAmt = BigDecimal.ZERO, prem_sgstAmt =
                BigDecimal.ZERO, prem_igstAmt = BigDecimal.ZERO;
            String query2 = null;
            ResultSet rs2;
            String SysDate = String.valueOf(new oracle.jbo.domain.Date(oracle.jbo
                                                                             .domain
                                                                             .Date
                                                                             .getCurrentDate()));

            java.sql.Timestamp datetime = new java.sql.Timestamp(System.currentTimeMillis());
            System.out.println(datetime.toString().substring(0, 10) + "datetime--");
            String dt = datetime.toString().substring(0, 10);

            query2 =
                " SELECT m.prem_amount, " + "     m.prem_dlr_comm, " + "     ROUND((m.prem_amount * " + cgst +
                ") / 100,2) prem_cgstAmt, " + "     ROUND((m.prem_amount * " + sgst_ugst + ") / 100,2) prem_sgstAmt, " +
                "    ROUND((m.prem_amount * " + igst + ") / 100,2) prem_igstAmt, " + "    ROUND((m.prem_dlr_comm * " +
                cgst + ") / 100,2), " + "    ROUND((m.prem_dlr_comm * " + sgst_ugst + ") / 100,2), " +
                "    ROUND((m.prem_dlr_comm * " + igst + ") / 100,2) " + "     FROM vm_ew_prem m " +
                "    WHERE m.prem_variant_cd = '" + variantCd + "' " + "      AND m.prem_extewar_type = '" + ewType +
                "'      AND ((TO_DATE('" + dt + "', 'yyyy-MM-dd') - TO_DATE('" + dt + "', 'yyyy-MM-dd')) " +
                "            BETWEEN m.prem_retl_timefrom AND m.prem_retl_timeto) " +
                "     AND TRUNC(SYSDATE) BETWEEN m.prem_from_date AND NVL(m.prem_to_date, TRUNC(SYSDATE)) " +
                "    AND m.principal_map_cd = '" + principalMapCd + "'";
System.out.println("query2 "+query2);
            rs2 = getDBTransaction().createStatement(0).executeQuery(query2);
            if (rs2.next()) {

                premAmt = rs2.getBigDecimal("prem_amount");
                prem_cgstAmt = rs2.getBigDecimal("prem_cgstAmt");
                prem_sgstAmt = rs2.getBigDecimal("prem_sgstAmt");
                prem_igstAmt = rs2.getBigDecimal("prem_igstAmt");
            }
            BigDecimal Ewamount = BigDecimal.ZERO;
            System.out.println(gststate_cd+" gststate_cd "+maingst_state_cd);
            if (gststate_cd.equals(maingst_state_cd)) {
                Ewamount = premAmt.add(prem_cgstAmt).add(prem_sgstAmt);
                System.out.println(" Ewamount 1 "+Ewamount);
            } else {
                Ewamount = premAmt.add(prem_igstAmt);
                System.out.println(" Ewamount 2 "+Ewamount);
            }
            //BigDecimal Ewamount=premAmt.add(prem_cgstAmt)
            this.getShOrdbookMainVO1()
                .getCurrentRow()
                .setAttribute("EwBookedAmt", Ewamount);

            //Message-Ext. Warranty Master Setup Not Found


        } catch (Exception ex) {
            ex.printStackTrace();
        }
    }

    public void calculateLoyaltyAmount() {
        try {

            Map session = ADFContext.getCurrent().getSessionScope();
            Integer principalMapCd = Integer.parseInt(session.get("principalMapCd").toString());
            Integer dealerMapCd = Integer.parseInt(session.get("dealerMapCd").toString());
            String locCd = String.valueOf(session.get("locCd"));
            String compCode = String.valueOf(session.get("compCode"));
            String parentGrp = String.valueOf(session.get("parentGroupCd"));
            String query3 = null;
            ResultSet rs3;
            String channel = null;
            query3 =
                "  SELECT CHANNEL " + "  FROM am_dealer_loc " + " WHERE DEALER_MAP_CD = '" + dealerMapCd + "' " +
                "  AND PARENT_GROUP ='" + parentGrp + "' " + "  AND LOC_CD ='" + locCd + "'";

            rs3 = getDBTransaction().createStatement(0).executeQuery(query3);
            if (rs3.next()) {
                channel = rs3.getString(1);
            }

            String enqNum = this.getShOrdbookMainVO1()
                                .getCurrentRow()
                                .getAttribute("EnqNum")
                                .toString();
            String query4 = null;
            ResultSet rs4;
            BigDecimal fees_amt = BigDecimal.ZERO;
            query4 =
                "       SELECT fees_amt  " + "         FROM gm_loyalty_master  " + "        WHERE CARD_TYPE='R'  " +
                "          AND channel='" + channel + "'  " + "        AND tier='T1'";

            rs4 = getDBTransaction().createStatement(0).executeQuery(query4);
            if (rs4.next()) {
                fees_amt = rs4.getBigDecimal(1);
                this.getShOrdbookMainVO1()
                    .getCurrentRow()
                    .setAttribute("AutocardBookedAmt", fees_amt);
            }
            String query9 = null;
            ResultSet rs9;
            BigDecimal miPrice = BigDecimal.ZERO;
            query9 =
                "  SELECT ST.AUTOCARD_PRICE, ST.MI_PRICE, 'Y', AM.LIST_CODE " +
                "       FROM ST_NEXA_QUOT ST, AM_LIST_RANGE AM " + "     WHERE ST.DEALER_MAP_CD = '" + dealerMapCd +
                "' " + "       AND ST.PARENT_GROUP = '" + parentGrp + "' " + "      AND ST.LOC_CD = '" + locCd + "' " +
                "      AND ST.COMP_FA = '" + compCode + "' " + "      AND ST.ENQ_NUM = '" + enqNum + "' " +
                "     AND ST.AUTOCARD_PRICE IS NOT NULL " + "     AND ST.AUTOCARD_PRICE = AM.LIST_FROM_RANGE " +
                "     AND ST.AUTOCARD_TYPE = AM.LIST_CODE " +
                "    AND AM.LIST_NAME IN ('AUTOCARD_PRICE', 'AUTOCARD_SRV_PRICE') " + "   AND AM.PRINCIPAL_MAP_CD = '" +
                principalMapCd + "' " + "   AND ST.TIMESTAMP = " + "     (SELECT MAX(SN.TIMESTAMP) " +
                "      FROM muldms.ST_NEXA_QUOT SN " + "     WHERE SN.DEALER_MAP_CD = ST.DEALER_MAP_CD " +
                "       AND SN.PARENT_GROUP = ST.PARENT_GROUP " + "      AND SN.LOC_CD = ST.LOC_CD " +
                "      AND SN.COMP_FA = ST.COMP_FA " + "      AND SN.ENQ_NUM = ST.ENQ_NUM " +
                "       AND SN.AUTOCARD_PRICE IS NOT NULL)";

            rs9 = getDBTransaction().createStatement(0).executeQuery(query9);
            if (rs9.next()) {

                miPrice = rs9.getBigDecimal(2);
                this.getShOrdbookMainVO1()
                    .getCurrentRow()
                    .setAttribute("MiBookedAmt", miPrice);
            }


        } catch (Exception ex) {
            ex.printStackTrace();
        }

    }

    public void fetchPreBookingDataDisplay(String preBookingNum) {
        try {
            ViewObjectImpl ob1 = this.getOrderBookingEnquiryRO1();
            ob1.executeEmptyRowSet();
            System.out.println("pre Booking num---" + preBookingNum);
            Map session = ADFContext.getCurrent().getSessionScope();
            Integer principalMapCd = Integer.parseInt(session.get("principalMapCd").toString());
            Integer dealerMapCd = Integer.parseInt(session.get("dealerMapCd").toString());
            String locCd = String.valueOf(session.get("locCd"));
            String compCode = String.valueOf(session.get("compCode"));
            String parentGrp = String.valueOf(session.get("parentGroupCd"));
			String EnqUsed = (String)session.get("EnqUsed");
            //String preBookingNum=this.getShOrdbookMainVO1().getCurrentRow().getAttribute("PreBookingNum").toString();
            ViewObjectImpl voiAdv = this.getPreBookingRO1();
ViewObjectImpl vo = this.getShOrdbookMainVO1();
Row r  = vo.getCurrentRow();
            ViewCriteriaManager vcm = voiAdv.getViewCriteriaManager();
            ViewCriteria vc = vcm.getViewCriteria("PreBookingROCriteria");
            VariableValueManager vvm = vc.ensureVariableManager();
            vvm.setVariableValue("pDealerMapCd", dealerMapCd);
            vvm.setVariableValue("pLocCd", locCd);
            vvm.setVariableValue("pParentGrpCd", parentGrp);
            vvm.setVariableValue("pPreBookingNum", preBookingNum);
            voiAdv.applyViewCriteria(vc);
            voiAdv.executeQuery();
System.out.println("pre Booking num---1");
            if (voiAdv.getRowCount() > 0) {
				System.out.println("pre Booking num---2");
                Row rs1 = voiAdv.first();
                java.sql.Timestamp datetime1 = new java.sql.Timestamp(System.currentTimeMillis());
                if(null == EnqUsed){
				r.setAttribute("OrderDate", datetime1);}
                r.setAttribute("PreBookingNum", preBookingNum);
                r.setAttribute("CustCd", String.valueOf(rs1.getAttribute("CustCd")));
                r.setAttribute("EnqNum", String.valueOf(rs1.getAttribute("EnqNum")));
                r.setAttribute("SalesType", String.valueOf(rs1.getAttribute("SaleType")));
                r.setAttribute("Corporate", String.valueOf(rs1.getAttribute("CorpCode")));
                r.setAttribute("dummyCustCd", String.valueOf(rs1.getAttribute("CustCd")));

                String orderNo = null;
				System.out.println("EnqUsed value : "+EnqUsed);
				///if(null == EnqUsed){
                this.getShOrdbookMainVO1()
                    .getCurrentRow()
                    .setAttribute("OrderStatus", "B");

                this.getShOrdbookMainVO1()
                    .getCurrentRow()
				.setAttribute("DummyStatusDesc", "Booked");
				//}
			/*	else{
					this.getShOrdbookMainVO1()
                    .getCurrentRow()
                    .setAttribute("OrderStatus", null);

                this.getShOrdbookMainVO1()
                    .getCurrentRow()
				.setAttribute("DummyStatusDesc", null);
				} */

System.out.println("pre Booking num---2");
                //orderNo =
                //    exeGenNextNum(Integer.parseInt(dealerMapCd.toString()), String.valueOf(principalMapCd),
                //                  String.valueOf(locCd), String.valueOf(compCode), "ORD", 2021);
                //System.out.println("order no---" + orderNo);

                this.getShOrdbookMainVO1()
                    .getCurrentRow()
                    .setAttribute("OrderNum", orderNo);
                this.getShOrdbookMainVO1()
                    .getCurrentRow()
                    .setAttribute("DummyOrderNumLov", orderNo);
                this.getShOrdbookMainVO1()
                    .getCurrentRow()
                    .setAttribute("dummyOrderNo", orderNo);
                //---------------------------------
                String query30 = null;
                ResultSet rs30;
                String channel = null;
                query30 =
                    "  SELECT CHANNEL " + "  FROM am_dealer_loc " + " WHERE DEALER_MAP_CD = '" + dealerMapCd + "' " +
                    "  AND PARENT_GROUP ='" + parentGrp + "' " + "  AND LOC_CD ='" + locCd + "'";

                rs30 = getDBTransaction().createStatement(0).executeQuery(query30);
                if (rs30.next()) {
                    channel = rs30.getString(1);
                }
                this.getShOrdbookMainVO1()
                    .getCurrentRow()
                    .setAttribute("dummyDealerChannel", channel);


                String query = null;
                ResultSet rs;
                Object queryResult = null;
System.out.println("pre Booking num---3");
                query =
                    "SELECT CP_NAME FROM MUL_CORPORATE WHERE CP_NUMBER='" +
                    String.valueOf(rs1.getAttribute("CorpCode")) + "' AND PRINCIPAL_MAP_CD = '" + principalMapCd + "'";

                rs = getDBTransaction().createStatement(0).executeQuery(query);
                if (rs.next()) {
                    queryResult = rs.getString(1);

                    this.getShOrdbookMainVO1()
                        .getCurrentRow()
                        .setAttribute("dummyCorpName", String.valueOf(queryResult));

                }
                String full_name =
                    String.valueOf(rs1.getAttribute("CustFirstName")) + " " +
                    String.valueOf(rs1.getAttribute("CustMiddleName")) + " " +
                    String.valueOf(rs1.getAttribute("CustLastName"));
                this.getShOrdbookMainVO1()
                    .getCurrentRow()
                    .setAttribute("DummyFullName", full_name);
                this.getShOrdbookMainVO1()
                    .getCurrentRow()
                    .setAttribute("ShipFullName", full_name);
                this.getShOrdbookMainVO1()
                    .getCurrentRow()
                    .setAttribute("BillAddress1", rs1.getAttribute("BilltoAddress1"));
                this.getShOrdbookMainVO1()
                    .getCurrentRow()
                    .setAttribute("BillAddress2", rs1.getAttribute("BilltoAddress2"));
                this.getShOrdbookMainVO1()
                    .getCurrentRow()
                    .setAttribute("BillAddress3", rs1.getAttribute("BilltoAddress3"));
                this.getShOrdbookMainVO1()
                    .getCurrentRow()
                    .setAttribute("Mobile", rs1.getAttribute("Mobile"));

                if (null != rs1.getAttribute("BilltoState")) {
                    String state_cd = String.valueOf(rs1.getAttribute("BilltoState"));
                    String query8 = null;
                    ResultSet rs8;
                    String state_desc = null;
                    query8 =
                        "  select st.state_desc,ST.GST_STATE_CD from gm_state st where st.state_Cd ='" + state_cd +
                        "' and st.principal_map_cd = '" + principalMapCd + "'";

                    rs8 = getDBTransaction().createStatement(0).executeQuery(query8);
                    if (rs8.next()) {
                        state_desc = rs8.getString(1);
                        String gst_State_Cd = rs8.getString("GST_STATE_CD");
                        this.getShOrdbookMainVO1()
                            .getCurrentRow()
                            .setAttribute("StateCd", state_cd);
                        this.getShOrdbookMainVO1()
                            .getCurrentRow()
                            .setAttribute("dummyStateDesc", state_desc);

                    }
                }

System.out.println("pre Booking num---4");
                if (null != rs1.getAttribute("BilltoCity")) {
                    String city1 = String.valueOf(rs1.getAttribute("BilltoCity"));
                    this.getShOrdbookMainVO1()
                        .getCurrentRow()
                        .setAttribute("CityCd", city1);
                    String query3 = null;
                    ResultSet rs3;
                    String queryResult3 = null;
                    query3 =
                        " SELECT CITY_DESC" + " FROM GM_CITY" + " WHERE CITY_CD = '" + city1 + "'" +
                        " AND PRINCIPAL_MAP_CD = '" + principalMapCd + "'";

                    rs3 = getDBTransaction().createStatement(0).executeQuery(query3);
                    if (rs3.next()) {
                        queryResult3 = rs3.getString(1);
                    }
                    this.getShOrdbookMainVO1()
                        .getCurrentRow()
                        .setAttribute("CityDescT", queryResult3);
                }

System.out.println("pre Booking num---5");
                if (null != rs1.getAttribute("BilltoPincode")) {
                    String pin1 = String.valueOf(rs1.getAttribute("BilltoPincode"));
                    String query2 = null;
                    ResultSet rs2;
                    String queryResult2 = null;
                    query2 =
                        "select location location_name from gm_pin  where pin_cd = '" + pin1 +
                        "' and principal_map_cd = '" + principalMapCd + "'";

                    rs2 = getDBTransaction().createStatement(0).executeQuery(query2);
                    if (rs2.next()) {
                        queryResult2 = rs2.getString(1);
                    }
                    this.getShOrdbookMainVO1()
                        .getCurrentRow()
                        .setAttribute("PinCodeDescT", queryResult2);

                    this.getShOrdbookMainVO1()
                        .getCurrentRow()
                        .setAttribute("BillPin", rs1.getAttribute("BilltoPincode"));
                }
                if (null != rs1.getAttribute("BilltoPan")) {
                    this.getShOrdbookMainVO1()
                        .getCurrentRow()
                        .setAttribute("PanNum", rs1.getAttribute("BilltoPan"));
                }

                if (null != rs1.getAttribute("BilltoGstNum")) {
                    this.getShOrdbookMainVO1()
                        .getCurrentRow()
                        .setAttribute("CustGstNum", rs1.getAttribute("BilltoGstNum"));
                }

                if (null != rs1.getAttribute("ShiptoAddress1")) {
                    this.getShOrdbookMainVO1()
                        .getCurrentRow()
                        .setAttribute("ShipAddress1", rs1.getAttribute("ShiptoAddress1"));
                }


                if (null != rs1.getAttribute("ShiptoAddress2")) {
                    this.getShOrdbookMainVO1()
                        .getCurrentRow()
                        .setAttribute("ShipAddress2", rs1.getAttribute("ShiptoAddress2"));
                }


                if (null != rs1.getAttribute("ShiptoAddress3")) {
                    this.getShOrdbookMainVO1()
                        .getCurrentRow()
                        .setAttribute("ShipAddress3", rs1.getAttribute("ShiptoAddress3"));
                }
                if (null != rs1.getAttribute("BilltoDistrict")) {
                    this.getShOrdbookMainVO1()
                        .getCurrentRow()
                        .setAttribute("District", rs1.getAttribute("BilltoDistrict"));
                }

                if (null != rs1.getAttribute("BilltoState")) {
                    Object state_cd = rs1.getAttribute("BilltoState");
                    String query8 = null;
                    ResultSet rs8;
                    String state_desc = null;
                    query8 =
                        "  select st.state_desc,ST.GST_STATE_CD from gm_state st where st.state_Cd ='" + state_cd +
                        "' and st.principal_map_cd = '" + principalMapCd + "'";

                    rs8 = getDBTransaction().createStatement(0).executeQuery(query8);
                    if (rs8.next()) {
                        state_desc = rs8.getString(1);
                        String gst_State_Cd = rs8.getString("GST_STATE_CD");
                        this.getShOrdbookMainVO1()
                            .getCurrentRow()
                            .setAttribute("StateCd", state_cd);
                        this.getShOrdbookMainVO1()
                            .getCurrentRow()
                            .setAttribute("dummyStateDesc", state_desc);

                    }
                }

System.out.println("pre Booking num---6");
                if (null != rs1.getAttribute("BilltoTehsil")) {
                    Object tehsil = rs1.getAttribute("BilltoTehsil");
                    String query9 = null;
                    ResultSet rs9;
                    String tehsil_desc = null;
                    query9 =
                        "  select th.tehsil_desc from gm_tehsil th where th.tehsil_cd = '" + tehsil +
                        "' and th.principal_map_cd = '" + principalMapCd + "'";

                    rs9 = getDBTransaction().createStatement(0).executeQuery(query9);
                    if (rs9.next()) {
                        tehsil_desc = rs9.getString(1);
                        this.getShOrdbookMainVO1()
                            .getCurrentRow()
                            .setAttribute("TehsilCd", tehsil);
                        this.getShOrdbookMainVO1()
                            .getCurrentRow()
                            .setAttribute("dummyTehsilDesc", tehsil_desc);

                    }

                }
                if (null != rs1.getAttribute("BilltoVillage")) {
                    Object village = rs1.getAttribute("BilltoVillage");
                    String query10 = null;
                    ResultSet rs10;
                    String village_desc = null;
                    query10 =
                        "   select vl.village_name from gm_village vl where vl.village_Cd ='" + village +
                        "' and vl.principal_map_cd = '" + principalMapCd + "'";

                    rs10 = getDBTransaction().createStatement(0).executeQuery(query10);
                    if (rs10.next()) {
                        village_desc = rs10.getString(1);
						if(null == village){
							village = "NA";
							village_desc = "Not Applicable";
						}
						
                        this.getShOrdbookMainVO1()
                            .getCurrentRow()
                            .setAttribute("VillageCd", village);
                        this.getShOrdbookMainVO1()
                            .getCurrentRow()
                            .setAttribute("dummyVillageDesc", village_desc);
                    }
                }

                if (null != rs1.getAttribute("ShiptoPincode")) {
                    this.getShOrdbookMainVO1()
                        .getCurrentRow()
                        .setAttribute("ShipPin", rs1.getAttribute("ShiptoPincode"));
                }
                if (null != rs1.getAttribute("ShiptoPan")) {
                    this.getShOrdbookMainVO1()
                        .getCurrentRow()
                        .setAttribute("ShipPan", rs1.getAttribute("ShiptoPan"));
                }
                if (null != rs1.getAttribute("ShiptoGstNum")) {
                    this.getShOrdbookMainVO1()
                        .getCurrentRow()
                        .setAttribute("ShipGstNum", rs1.getAttribute("ShiptoGstNum"));
                }
				if (null != rs1.getAttribute("ShiptoCity")) {
                    this.getShOrdbookMainVO1()
                        .getCurrentRow()
                        .setAttribute("ShipCityCd", rs1.getAttribute("ShiptoCity"));
                }
				if (null != rs1.getAttribute("ShiptoCity")) {
                    this.getShOrdbookMainVO1()
                        .getCurrentRow()
                        .setAttribute("dummyShipCitydesc", rs1.getAttribute("ShiptoCity"));
                }
				if (null != rs1.getAttribute("ShiptoState")) {
                    this.getShOrdbookMainVO1()
                        .getCurrentRow()
                        .setAttribute("ShipState", rs1.getAttribute("ShiptoState"));
                }
				if (null != rs1.getAttribute("ShiptoState")) {
                    this.getShOrdbookMainVO1()
                        .getCurrentRow()
                        .setAttribute("dummyshipStateDesc", rs1.getAttribute("ShiptoState"));
                }
				if (null != rs1.getAttribute("ShiptoDistrict")) {
                    this.getShOrdbookMainVO1()
                        .getCurrentRow()
                        .setAttribute("ShipDistrict", rs1.getAttribute("ShiptoDistrict"));
                }
				

                if (null == rs1.getAttribute("Exchange")) {
                    this.getShOrdbookMainVO1()
                        .getCurrentRow()
                        .setAttribute("ExchangeFlag", "N");
                } else {
					if(null == EnqUsed){
                    this.getShOrdbookMainVO1()
                        .getCurrentRow()
					.setAttribute("ExchangeFlag", rs1.getAttribute("Exchange"));}
                }

                if (null == rs1.getAttribute("EwYn")) {
                    this.getShOrdbookMainVO1()
                        .getCurrentRow()
                        .setAttribute("EwYn", "N");
                } else {
                    this.getShOrdbookMainVO1()
                        .getCurrentRow()
                        .setAttribute("EwYn", rs1.getAttribute("EwYn"));
                }

                if (null != rs1.getAttribute("EwType")) {
                    this.getShOrdbookMainVO1()
                        .getCurrentRow()
                        .setAttribute("EwType", rs1.getAttribute("EwType"));
                }

                if (null == rs1.getAttribute("LoyaltyCardYn")) {
                    this.getShOrdbookMainVO1()
                        .getCurrentRow()
                        .setAttribute("IntAutocard", "N");
                } else {
                    this.getShOrdbookMainVO1()
                        .getCurrentRow()
                        .setAttribute("IntAutocard", rs1.getAttribute("LoyaltyCardYn"));
                }

                if (null != rs1.getAttribute("LoyaltyCardType")) {
                    String query3 = null;
                    ResultSet rs3;
                    String list_code = null;
                    query3 =
                        "       SELECT LIST_CODE " + "                 FROM AM_LIST_RANGE  " +
                        "                WHERE LIST_NAME = 'CARD_TYPE'  " + "                  AND LIST_CODE='" +
                        rs1.getAttribute("LoyaltyCardType") + "' " + "          AND PRINCIPAL_MAP_CD = '" +
                        principalMapCd + "'";

                    rs3 = getDBTransaction().createStatement(0).executeQuery(query3);
                    while (rs3.next()) {
                        list_code = rs3.getString(1);

                    }
                    this.getShOrdbookMainVO1()
                        .getCurrentRow()
                        .setAttribute("CardType", list_code);

                }

                if (rs1.getAttribute("FinanceMode").equals("CASH")) {
                    this.getShOrdbookMainVO1()
                        .getCurrentRow()
                        .setAttribute("FinCash", "C");

                } else if (rs1.getAttribute("FinanceMode").equals("FINANCE")) {
                    this.getShOrdbookMainVO1()
                        .getCurrentRow()
                        .setAttribute("FinCash", "F");
                } else {

                    this.getShOrdbookMainVO1()
                        .getCurrentRow()
                        .setAttribute("FinCash", rs1.getAttribute("FinanceMode"));
                }


                if (null != rs1.getAttribute("Financer")) {
                    this.getShOrdbookMainVO1()
                        .getCurrentRow()
                        .setAttribute("FiCd", rs1.getAttribute("Financer"));
                }

                if (null != rs1.getAttribute("FinanceAmount")) {
                    this.getShOrdbookMainVO1()
                        .getCurrentRow()
                        .setAttribute("FinAmt", rs1.getAttribute("FinanceAmount"));
                }

                if (null != rs1.getAttribute("Emi")) {
                    this.getShOrdbookMainVO1()
                        .getCurrentRow()
                        .setAttribute("EmiAmt", rs1.getAttribute("Emi"));
                }
                if (null != rs1.getAttribute("Tenure")) {
                    this.getShOrdbookMainVO1()
                        .getCurrentRow()
                        .setAttribute("Tenure", rs1.getAttribute("Tenure"));
                }

                if (null == rs1.getAttribute("McpYn")) {
                    this.getShOrdbookMainVO1()
                        .getCurrentRow()
                        .setAttribute("McpYn", "N");
                } else {
                    this.getShOrdbookMainVO1()
                        .getCurrentRow()
                        .setAttribute("McpYn", rs1.getAttribute("McpYn"));
                }

                if (null != rs1.getAttribute("Package1")) {
                    this.getShOrdbookMainVO1()
                        .getCurrentRow()
                        .setAttribute("Package1", rs1.getAttribute("Package1"));
                }


                if (null != rs1.getAttribute("Validity")) {
                    this.getShOrdbookMainVO1()
                        .getCurrentRow()
                        .setAttribute("Validity", rs1.getAttribute("Validity"));
                }


                if (null != rs1.getAttribute("McpAmount")) {
                    this.getShOrdbookMainVO1()
                        .getCurrentRow()
                        .setAttribute("McpAmount", rs1.getAttribute("McpAmount"));
                }


                if (null != rs1.getAttribute("BookingAmount")) {
                    this.getShOrdbookMainVO1()
                        .getCurrentRow()
                        .setAttribute("BookingAmt", rs1.getAttribute("BookingAmount"));
                }


                if (null != rs1.getAttribute("OfferedPrice") && null == EnqUsed) {
                    this.getShOrdbookMainVO1()
                        .getCurrentRow()
                        .setAttribute("OfferPrice", rs1.getAttribute("OfferedPrice"));
                }


                if (null != rs1.getAttribute("PremiumAmount")) {
                    this.getShOrdbookMainVO1()
                        .getCurrentRow()
                        .setAttribute("MiBookedAmt", rs1.getAttribute("PremiumAmount"));
                }


                if (null != rs1.getAttribute("TentativeDeliveryDate")) {
                    this.getShOrdbookMainVO1()
                        .getCurrentRow()
                        .setAttribute("PromDod", rs1.getAttribute("TentativeDeliveryDate"));
                }

                if (null != rs1.getAttribute("PrefferedDeliveryDate")) {
                    this.getShOrdbookMainVO1()
                        .getCurrentRow()
                        .setAttribute("PrefDod", rs1.getAttribute("PrefferedDeliveryDate"));
                }

                if (null != rs1.getAttribute("NetPremiumAmount")) {
                    this.getShOrdbookMainVO1()
                        .getCurrentRow()
                        .setAttribute("NetPremAmt", rs1.getAttribute("NetPremiumAmount"));
                }

                if (null != rs1.getAttribute("RateOfInterest")) {
                    this.getShOrdbookMainVO1()
                        .getCurrentRow()
                        .setAttribute("RateOfInterest", rs1.getAttribute("RateOfInterest"));
                }
                if (null != rs1.getAttribute("OldvehicleRegNum") && null == EnqUsed) {
                    this.getShOrdbookMainVO1()
                        .getCurrentRow()
                        .setAttribute("DummyExchRegNo", rs1.getAttribute("OldvehicleRegNum"));
                }
				
				
                String model_desc = null, varient_desc = null, color_desc = null;
                Object modelCd = rs1.getAttribute("CarModel");
                Object varientCd = rs1.getAttribute("CarVariant");
                Object colorCd = rs1.getAttribute("CarColor");
                String query17 = null;
                ResultSet rs17;

                query17 =
                    "       select (select model_desc from gm_mod where principal_map_cd =1 and model_cd ='" + modelCd +
                    "') AS model_desc," +
                    " (select variant_desc from gm_var where principal_map_cd = 1 and variant_cd = '" + varientCd +
                    "' ) AS varient_desc," +
                    " ( select  ecolor_desc from gm_eclr where principal_map_cd   = 1 and   ecolor_cd = '" + colorCd +
                    "' ) AS color_desc from dual   ";

                rs17 = getDBTransaction().createStatement(0).executeQuery(query17);
                if (rs17.next()) {
                    model_desc = rs17.getString("model_desc");
                    varient_desc = rs17.getString("varient_desc");
                    color_desc = rs17.getString("color_desc");

                }
     if(null == EnqUsed){
                String modeldesc1 = model_desc + "-" + modelCd;
                String variantdesc1 = varient_desc + "-" + varientCd;
                String colordesc1 = color_desc + "-" + colorCd;
                ViewObjectImpl ordEnquiryVO = this.getOrderBookingEnquiryRO1();
                Row createSdGrn = ordEnquiryVO.createRow();
                createSdGrn.setAttribute("ModelDesc", modeldesc1);
                            createSdGrn.setAttribute("VarientDesc", variantdesc1);
                            createSdGrn.setAttribute("ColorDesc", colordesc1);
							createSdGrn.setAttribute("EnqVarSrl", 1);
							
                            createSdGrn.setAttribute("ParentGroup", parentGrp);
							createSdGrn.setAttribute("DealerMapCd", dealerMapCd);
							createSdGrn.setAttribute("LocCd", locCd);
							createSdGrn.setAttribute("CompFa", compCode);
							createSdGrn.setAttribute("EnqNum", (String)r.getAttribute("EnqNum"));
							createSdGrn.setAttribute("EnqVarCode", varientCd);
							createSdGrn.setAttribute("EnqEcolorCode", colorCd);
							createSdGrn.setAttribute("ModelCd", modelCd);


                ordEnquiryVO.insertRow(createSdGrn);
	 }
/*
                this.getShOrdbookMainVO1()
                    .getCurrentRow()
                    .setAttribute("DummyModelCd", model_desc);
                this.getShOrdbookMainVO1()
                    .getCurrentRow()
                    .setAttribute("DummyVariantDesc", varient_desc);
                this.getShOrdbookMainVO1()
                    .getCurrentRow()
                    .setAttribute("VariantCd", varientCd);
                this.getShOrdbookMainVO1()
                    .getCurrentRow()
                    .setAttribute("FirstEcolorCd", colorCd);
                this.getShOrdbookMainVO1()
                    .getCurrentRow()
                    .setAttribute("DummyColorDesc1", color_desc);*/
                String msPin = String.valueOf(rs1.getAttribute("Mspin"));
                //gstApplyMethod(String.valueOf(rs1.getAttribute("CustCd")));

                String query99 = null;
                ResultSet rs99;
                String emp_Cd = null, emp_name_temp = null;
                query99 =
                    " SELECT emp_cd FROM gm_emp WHERE mspin='" + msPin +
                    "' and nvl(emp_leaving_date,trunc(sysdate)) >= trunc(sysdate)";

                rs99 = getDBTransaction().createStatement(0).executeQuery(query99);
                if (rs99.next()) {
                    emp_Cd = rs99.getString("emp_cd");


                    String query98 = null;
                    ResultSet rs98;

                    query98 =
                        "Select emp_name  from gm_emp where dealer_map_cd   = '" + dealerMapCd +
                        "' and emp_cd      = '" + emp_Cd + "' and emp_categ = 'S'";
                    rs98 = getDBTransaction().createStatement(0).executeQuery(query98);
                    if (rs98.next()) {
                        emp_name_temp = rs98.getString("emp_name");

                    }

                    this.getShOrdbookMainVO1()
                        .getCurrentRow()
                        .setAttribute("SalesManCd", emp_Cd);
                    this.getShOrdbookMainVO1()
                        .getCurrentRow()
                        .setAttribute("DummySalesCdTemp", emp_name_temp);
                }
				/*
                BigDecimal sellingPrice = BigDecimal.ZERO;
                BigDecimal accessoryPrice = BigDecimal.ZERO;
                BigDecimal ndPrice = BigDecimal.ZERO;
                BigDecimal b2 = BigDecimal.ZERO;
                String query19 = null;
                ResultSet rs19;
                String mulForCd;
                query19 =
                    "  select for_cd" + "     from am_dealer_loc" + "    where PARENT_GROUP = '" + parentGrp + "'" +
                    "     and DEALER_MAP_CD = '" + dealerMapCd + "'" + "     and LOC_CD = '" + locCd + "'";

                rs19 = getDBTransaction().createStatement(0).executeQuery(query19);
                if (rs19.next()) {
                    mulForCd = rs19.getString(1);
                    //               SimpleDateFormat formatter = new SimpleDateFormat("yyyy-MM-dd");
                    //
                    //                                   String formatOrderDt = formatter.format(row1.getAttribute("OrderDate"));
                    //           System.out.println("date from order---"+formatOrderDt);
                    //
                    java.sql.Timestamp datetime = new java.sql.Timestamp(System.currentTimeMillis());
                    System.out.println(datetime.toString().substring(0, 10) + "datetime--");
                    String dt = datetime.toString().substring(0, 10);

                    String query20 = null;
                    ResultSet rs20;

                    query20 =
                        " SELECT NVL(SELL_PRICE_L, 0) selling_price, NVL(ACCESSORY_PRICE, 0) accessory_price, NVL(ND_PRICE, 0) nd_price" +
                        "   FROM SM_SPRICE_for" + "  WHERE MUL_FOR_CD = '" + mulForCd + "'" + "    AND VARIANT_CD = '" +
                        varientCd + "'  " + "  AND (NVL(to_date('" + dt +
                        "','YYYY-MM-DD'), SYSDATE) >= FROM_DATE AND  " + "        NVL(to_date('" + dt +
                        "','YYYY-MM-DD'), SYSDATE) <= NVL(TO_DATE, SYSDATE))  " + "   AND SALES_TYPE = decode('" +
                        String.valueOf(rs1.getAttribute("SaleType")) +
                        "','HCI','IND','HNC','IND','LEA','IND','N2N','IND','" +
                        String.valueOf(rs1.getAttribute("SaleType")) + "')  " + "   AND PRINCIPAL_MAP_CD = '1'     " +
                        "  AND COLOR_IND =  " + "     DECODE('" + colorCd + "',  " + "            'M',  " +
                        "           'M',  " + "          'NM',  " + "          'NM',  " +
                        "         (SELECT CTYPE_CD  " + "            FROM GM_ECLR  " + "          WHERE ECOLOR_CD = '" +
                        colorCd + "'  " + "           AND PRINCIPAL_MAP_CD = '1'))";
                    System.out.println("query20===" + query20);

                    rs20 = getDBTransaction().createStatement(0).executeQuery(query20);
                    if (rs20.next()) {
                        sellingPrice = rs20.getBigDecimal("selling_price");
                        accessoryPrice = rs20.getBigDecimal("accessory_price");
                        ndPrice = rs20.getBigDecimal("nd_price");

                    } else {

                    }
                    MathContext m = new MathContext(4); // 4 precision

                    // b1 is rounded using m
                    b2 = sellingPrice.round(m);
                    this.getShOrdbookMainVO1()
                        .getCurrentRow()
                        .setAttribute("DummySellingPrice", b2);
                    // this.getShOrdbookMainVO1().getCurrentRow().setAttribute("BookingAmt",accessoryPrice);
                    // this.getShOrdbookMainVO1().getCurrentRow().setAttribute("BookingAmt",ndPrice);


                } else {

                    this.getShOrdbookMainVO1()
                        .getCurrentRow()
                        .setAttribute("DummySellingPrice", b2);
                }
                BigDecimal recAmt = BigDecimal.ZERO;

                String query20 = null;
                ResultSet rs20;
                String party_cd = null;
                query20 =
                    "SELECT  sum(t.receipt_amt) receiptAmt FROM  sh_receipts t WHERE  cust_cd = '" +
                    String.valueOf(rs1.getAttribute("CustCd")) + "' AND parent_group = '" + parentGrp +
                    "' AND dealer_map_cd = '" + dealerMapCd + "' AND loc_cd = '" + locCd +
                    "' AND nvl(rec_status, 'X') <> 'C' ";
                rs20 = getDBTransaction().createStatement(0).executeQuery(query20);
                if (rs20.next()) {
                    recAmt = rs20.getBigDecimal("receiptAmt");
                    this.getShOrdbookMainVO1()
                        .getCurrentRow()
                        .setAttribute("RecdAmt", recAmt);


                } else {

                    this.getShOrdbookMainVO1()
                        .getCurrentRow()
                        .setAttribute("RecdAmt", recAmt);
                }

                BigDecimal balAmount = b2.subtract(recAmt);
                this.getShOrdbookMainVO1()
                    .getCurrentRow()
                    .setAttribute("DummyBalanceAmt", balAmount);

                this.getShOrdbookMainVO1()
                    .getCurrentRow()
                    .setAttribute("DummyChargeAmt", BigDecimal.ZERO);
*/
                System.out.println("i n ENDDDD");
            }
        } catch (Exception ex) {
            ex.printStackTrace();
        }
    }


    /**
     * Container's getter for PreBookingRO1.
     * @return PreBookingRO1
     */
    public ViewObjectImpl getPreBookingRO1() {
        return (ViewObjectImpl) findViewObject("PreBookingRO1");
    }

    /**
     * Container's getter for ShOrdCommitmentVO1.
     * @return ShOrdCommitmentVO1
     */
    public ViewObjectImpl getShOrdCommitmentVO1() {
        return (ViewObjectImpl) findViewObject("ShOrdCommitmentVO1");
    }

    /**
     * Container's getter for OrderBookFetchDetailRO1.
     * @return OrderBookFetchDetailRO1
     */
    public ViewObjectImpl getOrderBookFetchDetailRO1() {
        return (ViewObjectImpl) findViewObject("OrderBookFetchDetailRO1");
    }

    public void fetchOrderBookDataDisplay(String orderNum) {
        try {
            System.out.println("Booking num---" + orderNum);
            Map session = ADFContext.getCurrent().getSessionScope();
            Integer principalMapCd = Integer.parseInt(session.get("principalMapCd").toString());
            Integer dealerMapCd = Integer.parseInt(session.get("dealerMapCd").toString());
            String locCd = String.valueOf(session.get("locCd"));
            String compCode = String.valueOf(session.get("compCode"));
            String parentGrp = String.valueOf(session.get("parentGroupCd"));

            ViewObjectImpl voiAdv = this.getOrderBookFetchDetailRO1();

            ViewCriteriaManager vcm = voiAdv.getViewCriteriaManager();
            ViewCriteria vc = vcm.getViewCriteria("OrderBookFetchDetailROCriteria");
            VariableValueManager vvm = vc.ensureVariableManager();
            vvm.setVariableValue("bDealerMapCd", dealerMapCd);
            vvm.setVariableValue("pCompFa", compCode);
            vvm.setVariableValue("pLocCd", locCd);
            vvm.setVariableValue("pOrderNum", orderNum);
            voiAdv.applyViewCriteria(vc);
            voiAdv.executeQuery();
            BigDecimal b2 = BigDecimal.ZERO;
            System.out.println(voiAdv.getRowCount() + "queryyy---" + voiAdv.getQuery());
            BigDecimal receiveAmt = BigDecimal.ZERO;
            if (voiAdv.getRowCount() > 0) {
                System.out.println("in iffff");
                Row rs1 = voiAdv.first();
                String statusOrder = rs1.getAttribute("OrderStatus").toString();

                if (rs1.getAttribute("OrderStatus")
                       .toString()
                       .equals("B")) {

                    this.getShOrdbookMainVO1()
                        .getCurrentRow()
                        .setAttribute("DummyStatusDesc", "Booked");
                } else if (rs1.getAttribute("OrderStatus")
                              .toString()
                              .equals("C")) {
                    this.getShOrdbookMainVO1()
                        .getCurrentRow()
                        .setAttribute("DummyStatusDesc", "Cancelled");

                } else if (rs1.getAttribute("OrderStatus")
                              .toString()
                              .equals("A")) {
                    this.getShOrdbookMainVO1()
                        .getCurrentRow()
                        .setAttribute("DummyStatusDesc", "Alloted");

                } else if (rs1.getAttribute("OrderStatus")
                              .toString()
                              .equals("I")) {
                    this.getShOrdbookMainVO1()
                        .getCurrentRow()
                        .setAttribute("DummyStatusDesc", "Invoiced");


                } else if (rs1.getAttribute("OrderStatus")
                              .toString()
                              .equals("L")) {
                    this.getShOrdbookMainVO1()
                        .getCurrentRow()
                        .setAttribute("DummyStatusDesc", "Closed");

                }
                receiveAmt = new BigDecimal(rs1.getAttribute("RecdAmt").toString());
                if (null != rs1.getAttribute("BookingAmt")) {
                    this.getShOrdbookMainVO1()
                        .getCurrentRow()
                        .setAttribute("BookingAmt", rs1.getAttribute("BookingAmt"));
                }
                String custCd = rs1.getAttribute("CustCd").toString();

                this.getShOrdbookMainVO1()
                    .getCurrentRow()
                    .setAttribute("EnqNum", String.valueOf(rs1.getAttribute("EnqNum")));
                this.getShOrdbookMainVO1()
                    .getCurrentRow()
                    .setAttribute("SalesType", String.valueOf(rs1.getAttribute("SalesType")));
                this.getShOrdbookMainVO1()
                    .getCurrentRow()
                    .setAttribute("Corporate", String.valueOf(rs1.getAttribute("Corporate")));

                String query = null;
                ResultSet rs;
                Object queryResult = null;

                query =
                    "SELECT CP_NAME FROM MUL_CORPORATE WHERE CP_NUMBER='" +
                    String.valueOf(rs1.getAttribute("Corporate")) + "' AND PRINCIPAL_MAP_CD = '" + principalMapCd + "'";

                rs = getDBTransaction().createStatement(0).executeQuery(query);
                if (rs.next()) {
                    queryResult = rs.getString(1);

                    this.getShOrdbookMainVO1()
                        .getCurrentRow()
                        .setAttribute("dummyCorpName", String.valueOf(queryResult));

                }


                this.getShOrdbookMainVO1()
                    .getCurrentRow()
                    .setAttribute("FinCash", String.valueOf(rs1.getAttribute("FinCash")));
                if (null != rs1.getAttribute("PromDod")) {
                    this.getShOrdbookMainVO1()
                        .getCurrentRow()
                        .setAttribute("PromDod", rs1.getAttribute("PromDod"));
                }


                String modelCd = null, varientCd = null, colorCd = null, enqvarSrl = null;
                String query16 = null;
                ResultSet rs16;

                if (statusOrder.equals("C")) {

                    query16 =
                        " select PARENT_GROUP,  " + "      DEALER_MAP_CD,  " + "     LOC_CD,  " + "     COMP_FA,  " +
                        "     ENQ_NUM,  " + "    ENQ_VAR_SRL,  " + "    ENQ_VARIANTCD,  " + "    ENQ_ECOLORCD,  " +
                        "    CREATED_DATE,  " + "   ASSG_EMP_CD,  " + "   ENQ_STATUS,  " + "   CREATED_BY,  " +
                        "    MODIFIED_DATE,  " + "    MODIFIED_BY,  " + "    MODEL_CD  " + "   from rd_enq  " +
                        "  where ENQ_NUM = '" + String.valueOf(rs1.getAttribute("EnqNum")) + "'  " +
                        "   AND DEALER_MAP_CD = '" + Integer.parseInt(dealerMapCd.toString()) + "'  " +
                        "  AND LOC_CD = '" + String.valueOf(locCd) + "'  " + "  AND COMP_FA = '" +
                        String.valueOf(compCode) + "'  " + "  AND PARENT_GROUP = '" + String.valueOf(parentGrp) +
                        "'  " + "  AND ENQ_VAR_SRL =  " + "    (SELECT ENQ_VAR_SRL  " + "      FROM RD_ENQFOLLOW  " +
                        "    WHERE REMARKS LIKE  " + "         '%' || '" +
                        String.valueOf(rs1.getAttribute("dummyOrderNo")) + "' || '%Cancelled%'  " +
                        "     AND ENQ_NUM = '" + String.valueOf(rs1.getAttribute("EnqNum")) + "'  " +
                        "    AND ENQ_FOLLOWSTATUS <> 'O'  " + "    AND DEALER_MAP_CD = '" +
                        Integer.parseInt(dealerMapCd.toString()) + "'  " + "    AND LOC_CD = '" +
                        String.valueOf(locCd) + "'  " + "  AND COMP_FA = '" + String.valueOf(compCode) + "'  " +
                        "  AND PARENT_GROUP = '" + String.valueOf(parentGrp) + "')  " + "   order by enq_var_srl  ";


                } else {


                    query16 =
                        "       select PARENT_GROUP," + " DEALER_MAP_CD," + "  LOC_CD," + "    COMP_FA," +
                        "   ENQ_NUM," + "   ENQ_VAR_SRL," + "   ENQ_VARIANTCD," + "   ENQ_ECOLORCD," +
                        "  CREATED_DATE," + "  ASSG_EMP_CD," + "  ENQ_STATUS," + "  CREATED_BY," + "  MODIFIED_DATE," +
                        "  MODIFIED_BY," + "  MODEL_CD" + "  from rd_enq" + " where ENQ_NUM = '" +
                        String.valueOf(rs1.getAttribute("EnqNum")) + "'" +
                        "   AND NVL(ENQ_STATUS, 'AA') IN ('O', 'C', 'AA')" + "  AND DEALER_MAP_CD = '" +
                        Integer.parseInt(dealerMapCd.toString()) + "'" + "  AND LOC_CD = '" + String.valueOf(locCd) +
                        "'" + "  AND COMP_FA = '" + String.valueOf(compCode) + "'" + "  AND PARENT_GROUP = '" +
                        String.valueOf(parentGrp) + "'" +

                        "  AND ENQ_VAR_SRL IN" + "     (SELECT ENQ_VAR_SRL" + "       FROM RD_ENQFOLLOW" +
                        //  "       REMARKS LIKE '%' || '"+orderNo+"' || '%'"+
                        "      WHERE  ENQ_NUM = '" + String.valueOf(rs1.getAttribute("EnqNum")) + "'" +
                        "      AND DEALER_MAP_CD = '" + Integer.parseInt(dealerMapCd.toString()) + "'" +
                        "      AND LOC_CD = '" + String.valueOf(locCd) + "'" + "      AND COMP_FA =  '" +
                        String.valueOf(compCode) + "'" + "     AND PARENT_GROUP = '" + String.valueOf(parentGrp) + "')";
                }
                // "  order by enq_var_srl)";
                System.out.println("queryyyy---" + query16);
                rs16 = getDBTransaction().createStatement(0).executeQuery(query16);
                int k = 1;
                ViewObjectImpl ob1 = this.getOrderBookingEnquiryRO1();
                ob1.executeEmptyRowSet();
                while (rs16.next()) {
                    modelCd = rs16.getString("MODEL_CD");
                    varientCd = rs16.getString("ENQ_VARIANTCD");
                    colorCd = rs16.getString("ENQ_ECOLORCD");

                    enqvarSrl = rs16.getString("ENQ_VAR_SRL");
                }


                String model_desc = null, varient_desc = null, color_desc = null;
                //              Object modelCd=rs1.getAttribute("DummyModelCd");
                //              Object varientCd=rs1.getAttribute("VariantCd");
                //              Object colorCd=rs1.getAttribute("FirstEcolorCd");
                String query17 = null;
                ResultSet rs17;

                query17 =
                    "       select (select model_desc from gm_mod where principal_map_cd =1 and model_cd ='" + modelCd +
                    "') AS model_desc," +
                    " (select variant_desc from gm_var where principal_map_cd = 1 and variant_cd = '" + varientCd +
                    "' ) AS varient_desc," +
                    " ( select  ecolor_desc from gm_eclr where principal_map_cd   = 1 and   ecolor_cd = '" + colorCd +
                    "' ) AS color_desc from dual   ";

                rs17 = getDBTransaction().createStatement(0).executeQuery(query17);
                if (rs17.next()) {
                    model_desc = rs17.getString("model_desc");
                    varient_desc = rs17.getString("varient_desc");
                    color_desc = rs17.getString("color_desc");

                }

                String modeldesc1 = model_desc + "-" + modelCd;
                String variantdesc1 = varient_desc + "-" + varientCd;
                String colordesc1 = color_desc + "-" + colorCd;
                ViewObjectImpl ordEnquiryVO = this.getOrderBookingEnquiryRO1();
                Row createSdGrn = ordEnquiryVO.createRow();
                createSdGrn.setAttribute("ModelDesc", modeldesc1);
                createSdGrn.setAttribute("VarientDesc", variantdesc1);
                createSdGrn.setAttribute("ColorDesc", colordesc1);

                createSdGrn.setAttribute("CheckBoolean", "Y");


                ordEnquiryVO.insertRow(createSdGrn);

                this.getShOrdbookMainVO1()
                    .getCurrentRow()
                    .setAttribute("DummyModelCd", model_desc);
                this.getShOrdbookMainVO1()
                    .getCurrentRow()
                    .setAttribute("DummyVariantDesc", varient_desc);
                this.getShOrdbookMainVO1()
                    .getCurrentRow()
                    .setAttribute("VariantCd", varientCd);
                this.getShOrdbookMainVO1()
                    .getCurrentRow()
                    .setAttribute("FirstEcolorCd", colorCd);
                this.getShOrdbookMainVO1()
                    .getCurrentRow()
                    .setAttribute("DummyColorDesc1", color_desc);
                this.getShOrdbookMainVO1()
                    .getCurrentRow()
                    .setAttribute("DummyEnqVarSrl", enqvarSrl);
                String orderdate = this.getShOrdbookMainVO1()
                                       .getCurrentRow()
                                       .getAttribute("OrderDate")
                                       .toString();
                String saletype = this.getShOrdbookMainVO1()
                                      .getCurrentRow()
                                      .getAttribute("SalesType")
                                      .toString();
                BigDecimal sellingPrice = BigDecimal.ZERO;
                gstApplyMethod(custCd);
                String query19 = null;
                ResultSet rs19;
                String mulForCd;
                query19 =
                    "  select for_cd" + "     from am_dealer_loc" + "    where PARENT_GROUP = '" + parentGrp + "'" +
                    "     and DEALER_MAP_CD = '" + dealerMapCd + "'" + "     and LOC_CD = '" + locCd + "'";

                rs19 = getDBTransaction().createStatement(0).executeQuery(query19);
                if (rs19.next()) {
                    mulForCd = rs19.getString(1);

                    SimpleDateFormat formatter = new SimpleDateFormat("yyyy-MM-dd");

                    String formatOrderDt = formatter.format(rs1.getAttribute("OrderDate"));
                    System.out.println("date from order---" + formatOrderDt);

                    String query20 = null;
                    ResultSet rs20;

                    query20 =
                        " SELECT NVL(SELL_PRICE_L, 0) selling_price, NVL(ACCESSORY_PRICE, 0) accessory_price, NVL(ND_PRICE, 0) nd_price" +
                        "   FROM SM_SPRICE_for" + "  WHERE MUL_FOR_CD = '" + mulForCd + "'" + "    AND VARIANT_CD = '" +
                        varientCd + "'  " + "  AND (NVL(to_date('" + formatOrderDt +
                        "','YYYY-MM-DD'), SYSDATE) >= FROM_DATE AND  " + "        NVL(to_date('" + formatOrderDt +
                        "','YYYY-MM-DD'), SYSDATE) <= NVL(TO_DATE, SYSDATE))  " + "   AND SALES_TYPE = decode('" +
                        saletype + "','HCI','IND','HNC','IND','LEA','IND','N2N','IND','" + saletype + "')  " +
                        "   AND PRINCIPAL_MAP_CD = '1'     " + "  AND COLOR_IND =  " + "     DECODE('" + colorCd +
                        "',  " + "            'M',  " + "           'M',  " + "          'NM',  " +
                        "          'NM',  " + "         (SELECT CTYPE_CD  " + "            FROM GM_ECLR  " +
                        "          WHERE ECOLOR_CD = '" + colorCd + "'  " + "           AND PRINCIPAL_MAP_CD = '1'))";

                    rs20 = getDBTransaction().createStatement(0).executeQuery(query20);
                    if (rs20.next()) {
                        sellingPrice = rs20.getBigDecimal("selling_price");
                        //              accessoryPrice = rs20.getBigDecimal("accessory_price");
                        //              ndPrice = rs20.getBigDecimal("nd_price");

                    } else {

                    }
                    MathContext m = new MathContext(4); // 4 precision

                    // b1 is rounded using m
                    b2 = sellingPrice.round(m);
                    this.getShOrdbookMainVO1()
                        .getCurrentRow()
                        .setAttribute("DummySellingPrice", b2);
                    // this.getShOrdbookMainVO1().getCurrentRow().setAttribute("BookingAmt",accessoryPrice);
                    // this.getShOrdbookMainVO1().getCurrentRow().setAttribute("BookingAmt",ndPrice);


                } else {

                    this.getShOrdbookMainVO1()
                        .getCurrentRow()
                        .setAttribute("DummySellingPrice", b2);
                }

                String query66 = null;
                ResultSet rs66;
                BigDecimal chargetot = BigDecimal.ZERO;
                query66 =
                    "select nvl(sum(t.charge_amt),0) chargeTot from sh_ord_charges t where t.dealer_map_cd='" + dealerMapCd +
                    "' and t.loc_cd='" + locCd + "' and t.ord_num='" + orderNum + "'";
                rs66 = getDBTransaction().createStatement(0).executeQuery(query66);
                if (rs66.next()) {
                    chargetot = rs66.getBigDecimal("chargeTot");
                    this.getShOrdbookMainVO1()
                        .getCurrentRow()
                        .setAttribute("DummyChargeAmt", chargetot);


                }else{
                        this.getShOrdbookMainVO1()
                            .getCurrentRow()
                            .setAttribute("DummyChargeAmt", BigDecimal.ZERO);
                    }
System.out.println(chargetot+"b2--"+b2+"=="+receiveAmt);

                BigDecimal mainAmt = b2.subtract(receiveAmt);
                System.out.println("main amt--"+mainAmt);
                BigDecimal mainTotCharges = mainAmt.add(chargetot);
                System.out.println("vcharess---"+mainTotCharges);
                this.getShOrdbookMainVO1()
                    .getCurrentRow()
                    .setAttribute("DummyBalanceAmt", mainTotCharges);
                //receiveAmt                        String userId= String.valueOf(session.get("userId"));

                String userId = String.valueOf(session.get("userId")).toLowerCase();
                String query99 = null;
                ResultSet rs99;
                String emp_Cd = null, emp_name_temp = null;
                query99 =
                    " SELECT AM.EMP_CD FROM AM_USERS AM,GM_EMP GM WHERE USER_ID = '" + userId +
                    "'  AND AM.EMP_CD = GM.EMP_CD AND GM.EMP_CATEG = 'S' AND GM.DEALER_MAP_CD = '" + dealerMapCd + "'";

                rs99 = getDBTransaction().createStatement(0).executeQuery(query99);
                if (rs99.next()) {
                    emp_Cd = rs99.getString("EMP_CD");


                    String query98 = null;
                    ResultSet rs98;

                    query98 =
                        "Select emp_name  from gm_emp where dealer_map_cd   = '" + dealerMapCd +
                        "' and emp_cd      = '" + emp_Cd + "' and emp_categ = 'S'";
                    rs98 = getDBTransaction().createStatement(0).executeQuery(query98);
                    if (rs98.next()) {
                        emp_name_temp = rs98.getString("emp_name");

                    }

                    this.getShOrdbookMainVO1()
                        .getCurrentRow()
                        .setAttribute("SalesManCd", emp_Cd);
                    this.getShOrdbookMainVO1()
                        .getCurrentRow()
                        .setAttribute("DummySalesCdTemp", emp_name_temp);

                    String query30 = null;
                    ResultSet rs30;
                    String channel = null;
                    query30 =
                        "  SELECT CHANNEL " + "  FROM am_dealer_loc " + " WHERE DEALER_MAP_CD = '" + dealerMapCd +
                        "' " + "  AND PARENT_GROUP ='" + parentGrp + "' " + "  AND LOC_CD ='" + locCd + "'";

                    rs30 = getDBTransaction().createStatement(0).executeQuery(query30);
                    if (rs30.next()) {
                        channel = rs30.getString(1);
                    }
                    this.getShOrdbookMainVO1()
                        .getCurrentRow()
                        .setAttribute("dummyDealerChannel", channel);


                }
                System.out.println("EWYn---" + rs1.getAttribute("EwYn"));
                if (null != rs1.getAttribute("EwYn")) {

                    if (rs1.getAttribute("EwYn")
                           .toString()
                           .equals("Y")) {
                        System.out.println("EWYn  Y---" + rs1.getAttribute("EwYn"));
                        this.getShOrdbookMainVO1()
                            .getCurrentRow()
                            .setAttribute("EwYn", "Y");
                        this.getShOrdbookMainVO1()
                            .getCurrentRow()
                            .setAttribute("EwBookedAmt", rs1.getAttribute("EwBookedAmt"));
                        if (rs1.getAttribute("EwType")
                               .toString()
                               .equals("II")) {
                            this.getShOrdbookMainVO1()
                                .getCurrentRow()
                                .setAttribute("EwType", "II");
                        } else if (rs1.getAttribute("EwType")
                                      .toString()
                                      .equals("I")) {
                            this.getShOrdbookMainVO1()
                                .getCurrentRow()
                                .setAttribute("EwType", "I");
                        } else {
                            this.getShOrdbookMainVO1()
                                .getCurrentRow()
                                .setAttribute("EwType", "III");
                        }


                    } else {
                        this.getShOrdbookMainVO1()
                            .getCurrentRow()
                            .setAttribute("EwYn", "N");

                    }


                } else {
                    this.getShOrdbookMainVO1()
                        .getCurrentRow()
                        .setAttribute("EwYn", "N");
                }
                System.out.println("IntAutocard---" + rs1.getAttribute("IntAutocard"));
                if (null != rs1.getAttribute("IntAutocard")) {

                    if (rs1.getAttribute("IntAutocard")
                           .toString()
                           .equals("Y")) {

                        this.getShOrdbookMainVO1()
                            .getCurrentRow()
                            .setAttribute("IntAutocard", "Y");

                        if (rs1.getAttribute("CardType")
                               .toString()
                               .equals("R")) {
                            this.getShOrdbookMainVO1()
                                .getCurrentRow()
                                .setAttribute("CardType", "R");
                        } else if (rs1.getAttribute("CardType")
                                      .toString()
                                      .equals("A")) {
                            this.getShOrdbookMainVO1()
                                .getCurrentRow()
                                .setAttribute("CardType", "A");
                        } else {
                            this.getShOrdbookMainVO1()
                                .getCurrentRow()
                                .setAttribute("CardType", "C");
                        }

                        this.getShOrdbookMainVO1()
                            .getCurrentRow()
                            .setAttribute("AutocardBookedAmt", rs1.getAttribute("AutocardBookedAmt"));
                    } else {
                        this.getShOrdbookMainVO1()
                            .getCurrentRow()
                            .setAttribute("IntAutocard", "N");

                    }


                } else {

                    this.getShOrdbookMainVO1()
                        .getCurrentRow()
                        .setAttribute("IntAutocard", "N");
                }
                System.out.println("McpYn---" + rs1.getAttribute("McpYn"));
                if (null != rs1.getAttribute("McpYn")) {

                    if (rs1.getAttribute("McpYn")
                           .toString()
                           .equals("Y")) {

                        this.getShOrdbookMainVO1()
                            .getCurrentRow()
                            .setAttribute("McpYn", "Y");
                        this.getShOrdbookMainVO1()
                            .getCurrentRow()
                            .setAttribute("Package1", rs1.getAttribute("Package1"));

                        this.getShOrdbookMainVO1()
                            .getCurrentRow()
                            .setAttribute("Validity", rs1.getAttribute("Validity"));

                        this.getShOrdbookMainVO1()
                            .getCurrentRow()
                            .setAttribute("McpAmount", rs1.getAttribute("McpAmount"));
                    } else {
                        this.getShOrdbookMainVO1()
                            .getCurrentRow()
                            .setAttribute("McpYn", "N");

                    }
                } else {

                    this.getShOrdbookMainVO1()
                        .getCurrentRow()
                        .setAttribute("McpYn", "N");
                }

                System.out.println("i n ENDDDD");
            }
        } catch (Exception ex) {
            ex.printStackTrace();
        }
    }

    public String gstApplyMethod(String custCd) {
        Map session = ADFContext.getCurrent().getSessionScope();
        Integer principalMapCd = Integer.parseInt(session.get("principalMapCd").toString());
        Integer dealerMapCd = Integer.parseInt(session.get("dealerMapCd").toString());
        String locCd = String.valueOf(session.get("locCd"));
        String compCode = String.valueOf(session.get("compCode"));
        String parentGrp = String.valueOf(session.get("parentGroupCd"));
        try {
            
            this.getShOrdChargesVO1().executeEmptyRowSet();
            this.getSdMgaBookingVO1().executeEmptyRowSet();
            getShOrdCommitmentVO1().executeEmptyRowSet();
            this.getGmSchemSrVO1().executeEmptyRowSet();
            String query = null;
            ResultSet rs;
            String dealergstState = null;
            BigDecimal chargeValue = BigDecimal.ZERO;
            query =
                "SELECT gs.gst_state_cd,gs.state_desc  " + "             FROM am_dealer_loc al,gm_state gs  " +
                "        WHERE al.principal_map_cd = '" + principalMapCd + "'  " + "        AND   al.parent_group='" +
                parentGrp + "'  " + "        AND   al.dealer_map_cd= '" + dealerMapCd + "'  " +
                "        AND   al.loc_cd = '" + locCd + "'  " +
                "         AND   al.principal_map_cd= gs.principal_map_cd  " +
                "         AND   al.state_cd = gs.state_cd";

            rs = getDBTransaction().createStatement(0).executeQuery(query);
            if (rs.next()) {
                dealergstState = rs.getString("gst_state_cd");


                this.getShOrdbookMainVO1()
                    .getCurrentRow()
                    .setAttribute("DealerGstState", dealergstState);


            }

            String customergstState = null;
            String query17 = null;
            ResultSet rs17;

            query17 =
                "       SELECT gs.gst_state_cd,gs.state_desc  " + "       FROM gm_cin gc, gm_state gs  " +
                "       WHERE gc.principal_map_cd = " + principalMapCd + "  " + "       AND gc.cust_cd = '" + custCd +
                "'  " + "       AND gc.principal_map_cd = gs.principal_map_cd  " +
                "       AND gc.state_cd= gs.state_cd  ";

            rs17 = getDBTransaction().createStatement(0).executeQuery(query17);
            if (rs17.next()) {
                customergstState = rs17.getString("gst_state_cd");
                this.getShOrdbookMainVO1()
                    .getCurrentRow()
                    .setAttribute("CustGstState", customergstState);

            }

            if (dealergstState.equals(customergstState)) {


                this.getShOrdbookMainVO1()
                    .getCurrentRow()
                    .setAttribute("DummyGstApply", "CGST+(SGST)");
            } else {
                this.getShOrdbookMainVO1()
                    .getCurrentRow()
                    .setAttribute("DummyGstApply", "IGST");

            }

            String query66 = null;
            ResultSet rs66;
            String areaCode = null;
            query66 =
                "SELECT PRE_AREA_CD FROM AM_DEALER_LOC_PARAM WHERE DEALER_MAP_CD = '" + dealerMapCd +
                "' AND LOC_CD = '" + locCd + "' AND PARENT_GROUP = '" + parentGrp + "'";
            rs66 = getDBTransaction().createStatement(0).executeQuery(query66);
            if (rs66.next()) {
                areaCode = rs66.getString("PRE_AREA_CD");
                this.getShOrdbookMainVO1()
                    .getCurrentRow()
                    .setAttribute("AreaCd", areaCode);


            }

        } catch (Exception ex) {
            ex.printStackTrace();
        }
        String varientCd = this.getShOrdbookMainVO1()
                               .getCurrentRow()
                               .getAttribute("VariantCd")
                               .toString();
        String colorCd = this.getShOrdbookMainVO1()
                             .getCurrentRow()
                             .getAttribute("FirstEcolorCd")
                             .toString();

        String query99 = null;
        ResultSet rs99 = null ;
        int mainCount = 0;
        String tranSrd = null;
        query99 =
            "SELECT /*+ INDEX ( SD IDX1_SD_GRN) */  COUNT(*) V_COUNT,TRAN_RECD FROM SD_GRN SD, SH_GRN SH  " +
            "      WHERE SD.AVL_PARENT_GROUP = '" + parentGrp + "'  " + " AND SD.AVL_DLR_CD = '" + dealerMapCd + "' " +
            "        AND SD.AVL_LOC_CD= '" + locCd + "' " + "        AND SD.AVL_COMP_FA = '" + compCode + "' " +
            "   AND SD.VARIANT_CD = '" + varientCd + "' " + "   AND SD.ECOLOR_CD = '" + colorCd + "' " +
            "   AND SD.DAMAGE <> 'R' " + "   AND SD.ALLOT_NUM IS NULL " +
            "        AND SD.PARENT_GROUP = SH.PARENT_GROUP " + "   AND SD.DEALER_MAP_CD = SH.DEALER_MAP_CD " +
            "   AND SD.LOC_CD = SH.LOC_CD " + "   AND SD.COMP_FA = SH.COMP_FA " + "   AND SD.GRN_NUM = SH.GRN_NUM " +
            " GROUP BY SH.TRAN_RECD ORDER BY TRAN_RECD";
        try{
            rs99 = getDBTransaction().createStatement(0).executeQuery(query99);
            if (rs99.next()) {
                tranSrd = rs99.getString("TRAN_RECD");
                mainCount = rs99.getInt("V_COUNT");
            }
        }catch(SQLException e){
            e.printStackTrace();
        }
        

        if (mainCount == 0) {

            String query1 = null;
            ResultSet rs1 = null;
            int secondCount = 0;

            query1 =
                "SELECT COUNT(*) MAINCOUNT FROM ST_POS   " + "      WHERE VARIANT_CD = '" + varientCd + "'   " +
                "      AND ECOLOR_CD = '" + colorCd + "'   " + "      AND DEALER_MAP_CD = '" + dealerMapCd + "'   " +
                "    AND PARENT_GROUP = '" + parentGrp + "'   " + "      AND LOC_CD = '" + locCd + "'   " +
                "      AND COMP_FA = '" + compCode + "'";
            try{
            rs1 = getDBTransaction().createStatement(0).executeQuery(query1);
            if (rs1.next()) {
                secondCount = rs1.getInt("MAINCOUNT");

            }
            }catch(Exception e){
                e.printStackTrace();
            }
            if (secondCount == 0) {
                SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd");
                Calendar c = Calendar.getInstance();
                java.util.Date sysDate = new java.util.Date();
                c.setTime(sysDate);
                c.add(Calendar.DAY_OF_MONTH, 30);
                String newDate = sdf.format(c.getTime());
                DateFormat df = new SimpleDateFormat("yyyy-MM-dd");
                java.util.Date comDate = null;
                try{
                    comDate = df.parse(newDate);
                }catch(ParseException ps){
                    
                }
                Timestamp tsM = new Timestamp(comDate.getTime());
                this.getShOrdbookMainVO1()
                    .getCurrentRow()
                    .setAttribute("DelDate", tsM);

                //M
            } else {
                //A
                SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd");
                Calendar c = Calendar.getInstance();
                java.util.Date sysDate = new java.util.Date();
                c.setTime(sysDate);
                c.add(Calendar.DAY_OF_MONTH, 14);
                String newDate = sdf.format(c.getTime());
                DateFormat df = new SimpleDateFormat("yyyy-MM-dd");
                java.util.Date comDate = null;
                try{
                    comDate = df.parse(newDate);
                }catch(ParseException ps){
                    
                }
                
                
                Timestamp tsA = new Timestamp(comDate.getTime());
                this.getShOrdbookMainVO1()
                    .getCurrentRow()
                    .setAttribute("DelDate", tsA);
            }


        } else {

            if (tranSrd.equals("R")) {
                //I
                java.sql.Timestamp datetime = new java.sql.Timestamp(System.currentTimeMillis());
                this.getShOrdbookMainVO1()
                    .getCurrentRow()
                    .setAttribute("DelDate", datetime);

            } else if (tranSrd.equals("T")) {
                //B
                SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd");
                Calendar c = Calendar.getInstance();
                java.util.Date sysDate = new java.util.Date();
                c.setTime(sysDate);
                c.add(Calendar.DAY_OF_MONTH, 14);
                String newDate = sdf.format(c.getTime());
                DateFormat df = new SimpleDateFormat("yyyy-MM-dd");
                java.util.Date comDate = null;
                try{
                    comDate = df.parse(newDate);
                }catch(ParseException ps){
                    
                }
                
//                java.util.Date comDate = df.parse(newDate);
                Timestamp tsB = new Timestamp(comDate.getTime());
                this.getShOrdbookMainVO1()
                    .getCurrentRow()
                    .setAttribute("DelDate", tsB);
            }
        }

        return null;

    }
    
    
    public Integer getSpChargesOrderBooking(){
        Map session = ADFContext.getCurrent().getSessionScope();
        Row shOrdRow = this.getShOrdbookMainVO1().getCurrentRow(); 
        if (shOrdRow.getAttribute("DataStatusChargeTrans") == null ||
            (shOrdRow.getAttribute("DataStatusChargeTrans") != null && shOrdRow.getAttribute("DataStatusChargeTrans")
                                                                       .toString()
                                                                       .equalsIgnoreCase("N"))) {   
        getOrderBookingChargesRO1().executeEmptyRowSet();
    }
        ViewObjectImpl chargesVo = getOrderBookingChargesRO1();
        
        System.out.println(" chargesVo row count "+chargesVo.getRowCount());
        if(chargesVo.getAllRowsInRange().length == 0){
        String chargeType = null, chargeInd = null, chargetypedesc = null, chargeCode = null;
        BigDecimal chargeValue = BigDecimal.ZERO;
        SimpleDateFormat df = new SimpleDateFormat("dd/MM/yyyy");
        
       
        java.sql.Timestamp ordrDt = (java.sql.Timestamp) shOrdRow.getAttribute("OrderDate");
        
            String ord_dt_str = null;
            if(ordrDt != null)
                ord_dt_str = df.format(ordrDt);   
        
        
        String gst_apply  = (String) shOrdRow.getAttribute("GstApplyTrans");
        String gst_state_cd = null;
        System.out.println(gst_apply+" shOrdRow.getAttribute(\"DealerGstState\") "+shOrdRow.getAttribute("DealerGstState"));
        System.out.println(gst_apply+" shOrdRow.getAttribute(\"CustGstState\") "+shOrdRow.getAttribute("CustGstState"));
        if(gst_apply != null && gst_apply.equalsIgnoreCase("L")){
            gst_state_cd = (String) shOrdRow.getAttribute("DealerGstState");
        }else{
            gst_state_cd = (String) shOrdRow.getAttribute("CustGstState");
        }


        if(shOrdRow.getAttribute("DataStatusChargeTrans") == null || (shOrdRow.getAttribute("DataStatusChargeTrans") != null && shOrdRow.getAttribute("DataStatusChargeTrans").toString().equalsIgnoreCase("N"))){
            String query =
                "SELECT A.CHARGE_CD,A.CHARGE_TYPE,A.CHARGE_IND,A.CHARGE_VALUE,'N' CHARGE_SEL,  SYSDATE" +
                ",B.MODIFY_YN FROM SM_VCHARGES A, AM_CTYPE B " +
                "       WHERE A.VARIANT_CD = '" + shOrdRow.getAttribute("VariantCd") + "' " +
                "    AND A.COLOR_IND = (SELECT CTYPE_CD FROM GM_ECLR WHERE ECOLOR_CD = '" +
                shOrdRow.getAttribute("FirstEcolorCd") + "' AND " + "    PRINCIPAL_MAP_CD = " +
                Integer.parseInt(session.get("principalMapCd").toString()) + ") " + "     AND A.AREA_CD IN( '" +
                gst_state_cd + "','ZZ') " + "     AND A.CUSTOMER_TYPE = DECODE('" + shOrdRow.getAttribute("SalesType") +
                "','CSD','IND','CPC','IND','INC','IND','LEA','IND','N2N','IND','" + shOrdRow.getAttribute("SalesType") +
                "') " + "       AND to_date('" + ord_dt_str +
                "','dd/MM/yyyy') BETWEEN A.FROM_DATE AND NVL(A.TO_DATE,SYSDATE) " +
                "      AND A.CHARGE_TYPE NOT IN ('TFP','TFN','THP','THN') " + "      AND A.COMMON_IND IN ('" +
                shOrdRow.getAttribute("GstApplyTrans") + "','M') AND A.DEALER_MAP_CD = " +
                Integer.parseInt(session.get("dealerMapCd").toString()) + " " + "      AND A.LOC_CD = '" +
                session.get("locCd").toString() + "' AND A.PARENT_GROUP = '" + session.get("parentGroupCd").toString() +
                "' " + "     AND A.CHARGE_TYPE = B.CHARGE_TYPE  AND B.DEALER_MAP_CD = A.DEALER_MAP_CD " +
                "     AND B.LOC_CD = A.LOC_CD ORDER BY A.CHARGE_SRL";
            System.out.println("getSpChargesOrder " + query);
            ResultSet rs = null;
            
        
        try{
        rs = getDBTransaction().createStatement(0).executeQuery(query);
            int z = 1;
            while (rs.next()) {
                int flag = 0;
                System.out.println(" getSpChargesOrderBooking Inside while ");
                chargeCode = rs.getString("CHARGE_CD");
                chargeType = rs.getString("CHARGE_TYPE");
                chargeInd = rs.getString("CHARGE_IND");
                chargeValue = rs.getBigDecimal("CHARGE_VALUE");

                    if (getKcesState().equalsIgnoreCase("Y") && gst_apply.equalsIgnoreCase("C") &&
                        chargeType.equalsIgnoreCase("CE1")) {
                        flag = 1;
                    } else if (flag ==0 && getKcesState().equalsIgnoreCase("Y") && shOrdRow.getAttribute("CustGstNum") != null &&
                               shOrdRow.getAttribute("CustGstNum")
                                                                                                                              .toString()
                                                                                                                              .equalsIgnoreCase("GSTUNREGISTERED") &&
                                                                chargeType.equalsIgnoreCase("CE1")) {
                        flag = 1;
                    } else if (flag == 0 && getKcesState().equalsIgnoreCase("N") && chargeType.equalsIgnoreCase("CE1")) {
                        flag = 1;
                    } else if(flag == 0){

                        Row row1 = chargesVo.createRow();
                        row1.setAttribute("ChargeSrl", z);
                        row1.setAttribute("ChargeCd", chargeCode);
                        row1.setAttribute("ChargeValue", chargeValue);
                        row1.setAttribute("ChargeType", chargeType);
                        row1.setAttribute("ChargeAmt", BigDecimal.ZERO);
                        row1.setAttribute("OrdNum", (String)shOrdRow.getAttribute("dummyOrderNo"));
                        row1.setAttribute("ChargeInd", chargeInd);
                        //                row1.setAttribute("CheckBoolean", "N");
                        row1.setAttribute("CompFa", session.get("compCode").toString());
                        row1.setAttribute("DealerMapCd", Integer.parseInt(session.get("dealerMapCd").toString()));
                        row1.setAttribute("LocCd", session.get("locCd").toString());
                        row1.setAttribute("ParentGroup", session.get("parentGroupCd").toString());
                        shOrdRow.setAttribute("DataStatusChargeTrans", "Y");
                        
                        String qry =
                            "Select CHARGE_AMT from sh_ord_charges where DEALER_MAP_CD=" +
                            Integer.parseInt(session.get("dealerMapCd").toString()) + " and LOC_CD='" +
                            session.get("locCd").toString() + "' and COMP_FA='" + session.get("compCode").toString() +
                            "' and PARENT_GROUP='" + session.get("parentGroupCd").toString() + "' and ORD_NUM='" + shOrdRow.getAttribute("OrderNum") +
                            "' and CHARGE_CD='" + chargeCode + "'";
                        System.out.println("getSchemeSel "+qry);
                        try{
                        ResultSet rs1 = this.getDBTransaction().createStatement(0).executeQuery(qry);
                            if (rs1.next()) {
                                int aval = rs1.getInt(1);
                                if(aval >0){
                                   row1.setAttribute("ChargeSel", "Y");
                                   row1.setAttribute("ChargeAmt", rs1.getBigDecimal(1));
                                }

                            }
                        }catch(Exception e){
                            e.printStackTrace();
                        }
                        
                        chargesVo.insertRow(row1);
                        z++;
                        
                        
                    }
                
            }
            if(z == 1){
                return 1;
            }
            
        }catch(Exception e){
            e.printStackTrace();
        }
        }
        }
        return 0;
    }
    
    public String getKcesState(){
        try {
            Map session = ADFContext.getCurrent().getSessionScope();
            ViewObjectImpl voiKces = this.getParameterKCESStateVO1();
            voiKces.setNamedWhereClauseParam("dealer", Integer.parseInt(session.get("dealerMapCd").toString()));
            voiKces.setNamedWhereClauseParam("loc_cd", session.get("locCd").toString());
            voiKces.setNamedWhereClauseParam("parent_group", session.get("parentGroupCd").toString());
            voiKces.executeQuery();
            if (voiKces.getEstimatedRowCount() > 0) {
                Row kcesRow = voiKces.first();
                System.out.println(" KcesState "+kcesRow.getAttribute("YnVal"));
               return (String) kcesRow.getAttribute("YnVal");
            }

        } catch (Exception e) {
            // TODO: Add catch code
            e.printStackTrace();
            return "N";
        }
        return "N";
    }

    public void fetchChargesDataDisplay() {
        try {
            String colorCode = this.getShOrdbookMainVO1()
                                   .getCurrentRow()
                                   .getAttribute("FirstEcolorCd")
                                   .toString();
            String variantCode = this.getShOrdbookMainVO1()
                                     .getCurrentRow()
                                     .getAttribute("VariantCd")
                                     .toString();
            String CustType = this.getShOrdbookMainVO1()
                                  .getCurrentRow()
                                  .getAttribute("SalesType")
                                  .toString();
            String orderDate1 = this.getShOrdbookMainVO1()
                                    .getCurrentRow()
                                    .getAttribute("OrderDate")
                                    .toString();

            String orderDate = orderDate1.substring(0, 10);
            //  String dt = datetime.toString().substring(0, 10);

            // SimpleDateFormat formatter = new SimpleDateFormat("yyyy-MM-dd");
            //String orderDate = formatter.format(this.getShOrdbookMainVO1().getCurrentRow().getAttribute("OrderDate").toString());
            System.out.println("Order Date---" + orderDate);
            String statCode = null;
            Map session = ADFContext.getCurrent().getSessionScope();
            Integer principalMapCd = Integer.parseInt(session.get("principalMapCd").toString());
            Integer dealerMapCd = Integer.parseInt(session.get("dealerMapCd").toString());
            String locCd = String.valueOf(session.get("locCd"));
            String compCode = String.valueOf(session.get("compCode"));
            String parentGrp = String.valueOf(session.get("parentGroupCd"));
            String orderNum = this.getShOrdbookMainVO1()
                                  .getCurrentRow()
                                  .getAttribute("dummyOrderNo")
                                  .toString();
            String chargeType = null, chargeInd = null, chargetypedesc = null, chargeCode = null;
            String query27 = null;
            ResultSet rs27;
            int countmain = 0;
            query27 =
                " select count(*) from sh_ord_charges t where t.ord_num='" + orderNum + "' and t.dealer_map_cd='" +
                dealerMapCd + "' and t.loc_cd='" + locCd + "' and t.comp_fa='" + compCode + "'";

            rs27 = getDBTransaction().createStatement(0).executeQuery(query27);
            if (rs27.next()) {
                countmain = rs27.getInt(1);

            }
            if (countmain == 0) {
                String gstType = this.getShOrdbookMainVO1()
                                     .getCurrentRow()
                                     .getAttribute("DummyGstApply")
                                     .toString();
                String gst_apply = null;
                if (gstType.equals("CGST+(SGST)")) {
                    gst_apply = "L";
                    statCode = this.getShOrdbookMainVO1()
                                   .getCurrentRow()
                                   .getAttribute("DealerGstState")
                                   .toString();
                } else {
                    gst_apply = "C";
                    statCode = this.getShOrdbookMainVO1()
                                   .getCurrentRow()
                                   .getAttribute("CustGstState")
                                   .toString();
                }
                String query = null;
                ResultSet rs;

                BigDecimal chargeValue = BigDecimal.ZERO;
                query =
                    "SELECT A.CHARGE_CD,A.CHARGE_TYPE,A.CHARGE_IND,A.CHARGE_VALUE,'N', " +
                    "      SYSDATE,B.MODIFY_YN " + "       FROM SM_VCHARGES A, AM_CTYPE B " +
                    "       WHERE A.VARIANT_CD = '" + variantCode + "' " +
                    "    AND A.COLOR_IND = (SELECT CTYPE_CD FROM GM_ECLR WHERE ECOLOR_CD = '" + colorCode + "' AND " +
                    "                       PRINCIPAL_MAP_CD = '" + principalMapCd + "') " +
                    "     AND A.AREA_CD IN( '" + statCode + "','ZZ') " + "     AND A.CUSTOMER_TYPE = DECODE('" +
                    CustType + "','CSD','IND','CPC','IND','INC','IND','LEA','IND','N2N','IND','" + CustType + "') " +
                    "       AND to_date('" + orderDate +
                    "','yyyy-MM-dd') BETWEEN A.FROM_DATE AND NVL(A.TO_DATE,SYSDATE) " +
                    "      AND A.CHARGE_TYPE NOT IN ('TFP','TFN','THP','THN') " + "      AND A.COMMON_IND IN ('" +
                    gst_apply + "','M') " + "      AND A.DEALER_MAP_CD = '" + dealerMapCd + "' " +
                    "      AND A.LOC_CD = '" + locCd + "' " + "     AND A.PARENT_GROUP = '" + parentGrp + "' " +
                    "     AND A.CHARGE_TYPE = B.CHARGE_TYPE " + "     AND B.DEALER_MAP_CD = A.DEALER_MAP_CD " +
                    "     AND B.LOC_CD = A.LOC_CD " + "  ORDER BY A.CHARGE_SRL";
                System.out.println("Query=---" + query);
                rs = getDBTransaction().createStatement(0).executeQuery(query);
                int z = 1;
                while (rs.next()) {
                    chargeCode = rs.getString("CHARGE_CD");
                    chargeType = rs.getString("CHARGE_TYPE");
                    chargeInd = rs.getString("CHARGE_IND");
                    chargeValue = rs.getBigDecimal("CHARGE_VALUE");


                    String query17 = null;
                    ResultSet rs17;

                    query17 =
                        "       select charge_type_desc from am_ctype where  dealer_map_cd   = 10019 and loc_cd = 'TWS' and charge_type ='" +
                        chargeType + "'";

                    rs17 = getDBTransaction().createStatement(0).executeQuery(query17);
                    if (rs17.next()) {
                        chargetypedesc = rs17.getString("charge_type_desc");

                    }
                    String indDesc = null;
                    if (chargeInd.equals("A")) {
                        indDesc = "Amount";
                    } else {

                        indDesc = "Percentage";
                    }


                    ViewObject v1 = this.getShOrdChargesVO1();
                    Row row1 = v1.createRow();

                    row1.setAttribute("ChargeSrl", z);
                    row1.setAttribute("ChargeCd", chargeCode);
                    row1.setAttribute("ChargeValue", chargeValue);
                    row1.setAttribute("ChargeType", chargeType);
                    row1.setAttribute("dummyChargeDesc", chargetypedesc);
                    row1.setAttribute("OrdNum", orderNum);
                    row1.setAttribute("ChargeInd", chargeInd);
                    row1.setAttribute("DummyChargeIndDesc", indDesc);
                    Timestamp timestamp = new Timestamp(System.currentTimeMillis());
                    row1.setAttribute("CreatedBy", session.get("userCode").toString());
                    row1.setAttribute("CreatedDate", timestamp);

                    v1.insertRow(row1);
                    z++;
                }
            } else {
                //                        ViewObject v1 = this.getShOrdChargesVO1();
                //                                                                    ViewCriteriaManager vcm = v1.getViewCriteriaManager();
                //                            ViewCriteria vc = vcm.getViewCriteria("OrderBookFetchDetailROCriteria");
                //                            VariableValueManager vvm = vc.ensureVariableManager();
                //                            vvm.setVariableValue("pComFa", compCode);
                //                            vvm.setVariableValue("pDealerMapCd", dealerMapCd);
                //                            vvm.setVariableValue("pLocCd", locCd);
                //                                  vvm.setVariableValue("pOrderNum", orderNum);
                //                                           vvm.setVariableValue("pParentGrp", parentGrp);
                //                            v1.applyViewCriteria(vc);
                //                            v1.executeQuery();

                //                        ViewObjectImpl v1 = this.getShOrdChargesVO1();
                //
                //    ViewCriteriaManager vcm = v1.getViewCriteriaManager();
                //    ViewCriteria vc = vcm.getViewCriteria("OrderBookFetchDetailROCriteria");
                //    VariableValueManager vvm = vc.ensureVariableManager();
                //        vvm.setVariableValue("pComFa", compCode);
                //        vvm.setVariableValue("pDealerMapCd", dealerMapCd);
                //        vvm.setVariableValue("pLocCd", locCd);
                //              vvm.setVariableValue("pOrderNum", orderNum);
                //                       vvm.setVariableValue("pParentGrp", parentGrp);
                //    v1.applyViewCriteria(vc);
                //    v1.executeQuery();

                ViewObjectImpl v1 = this.getShOrdChargesVO1();
                v1.applyViewCriteria(v1.getViewCriteria("ShOrdChargesVOCriteria"));
                v1.setNamedWhereClauseParam("pComFa", compCode);
                v1.setNamedWhereClauseParam("pDealerMapCd", dealerMapCd);
                v1.setNamedWhereClauseParam("pLocCd", locCd);
                v1.setNamedWhereClauseParam("pOrderNum", orderNum);
                v1.setNamedWhereClauseParam("pParentGrp", parentGrp);
                v1.executeQuery();
                System.out.println(v1.getRowCount() + "query---" + v1.getQuery());
                Row row1 = v1.first();
                if (v1.getRowCount() > 0) {
                    for (int k = 0; k < v1.getRowCount(); k++) {
                        row1 = v1.getCurrentRow();
                        System.out.println("Charge Amt---" + row1.getAttribute("ChargeAmt"));
                        if (null == row1.getAttribute("ChargeAmt")) {
                            System.out.println("in iiffff");

                        } else {
                            System.out.println("in elseeee");
                            row1.setAttribute("CheckBoolean", "Y");
                        }
                        String chargeMainInd = row1.getAttribute("ChargeInd").toString();
                        String query17 = null;
                        ResultSet rs17;

                        query17 =
                            "       select charge_type_desc from am_ctype where  dealer_map_cd   = 10019 and loc_cd = 'TWS' and charge_type ='" +
                            chargeType + "'";

                        rs17 = getDBTransaction().createStatement(0).executeQuery(query17);
                        if (rs17.next()) {
                            chargetypedesc = rs17.getString("charge_type_desc");

                        }
                        String indDesc = null;
                        if (chargeMainInd.equals("A")) {
                            indDesc = "Amount";
                        } else {

                            indDesc = "Percentage";
                        }
                        row1.setAttribute("DummyChargeIndDesc", indDesc);
                        row1.setAttribute("dummyChargeDesc", chargetypedesc);
                        v1.next();
                    }
                }


            }
        } catch (Exception ex) {
            ex.printStackTrace();
        }
    }

    /**
     * Container's getter for ShOrdInvSchemeVO1.
     * @return ShOrdInvSchemeVO1
     */
    public ViewObjectImpl getShOrdInvSchemeVO1() {
        return (ViewObjectImpl) findViewObject("ShOrdInvSchemeVO1");
    }

    public void insertRowsInScheme(String cd, String nm,java.sql.Date strtDt, java.sql.Date endDt, String SchmTyp, String OfrVal,String SchmSel,String model, Integer pmc, String orderNum){
        System.out.println(" insertRowsInScheme model "+model +" pmc "+pmc);
        Object result = callStoredFunction(Types.VARCHAR, "SF_GET_MODEL_DESC(?,?)", new Object[] {model,pmc});
        String model_desc = result != null ? result.toString() : null;
        
        ViewObjectImpl vo = getOrderBookingSchemeRO1();
        int count = vo.getRowCount() + 1;
        Row r = vo.createRow();
        r.setAttribute("SlNo", count);
        r.setAttribute("SchemeCd", cd);
        r.setAttribute("SchemeDesc", nm);
        if (strtDt != null) {
            r.setAttribute("ValidFrom", new oracle.jbo.domain.Date(strtDt));
        }
        if (endDt != null) {
            r.setAttribute("ValidTo", new oracle.jbo.domain.Date(endDt));
        }
        r.setAttribute("Amount", OfrVal);
        r.setAttribute("SchemeType", SchmTyp);
        r.setAttribute("OldVariantCd", model);
        r.setAttribute("SchemeSel", SchmSel);
        r.setAttribute("SchemeValidity", "Valid");
        r.setAttribute("ModelDesc", model_desc);
        r.setAttribute("OrderNum", orderNum);
        
        Map session = ADFContext.getCurrent().getSessionScope();
        String qry =
            "Select count(*) from sh_ord_inv_scheme where DEALER_MAP_CD=" +
            Integer.parseInt(session.get("dealerMapCd").toString()) + " and LOC_CD='" +
            session.get("locCd").toString() + "' and COMP_FA='" + session.get("compCode").toString() +
            "' and PARENT_GROUP='" + session.get("parentGroupCd").toString() + "' and ORDER_NUM='" + orderNum +
            "' and SCHEME_CD='" + cd + "'";
        System.out.println("getSchemeSel "+qry);
        try{
        ResultSet rs = this.getDBTransaction().createStatement(0).executeQuery(qry);
            if (rs.next()) {
                int aval = rs.getInt(1);
                if(aval >0){
                    r.setAttribute("SchemeSel", "Y");
                }

            }
        }catch(Exception e){
            e.printStackTrace();
        }
        
        vo.insertRow(r);

    }


    public Integer fetchSchemeDataDisplay() {
        try {

            String schemenum = null, schemeName = null, offervalue = null, schemeType = null,schemeSel= null;
            java.sql.Date startDt = null, endDt = null;
            Row mainRow = getShOrdbookMainVO1().getCurrentRow();
            Row enqRow = getOrderBookingEnquiryRO1().getCurrentRow();

            if (mainRow.getAttribute("DataStatusTrans") == null ||
                (mainRow.getAttribute("DataStatusTrans") != null && mainRow.getAttribute("DataStatusTrans")
                                                                           .toString()
                                                                           .equalsIgnoreCase("N"))) {
            getOrderBookingSchemeRO1().executeEmptyRowSet();
                                                                           }
            if (null != mainRow.getAttribute("Corporate")) {
                String corporate = (String) mainRow.getAttribute("Corporate");

                String variant = (String) mainRow.getAttribute("VariantCd");
                String village_Typ = (String) mainRow.getAttribute("Corporate");
                String orderNum = (String) mainRow.getAttribute("OrderNum");


                Map session = ADFContext.getCurrent().getSessionScope();
                Integer principalMapCd = Integer.parseInt(session.get("principalMapCd").toString());
                Integer dealerMapCd = Integer.parseInt(session.get("dealerMapCd").toString());
                String locCd = String.valueOf(session.get("locCd"));
                String compCode = String.valueOf(session.get("compCode"));
                String parentGrp = String.valueOf(session.get("parentGroupCd"));
                String orderNo = (String) mainRow.getAttribute("dummyOrderNo");
                String model = (String) enqRow.getAttribute("EnqVarCode");

                    String query = null;
                    ResultSet rs;
                    String dealergstState = null;
                    BigDecimal chargeValue = BigDecimal.ZERO;
                    String regionCd = null, muldelaercd = null, mulforcd = null;
                Integer ln_pmc = null;
                
                    query =
                        "SELECT AM.REGION_CD, AM.MUL_DEALER_CD, AM.FOR_CD, AM.PRINCIPAL_MAP_CD  " +
                        "   FROM AM_DEALER_LOC AM " + " WHERE AM.PARENT_GROUP = '" + parentGrp + "' " +
                        "  AND AM.DEALER_MAP_CD = '" + dealerMapCd + "' " + " AND AM.LOC_CD = '" + locCd + "'";

                    rs = getDBTransaction().createStatement(0).executeQuery(query);
                    if (rs.next()) {
                        regionCd = rs.getString("REGION_CD");
                        muldelaercd = rs.getString("MUL_DEALER_CD");
                        mulforcd = rs.getString("FOR_CD");
                    ln_pmc = rs.getInt("PRINCIPAL_MAP_CD");
                }
                System.out.println("fetchSchemeDataDisplay Region Query "+regionCd +" "+muldelaercd+" "+mulforcd+" "+ln_pmc);

                String groupCode = null;
                String query1 =
                    "SELECT GD.GROP_CODE   FROM GM_GROPD GD, GM_GROPH GH  " +
                    "      WHERE GD.CP_CODE = '" + corporate + "'  " + "        AND GD.CP_ACTV_YN = 'Y'  " +
                    "       AND GH.GROP_CODE = GD.GROP_CODE  " + "       AND GH.GROP_ACTV_YN = 'Y'  " +
                    "       AND GH.PRINCIPAL_MAP_CD =   " + ln_pmc + "       AND GH.PRINCIPAL_MAP_CD = GD.PRINCIPAL_MAP_CD";

                System.out.println("fetchSchemeDataDisplay GROP_CODE Query "+query1);
                ResultSet rs1 = getDBTransaction().createStatement(0).executeQuery(query1);
                if (rs1.next()) {
                    groupCode = rs1.getString(1);

                    }
                System.out.println("fetchSchemeDataDisplay GROP_CODE val "+groupCode);

                
System.out.println(" fetchSchemeDataDisplay  village_Typ :: "+village_Typ);
                    String cpNum = null;
                if(village_Typ.equalsIgnoreCase("VILLAGE")){

                    String query5 =
                        "SELECT CP_NUMBER    FROM MUL_CORPORATE " +
                        "     WHERE UPPER(CP_NAME) = CASE " + "            WHEN 'VILLAGE' = '"+ village_Typ +"' THEN " +
                        "           UPPER('Rural India') " + "         END " + "     AND PRINCIPAL_MAP_CD =  " + ln_pmc +
                        "     AND NVL(CP_CLOSE_DATE, SYSDATE) >= TRUNC(SYSDATE)";

                    ResultSet rs5 = getDBTransaction().createStatement(0).executeQuery(query5);
                    if (rs5.next()) {
                        cpNum = rs5.getString(1);

                    }
                System.out.println("fetchSchemeDataDisplay CP_NUMBER Query "+cpNum);
                }


                String salestype = (String) mainRow.getAttribute("SalesType");
                String dealerChannel = (String) mainRow.getAttribute("dummyDealerChannel");
                SimpleDateFormat formatter = new SimpleDateFormat("yyyy-MM-dd");
                String orderDate = formatter.format(mainRow.getAttribute("OrderDate")).toString();          


                String query1A =
                    "    SELECT count(*) FROM GM_SCHEM WHERE trunc(to_date('" + orderDate +
                    "','YYYY-MM-DD')) BETWEEN SCHEM_STAR_DT AND SCHEM_END_DT  AND SCHEM_APROVE = 'A'  " +
                    "      AND SCHEM_REGN = DECODE(SCHEM_REGN, 'A', SCHEM_REGN, '" + regionCd + "')  " +
                    "      AND SCHEM_DELR_CD =  DECODE(SCHEM_DELR_CD, 'A', SCHEM_DELR_CD, '" +
                    muldelaercd + "')  " + "     AND NVL(SCHEM_FOR_CD, 'A') =  " +
                    "         DECODE(NVL(SCHEM_FOR_CD, 'A'), 'A',  " +
                    "                NVL(SCHEM_FOR_CD, 'A'), '" + mulforcd + "')  " +
                    "     AND SCHEM_MODEL_CD IN (SELECT UNIQUE MODEL_CD  " +
                    "            FROM GM_VAR GV  " +
                    "           WHERE GV.FUELTYPE_CD = GM_SCHEM.SCHEM_FUELTYPE_CD  " +
                    "             AND GV.VARIANT_CD = '" + variant + "'  " +
                    "             AND GV.PRINCIPAL_MAP_CD = '" + ln_pmc +"')  AND (SCHEM_CORP_CD IN ('" + corporate +
                    "', '" + cpNum + "') OR   SCHEM_CORP_GRP_CD = '" + groupCode + "')  " +
                    "      and schem_cost_centr IN ('ISLP','COMC')  AND (CHANNEL = '%' OR CHANNEL = '" +
                    dealerChannel + "')  ";
                
                System.out.println("fetchSchemeDataDisplay query1A Query "+query1A);
                
                int CNT = 0;
                ResultSet rs1A = getDBTransaction().createStatement(0).executeQuery(query1A);
                if (rs1A.next()) {
                    CNT = rs1A.getInt(1);
                    }




                String LV_SALES_TYPE = null;
                    int flag1 = 0;

                    String query17 = null;
                    ResultSet rs17;

                    query17 =
                    "    SELECT count(*)  FROM GM_SCHEM  WHERE trunc(to_date('" + orderDate +
                    "','YYYY-MM-DD')) BETWEEN SCHEM_STAR_DT AND SCHEM_END_DT  AND SCHEM_APROVE = 'A'  " +
                        "      AND SCHEM_REGN = DECODE(SCHEM_REGN, 'A', SCHEM_REGN, '" + regionCd + "')  " +
                    "      AND SCHEM_DELR_CD = DECODE(SCHEM_DELR_CD, 'A', SCHEM_DELR_CD, '" + muldelaercd +
                    "') AND NVL(SCHEM_FOR_CD, 'A') =  " + "         DECODE(NVL(SCHEM_FOR_CD, 'A'),  " +
                    "                'A',  " + "                NVL(SCHEM_FOR_CD, 'A'),  " + "                '" +
                    mulforcd + "')  " + "     AND SCHEM_MODEL_CD IN  (SELECT UNIQUE MODEL_CD  " +
                    "            FROM GM_VAR GV  " + "           WHERE GV.FUELTYPE_CD = GM_SCHEM.SCHEM_FUELTYPE_CD  " +
                    "             AND GV.VARIANT_CD = '" + variant + "'  " + "             AND GV.PRINCIPAL_MAP_CD = " +
                    ln_pmc + ")      AND (SCHEM_CORP_CD IN ('" + corporate + "', '" + cpNum + "') OR  " +
                    "           SCHEM_CORP_GRP_CD = '" + groupCode + "')  " +
                    "      and schem_cost_centr in ('ISLP','COMC')  AND (CHANNEL = '%' OR CHANNEL = '" + dealerChannel +
                    "')   and (SCHEM_VARIANT_CD='" + variant + "'  or nvl(SCHEM_VARIANT_CD,'%')='%') "+ " and schem_sales_type='" + salestype + "'" ;
                
                System.out.println("fetchSchemeDataDisplay query17 Query "+query17);

                    rs17 = getDBTransaction().createStatement(0).executeQuery(query17);
                    if (rs17.next()) {
                    flag1 = rs17.getInt(1);
                    }

                if(flag1 > 0){
                    LV_SALES_TYPE = salestype;
                }else{
                    LV_SALES_TYPE = "%";
                }

                System.out.println("fetchSchemeDataDisplay GM_SCHEM count Query "+LV_SALES_TYPE);


                if (salestype.equals("N2N")) {                    
                    int flag2 = 0;

                    String query18 =
                        "    SELECT count(*) FROM GM_SCHEM  WHERE trunc(to_date('" + orderDate +
                        "','YYYY-MM-DD')) BETWEEN SCHEM_STAR_DT AND SCHEM_END_DT  AND SCHEM_APROVE = 'A'  " +
                        "      AND SCHEM_REGN = DECODE(SCHEM_REGN, 'A', SCHEM_REGN, '" + regionCd + "')  " +
                        "      AND SCHEM_DELR_CD = DECODE(SCHEM_DELR_CD, 'A', SCHEM_DELR_CD, '" +
                        muldelaercd + "')   AND NVL(SCHEM_FOR_CD, 'A') =  " +
                        "         DECODE(NVL(SCHEM_FOR_CD, 'A'), 'A',  " +
                        "                NVL(SCHEM_FOR_CD, 'A'), '" + mulforcd + "')  " +
                        "     AND SCHEM_MODEL_CD IN (SELECT UNIQUE MODEL_CD  " +
                        "            FROM GM_VAR GV   WHERE GV.FUELTYPE_CD = GM_SCHEM.SCHEM_FUELTYPE_CD  " +
                        "             AND GV.VARIANT_CD = '" + variant + "'  " +
                        "             AND GV.PRINCIPAL_MAP_CD =   " + ln_pmc + ")  AND (SCHEM_CORP_CD IN ('" + corporate +
                        "', '" + cpNum + "') OR  SCHEM_CORP_GRP_CD = '" + groupCode + "')  " +
                        "      and schem_cost_centr = 'N2N'  AND (CHANNEL = '%' OR CHANNEL = '" +
                        dealerChannel + "')  and (SCHEM_VARIANT_CD='"+variant+"' or nvl(SCHEM_VARIANT_CD,'%')='%')  "+
                        " and schem_sales_type='"+salestype+"'";

                        
                    System.out.println("fetchSchemeDataDisplay query18 Query "+query18);

                    ResultSet rs18 = getDBTransaction().createStatement(0).executeQuery(query18);
                    if (rs18.next()) {
                        flag2 = rs18.getInt(1);
                    }
                    if(flag2 > 0){
                        LV_SALES_TYPE = salestype;
                    }else{
                        LV_SALES_TYPE = "%";
                    }
                    
                    
                    
                    String query19 =
                        "    SELECT count(*)  FROM GM_SCHEM   WHERE trunc(to_date('" + orderDate +
                        "','YYYY-MM-DD')) BETWEEN SCHEM_STAR_DT AND SCHEM_END_DT  AND SCHEM_APROVE = 'A'  " +
                        "      AND SCHEM_REGN = DECODE(SCHEM_REGN, 'A', SCHEM_REGN, '" + regionCd + "')  " +
                        "      AND SCHEM_DELR_CD = DECODE(SCHEM_DELR_CD, 'A', SCHEM_DELR_CD, '" +
                        muldelaercd + "')   AND NVL(SCHEM_FOR_CD, 'A') =  " +
                        "         DECODE(NVL(SCHEM_FOR_CD, 'A'),  'A',  " +
                        "                NVL(SCHEM_FOR_CD, 'A'),  '" + mulforcd + "')  " +
                        "     AND SCHEM_MODEL_CD IN   (SELECT UNIQUE MODEL_CD  " +
                        "            FROM GM_VAR GV  " +
                        "           WHERE GV.FUELTYPE_CD = GM_SCHEM.SCHEM_FUELTYPE_CD  " +
                        "             AND GV.VARIANT_CD = '" + variant + "'  " +
                        "             AND GV.PRINCIPAL_MAP_CD =  " + ln_pmc + " )     AND (SCHEM_CORP_CD IN ('" + corporate +
                        "', '" + cpNum + "') OR    SCHEM_CORP_GRP_CD = '" + groupCode + "')  " +
                        "      and schem_cost_centr = 'N2N'  AND (CHANNEL = '%' OR CHANNEL = '" +
                        dealerChannel + "')    and SCHEM_VARIANT_CD='"+variant+"'"+
                        "       and schem_sales_type='"+LV_SALES_TYPE+"'";

                        
                    System.out.println("fetchSchemeDataDisplay query19 Query "+query19);

                    ResultSet rs19 = getDBTransaction().createStatement(0).executeQuery(query19);
                    if (rs19.next()) {
                        CNT = rs19.getInt(1);
                    }
                    
                    String query11 = null;
                    if(CNT == 0 ){
                        query11 =
                                "SELECT SCHEM_CD,   SCHEM_NAME,   SCHEM_STAR_DT,  " +
                                "      SCHEM_END_DT,    SCHEM_OFR_VAL,    'N' SCHEME_SEL,  " +
                                "      SCHEM_TYPE  FROM GM_SCHEM   WHERE trunc(to_date('" + orderDate +
                            "','YYYY-MM-DD')) BETWEEN SCHEM_STAR_DT AND SCHEM_END_DT  " +
                            "     AND SCHEM_APROVE = 'A'  " +
                            "     AND SCHEM_REGN = DECODE(SCHEM_REGN, 'A', SCHEM_REGN, '" + regionCd + "')  " +
                            "     AND SCHEM_DELR_CD =  " + "  DECODE(SCHEM_DELR_CD, 'A', SCHEM_DELR_CD, '" +
                                muldelaercd + "')  AND NVL(SCHEM_FOR_CD, 'A') =  " +
                                "        DECODE(NVL(SCHEM_FOR_CD, 'A'),   'A',  " +
                                "              NVL(SCHEM_FOR_CD, 'A'),   '" + mulforcd + "')  " +
                            "   AND SCHEM_MODEL_CD IN  " + "       (SELECT UNIQUE MODEL_CD  " +
                            "          FROM GM_VAR GV  " +
                            "        WHERE GV.FUELTYPE_CD = GM_SCHEM.SCHEM_FUELTYPE_CD  " +
                            "          AND GV.VARIANT_CD = '" + variant + "'  " +
                                "          AND GV.PRINCIPAL_MAP_CD =  " + ln_pmc +" )    AND (SCHEM_CORP_CD IN ('" + corporate +
                            "', '" + cpNum + "') OR  " + "         SCHEM_CORP_GRP_CD = '" + groupCode + "')  " +
                                "    and schem_cost_centr  ='N2N'     AND (CHANNEL = '%' OR CHANNEL = '" +
                                dealerChannel + "')  " + "   and schem_sales_type='" + LV_SALES_TYPE + "' " +
                            "   AND nvl(SCHEM_VARIANT_CD,'%')='%'";

                            
                        System.out.println("fetchSchemeDataDisplay query11 Query "+query11);

                         ResultSet rs11 = getDBTransaction().createStatement(0).executeQuery(query11);
                        if (rs11.next()) {
                            schemenum = rs11.getString("SCHEM_CD");
                            schemeName = rs11.getString("SCHEM_NAME");
                            startDt = rs11.getDate("SCHEM_STAR_DT");
                            endDt = rs11.getDate("SCHEM_END_DT");
                            schemeType = rs11.getString("SCHEM_TYPE");
                            offervalue = rs11.getString("SCHEM_OFR_VAL");
                                schemeSel = rs11.getString("SCHEME_SEL");
                            if (mainRow.getAttribute("DataStatusTrans") == null ||
                                (mainRow.getAttribute("DataStatusTrans") != null && mainRow.getAttribute("DataStatusTrans")
                                                                                           .toString()
                                                                                           .equalsIgnoreCase("N"))) {
                                insertRowsInScheme(schemenum, schemeName, startDt, endDt, schemeType, offervalue,
                                                   schemeSel, model, principalMapCd, orderNum);
                                mainRow.setAttribute("DataStatusTrans", "Y");
                            }
                        }
                    } else {
                        String query13 =
                            "SELECT SCHEM_CD,   SCHEM_NAME,   SCHEM_STAR_DT,  SCHEM_END_DT,  SCHEM_OFR_VAL,  'N' SCHEME_SEL,   " +
                            "      SCHEM_TYPE   FROM GM_SCHEM   " +
                            "    WHERE trunc(P_ORDER_INV_DATE) BETWEEN SCHEM_STAR_DT AND SCHEM_END_DT   " +
                            "     AND SCHEM_APROVE = 'A'   " +
                            "     AND SCHEM_REGN = DECODE(SCHEM_REGN, 'A', SCHEM_REGN, '" + regionCd + "')   " +
                            "    AND SCHEM_DELR_CD =  DECODE(SCHEM_DELR_CD, 'A', SCHEM_DELR_CD, '" +
                            muldelaercd + "') AND NVL(SCHEM_FOR_CD, 'A') = DECODE(NVL(SCHEM_FOR_CD, 'A'),  'A',   " +
                            "            NVL(SCHEM_FOR_CD, 'A'), '" + mulforcd + "')   " +
                            "     AND SCHEM_MODEL_CD IN  (SELECT UNIQUE MODEL_CD   " +
                            "           FROM GM_VAR GV  WHERE GV.FUELTYPE_CD = GM_SCHEM.SCHEM_FUELTYPE_CD   " +
                            "           AND GV.VARIANT_CD = '" + variant + "'   " +
                            "           AND GV.PRINCIPAL_MAP_CD =   " + ln_pmc + " )      AND (SCHEM_CORP_CD IN ('" +
                            corporate + "', '" + cpNum + "') OR   SCHEM_CORP_GRP_CD = '" + groupCode +
                            "')   " + "    and schem_cost_centr ='N2N'  AND (CHANNEL = '%' OR CHANNEL = '" +
                            dealerChannel + "')   " + "    and schem_sales_type='" + LV_SALES_TYPE + "'    " +
                            "     AND SCHEM_VARIANT_CD='" + variant + "'";

                        System.out.println("fetchSchemeDataDisplay query13 Query "+query13);

                        ResultSet rs13 = getDBTransaction().createStatement(0).executeQuery(query13);
                        if (rs13.next()) {
                            schemenum = rs13.getString("SCHEM_CD");
                            schemeName = rs13.getString("SCHEM_NAME");
                            startDt = rs13.getDate("SCHEM_STAR_DT");
                            endDt = rs13.getDate("SCHEM_END_DT");
                            schemeType = rs13.getString("SCHEM_TYPE");
                            offervalue = rs13.getString("SCHEM_OFR_VAL");
                            schemeSel = rs13.getString("SCHEME_SEL");                    

                            if (mainRow.getAttribute("DataStatusTrans") == null ||
                                (mainRow.getAttribute("DataStatusTrans") != null && mainRow.getAttribute("DataStatusTrans")
                                                                                           .toString()
                                                                                           .equalsIgnoreCase("N"))) {
                                insertRowsInScheme(schemenum, schemeName, startDt, endDt, schemeType, offervalue,
                                                   schemeSel, model, principalMapCd, orderNum);
                                mainRow.setAttribute("DataStatusTrans", "Y");
                            }
                        } 
                    }

                }else{

                    if(CNT > 0){


                        String query1B =
                            "    SELECT count(*)  FROM GM_SCHEM    WHERE trunc(to_date('" + orderDate +
                            "','YYYY-MM-DD')) BETWEEN SCHEM_STAR_DT AND SCHEM_END_DT   AND SCHEM_APROVE = 'A'  " +
                            "      AND SCHEM_REGN = DECODE(SCHEM_REGN, 'A', SCHEM_REGN, '" + regionCd + "')  " +
                            "      AND SCHEM_DELR_CD =  DECODE(SCHEM_DELR_CD, 'A', SCHEM_DELR_CD, '" +
                            muldelaercd + "')  " + "     AND NVL(SCHEM_FOR_CD, 'A') =  " +
                            "         DECODE(NVL(SCHEM_FOR_CD, 'A'),    'A',  " +
                            "                NVL(SCHEM_FOR_CD, 'A'),       '" + mulforcd + "')  " +
                            "     AND SCHEM_MODEL_CD IN    (SELECT UNIQUE MODEL_CD  " +
                            "            FROM GM_VAR GV  WHERE GV.FUELTYPE_CD = GM_SCHEM.SCHEM_FUELTYPE_CD  " +
                            "             AND GV.VARIANT_CD = '" + variant + "'  " +
                            "             AND GV.PRINCIPAL_MAP_CD = '1')  " + "      AND (SCHEM_CORP_CD IN ('" + corporate +
                            "', '" + cpNum + "') OR      SCHEM_CORP_GRP_CD = '" + groupCode + "')  " +
                            "      and schem_cost_centr  IN ('ISLP','COMC')  AND (CHANNEL = '%' OR CHANNEL = '" +
                            dealerChannel + "')  " +
                            " and schem_sales_type='" + LV_SALES_TYPE + "'  and SCHEM_VARIANT_CD='" + variant + "' ";

                        System.out.println("fetchSchemeDataDisplay query1B Query "+query1B);
                        
                        ResultSet rs1B = getDBTransaction().createStatement(0).executeQuery(query1B);
                        if (rs1B.next()) {
                            System.out.println(" rs1B "+rs1B.getInt(1));
                           CNT = rs1B.getInt(1);
                        }
                        System.out.println(" cnt rs1B "+CNT);
                        
                        if(CNT == 0){
                          
                            String query1C =
                                 "SELECT SCHEM_CD,  SCHEM_NAME,   SCHEM_STAR_DT,  " +
                                 "      SCHEM_END_DT,    SCHEM_OFR_VAL,    'N' SCHEME_SEL,  " +
                                 "      SCHEM_TYPE   FROM GM_SCHEM   WHERE trunc(to_date('" + orderDate +
                                 "','YYYY-MM-DD')) BETWEEN SCHEM_STAR_DT AND SCHEM_END_DT  " +
                                 "     AND SCHEM_APROVE = 'A'  " +
                                 "     AND SCHEM_REGN = DECODE(SCHEM_REGN, 'A', SCHEM_REGN, '" + regionCd + "')  " +
                                 "     AND SCHEM_DELR_CD = DECODE(SCHEM_DELR_CD, 'A', SCHEM_DELR_CD, '" +
                                 muldelaercd + "')      AND NVL(SCHEM_FOR_CD, 'A') =  " +
                                 "        DECODE(NVL(SCHEM_FOR_CD, 'A'),           'A',  " +
                                 "              NVL(SCHEM_FOR_CD, 'A'),           '" + mulforcd + "')  " +
                                 "   AND SCHEM_MODEL_CD IN   (SELECT UNIQUE MODEL_CD  " +
                                 "          FROM GM_VAR GV    WHERE GV.FUELTYPE_CD = GM_SCHEM.SCHEM_FUELTYPE_CD  " +
                                 "          AND GV.VARIANT_CD = '" + variant + "'  " +
                                 "          AND GV.PRINCIPAL_MAP_CD =  " + ln_pmc +" )    AND (SCHEM_CORP_CD IN ('" + corporate +
                                 "', '" + cpNum + "') OR  SCHEM_CORP_GRP_CD = '" + groupCode + "')  " +
                                 "    and schem_cost_centr  IN ('ISLP','COMC')      AND (CHANNEL = '%' OR CHANNEL = '" +
                                 dealerChannel + "')   and schem_sales_type='" + LV_SALES_TYPE + "' " +
                                 "   AND nvl(SCHEM_VARIANT_CD,'%')='%'";

                            System.out.println("fetchSchemeDataDisplay query1C Query "+query1C);
                            
                             ResultSet rs1C = getDBTransaction().createStatement(0).executeQuery(query1C);
                             if (rs1C.next()) {
                                 schemenum = rs1C.getString("SCHEM_CD");
                                 schemeName = rs1C.getString("SCHEM_NAME");
                                 startDt = rs1C.getDate("SCHEM_STAR_DT");
                                 endDt = rs1C.getDate("SCHEM_END_DT");
                                 schemeType = rs1C.getString("SCHEM_TYPE");
                                 offervalue = rs1C.getString("SCHEM_OFR_VAL");
                                 schemeSel = rs1C.getString("SCHEME_SEL");
                                 
                        if (mainRow.getAttribute("DataStatusTrans") == null ||
                            (mainRow.getAttribute("DataStatusTrans") != null && mainRow.getAttribute("DataStatusTrans")
                                                                                       .toString()
                                                                                       .equalsIgnoreCase("N"))) {
                            insertRowsInScheme(schemenum, schemeName, startDt, endDt, schemeType, offervalue,
                                               schemeSel, model, principalMapCd, orderNum);
                            mainRow.setAttribute("DataStatusTrans", "Y");
                        }
                    }


                        }else{


                           String query11D =
                                "SELECT SCHEM_CD,   " + "     SCHEM_NAME,   " + "       SCHEM_STAR_DT,   " +
                                "       SCHEM_END_DT,   " + "      SCHEM_OFR_VAL,   " + "      'N' SCHEME_SEL,   " +
                                "      SCHEM_TYPE   " + "     FROM GM_SCHEM   " +
                                "    WHERE trunc(to_date('"+ orderDate +"','YYYY-MM-DD')) BETWEEN SCHEM_STAR_DT AND SCHEM_END_DT   " +
                                "     AND SCHEM_APROVE = 'A'   " +
                                "     AND SCHEM_REGN = DECODE(SCHEM_REGN, 'A', SCHEM_REGN, '" + regionCd + "')   " +
                                "    AND SCHEM_DELR_CD =   " + "        DECODE(SCHEM_DELR_CD, 'A', SCHEM_DELR_CD, '" +
                                muldelaercd + "')   " + "    AND NVL(SCHEM_FOR_CD, 'A') =   " +
                                "     DECODE(NVL(SCHEM_FOR_CD, 'A'),            'A',   " +
                                "            NVL(SCHEM_FOR_CD, 'A'),           '" + mulforcd + "')   " +
                                "     AND SCHEM_MODEL_CD IN   " + "           (SELECT UNIQUE MODEL_CD   " +
                                "           FROM GM_VAR GV   " +
                                "          WHERE GV.FUELTYPE_CD = GM_SCHEM.SCHEM_FUELTYPE_CD   " +
                                "           AND GV.VARIANT_CD = '" + variant + "'   " +
                                "           AND GV.PRINCIPAL_MAP_CD =    " + ln_pmc + ")       AND (SCHEM_CORP_CD IN ('" +
                                corporate + "', '" + cpNum + "') OR   " + "          SCHEM_CORP_GRP_CD = '" + groupCode +
                                "')      and schem_cost_centr in ('ISLP','COMC')     AND (CHANNEL = '%' OR CHANNEL = '" +
                                dealerChannel + "')     and schem_sales_type='" + LV_SALES_TYPE + "'    " +
                                "     AND SCHEM_VARIANT_CD='" + variant + "'";

                            System.out.println("fetchSchemeDataDisplay query11D Query "+query11D);

                            ResultSet rs1D = getDBTransaction().createStatement(0).executeQuery(query11D);
                            if (rs1D.next()) {
                                schemenum = rs1D.getString("SCHEM_CD");
                                schemeName = rs1D.getString("SCHEM_NAME");
                                startDt = rs1D.getDate("SCHEM_STAR_DT");
                                endDt = rs1D.getDate("SCHEM_END_DT");
                                schemeType = rs1D.getString("SCHEM_TYPE");
                                offervalue = rs1D.getString("SCHEM_OFR_VAL");
                                schemeSel = rs1D.getString("SCHEME_SEL");

                            if (mainRow.getAttribute("DataStatusTrans") == null ||
                                (mainRow.getAttribute("DataStatusTrans") != null && mainRow.getAttribute("DataStatusTrans")
                                                                                           .toString()
                                                                                           .equalsIgnoreCase("N"))) {
                                insertRowsInScheme(schemenum, schemeName, startDt, endDt, schemeType, offervalue,
                                                   schemeSel, model, principalMapCd, orderNum);
                                mainRow.setAttribute("DataStatusTrans", "Y");
                            }
                        }



                        }

                    }else{


                        String query1D =
                            "    SELECT count(*)  FROM GM_SCHEM    WHERE trunc(to_date('" + orderDate +
                            "','YYYY-MM-DD')) BETWEEN SCHEM_STAR_DT AND SCHEM_END_DT   AND SCHEM_APROVE = 'A'  " +
                            "      AND SCHEM_REGN = DECODE(SCHEM_REGN, 'A', SCHEM_REGN, '" + regionCd + "')  " +
                            "      AND SCHEM_DELR_CD =  " + "          DECODE(SCHEM_DELR_CD, 'A', SCHEM_DELR_CD, '" +
                            muldelaercd + "')  " + "     AND NVL(SCHEM_FOR_CD, 'A') =  " +
                            "         DECODE(NVL(SCHEM_FOR_CD, 'A'),     'A',  " +
                            "                NVL(SCHEM_FOR_CD, 'A'),    '" + mulforcd + "')  " +
                            "     AND SCHEM_MODEL_CD IN     (SELECT UNIQUE MODEL_CD  " +
                            "            FROM GM_VAR GV  WHERE GV.FUELTYPE_CD = GM_SCHEM.SCHEM_FUELTYPE_CD  " +
                            "             AND GV.VARIANT_CD = '" + variant + "'  " +
                            "             AND GV.PRINCIPAL_MAP_CD = " + ln_pmc +")  AND (SCHEM_CORP_CD IN ('" + corporate +
                            "', '" + cpNum + "') OR  " + "           SCHEM_CORP_GRP_CD = '" + groupCode + "')  " +
                            " and 'IND'="+salestype +" and schem_cost_centr ='RMKP'   AND (CHANNEL = '%' OR CHANNEL = '" +
                            dealerChannel + "')  " + " and schem_sales_type='" + LV_SALES_TYPE + "'"+
                               " and SCHEM_VARIANT_CD='"+variant+"'";
                        
                            
                        System.out.println("fetchSchemeDataDisplay query1D Query "+query1D);
                        
                        CNT = 0;
                        ResultSet rs1D = getDBTransaction().createStatement(0).executeQuery(query1D);
                        if (rs1D.next()) {
                            CNT = rs1D.getInt(1);
                        }

                        if(CNT == 0){
                            String query1E =
                                 "SELECT SCHEM_CD,   " + "       SCHEM_NAME,  " + "      SCHEM_STAR_DT,  " +
                                 "      SCHEM_END_DT,  " + "      SCHEM_OFR_VAL,  " + "      'N' SCHEME_SEL,  " +
                                 "      SCHEM_TYPE  " + "   FROM GM_SCHEM  " + "   WHERE trunc(to_date('" + orderDate +
                                 "','YYYY-MM-DD')) BETWEEN SCHEM_STAR_DT AND SCHEM_END_DT  " +
                                 "     AND SCHEM_APROVE = 'A'  " +
                                 "     AND SCHEM_REGN = DECODE(SCHEM_REGN, 'A', SCHEM_REGN, '" + regionCd + "')  " +
                                 "     AND SCHEM_DELR_CD =  " + "  DECODE(SCHEM_DELR_CD, 'A', SCHEM_DELR_CD, '" +
                                 muldelaercd + "')  " + "     AND NVL(SCHEM_FOR_CD, 'A') =  " +
                                 "        DECODE(NVL(SCHEM_FOR_CD, 'A'),  " + "              'A',  " +
                                 "              NVL(SCHEM_FOR_CD, 'A'),  " + "             '" + mulforcd + "')  " +
                                 "   AND SCHEM_MODEL_CD IN  " + "       (SELECT UNIQUE MODEL_CD  " +
                                 "          FROM GM_VAR GV  " +
                                 "        WHERE GV.FUELTYPE_CD = GM_SCHEM.SCHEM_FUELTYPE_CD  " +
                                 "          AND GV.VARIANT_CD = '" + variant + "'  " +
                                 "          AND GV.PRINCIPAL_MAP_CD =  " + ln_pmc +" )    AND (SCHEM_CORP_CD IN ('" + corporate +
                                 "', '" + cpNum + "') OR  " + "         SCHEM_CORP_GRP_CD = '" + groupCode + "') and 'IND' ='" + salestype
                                 +"'    and schem_cost_centr  = 'RMKP'      AND (CHANNEL = '%' OR CHANNEL = '" +
                                 dealerChannel + "')  " + "   and schem_sales_type='" + LV_SALES_TYPE + "' " +
                                 "   AND nvl(SCHEM_VARIANT_CD,'%')='%'";

                                
                            System.out.println("fetchSchemeDataDisplay query1E Query "+query1E);

                             ResultSet rs1E = getDBTransaction().createStatement(0).executeQuery(query1E);
                             if (rs1E.next()) {
                                 schemenum = rs1E.getString("SCHEM_CD");
                                 schemeName = rs1E.getString("SCHEM_NAME");
                                 startDt = rs1E.getDate("SCHEM_STAR_DT");
                                 endDt = rs1E.getDate("SCHEM_END_DT");
                                 schemeType = rs1E.getString("SCHEM_TYPE");
                                 offervalue = rs1E.getString("SCHEM_OFR_VAL");
                                 schemeSel = rs1E.getString("SCHEME_SEL");

                            if (mainRow.getAttribute("DataStatusTrans") == null ||
                                (mainRow.getAttribute("DataStatusTrans") != null && mainRow.getAttribute("DataStatusTrans")
                                                                                           .toString()
                                                                                           .equalsIgnoreCase("N"))) {
                                insertRowsInScheme(schemenum, schemeName, startDt, endDt, schemeType, offervalue,
                                                   schemeSel, model, principalMapCd, orderNum);
                                mainRow.setAttribute("DataStatusTrans", "Y");
                            }
                        }


                        }else{

                            String query1F =
                                "SELECT SCHEM_CD,   " + "     SCHEM_NAME,   " + "       SCHEM_STAR_DT,   " +
                                "       SCHEM_END_DT,   " + "      SCHEM_OFR_VAL,   " + "      'N' SCHEME_SEL,   " +
                                "      SCHEM_TYPE   " + "     FROM GM_SCHEM   " +
                                "    WHERE trunc(P_ORDER_INV_DATE) BETWEEN SCHEM_STAR_DT AND SCHEM_END_DT   " +
                                "     AND SCHEM_APROVE = 'A'   " +
                                "     AND SCHEM_REGN = DECODE(SCHEM_REGN, 'A', SCHEM_REGN, '" + regionCd + "')   " +
                                "    AND SCHEM_DELR_CD =   " + "        DECODE(SCHEM_DELR_CD, 'A', SCHEM_DELR_CD, '" +
                                muldelaercd + "')   " + "    AND NVL(SCHEM_FOR_CD, 'A') =   " +
                                "     DECODE(NVL(SCHEM_FOR_CD, 'A'),   " + "              'A',   " +
                                "            NVL(SCHEM_FOR_CD, 'A'),   " + "            '" + mulforcd + "')   " +
                                "     AND SCHEM_MODEL_CD IN   " + "           (SELECT UNIQUE MODEL_CD   " +
                                "           FROM GM_VAR GV   " +
                                "          WHERE GV.FUELTYPE_CD = GM_SCHEM.SCHEM_FUELTYPE_CD   " +
                                "           AND GV.VARIANT_CD = '" + variant + "'   " +
                                "           AND GV.PRINCIPAL_MAP_CD =    " + ln_pmc +
                                ")       AND (SCHEM_CORP_CD IN ('" + corporate + "', '" + cpNum + "') OR   " +
                                "          SCHEM_CORP_GRP_CD = '" + groupCode + "') AND 'IND' = " + salestype +
                                " and schem_cost_centr = 'RMKP'   " + "      AND (CHANNEL = '%' OR CHANNEL = '" +
                                dealerChannel + "')   " + "    and schem_sales_type='" + LV_SALES_TYPE + "'    " +
                                "     AND SCHEM_VARIANT_CD='" + variant + "'";
                            
                            System.out.println("fetchSchemeDataDisplay query1F Query "+query1F);

                             ResultSet rs1F = getDBTransaction().createStatement(0).executeQuery(query1F);
                             if (rs1F.next()) {
                                 schemenum = rs1F.getString("SCHEM_CD");
                                 schemeName = rs1F.getString("SCHEM_NAME");
                                 startDt = rs1F.getDate("SCHEM_STAR_DT");
                                 endDt = rs1F.getDate("SCHEM_END_DT");
                                 schemeType = rs1F.getString("SCHEM_TYPE");
                                 offervalue = rs1F.getString("SCHEM_OFR_VAL");
                                 schemeSel = rs1F.getString("SCHEME_SEL");

                                 if (mainRow.getAttribute("DataStatusTrans") == null ||
                                     (mainRow.getAttribute("DataStatusTrans") != null && mainRow.getAttribute("DataStatusTrans")
                                                                                                .toString()
                                                                                                .equalsIgnoreCase("N"))) {
                                     insertRowsInScheme(schemenum, schemeName, startDt, endDt, schemeType, offervalue,
                                                        schemeSel, model, principalMapCd, orderNum);
                                     mainRow.setAttribute("DataStatusTrans", "Y");
                                 }
                             }
                        }
                    }



                }


//                  if (salestype.equals("N2N")) {
//                   
//                    if (null != schemenum) {
//                        String dummyModelCd = this.getShOrdbookMainVO1()
//                                                  .getCurrentRow()
//                                                  .getAttribute("DummyModelCd")
//                                                  .toString();
//                        String query8 = null;
//                        ResultSet rs8;
//                        String model_desc = null;
//
//                        query8 =
//                            "select model_desc from gm_mod" + "  where principal_map_cd = '" + principalMapCd + "'" +
//                            " and model_cd = '" + dummyModelCd + "'" + "         AND   al.state_cd = gs.state_cd";
//
//                        rs8 = getDBTransaction().createStatement(0).executeQuery(query8);
//                        if (rs8.next()) {
//                            model_desc = rs8.getString("model_desc");
//
//
//                            // this.getShOrdbookMainVO1().getCurrentRow().setAttribute("DealerGstState", dealergstState);
//
//
//                        }
//                        String query14 = null;
//                        ResultSet rs14;
//                        String list_desc = null;
//
//                        query14 =
//                            "  select list_desc from am_list where  principal_map_cd   = '" + principalMapCd +
//                            "' and list_name = 'ISL_SCH_TYPE' and   list_code = '" + schemeType + "'";
//
//                        rs14 = getDBTransaction().createStatement(0).executeQuery(query14);
//                        if (rs14.next()) {
//                            list_desc = rs14.getString("list_desc");
//
//
//                            // this.getShOrdbookMainVO1().getCurrentRow().setAttribute("DealerGstState", dealergstState);
//
//
//                        }
//
//
//                        String query2 = null;
//                        ResultSet rs2;
//                        String costcenter = null;
//
//                        query2 = "  SELECT SCHEM_COST_CENTR  FROM GM_SCHEM WHERE SCHEM_CD = '" + schemenum + "'";
//
//                        rs2 = getDBTransaction().createStatement(0).executeQuery(query2);
//                        if (rs2.next()) {
//                            costcenter = rs2.getString("SCHEM_COST_CENTR");
//                        }

                        // this.getShOrdbookMainVO1().getCurrentRow().setAttribute("DealerGstState", dealergstState);
//                        ViewObjectImpl voi_gm_scheme = this.getGmSchemSrVO1();
//                        Row cr_row = voi_gm_scheme.createRow();
//                        cr_row.setAttribute("SchemCd", schemenum);
//                        cr_row.setAttribute("SchemName", schemeName);
//                        cr_row.setAttribute("SchemType", schemeType);
//
//                        cr_row.setAttribute("SchemOfrVal", offervalue);
//
//                        cr_row.setAttribute("DummyListDesc", list_desc);
//                        cr_row.setAttribute("DummySchemeValidity", "VALID");
//                        // cr_row.setAttribute("Channel", sr_row.getAttribute("Channel"));
//                        cr_row.setAttribute("SchemStarDt", startDt);
//                        cr_row.setAttribute("SchemEndDt", endDt);
//
//
//                        Timestamp timestamp = new Timestamp(System.currentTimeMillis());
//                        cr_row.setAttribute("CreatedBy", session.get("userCode").toString());
//                        cr_row.setAttribute("CreatedDate", timestamp);
//                        cr_row.setAttribute("SchemAprove", "P");
//
//
//                        voi_gm_scheme.insertRow(cr_row);
//                        ViewObject v1 = this.getShOrdInvSchemeVO1();
//                        Row row1 = v1.createRow();
//
//                        row1.setAttribute("SchemCd", schemenum);
//                        row1.setAttribute("SchemName", schemeName);
//                        row1.setAttribute("SchemCostCentr", costcenter);
//                        row1.setAttribute("SchemStarDt", startDt);
//                        row1.setAttribute("SchemEndDt", endDt);
//                        row1.setAttribute("SchemOfrVal", offervalue);
//                        row1.setAttribute("SchemType", schemeType);
//                        row1.setAttribute("DummySchemeValidity", "VALID");
//                        row1.setAttribute("DummyListDesc", "list_desc");
//
//                        v1.insertRow(row1);


//                    }
//
//
//                }

                 
            }

        } catch (Exception ex) {
            ex.printStackTrace();
        }
        System.out.println("getOrderBookingSchemeRO1 count :: "+getOrderBookingSchemeRO1().getRowCount());
        if(this.getOrderBookingSchemeRO1().getRowCount() == 0) {
            return 1;
        }

        return 0;

    }

    /**
     * Container's getter for SdMgaBookingVO1.
     * @return SdMgaBookingVO1
     */
    public SdMgaBookingVOImpl getSdMgaBookingVO1() {
        return (SdMgaBookingVOImpl) findViewObject("SdMgaBookingVO1");
    }

    /**
     * Container's getter for OrderBookFollowHistoryRO1.
     * @return OrderBookFollowHistoryRO1
     */
    public ViewObjectImpl getOrderBookFollowHistoryRO1() {
        return (ViewObjectImpl) findViewObject("OrderBookFollowHistoryRO1");
    }

    /**
     * Container's getter for OrderBookFollowupRO1.
     * @return OrderBookFollowupRO1
     */
    public ViewObjectImpl getOrderBookFollowupRO1() {
        return (ViewObjectImpl) findViewObject("OrderBookFollowupRO1");
    }

    /**
     * Container's getter for OrderBookOldVehRO1.
     * @return OrderBookOldVehRO1
     */
    public ViewObjectImpl getOrderBookOldVehRO1() {
        return (ViewObjectImpl) findViewObject("OrderBookOldVehRO1");
    }

    /**
     * Container's getter for OrderBookFollowupDummyRO1.
     * @return OrderBookFollowupDummyRO1
     */
    public ViewObjectImpl getOrderBookFollowupDummyRO1() {
        return (ViewObjectImpl) findViewObject("OrderBookFollowupDummyRO1");
    }

    /**
     * Container's getter for StBookFollowVO1.
     * @return StBookFollowVO1
     */
    public StBookFollowVOImpl getStBookFollowVO1() {
        return (StBookFollowVOImpl) findViewObject("StBookFollowVO1");
    }

    /**
     * Container's getter for StBookFollowVO2.
     * @return StBookFollowVO2
     */
    public StBookFollowVOImpl getStBookFollowVO2() {
        return (StBookFollowVOImpl) findViewObject("StBookFollowVO2");
    }


    public void fetchBookingFollowupDisplay() {
        try {


            String schemenum = null, schemeName = null, offervalue = null, schemeType = null;
            String startDt = null, endDt = null;

            String corporate = (String)this.getShOrdbookMainVO1()
                                   .getCurrentRow()
                                   .getAttribute("Corporate");


            String variant = (String)this.getShOrdbookMainVO1()
                                 .getCurrentRow()
                                 .getAttribute("VariantCd");


            String ordernum = (String)this.getShOrdbookMainVO1()
                                  .getCurrentRow()
                                  .getAttribute("OrderNum");
                                 
            String enqNum = (String)this.getShOrdbookMainVO1()
                                .getCurrentRow()
                                .getAttribute("EnqNum");



            Map session = ADFContext.getCurrent().getSessionScope();
            Integer principalMapCd = Integer.parseInt(session.get("principalMapCd").toString());
            Integer dealerMapCd = Integer.parseInt(session.get("dealerMapCd").toString());
            String locCd = String.valueOf(session.get("locCd"));
            String compCode = String.valueOf(session.get("compCode"));
            String parentGrp = String.valueOf(session.get("parentGroupCd"));

            String query2 = null;
            ResultSet rs2;
            int count = 0;
            BigDecimal chargeValue = BigDecimal.ZERO;
            query2 =
                " SELECT count(*) " + "      FROM ST_BOOK_FOLLOW " + "     WHERE PARENT_GROUP = '" + parentGrp + "' " +
                "       AND DEALER_MAP_CD = '" + dealerMapCd + "' " + "       AND LOC_CD = '" + locCd + "' " +
                "      AND COMP_FA = '" + compCode + "' " + "      AND order_NUM = '" + ordernum + "'";

            rs2 = getDBTransaction().createStatement(0).executeQuery(query2);
            if (rs2.next()) {
                count = rs2.getInt(1);

            }
            // this.getShOrdbookMainVO1().getCurrentRow().setAttribute("DealerGstState", dealergstState);

          //  if (count == 0) { commenting
		  
		  //ViewObject v2 = this.getOrderBookFollowupRO1();
          
		  String BookFollowedby = null;
		  //if(null != ordernum){
                
//BookFollowedby	= (String) v2.getCurrentRow().getAttribute("BookFollowedby");
//		  }
ViewObject v1 = this.getStBookFollowVO1();
                String finCash = (String)this.getShOrdbookMainVO1()
                                     .getCurrentRow()
                                     .getAttribute("FinCash");


                Row row1 = v1.createRow();
System.out.println("BookFollowedby---" + BookFollowedby);
                row1.setAttribute("DealerMapCd", dealerMapCd);
                row1.setAttribute("ParentGroup", parentGrp);
                row1.setAttribute("LocCd", locCd);
                row1.setAttribute("CompFa", compCode);
                row1.setAttribute("EnqNum", enqNum);
				//row1.setAttribute("BookFollowedby", BookFollowedby);
                row1.setAttribute("OrderNum", ordernum);
                row1.setAttribute("BookFollowslno", 1);
                row1.setAttribute("CreatedDate", new Timestamp(System.currentTimeMillis()));
                row1.setAttribute("CreatedBy", session.get("userCode").toString());
                // row1.setAttribute("DummyFinCash",finCash);

                v1.insertRow(row1);
				/*
				ViewObject v2 = this.getStBookFollowVO2();


                String finCash = this.getShOrdbookMainVO1()
                                     .getCurrentRow()
                                     .getAttribute("FinCash")
                                     .toString();

                Row row2 = v2.createRow();

                row2.setAttribute("DealerMapCd", dealerMapCd);
                row2.setAttribute("ParentGroup", parentGrp);
                row2.setAttribute("LocCd", locCd);
                row2.setAttribute("CompFa", compCode);
                row2.setAttribute("EnqNum", enqNum);
                row2.setAttribute("OrderNum", ordernum);
                row2.setAttribute("BookFollowslno", 1);
                row2.setAttribute("CreatedDate", new Timestamp(System.currentTimeMillis()));
                row2.setAttribute("CreatedBy", session.get("userCode").toString());
                // row1.setAttribute("DummyFinCash",finCash);

                v2.insertRow(row2);*/
          //  } 
			/*else {
                ViewObject v1 = this.getStBookFollowVO1();
                String where_clause =
                    "DEALER_MAP_CD =" + dealerMapCd + " AND ORDER_NUM ='" + ordernum + "' AND LOC_CD = '" + locCd +
                    "' AND COMP_FA = '" + compCode + "' and PARENT_GROUP = '" + parentGrp + "'";
                v1.setWhereClause(where_clause);
                v1.executeQuery();
                System.out.println("Query---" + v1.getQuery());
            }
*/

            //this.getStBookFollowVO2().executeEmptyRowSet();
        } catch (Exception ex) {
            ex.printStackTrace();
        }
    }


    public void fetchNextBookingFollowupDisplay() {
        try {

            Map session = ADFContext.getCurrent().getSessionScope();
            Integer principalMapCd = Integer.parseInt(session.get("principalMapCd").toString());
            Integer dealerMapCd = Integer.parseInt(session.get("dealerMapCd").toString());
            String locCd = String.valueOf(session.get("locCd"));
            String compCode = String.valueOf(session.get("compCode"));
            String parentGrp = String.valueOf(session.get("parentGroupCd"));

            String ordernum = this.getShOrdbookMainVO1()
                                  .getCurrentRow()
                                  .getAttribute("dummyOrderNo")
                                  .toString();
            String enqNum = this.getShOrdbookMainVO1()
                                .getCurrentRow()
                                .getAttribute("EnqNum")
                                .toString();
            String finCash = this.getShOrdbookMainVO1()
                                 .getCurrentRow()
                                 .getAttribute("FinCash")
                                 .toString();


            String query2 = null;
            ResultSet rs2;
            int count = 0;
            BigDecimal chargeValue = BigDecimal.ZERO;
            query2 =
                " SELECT count(*) " + "      FROM ST_BOOK_FOLLOW " + "     WHERE PARENT_GROUP = '" + parentGrp + "' " +
                "       AND DEALER_MAP_CD = '" + dealerMapCd + "' " + "       AND LOC_CD = '" + locCd + "' " +
                "      AND COMP_FA = '" + compCode + "' " + "      AND order_NUM = '" + ordernum + "'";

            rs2 = getDBTransaction().createStatement(0).executeQuery(query2);
            if (rs2.next()) {
                count = rs2.getInt(1);

            }


            ViewObject v1 = this.getStBookFollowVO2();
            Row row1 = v1.createRow();

            row1.setAttribute("DealerMapCd", dealerMapCd);
            row1.setAttribute("ParentGroup", parentGrp);
            row1.setAttribute("LocCd", locCd);
            row1.setAttribute("CompFa", compCode);
            row1.setAttribute("EnqNum", enqNum);
            row1.setAttribute("OrderNum", ordernum);
            row1.setAttribute("BookFollowslno", count);
            // row1.setAttribute("DummyFinCash",finCash);
            row1.setAttribute("CreatedDate", new Timestamp(System.currentTimeMillis()));
            row1.setAttribute("CreatedBy", session.get("userCode").toString());
            v1.insertRow(row1);
        } catch (Exception ex) {
            ex.printStackTrace();
        }


    }


    /**
     * Container's getter for StBookFollowMainVO1.
     * @return StBookFollowMainVO1
     */
    public ViewObjectImpl getStBookFollowMainVO1() {
        return (ViewObjectImpl) findViewObject("StBookFollowMainVO1");
    }

    /**
     * Container's getter for AmUserDealerMasterRO1.
     * @return AmUserDealerMasterRO1
     */
    public ViewObjectImpl getAmUserDealerMasterRO1() {
        return (ViewObjectImpl) findViewObject("AmUserDealerMasterRO1");
    }

    /**
     * Container's getter for BookingPriceCheckCntRO1.
     * @return BookingPriceCheckCntRO1
     */
    public ViewObjectImpl getBookingPriceCheckCntRO1() {
        return (ViewObjectImpl) findViewObject("BookingPriceCheckCntRO1");
    }

    /**
     * Container's getter for AmdealerLocGmRegnTFParamsLOV1.
     * @return AmdealerLocGmRegnTFParamsLOV1
     */
    public ViewObjectImpl getAmdealerLocGmRegnTFParamsLOV1() {
        return (ViewObjectImpl) findViewObject("AmdealerLocGmRegnTFParamsLOV1");
    }

    /**
     * Container's getter for BookingPriceBookToDateCheckRO1.
     * @return BookingPriceBookToDateCheckRO1
     */
    public ViewObjectImpl getBookingPriceBookToDateCheckRO1() {
        return (ViewObjectImpl) findViewObject("BookingPriceBookToDateCheckRO1");
    }


    /**
     * Container's getter for BookingPriceFromAndToDateRO1.
     * @return BookingPriceFromAndToDateRO1
     */
    public ViewObjectImpl getBookingPriceFromAndToDateRO1() {
        return (ViewObjectImpl) findViewObject("BookingPriceFromAndToDateRO1");
    }


    public String fromDateCheckAndValidation(String dealer_map_code, String loc_code, String variant_code,
                                             Date from_date) {
        Integer cnt = 0;
        ViewObjectImpl voiBPCnt = this.getBookingPriceCheckCntRO1();
        voiBPCnt.setNamedWhereClauseParam("arg0", "arg1");
        voiBPCnt.setNamedWhereClauseParam("arg0", "arg1");
        voiBPCnt.setNamedWhereClauseParam("arg0", "arg1");
        voiBPCnt.setNamedWhereClauseParam("arg0", "arg1");
        voiBPCnt.executeQuery();

        return null;
    }

    /**
     * Container's getter for EligibleEmployeeReportDateRVO1.
     * @return EligibleEmployeeReportDateRVO1
     */
    public ViewObjectImpl getEligibleEmployeeReportDateRVO1() {
        return (ViewObjectImpl) findViewObject("EligibleEmployeeReportDateRVO1");
    }

    public void PkgCallForEligibleEmployeeExcel(String fromDate, String toDate,
                                                String regionCd, String dealerCd, String locCd, String parentGroup) {
        Map session = ADFContext.getCurrent().getSessionScope();
        Integer principalMapCd = Integer.parseInt(session.get("principalMapCd").toString());
        System.out.println("inside PkgCallForEligibleEmployeeExcel");
        String stmt = "begin Pkg_LMS_REPORTS.Pr_Eli_Employees(?,?,?,?,?,?); end;";
        DBTransaction dbtxn = (DBTransaction) getTransaction();
        CallableStatement cs = dbtxn.createCallableStatement(stmt.toString(), 1);
        try {
            cs.setObject(1, fromDate);
            cs.setObject(2, toDate);
            cs.setObject(3, regionCd);
            cs.setObject(4, dealerCd);
            cs.setObject(5, locCd);
            cs.setObject(6, parentGroup);
            cs.execute();
            System.out.println("after execution of pkg  - PkgCallForEligibleEmployeeExcel" + fromDate + " vvv " + toDate + " vvv " + regionCd + " vvv " +
                               dealerCd + " " + parentGroup + " " + locCd );

            ViewObjectImpl vo = this.getEligibleEmployeeExcelRO1();
            vo.setNamedWhereClauseParam("P_PRINCIPAL", principalMapCd);
            vo.setNamedWhereClauseParam("p_dealer", dealerCd);
            vo.setNamedWhereClauseParam("p_loc", locCd);
            vo.setNamedWhereClauseParam("p_parent", parentGroup);
            System.out.println("Delayed action excel -> in ampl class , print select query is  " + vo.getQuery());
            vo.executeQuery();


        } catch (SQLException sqlerr) {
            throw new JboException(sqlerr);
        } finally {
            try {
                if (cs != null) {
                    cs.close();
    }
            } catch (Exception e) {
            }
        }
    }

    /**
     * Container's getter for GdLoyaltyTransRO1.
     * @return GdLoyaltyTransRO1
     */
    public ViewObjectImpl getGdLoyaltyTransRO1() {
        return (ViewObjectImpl) findViewObject("GdLoyaltyTransRO1");
    }

    public Long validateMntlyLyltyRfrlCnt(Map map) {
        Long returnVal = null;
        ViewObjectImpl vo = this.getGdLoyaltyTransRO1();
        vo.clearViewCriterias();
        vo.clearCache();
        //vo.applyViewCriteria(vo.getViewCriteria("filterByTransTypeVC"));
        vo.setNamedWhereClauseParam("bindCardNum", map.get("CardNum"));
        vo.setNamedWhereClauseParam("bindTransType", map.get("TransType"));
        vo.executeQuery();
        returnVal = vo.getEstimatedRowCount();
        return returnVal;
    }

    /**
     * Container's getter for GdLoyaltyTransFinYearRO1.
     * @return GdLoyaltyTransFinYearRO1
     */
    public ViewObjectImpl getGdLoyaltyTransFinYearRO1() {
        return (ViewObjectImpl) findViewObject("GdLoyaltyTransFinYearRO1");
    }

    /**
     * @code This code is to validate the referral counts in Loyalty Referral Card in Financial Year
     * @param map
     * @return
     */

    public Long validateFinYearLyltyRfrlCnt(Map map) {
        Long returnVal = null;
        ViewObjectImpl vo = this.getGdLoyaltyTransFinYearRO1();
        vo.clearViewCriterias();
        vo.clearCache();
        vo.applyViewCriteria(vo.getViewCriteria("filterByTransTypeVC"));
        vo.setNamedWhereClauseParam("bindCardNum", map.get("CardNum"));
        vo.setNamedWhereClauseParam("bindTransType", map.get("TransType"));
        vo.setNamedWhereClauseParam("bindFinStartDate", map.get("finYearStartDate"));
        vo.setNamedWhereClauseParam("bindFinEndDate", map.get("finYearEndDate"));
        vo.executeQuery();
        returnVal = vo.getEstimatedRowCount();
        return returnVal;
    }

    /**
     * Container's getter for GdLoyaltyTransGeneralRO1.
     * @return GdLoyaltyTransGeneralRO1
     */
    public ViewObjectImpl getGdLoyaltyTransGeneralRO1() {
        return (ViewObjectImpl) findViewObject("GdLoyaltyTransGeneralRO1");
    }

    /**
     * @code This code is to validate the referral counts in Loyalty Referral Card in General
     * @param map
     * @return
     */

    public Long validateGeneralLyltyRfrlCnt(Map map) {
        Long returnVal = null;
        ViewObjectImpl vo = this.getGdLoyaltyTransGeneralRO1();
        vo.clearViewCriterias();
        vo.clearCache();
        vo.applyViewCriteria(vo.getViewCriteria("filterByTransTypeVC"));
        vo.setNamedWhereClauseParam("bindCardNum", map.get("CardNum"));
        vo.setNamedWhereClauseParam("bindTransType", map.get("TransType"));
        vo.executeQuery();
        returnVal = vo.getEstimatedRowCount();
        return returnVal;
    }

    /**
     * Container's getter for GdDealerMappingRO1.
     * @return GdDealerMappingRO1
     */
    public ViewObjectImpl getGdDealerMappingRO1() {
        return (ViewObjectImpl) findViewObject("GdDealerMappingRO1");
    }

    /**
     * Container's getter for LoyaltyGmEmpRO1.
     * @return LoyaltyGmEmpRO1
     */
    public ViewObjectImpl getLoyaltyGmEmpRO1() {
        return (ViewObjectImpl) findViewObject("LoyaltyGmEmpRO1");
    }

    /**
     * Container's getter for LoyaltyFinYearGmEmpRO1.
     * @return LoyaltyFinYearGmEmpRO1
     */
    public ViewObjectImpl getLoyaltyFinYearGmEmpRO1() {
        return (ViewObjectImpl) findViewObject("LoyaltyFinYearGmEmpRO1");
    }


    public void calculateMcpAmount(String packageCd) {
        try {
            System.out.println("packge impl--" + packageCd);
            Map session = ADFContext.getCurrent().getSessionScope();
            Integer principalMapCd = Integer.parseInt(session.get("principalMapCd").toString());
            Integer dealerMapCd = Integer.parseInt(session.get("dealerMapCd").toString());
            String locCd = String.valueOf(session.get("locCd"));
            String compCode = String.valueOf(session.get("compCode"));
            String parentGrp = String.valueOf(session.get("parentGroupCd"));
            String query3 = null;
            ResultSet rs3;
            String city_type = null, principalCode = null;
            query3 =
                "SELECT a.principal_map_cd, b.city_rph_type FROM am_dealer_loc a, gm_for b WHERE dealer_map_cd = '" +
                dealerMapCd + "' AND loc_Cd = '" + locCd +
                "' AND a.for_cd = b.for_cd AND a.principal_map_cd = b.principal_map_cd AND NVL(a.msil_terminated_date, SYSDATE) >= SYSDATE";

            rs3 = getDBTransaction().createStatement(0).executeQuery(query3);
            if (rs3.next()) {
                principalCode = rs3.getString(1);
                city_type = rs3.getString(2);
            }

            String variantCode = this.getShOrdbookMainVO1()
                                     .getCurrentRow()
                                     .getAttribute("VariantCd")
                                     .toString();
            String query4 = null;
            ResultSet rs4;
            String srvCode = null, fuletypeCd = null;
            query4 =
                " SELECT svar_Cd, x.fueltype_cd FROM gm_var x WHERE x.variant_cd = '" + variantCode +
                "' AND x.principal_map_cd = '" + principalMapCd + "'";

            rs4 = getDBTransaction().createStatement(0).executeQuery(query4);
            if (rs4.next()) {
                srvCode = rs4.getString(1);
                fuletypeCd = rs4.getString(2);

            }
            String query9 = null;
            ResultSet rs9;
            BigDecimal mcpPrice = BigDecimal.ZERO;
            query9 =
                "  SELECT SUM(at.tot_value) mcpamt" + "     FROM vm_amc_rate at " + "    WHERE at.svar_mod_cd = '" +
                srvCode + "' " + "      AND at.principal_map_cd = '" + principalCode + "' " +
                "      AND at.fueltype_cd = '" + fuletypeCd + "' " + "      AND at.city_category = '" + city_type +
                "' " + "     AND NVL(at.status, 'Y') = 'Y' " + "     AND TRUNC(SYSDATE) BETWEEN effec_from_date AND " +
                "        NVL(effec_to_date, TRUNC(SYSDATE)) " + "      AND EXISTS " + "    (SELECT pkg_code " +
                "            FROM vm_amc_pkg x " + "           WHERE x.principal_map_cd = 1 " +
                "            AND TRUNC(SYSDATE) BETWEEN x.effec_from_date AND " +
                "               NVL(x.effec_to_date, TRUNC(SYSDATE)) " + "          AND x.veh_age_cd = '01' " +
                "          AND pkg_type_code = " + "              SUBSTR('" + packageCd + "', 1, INSTR('" + packageCd +
                "', '-', 1) - 1) " + "        AND expiry_months = " + "            SUBSTR('" + packageCd + "', " +
                "                  INSTR('" + packageCd + "', '-', 1) + 1, " + "                  INSTR('" + packageCd +
                "', '-', 1)) " + "       AND expiry_mileage = " + "           SUBSTR('" + packageCd + "', INSTR('" +
                packageCd + "', '-', 1, 2) + 1) " + "      AND x.pkg_code = at.pkg_code)";

            rs9 = getDBTransaction().createStatement(0).executeQuery(query9);
            if (rs9.next()) {

                mcpPrice = rs9.getBigDecimal(1);
                this.getShOrdbookMainVO1()
                    .getCurrentRow()
                    .setAttribute("McpAmount", mcpPrice);
            }


        } catch (Exception ex) {
            ex.printStackTrace();
        }

    }

    /**
     * Container's getter for VehiclePriceListDealerRO1.
     * @return VehiclePriceListDealerRO1
     */
    public VehiclePriceListDealerROImpl getVehiclePriceListDealerRO1() {
        return (VehiclePriceListDealerROImpl) findViewObject("VehiclePriceListDealerRO1");
    }

    /**
     * Container's getter for VehiclePriceListOutletRO1.
     * @return VehiclePriceListOutletRO1
     */
    public ViewObjectImpl getVehiclePriceListOutletRO1() {
        return (ViewObjectImpl) findViewObject("VehiclePriceListOutletRO1");
    }

    public void initStockIndent() {
        try {
            this.getStIndentVO1().executeEmptyRowSet();
            this.getIndentSearchTVO1().executeQuery();
        } catch (Exception e) {
            // TODO: Add catch code
            e.printStackTrace();
        }

    }

    public void filterGrnRecords() {
        Map session = ADFContext.getCurrent().getSessionScope();
        Integer principalMapCd = Integer.parseInt(session.get("principalMapCd").toString());
        Integer dealerMapCd = Integer.parseInt(session.get("dealerMapCd").toString());
        String locCd = String.valueOf(session.get("locCd"));
        String compCode = String.valueOf(session.get("compCode"));
        String parentGrp = String.valueOf(session.get("parentGroupCd"));
        ViewObjectImpl searchvo = getGRNSearchDualRO1();
        Row searchvoRow = searchvo.getCurrentRow();
        ViewObjectImpl resultVO = getGRNSearchResultsRO1();
        Row resultVORow = resultVO.getCurrentRow();
        resultVO.applyViewCriteria(resultVO.getViewCriteria("GRNSearchResultsROCriteria"));
        resultVO.setNamedWhereClauseParam("bindFromDate", searchvoRow.getAttribute("FromDate"));
        resultVO.setNamedWhereClauseParam("bindToDate", searchvoRow.getAttribute("ToDate"));
        resultVO.setNamedWhereClauseParam("bindGrnNum", searchvoRow.getAttribute("GrnNum"));
        resultVO.setNamedWhereClauseParam("bindInvoiceNum", searchvoRow.getAttribute("InvoiceNum"));
        resultVO.setNamedWhereClauseParam("bindParentGrp", parentGrp);
        resultVO.setNamedWhereClauseParam("bindLocCd", locCd);
        resultVO.setNamedWhereClauseParam("bindDealerMapCd", dealerMapCd);
        resultVO.setNamedWhereClauseParam("bindCompFa", compCode);
        resultVO.setNamedWhereClauseParam("bindFinCntNum",searchvoRow.getAttribute("FinanceControlNum"));
        resultVO.executeQuery();

    }

    public String validateOnSaveIndent(String dealer_map_code, String loc_code, String parent_group, String pmc) {
        String res = null;
        try {
            ViewObjectImpl voi = this.getStIndentVO1();
            StIndentVORowImpl rw = (StIndentVORowImpl) voi.getCurrentRow();
            System.out.println("Dealer Map Code::::::::"+dealer_map_code+" loc_code:::::::::"+loc_code+" parent_group:::::::"+parent_group+" pmc:::::::"+pmc);
            System.out.println("Variant Code::::::"+rw.getVariantCd()+" rw.getStkindDate()::::::::::"+rw.getStkindDate());
            System.out.println("rw.getEcolorCd()::::::::::::::::"+rw.getEcolorCd());
            Object result =
                callStoredFunction(Types.VARCHAR, "Sf_check_sell_price(?,?,?,?,?,?,?)",
                                   new Object[] { dealer_map_code, loc_code, parent_group,pmc,rw.getVariantCd(),
                                                  rw.getStkindDate(), rw.getEcolorCd() });
            res = result != null ? result.toString() : null;
            System.out.println("result of calling procedure is:" + res);
            if (res != null) {
                if (res.equalsIgnoreCase("0")) {
                    res = "Price not available at Receiving outlet";
                } else if (res.equalsIgnoreCase("1")) {
                    res = "More than one selling price found";
                } else {
                    res = null;
                }
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
        return res;
    }

    public String copyRight() {
        Object result = callStoredFunction(Types.VARCHAR, "SF_COPYRIGHT_DECLARATION()", new Object[] { });
        return result != null ? result.toString() : null;
    }

    public void tallyIntegrationReceiptsSave() {
        Map session = ADFContext.getCurrent().getSessionScope();
        Integer principalMapCd = Integer.parseInt(session.get("principalMapCd").toString());
        Integer dealerMapCd = Integer.parseInt(session.get("dealerMapCd").toString());
        String locCd = String.valueOf(session.get("locCd"));
        String compCode = String.valueOf(session.get("compCode"));
        String parentGrp = String.valueOf(session.get("parentGroupCd"));
        String userName = String.valueOf(session.get("userName"));

        DBTransaction trx = (DBTransaction) getTransaction();
        CallableStatement st = null;
//        Object valid_dlr_result =callStoredFunction(Types.VARCHAR, "PKG_FDI.SF_VALID_DEALER(?,?,?)",
//                               new Object[] { parentGrp, dealerMapCd, locCd });
//        System.out.println("Valid Dealer result is::::" + valid_dlr_result);
//        if (valid_dlr_result.toString().equalsIgnoreCase("Y"))
//        {
//            String state = "begin pkg_fdi.SP_INS_REC_FDI(?,?,?,?,?,?,?);commit; end;";
//            try{
//                st = trx.createCallableStatement(state, 0);
//                st.setObject(1, parentGrp);
//                st.setObject(2, dealerMapCd);
//                st.setObject(3, locCd);
//                st.setObject(4, compCode);
//                st.setObject(5, this.getShReceiptsVO1()
//                                .getCurrentRow()
//                                .getAttribute("RecNum"));
//                st.registerOutParameter(6, Types.NUMERIC);
//                st.registerOutParameter(7, Types.VARCHAR);
//                st.execute();
//                if(st.getInt(6)>0){
//                    
//                }else{
//                    getDBTransaction().commit();
//                }
//            }catch (SQLException sqle) {
//            // TODO: Add catch code
//                sqle.printStackTrace();
//            } finally {
//                try {
//                    if (st != null) {
//                        st.close();
//                    }
//                } catch (Exception e) {
//                }
//            }
//            
//        }
        if(session.get("tallyIntegration").toString().equalsIgnoreCase("Y")){
        try {
            String stmt =
                "DECLARE \n" + "status BOOLEAN;  \n" + "result VARCHAR2(13); \n" + "\n" + "BEGIN \n" +
                "status := NULL; \n" + "PK_FINC_TRNS_INTERFACE.CUSTMR_RECPT( ?,?,?,?,?,?,?,?,?,?,status,?); \n" +
                "BEGIN \n" + "IF status THEN result := 'Yes'; \n" + "ELSIF NOT status THEN result := 'No'; \n" +
                "ELSE result := 'NULL'; \n" + "END IF;\n" + "END; \n" + "? := result;\n" + "COMMIT;\n" + "END ;";
            st = trx.createCallableStatement(stmt, 0);
            st.setObject(1, principalMapCd);
            st.setObject(2, parentGrp);
            st.setObject(3, dealerMapCd);
            st.setObject(4, locCd);
            st.setObject(5, compCode);
            st.setObject(6, "Receipt");
            st.setObject(7, this.getShReceiptsVO1()
                                .getCurrentRow()
                                .getAttribute("RecNum"));
            st.setObject(8, userName);
            st.setObject(9, Date.getCurrentDate());
            st.setObject(10, "O");
            st.registerOutParameter(11, Types.VARCHAR);
            st.registerOutParameter(12, Types.VARCHAR);
            st.executeUpdate();
            System.out.println("Result--------" + st.getString(11));
            System.out.println("Error result-----" + st.getString(12));
            pushDmsMsgProcCall();
        } catch (SQLException sqle) {
            // TODO: Add catch code
            sqle.printStackTrace();
        } finally {
            try {
                if (st != null) {
                    st.close();
                }
            } catch (Exception e) {
            }
        }
        } 
    }

    public void tallyIntegrationReceiptsCancel() {
        Map session = ADFContext.getCurrent().getSessionScope();
        Integer principalMapCd = Integer.parseInt(session.get("principalMapCd").toString());
        Integer dealerMapCd = Integer.parseInt(session.get("dealerMapCd").toString());
        String locCd = String.valueOf(session.get("locCd"));
        String compCode = String.valueOf(session.get("compCode"));
        String parentGrp = String.valueOf(session.get("parentGroupCd"));
        String userName = String.valueOf(session.get("userName"));

        DBTransaction trx = (DBTransaction) getTransaction();
        CallableStatement st = null;
        try {
            String stmt =
                "DECLARE \n" + "status BOOLEAN;  \n" + "result VARCHAR2(13); \n" + "\n" + "BEGIN \n" +
                "status := NULL; \n" + "PK_FINC_TRNS_INTERFACE.CUSTMR_RECPT_CANCEL( ?,?,?,?,?,?,?,?,?,?,status,?); \n" +
                "BEGIN \n" + "IF status THEN result := 'Yes'; \n" + "ELSIF NOT status THEN result := 'No'; \n" +
                "ELSE result := 'NULL'; \n" + "END IF;\n" + "END; \n" + "? := result;\n" + "COMMIT;\n" + "END ;";
            st = trx.createCallableStatement(stmt, 0);
            st.setObject(1, principalMapCd);
            st.setObject(2, parentGrp);
            st.setObject(3, dealerMapCd);
            st.setObject(4, locCd);
            st.setObject(5, compCode);
            st.setObject(6, "Dms Rcpt Cancel");
            st.setObject(7, this.getShReceiptsVO1()
                                .getCurrentRow()
                                    .getAttribute("RecNum"));
            st.setObject(8, userName);
            st.setObject(9, Date.getCurrentDate());
            st.setObject(10, "O");
            st.registerOutParameter(11, Types.VARCHAR);
            st.registerOutParameter(12, Types.VARCHAR);
            st.executeUpdate();
            System.out.println("Result--------" + st.getString(11));
            System.out.println("Error result-----" + st.getString(12));
            //                pushDmsMsgProcCall();
        } catch (SQLException sqle) {
            // TODO: Add catch code
            sqle.printStackTrace();
        } finally {
            try {
                if (st != null) {
                    st.close();
                }
            } catch (Exception e) {
            }
        }
    }

    /**
     * Container's getter for SdReceiptsVO3.
     * @return SdReceiptsVO3
     */
    public SdReceiptsVOImpl getSdReceiptsVO3() {
        return (SdReceiptsVOImpl) findViewObject("SdReceiptsVO3");
    }

    /**
     * Container's getter for ShReceiptsToSdReceiptsVL2.
     * @return ShReceiptsToSdReceiptsVL2
     */
    public ViewLinkImpl getShReceiptsToSdReceiptsVL2() {
        return (ViewLinkImpl) findViewLink("ShReceiptsToSdReceiptsVL2");
    }

    public void initStockIssue() {
        try {
            this.getStStktrIssVO1().executeEmptyRowSet();
            this.getStiSearchDualRO1().executeQuery();
        } catch (Exception e) {
            // TODO: Add catch code
            e.printStackTrace();
        }
    }

    /**
     * Container's getter for VehiclePriceListRO1.
     * @return VehiclePriceListRO1
     */
    public ViewObjectImpl getVehiclePriceListRO1() {
        return (ViewObjectImpl) findViewObject("VehiclePriceListRO1");
    }

    /**
     * Container's getter for ChargeLOVVO1.
     * @return ChargeLOVVO1
     */
    public ViewObjectImpl getChargeLOVVO1() {
        return (ViewObjectImpl) findViewObject("ChargeLOVVO1");
    }

    /**
     * Container's getter for VehicleChargeTypeLOV1.
     * @return VehicleChargeTypeLOV1
     */
    public VehicleChargeTypeLOVImpl getVehicleChargeTypeLOV1() {
        return (VehicleChargeTypeLOVImpl) findViewObject("VehicleChargeTypeLOV1");
    }

    /**
     * Container's getter for SmVChargesTVO2.
     * @return SmVChargesTVO2
     */
    public SmVChargesTVOImpl getSmVChargesTVO2() {
        return (SmVChargesTVOImpl) findViewObject("SmVChargesTVO2");
    }


    /**
     * @code This code is used to filter with card number
     */
    public Map filterLylCrdRfrlByCardNo(String cardNum) {
        Map map = new HashMap();
        ViewObjectImpl loyEnrolVo = this.getGdLoyaltyEnrolRO1();
        loyEnrolVo.clearViewCriterias();
        ViewCriteria vc = loyEnrolVo.getViewCriteriaManager().getViewCriteria("filterByCardNumberVC");
        VariableValueManager vvm = vc.ensureVariableManager();
        vvm.setVariableValue("bindCardNum", cardNum);
        loyEnrolVo.applyViewCriteria(vc);
        loyEnrolVo.executeQuery();
        if (loyEnrolVo.getEstimatedRowCount() > 0) {
            Row row = loyEnrolVo.first();
            if (row != null) {
                map.put("regMobile", row.getAttribute("RegMobile"));
                map.put("custName", row.getAttribute("CustName"));
            }
        }
        return map;
    }

    /**
     * Container's getter for GdLoyOtpLogRefRO1.
     * @return GdLoyOtpLogRefRO1
     */
    public ViewObjectImpl getGdLoyOtpLogRefRO1() {
        return (ViewObjectImpl) findViewObject("GdLoyOtpLogRefRO1");
    }

    /**
     * @code To obtain OTP for Loyalty Card Referral
     * @param map
     * @return
     */
    public Integer obtainOtp(String cardNum, String regMobile) {
        Integer otp = null;
        ViewObjectImpl otpVo = this.getGdLoyOtpLogRefRO1();
        otpVo.clearViewCriterias();
        otpVo.setNamedWhereClauseParam("bindCardNum", cardNum);
        otpVo.setNamedWhereClauseParam("bindRegMobile", regMobile);
        otpVo.executeQuery();
        if (otpVo.getEstimatedRowCount() > 0) {
            Row row = otpVo.first();
            if (row != null) {
                otp = (Integer) row.getAttribute("Otp");
            }
        }
        return otp;
    }

    /**
     * Container's getter for LoyCardRfrlOtpRO1.
     * @return LoyCardRfrlOtpRO1
     */
    public ViewObjectImpl getLoyCardRfrlOtpRO1() {
        return (ViewObjectImpl) findViewObject("LoyCardRfrlOtpRO1");
    }

    /**
     * @code This method is used to generate OTP for Loyalty Card Referral
     * @return
     */
    public Integer generateLoyCardReferralOTP() {
        Integer otp = null;
        ViewObjectImpl otpVo = this.getLoyCardRfrlOtpRO1();
        otpVo.executeQuery();
        if (otpVo.getEstimatedRowCount() > 0) {
            Row row = otpVo.first();
            if (row != null) {
                otp = (Integer) row.getAttribute("Selectobjects0");
            }
        }
        return otp;
    }

    /**
     * Container's getter for GdLoyOTPLogRefVO1.
     * @return GdLoyOTPLogRefVO1
     */
    public ViewObjectImpl getGdLoyOTPLogRefVO1() {
        return (ViewObjectImpl) findViewObject("GdLoyOTPLogRefVO1");
    }

    /**
     * @code This method is used to save generated OTP to
     * @param map
     */
    public void populateLoyCardOTP(Map map) {
        java.sql.Timestamp ts = new Timestamp(System.currentTimeMillis());
        Calendar cal = Calendar.getInstance();
        cal.setTime(ts);
        cal.add(Calendar.DAY_OF_WEEK, 1);
        ts.setTime(cal.getTime().getTime());
        ViewObjectImpl otpVO = this.getGdLoyOTPLogRefVO1();
        Row row = otpVO.createRow();
        row.setAttribute("CardNum", map.get("cardNum"));
        //row.setAttribute("CardType", map.get("cardType"));
        row.setAttribute("RegMobile", map.get("regMobile"));
        row.setAttribute("TransType", "REF");
        row.setAttribute("Otp", map.get("otp"));
        row.setAttribute("SentDateTime", new Timestamp(System.currentTimeMillis()));
        row.setAttribute("ValidUptoDateTime", ts);
        otpVO.insertRow(row);
        this.getDBTransaction().commit();
    }

    /**
     * Container's getter for LoyCardRfrlMsgTemplateRO1.
     * @return LoyCardRfrlMsgTemplateRO1
     */
    public ViewObjectImpl getLoyCardRfrlMsgTemplateRO1() {
        return (ViewObjectImpl) findViewObject("LoyCardRfrlMsgTemplateRO1");
    }

    /**
     * @code This method is used to send sms for Loyalty Card Referral
     * @param map
     * @return
     */
    public String exeSendSmsRef(Map map) {
        Map session = ADFContext.getCurrent().getSessionScope();
        String message = null;
        String templateId = null;
        String errMsg = null;
        CallableStatement st = null;
        try {
            ViewObjectImpl otpVo = this.getLoyCardRfrlMsgTemplateRO1();
            otpVo.setNamedWhereClauseParam("bindCustName", (String) map.get("custName"));
            otpVo.setNamedWhereClauseParam("bindDealerName", session.get("dealerName"));
            otpVo.setNamedWhereClauseParam("bindName", (String) map.get("name"));
            otpVo.setNamedWhereClauseParam("bindOtp", (Integer) map.get("otp"));
            otpVo.setNamedWhereClauseParam("bindRefMobile", (String) map.get("custMobile"));
            otpVo.executeQuery();
            if (otpVo.getEstimatedRowCount() > 0) {
                Row row = otpVo.first();
                if (row != null) {
                    message = (String) row.getAttribute("Selectobjects0");
                    templateId = (String) row.getAttribute("TemplateId");
                    if (message != null) {
                        DBTransaction trx = (DBTransaction) getTransaction();
                        String stmt = "begin pkg_loyalty.sp_send_sms_ref (?,?,?,?,?); commit;end;";
                        st = trx.createCallableStatement(stmt, 0);
                        st.setString(1, message);
                        st.setString(2, (String) map.get("regMobile"));
                        st.setString(3, templateId);
                        st.registerOutParameter(4, Types.INTEGER);
                        st.registerOutParameter(5, Types.VARCHAR);
                        st.executeUpdate();
                        errMsg = st.getString(5);
                    }
                }
            }
        } catch (SQLException sqle) {
            // TODO: Add catch code
            sqle.printStackTrace();
        } finally {
            try {
                if (st != null) {
                    st.close();
                }
            } catch (Exception e) {
            }
        }
        return errMsg;
    }

    /**
     * @code This code is used to filter with card number
     */
    public Map filterLylCrdRfrlByCardNoNRegMob(String cardType, String regMobile) {
        Map map = new HashMap();
        ViewObjectImpl loyEnrolVo = this.getGdLoyaltyEnrolRO1();
        loyEnrolVo.clearViewCriterias();
        ViewCriteria vc = loyEnrolVo.getViewCriteriaManager().getViewCriteria("filterByCardNumRegMobileVC");
        VariableValueManager vvm = vc.ensureVariableManager();
        vvm.setVariableValue("bind_card_type", cardType);
        vvm.setVariableValue("bind_ref_mobile_no", regMobile);
        loyEnrolVo.applyViewCriteria(vc);
        loyEnrolVo.executeQuery();
        if (loyEnrolVo.getEstimatedRowCount() > 0) {
            Row row = loyEnrolVo.first();
            if (row != null) {
                map.put("cardNum", row.getAttribute("CardNum"));
                map.put("custName", row.getAttribute("CustName"));
            }
        }
        return map;
    }


    /**
     * Container's getter for LoyaltyCardRfrlCeoTemplateRO1.
     * @return LoyaltyCardRfrlCeoTemplateRO1
     */
    public ViewObjectImpl getLoyaltyCardRfrlCeoTemplateRO1() {
        return (ViewObjectImpl) findViewObject("LoyaltyCardRfrlCeoTemplateRO1");
    }

    /**
     * @code This method is used to send sms for Loyalty Card Referral for GM OTP
     * @param map
     * @return
     */
    public String exeSendSmsGM(Map map) {
        String message = null;
        String templateId = null;
        String errMsg = null;
        CallableStatement st = null;
        try {
            ViewObjectImpl otpVo = this.getLoyaltyCardRfrlCeoTemplateRO1();
            otpVo.setNamedWhereClauseParam("bindCustName", map.get("custName"));
            otpVo.setNamedWhereClauseParam("bindName", map.get("name"));
            otpVo.setNamedWhereClauseParam("bindOtp", map.get("otp"));
            otpVo.setNamedWhereClauseParam("bindRefBy", map.get("refBy"));
            otpVo.executeQuery();
            if (otpVo.getEstimatedRowCount() > 0) {
                Row row = otpVo.first();
                if (row != null) {
                    message = (String) row.getAttribute("Message");
                    templateId = (String) row.getAttribute("TemplateId");
                    if (message != null) {
                        DBTransaction trx = (DBTransaction) getTransaction();
                        String stmt = "begin pkg_loyalty.sp_send_sms_ref (?,?,?,?,?);commit; end;";
                        st = trx.createCallableStatement(stmt, 0);
                        st.setString(1, message);
                        st.setString(2, (String) map.get("regMobile"));
                        st.setString(3, templateId);
                        st.registerOutParameter(4, Types.INTEGER);
                        st.registerOutParameter(5, Types.VARCHAR);
                        st.executeUpdate();
                        errMsg = st.getString(5);
                    }
                }
            }
        } catch (SQLException sqle) {
            // TODO: Add catch code
            sqle.printStackTrace();
        } finally {
            try {
                if (st != null) {
                    st.close();
                }
            } catch (Exception e) {
            }
        }
        
        return errMsg;
    }

    /**
     * Container's getter for StStktrChargesVO1.
     * @return StStktrChargesVO1
     */
    public ViewObjectImpl getStStktrChargesVO1() {
        return (ViewObjectImpl) findViewObject("StStktrChargesVO1");
    }

    /**
     * Container's getter for StStktrIssToStStktrChargesVL1.
     * @return StStktrIssToStStktrChargesVL1
     */
    public ViewLinkImpl getStStktrIssToStStktrChargesVL1() {
        return (ViewLinkImpl) findViewLink("StStktrIssToStStktrChargesVL1");
    }

    public void grnFetchResults() {
        ViewObjectImpl vo1 = this.getShGrnVO1();
        Row row = vo1.getCurrentRow();
        ViewObjectImpl vo = this.getSdGrnVO1();
        vo.setNamedWhereClauseParam("bind_grn_num", (String) row.getAttribute("GrnNum"));
        vo.executeQuery();
    }

    /**
     * Container's getter for OrderRefundRVO2.
     * @return OrderRefundRVO2
     */
    public ViewObjectImpl getOrderRefundRVO2() {
        return (ViewObjectImpl) findViewObject("OrderRefundRVO2");
    }

    /**
     * Container's getter for EligibleEmployeeDateRVO1.
     * @return EligibleEmployeeDateRVO1
     */
    public ViewObjectImpl getEligibleEmployeeDateRVO1() {
        return (ViewObjectImpl) findViewObject("EligibleEmployeeDateRVO1");
    }

    /**
     * Container's getter for AmMulParamRO1.
     * @return AmMulParamRO1
     */
    public ViewObjectImpl getAmMulParamRO1() {
        return (ViewObjectImpl) findViewObject("AmMulParamRO1");
    }

    /**
     * Container's getter for AmDocsRO1.
     * @return AmDocsRO1
     */
    public ViewObjectImpl getAmDocsRO1() {
        return (ViewObjectImpl) findViewObject("AmDocsRO1");
    }

    /**
     * Container's getter for ParameterKCESStateVO1.
     * @return ParameterKCESStateVO1
     */
    public ViewObjectImpl getParameterKCESStateVO1() {
        return (ViewObjectImpl) findViewObject("ParameterKCESStateVO1");
    }

    public String callSFLoyDealer(String parent, Integer dealer, String loc) {
        Map session = ADFContext.getCurrent().getSessionScope();
        Object principalMapCd = session.get("principalMapCd");
        Integer principalMapCdi = new Integer(principalMapCd.toString());
        if (principalMapCdi == 1) {
            Object result =
                callStoredFunction(Types.VARCHAR, "pkg_loyalty.SF_LOY_DEALER(?,?,?)",
                                   new Object[] { parent, dealer, loc });
            return result != null ? result.toString() : null;
        }
        return null;
    }

    /**
     * Container's getter for ParameterfastTagLOV1.
     * @return ParameterfastTagLOV1
     */
    public ViewObjectImpl getParameterfastTagLOV1() {
        return (ViewObjectImpl) findViewObject("ParameterfastTagLOV1");
    }

    public String getCustomerTitle(String custcd) {
        DBTransaction trx = (DBTransaction) getTransaction();
        CallableStatement st = null;
        String custNm = null;
        Map session = ADFContext.getCurrent().getSessionScope();
        Object principalMapCd = session.get("principalMapCd");
        Integer principalMapCdi = new Integer(principalMapCd.toString());
        try {
            // 1. Define the PL/SQL block for the statement to invoke
            String stmt = "begin SP_GET_CUST_TITLE (?,?,?,?,?); end;";
            // 2. Create the CallableStatement for the PL/SQL block
            st = trx.createCallableStatement(stmt, 0);
            // 3. Register the positions and types of the OUT parameters

            // 4. Set the bind values of the IN parameters
            st.setInt(1, principalMapCdi.intValue());
            st.setString(2, custcd);
            st.registerOutParameter(3, Types.VARCHAR);
            st.registerOutParameter(4, Types.VARCHAR);
            st.registerOutParameter(5, Types.INTEGER);
            // 5. Execute the statement
            st.executeUpdate();

            String error_msg = st.getString(4);
            int err = st.getInt(5);
            if (err > 0) {

            } else {
                custNm = st.getString(3);
            }

        } catch (Exception sqle) {
            // TODO: Add catch code
            sqle.printStackTrace();
        } finally {
            try {
                if (st != null) {
                    st.close();
                }
            } catch (Exception e) {
            }
        }

        return custNm;
    }

    public ArrayList<String> gstChangesCustId(String custCd, String dealer, String parent, String loc) {
        Map session = ADFContext.getCurrent().getSessionScope();
        Object principalMapCd = session.get("principalMapCd");
        Integer principalMapCdi = new Integer(principalMapCd.toString());
        Row salesInvRw = this.getSalesInvoiceVO1().getCurrentRow();
        ViewObjectImpl gmCin = this.getGmCinRO1();
        gmCin.applyViewCriteria(gmCin.getViewCriteria("GmCinROCriteria"));
        gmCin.setNamedWhereClauseParam("bindCustCd", custCd);
        gmCin.setNamedWhereClauseParam("bindPrinciCd", principalMapCdi);
        gmCin.executeQuery();
        
//        ViewObjectImpl gdCinVO = this.getGdCinRO1();
//        gdCinVO.applyViewCriteria(gdCinVO.getViewCriteria("CustCdWithGloalValuesVC"));
//        gdCinVO.setNamedWhereClauseParam("bind_custCd", custCd);
//        gdCinVO.executeQuery();
        
        ArrayList<String> list = new ArrayList<String>();
        
        
        String stateCd = (String) gmCin.first().getAttribute("StateCd");
        String custSEZ = (String) gmCin.first().getAttribute("CustSez");
        String gstNum = (String) gmCin.first().getAttribute("GstNum");
        String spvFlag = (String) gmCin.first().getAttribute("SpvFlag");
        String tcsApplicable = gmCin.first().getAttribute("TcsApplicable")!=null?(String) gmCin.first().getAttribute("TcsApplicable"):"Y";
//        BigDecimal outStandingAmt = (BigDecimal)gdCinVO.first().getAttribute("OutstandingAmt");
        if (stateCd != null) {
            DBTransaction trx = (DBTransaction) getTransaction();
            CallableStatement st = null;
            String custNm = null;
            try {
                // 1. Define the PL/SQL block for the statement to invoke
                String stmt = "begin SP_GET_GST_STATE (?,?,?,?,?,?,?,?,?,?,?); end;";
                // 2. Create the CallableStatement for the PL/SQL block
                st = trx.createCallableStatement(stmt, 0);
                // 3. Register the positions and types of the OUT parameters

                // 4. Set the bind values of the IN parameters
                st.setInt(1, principalMapCdi.intValue());
                st.setString(2, custCd);
                st.setObject(3, dealer);
                st.setObject(4, parent);
                st.setObject(5, loc);
                st.registerOutParameter(6, Types.VARCHAR);
                st.registerOutParameter(7, Types.VARCHAR);
                st.registerOutParameter(8, Types.VARCHAR);
                st.registerOutParameter(9, Types.VARCHAR);
                st.registerOutParameter(10, Types.VARCHAR);
                st.registerOutParameter(11, Types.INTEGER);
                // 5. Execute the statement
                st.executeUpdate();

                String error_msg = st.getString(10);
                int err = st.getInt(11);
                if (err > 0) {


                } else {
                    String custStateCd = st.getString(6);
                    String dealerState = st.getString(7);
                    String custStDesc = st.getString(8);
                    String dlrStDesc = st.getString(9);


                    salesInvRw.setAttribute("StateDescTrans", custStDesc);
                    salesInvRw.setAttribute("GstStatecd", custStateCd);
                    Map pageFlow = ADFContext.getCurrent().getPageFlowScope();
                    System.out.println("Dealer State Code----------> "+dealerState);
                    pageFlow.put("#{pageFlowScope.DEALER_GST_CD}", dealerState);
                    setPageFlowParameters("#{pageFlowScope.DEALER_GST_CD}",dealerState);
                    System.out.println("Dealer State Code----------> "+pageFlow.get("DEALER_GST_CD"));
                    
                    list.add(custSEZ);
                    list.add(custStateCd);
                    list.add(dealerState);
                    list.add(gstNum);
                    list.add(spvFlag);
                    list.add(tcsApplicable);
                }

            } catch (Exception sqle) {
                // TODO: Add catch code
                sqle.printStackTrace();
            } finally {
                try {
                    if (st != null) {
                        st.close();
                    }
                } catch (Exception e) {
                }
            }
        }
        return list;
    }

    /**
     * Container's getter for GmCinRO1.
     * @return GmCinRO1
     */
    public ViewObjectImpl getGmCinRO1() {
        return (ViewObjectImpl) findViewObject("GmCinRO1");
    }

    /**
     * Container's getter for ShOrdbookDataLOV1.
     * @return ShOrdbookDataLOV1
     */
    public ViewObjectImpl getShOrdbookDataLOV1() {
        return (ViewObjectImpl) findViewObject("ShOrdbookDataLOV1");
    }

    /**
     * Container's getter for StSuppVO1.
     * @return StSuppVO1
     */
    public StSuppVOImpl getStSuppVO1() {
        return (StSuppVOImpl) findViewObject("StSuppVO1");
    }


    public String populateOrdDetails(String ordNum) {
        Row salesInvRw = this.getSalesInvoiceVO1().getCurrentRow();

        DBTransaction dbtxn = (DBTransaction) getTransaction();
        CallableStatement cs = null;

        Map pageFlow = ADFContext.getCurrent().getPageFlowScope();


        /**
         * Call of SP_GET_ALT_ORD_DETAILS_FOR_STK
         */
        java.sql.Timestamp datetime = new java.sql.Timestamp(System.currentTimeMillis());
        Map session = ADFContext.getCurrent().getSessionScope();
        String user = session.get("userId").toString();
        Integer principalMapCd = Integer.parseInt(session.get("principalMapCd").toString());
        Integer dealerMapCd = Integer.parseInt(session.get("dealerMapCd").toString());
        String locCd = String.valueOf(session.get("locCd"));
        String compCode = String.valueOf(session.get("compCode"));
        String parentGrp = String.valueOf(session.get("parentGroupCd"));
        String batchId = user + datetime + "INV";
        String stmt =
            "begin DMS2_ALT_ORD_DETAILS_FOR_STK(?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?); end;";


        try {
            cs = dbtxn.createCallableStatement(stmt, 0);

            cs.setObject(1, dealerMapCd); //p_dealer
            cs.setObject(2, principalMapCd); //pmc
            cs.setObject(3, locCd); //locd
            cs.setObject(4, compCode); //comp
            cs.setObject(5, parentGrp); // parent
            cs.setObject(6, salesInvRw.getAttribute("InvType"));
            cs.setObject(7, salesInvRw.getAttribute("BillNature"));
            cs.setObject(8, ordNum);
            cs.setObject(9, salesInvRw.getAttribute("InvDate"));
            cs.setObject(10, salesInvRw.getAttribute("PriceForCd"));
            cs.registerOutParameter(11, Types.DATE); // ord date
            cs.registerOutParameter(12, Types.VARCHAR); //
            cs.registerOutParameter(13, Types.DATE); //
            cs.registerOutParameter(14, Types.VARCHAR); //
            cs.registerOutParameter(15, Types.VARCHAR); //
            cs.registerOutParameter(16, Types.VARCHAR); //
            cs.registerOutParameter(17, Types.VARCHAR); //
            cs.registerOutParameter(18, Types.VARCHAR); //
            cs.registerOutParameter(19, Types.VARCHAR); //
            cs.registerOutParameter(20, Types.VARCHAR); //
            cs.registerOutParameter(21, Types.VARCHAR); //
            cs.registerOutParameter(22, Types.VARCHAR); //
            cs.registerOutParameter(23, Types.VARCHAR); //
            cs.registerOutParameter(24, Types.VARCHAR); //
            cs.registerOutParameter(25, Types.VARCHAR); //
            cs.registerOutParameter(26, Types.VARCHAR); //
            cs.registerOutParameter(27, Types.VARCHAR); //
            cs.registerOutParameter(28, Types.VARCHAR); //
            cs.registerOutParameter(29, Types.VARCHAR); //
            cs.registerOutParameter(30, Types.VARCHAR); //
            cs.registerOutParameter(31, Types.VARCHAR); //
            cs.registerOutParameter(32, Types.VARCHAR); //
            cs.registerOutParameter(33, Types.VARCHAR); //
            cs.registerOutParameter(34, Types.VARCHAR); //
            cs.registerOutParameter(35, Types.VARCHAR); //
            cs.registerOutParameter(36, Types.VARCHAR); //
            cs.registerOutParameter(37, Types.VARCHAR); // p_key_num
            cs.registerOutParameter(38, Types.NUMERIC);
            cs.registerOutParameter(39, Types.NUMERIC);
            cs.registerOutParameter(40, Types.NUMERIC);
            cs.registerOutParameter(41, Types.NUMERIC);
            cs.registerOutParameter(42, Types.NUMERIC); //p_ndp
            cs.registerOutParameter(43, Types.VARCHAR); //
            cs.registerOutParameter(44, Types.VARCHAR); //
            cs.registerOutParameter(45, Types.VARCHAR); //
            cs.registerOutParameter(46, Types.VARCHAR); //p_err_msg
            cs.registerOutParameter(47, Types.NUMERIC); //
            cs.registerOutParameter(48, Types.NUMERIC); //
            cs.registerOutParameter(49, Types.VARCHAR);
            cs.setObject(50, batchId);
            cs.setObject(51, "INS");
            cs.execute();
            Integer errCd = cs.getInt(47);
            String errMsg = cs.getString(46);

            if (errMsg == null) {
                if (cs.getDate(11) != null) {
                    salesInvRw.setAttribute("OrderDate", new oracle.jbo.domain.Date(cs.getDate(11)));
                }
                if (cs.getString(12) != null) {
                    salesInvRw.setAttribute("AllotNum", cs.getString(12));
                }
                if (cs.getDate(13) != null) {
                    salesInvRw.setAttribute("AllotDate", new oracle.jbo.domain.Date(cs.getDate(13)));
                }
                if (cs.getString(14) != null) {
                    salesInvRw.setAttribute("AreaCd", cs.getString(14));
                }
                if (cs.getString(15) != null) {
                    salesInvRw.setAttribute("SalesmanCd", cs.getString(15));
                }
                if (cs.getString(16) != null) {
                    salesInvRw.setAttribute("SalesType", cs.getString(16));
                }
                if (cs.getString(17) != null) {
                    salesInvRw.setAttribute("FiCd", cs.getString(17));
                }
                if (cs.getString(18) != null) {
                    salesInvRw.setAttribute("FinCash", cs.getString(18));
                }
                if (cs.getString(19) != null) {
                    salesInvRw.setAttribute("Branch", cs.getString(19));
                }
                if (cs.getString(20) != null) {
                    salesInvRw.setAttribute("HypoAmt", new BigDecimal(cs.getString(20)));
                }
                if (cs.getString(21) != null) {
                    salesInvRw.setAttribute("EnqRAddress1", cs.getString(21));
                }
                if (cs.getString(22) != null) {
                    salesInvRw.setAttribute("EnqRAddress2", cs.getString(22));
                }
                if (cs.getString(23) != null) {
                    salesInvRw.setAttribute("EnqRAddress3", cs.getString(23));
                }
                if (cs.getString(24) != null) {
                    salesInvRw.setAttribute("EnqRCityCd", cs.getString(24));
                }
                if (cs.getString(25) != null) {
                    salesInvRw.setAttribute("EnqRCityDesc", cs.getString(25));
                }
                if (cs.getString(26) != null) {
                    salesInvRw.setAttribute("EnqRPinCd", cs.getString(26));
                }
                if (cs.getString(27) != null) {
                    salesInvRw.setAttribute("ModelCd", cs.getString(27));
                }
                if (cs.getString(28) != null) {
                    salesInvRw.setAttribute("ModelDesc", cs.getString(28));
                }
                if (cs.getString(29) != null) {
                    salesInvRw.setAttribute("VariantCd", cs.getString(29));
                }
                if (cs.getString(30) != null) {
                    salesInvRw.setAttribute("VariantDesc", cs.getString(30));
                }
                if (cs.getString(31) != null) {
                    salesInvRw.setAttribute("EcolorCd", cs.getString(31));
                }
                if (cs.getString(32) != null) {
                    salesInvRw.setAttribute("ColorDesc", cs.getString(32));
                }
                if (cs.getString(33) != null) {
                    salesInvRw.setAttribute("Vin", cs.getString(33));
                }
                if (cs.getString(34) != null) {
                    salesInvRw.setAttribute("ChassisNum", cs.getString(34));
                }
                if (cs.getString(35) != null) {
                    salesInvRw.setAttribute("EngineNum", cs.getString(35));
                }
                if (cs.getString(36) != null) {
                    salesInvRw.setAttribute("EnginePf", cs.getString(36));
                }
                if (cs.getString(37) != null) {
                    salesInvRw.setAttribute("KeyNum", cs.getString(37));
                }
                if (cs.getObject(38) != null) {
                    salesInvRw.setAttribute("BookingAmt", new BigDecimal(cs.getString(38)));
                }
                if (cs.getObject(39) != null) {
                    salesInvRw.setAttribute("RecdAmt", new BigDecimal(cs.getString(39)));
                }
                if (cs.getObject(40) != null) {
                    salesInvRw.setAttribute("SellPrice", new BigDecimal(cs.getString(40)));
                }
                if (cs.getObject(41) != null) {
                    salesInvRw.setAttribute("AccessoryPrice", new BigDecimal(cs.getString(41)));
                }
                if (cs.getObject(42) != null) {
                    salesInvRw.setAttribute("Ndp", new BigDecimal(cs.getString(42)));
                }
                if (cs.getString(43) != null) {
                    salesInvRw.setAttribute("Relation", cs.getString(43));
                }
                if (cs.getString(44) != null) {
                    salesInvRw.setAttribute("RelationName", cs.getString(44));
                }
                if (cs.getString(45) != null) {
                    salesInvRw.setAttribute("VehStatus", cs.getString(45));
                }
                Integer recCnt = cs.getInt(48);

                if (cs.getString(49) != null) {
                    String schemCd = cs.getString(49);
                    pageFlow.put("#{pageFlowScope.P_SCHEM_CD}", schemCd);
                    setPageFlowParameters("#{pageFlowScope.P_SCHEM_CD}",schemCd);
                }
                pageFlow.put("#{pageFlowScope.REC_CNT}", recCnt);
                setPageFlowParameters("#{pageFlowScope.REC_CNT}",recCnt);
                
                if(recCnt>0){
                    ViewObjectImpl altDetailsVO = this.getDms2AltOrdDetailsVO1();
                    altDetailsVO.applyViewCriteria(altDetailsVO.getViewCriteria("Dms2AltOrdDetailsVOCriteria"));
                    altDetailsVO.setNamedWhereClauseParam("bindBatchId", batchId);
                    altDetailsVO.executeQuery();
                    
                    ViewObjectImpl recDetails = this.getRecptDetailsPopupVO1();
                    
                    RowSetIterator altRSI = altDetailsVO.createRowSetIterator(null);
                    while(altRSI.hasNext()){
                        Row altRw = altRSI.next();
                        Row recRw = recDetails.createRow();
                        recRw.setAttribute("RecNum", altRw.getAttribute("Col1"));
                        recRw.setAttribute("RecDate", altRw.getAttribute("Col2")!=null?new oracle.jbo.domain.Date(altRw.getAttribute("Col2").toString()):null);
                        recRw.setAttribute("RecApAmt", altRw.getAttribute("Col3"));
                        recDetails.insertRow(recRw);
                        
                    }
                }
            } else {
                return errCd.toString()+"-"+errMsg;
            }
        } catch (SQLException sqle) {
            // TODO: Add catch code
            sqle.printStackTrace();
        } finally {
            try {
                cs.close();
            } catch (SQLException sqle) {
                // TODO: Add catch code
                sqle.printStackTrace();
            }
        }
        /**
                 * HSN start
                 */
        ViewObjectImpl sdGrnVO = this.getSdGrmRO1();
        sdGrnVO.applyViewCriteria(sdGrnVO.getViewCriteria("VinVC"));
        sdGrnVO.setNamedWhereClauseParam("bind_vin", salesInvRw.getAttribute("Vin"));
        sdGrnVO.executeQuery();

        if (sdGrnVO.getEstimatedRowCount() > 0) {
            String hsn = (String) sdGrnVO.first().getAttribute("Hsn");
            if (hsn != null && hsn.equalsIgnoreCase("NOHSN")) {
                ViewObjectImpl gmVar = this.getGmVarRO1();
                gmVar.applyViewCriteria(gmVar.getViewCriteria("PmcAndVarCdVC"));
                gmVar.setNamedWhereClauseParam("bind_principalMapCd", principalMapCd);
                gmVar.setNamedWhereClauseParam("bind_varCode", salesInvRw.getAttribute("VariantCd"));
                gmVar.executeQuery();
                if (gmVar.getEstimatedRowCount() > 0) {
                    hsn = (String) gmVar.first().getAttribute("Hsn");
                    if (hsn != null && hsn.equalsIgnoreCase("NOHSN")) {
                        salesInvRw.setAttribute("Hsn", "8703");
                    }
                } else {
                    salesInvRw.setAttribute("Hsn", "8703");
                }
            }
        } else {
            salesInvRw.setAttribute("Hsn", "8703");
        }

        /**
                  * GST num
                  */
        ViewObjectImpl voiAmDlr = this.getAmDealerLocParamVO1();
        ViewCriteria vc = voiAmDlr.getViewCriteria("AmDealerLocParamVC");
        voiAmDlr.applyViewCriteria(vc);
        voiAmDlr.setNamedWhereClauseParam("bind_dealerMapCd", dealerMapCd);
        voiAmDlr.setNamedWhereClauseParam("bind_locCode", locCd);
        voiAmDlr.setNamedWhereClauseParam("bind_parentGroupCd", parentGrp);
        voiAmDlr.executeQuery();
        if (voiAmDlr.first() != null) {
            salesInvRw.setAttribute("GstnDealer", voiAmDlr.first().getAttribute("GstNum"));
        } else {
            salesInvRw.setAttribute("GstnDealer", "GSTUNREGISTERED");
        }
        return null;
    }

    /**
     * Container's getter for Dms2AltOrdDetailsVO1.
     * @return Dms2AltOrdDetailsVO1
     */
    public ViewObjectImpl getDms2AltOrdDetailsVO1() {
        return (ViewObjectImpl) findViewObject("Dms2AltOrdDetailsVO1");
    }

    /**
     * Container's getter for MiNameLOV1.
     * @return MiNameLOV1
     */
    public ViewObjectImpl getMiNameLOV1() {
        return (ViewObjectImpl) findViewObject("MiNameLOV1");
    }

    /**
     * Container's getter for CtrlDualVO1.
     * @return CtrlDualVO1
     */
    public ViewObjectImpl getCtrlDualVO1() {
        return (ViewObjectImpl) findViewObject("CtrlDualVO1");
    }

    /**
     * Container's getter for DocPrintVO1.
     * @return DocPrintVO1
     */
    public ViewObjectImpl getDocPrintVO1() {
        return (ViewObjectImpl) findViewObject("DocPrintVO1");
    }

    /**
     * Container's getter for ShOrdBookStSupportVL1.
     * @return ShOrdBookStSupportVL1
     */
    public ViewLinkImpl getShOrdBookStSupportVL1() {
        return (ViewLinkImpl) findViewLink("ShOrdBookStSupportVL1");
    }

    /**
     * Container's getter for FromDateEligibleEmployeeOutOfTrainingLOV1.
     * @return FromDateEligibleEmployeeOutOfTrainingLOV1
     */
    public ViewObjectImpl getFromDateEligibleEmployeeOutOfTrainingLOV1() {
        return (ViewObjectImpl) findViewObject("FromDateEligibleEmployeeOutOfTrainingLOV1");
    }
    /**
     * This method is used to send sms for Loyalty Card Referral for GM OTP
     * @param map
     * @return
     */
    public String exeSendSmsReferee(Map map) {
        String message = null;
        String templateId = null;
        String errMsg = null;
        CallableStatement st = null;
        Map session = ADFContext.getCurrent().getSessionScope();
        try {
            ViewObjectImpl otpVo = this.getLoyaltyCardRefereeTemplateRO1();
            otpVo.setNamedWhereClauseParam("bindRefereeName", map.get("refereeName"));
            otpVo.setNamedWhereClauseParam("bindReferredBy", map.get("referredBy"));
            otpVo.setNamedWhereClauseParam("bindROtp", map.get("otp"));
            otpVo.setNamedWhereClauseParam("dealerName", session.get("dealerName"));
            otpVo.executeQuery();
            if (otpVo.getEstimatedRowCount() > 0) {
                Row row = otpVo.first();
                if (row != null) {
                    message = (String) row.getAttribute("Selectobjects0");
                    templateId = (String) row.getAttribute("TemplateId");
                    if (message != null) {
                        DBTransaction trx = (DBTransaction) getTransaction();
                        String stmt = "begin pkg_loyalty.sp_send_sms_ref (?,?,?,?,?);commit; end;";
                        st = trx.createCallableStatement(stmt, 0);
                        st.setString(1, message);
                        st.setString(2, (String) map.get("regMobile"));
                        st.setString(3, templateId);
                        st.registerOutParameter(4, Types.INTEGER);
                        st.registerOutParameter(5, Types.VARCHAR);
                        st.executeUpdate();
                        errMsg = st.getString(5);
                    }
                }
            }
        } catch (SQLException sqle) {
            // TODO: Add catch code
            sqle.printStackTrace();
        } finally {
            try {
                if (st != null) {
                    st.close();
                }
            } catch (Exception e) {
            }
        }

        return errMsg;
    }

    /**
     * Container's getter for LoyaltyCardRefereeTemplateRO1.
     * @return LoyaltyCardRefereeTemplateRO1
     */
    public ViewObjectImpl getLoyaltyCardRefereeTemplateRO1() {
        return (ViewObjectImpl) findViewObject("LoyaltyCardRefereeTemplateRO1");
    }
    
    public String onChangeIndentNoInIssue(String dealer_map_code,String parent_group_cd,Integer pmc,String loc_code,String comp_fa)
    {
        System.out.println("-----------------------onChangeIndentNoInIssue -----");
    System.out.println("dealer_map_code:"+dealer_map_code);    
        System.out.println("parent_group_cd:"+parent_group_cd);
        System.out.println("pmc:"+pmc);
        System.out.println("loc_code:"+loc_code);
        System.out.println("comp_fa:"+comp_fa);
    ViewObjectImpl voiIssue=this.getStStktrIssVO1();
    StStktrIssVORowImpl issueRw=(StStktrIssVORowImpl)voiIssue.getCurrentRow();
    String var_cd=null,color_cd=null;
    
    System.out.println("issueRw.getStkindNum()------------------>"+issueRw.getStkindNum());
    if(issueRw.getStkindNum()!=null && issueRw.getStktrIssNum()==null)
        {
            DBTransaction trx = (DBTransaction) getTransaction();
            CallableStatement st = null;
            try {
                String stmt =
                    "begin SP_GET_INDENT_GRN_DETAILS(?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?); end;";
                st = trx.createCallableStatement(stmt, 0);
                st.setObject(1, dealer_map_code);
                st.setObject(2, pmc);
                st.setObject(3, loc_code);
                st.setObject(4, comp_fa);
                st.setObject(5, parent_group_cd);
                st.setObject(6, issueRw.getStkindNum());
                st.setObject(7, issueRw.getStktrIssDate());
                st.setObject(8, issueRw.getIssueType());
                st.setObject(9, issueRw.getToDlrCd());
                st.setObject(10, issueRw.getToLocCd());
                st.registerOutParameter(11, Types.DATE);//IND DATE
                st.registerOutParameter(12, Types.VARCHAR);//VIN
                st.registerOutParameter(13, Types.VARCHAR);//INV NUM 
                st.registerOutParameter(14, Types.DATE);//INV DATE
                st.registerOutParameter(15, Types.VARCHAR);//PO NUM
                st.registerOutParameter(16, Types.DATE);//PO DATE
                st.registerOutParameter(17, Types.VARCHAR);//GRN NUM
                st.registerOutParameter(18, Types.DATE);//GRN DATE
                st.registerOutParameter(19, Types.VARCHAR);//MODEL CODE
                st.registerOutParameter(20, Types.VARCHAR);//MODEL DESC
                st.registerOutParameter(21, Types.VARCHAR);//VARIANT CODE
                st.registerOutParameter(22, Types.VARCHAR);//VARINT DESC
                st.registerOutParameter(23, Types.VARCHAR);//COLOR CODE
                st.registerOutParameter(24, Types.VARCHAR);//COLOR DESC
                st.registerOutParameter(25, Types.VARCHAR);//ENG NUM
                st.registerOutParameter(26, Types.VARCHAR);//KEY NUM
                st.registerOutParameter(27, Types.VARCHAR);//CHASSIS
                st.registerOutParameter(28, Types.VARCHAR);//REMARKS
                st.registerOutParameter(29, Types.NUMERIC);//NDP
                st.registerOutParameter(30, Types.NUMERIC);//SELL PRICE
                st.registerOutParameter(31, Types.NUMERIC);//LANDED COST
                st.registerOutParameter(32, Types.VARCHAR);//ERROR MESSAGE
                st.registerOutParameter(33, Types.INTEGER);//
                st.executeUpdate();
                System.out.println("---------SP_GET_INDENT_GRN_DETAILS Error Code-------------"+st.getInt(33));
                System.out.println("---------SP_GET_INDENT_GRN_DETAILS Error Name-------------"+st.getString(32));
                if(st.getInt(33)>0)
                {
                    issueRw.setStkindNum(null);    
                return st.getString(32);
                }
                else
                {
                    
                    Row rwAtrIssue=voiIssue.getCurrentRow();
                    String lv_var=null,lv_col=null;
                    rwAtrIssue.setAttribute("IndentDateT",st.getObject(11));
                    
                    System.out.println("Vin number is::::::::::::::::::---------------->"+st.getObject(12));
                    rwAtrIssue.setAttribute("InvoiceNum", st.getObject(13));
                    System.out.println("##############Invoice Date is::::::::"+st.getObject(14));
                    
                    rwAtrIssue.setAttribute("InvoiceDate", st.getObject(14));
                    rwAtrIssue.setAttribute("PoNum", st.getObject(15));
                    rwAtrIssue.setAttribute("PoDateT", st.getObject(16));
                    rwAtrIssue.setAttribute("GrnNum", st.getObject(17));
                    System.out.println("##############Grn Date is:::::::::::::::"+st.getObject(18));
                    rwAtrIssue.setAttribute("GrnDate", st.getObject(18));
                    rwAtrIssue.setAttribute("IndentModelT", st.getObject(19));
                    rwAtrIssue.setAttribute("IndentModelDescT", st.getObject(20));
                    System.out.println("st.getObject(21)--------------->"+st.getObject(21));
                    lv_var=st.getObject(21)!=null?st.getObject(21).toString():null;
                    if(st.getObject(21)!=null)
                    {
                    rwAtrIssue.setAttribute("VariantCd", st.getObject(21));
                    }
                    rwAtrIssue.setAttribute("IndentVariantT", st.getObject(22));
                    rwAtrIssue.setAttribute("IndentVariantDescT", st.getObject(22));
                    //rwAtrIssue.setAttribute("VariantDescT", st.getObject(22));//VARIANT CD
                    lv_col=st.getObject(23)!=null?st.getObject(23).toString():null;
                    //rwAtrIssue.setAttribute("EcolorCd", st.getObject(23));
                    rwAtrIssue.setAttribute("IndentColorT", st.getObject(24));
                    rwAtrIssue.setAttribute("IndentColorDescT", st.getObject(24));
                    //rwAtrIssue.setAttribute("ColorDescT", st.getObject(24));//ECOLR DESC
                    
                    rwAtrIssue.setAttribute("EngineNum", st.getObject(25));
                    rwAtrIssue.setAttribute("KeyNum", st.getObject(26));
                    rwAtrIssue.setAttribute("IndentChassisT", st.getObject(27));
                    if(st.getObject(27)!=null)
                    {
                    rwAtrIssue.setAttribute("ChassisNum", st.getObject(27));
                    }
                    rwAtrIssue.setAttribute("IndentRemarksT", st.getObject(28));
                    rwAtrIssue.setAttribute("NetDealerPrice", st.getObject(29));
                    rwAtrIssue.setAttribute("SellingPrice", st.getObject(30));
                    rwAtrIssue.setAttribute("LandedCost", st.getObject(31));
                        rwAtrIssue.setAttribute("Vin", st.getObject(12));
                    System.out.println("Vin getter is::::::::::"+rwAtrIssue.getAttribute("Vin"));
                    System.out.println("rwAtrIssue.getAttribute(\"IndentChassisT\")"+rwAtrIssue.getAttribute("IndentChassisT"));
                   if(rwAtrIssue.getAttribute("IndentChassisT")!=null)
                   {
                       System.out.println("LV VAR IS::::::::::::::"+lv_var);
                        System.out.println("LV COL IS::::::::::::::"+lv_col);

                        rwAtrIssue.setAttribute("ChassisNum", rwAtrIssue.getAttribute("IndentChassisT"));
                        rwAtrIssue.setAttribute("VariantCd",lv_var);
                        rwAtrIssue.setAttribute("VariantDescT",rwAtrIssue.getAttribute("IndentVariantDescT"));
                        rwAtrIssue.setAttribute("EcolorCd",lv_col);
                        rwAtrIssue.setAttribute("ColorDescT",rwAtrIssue.getAttribute("IndentColorDescT"));
                        rwAtrIssue.setAttribute("DisabledFieldCheckT","Y");
                        //DisabledFieldCheckT
                    }
                   
                    }
                
            } catch (SQLException sqle) {
                // TODO: Add catch code
                sqle.printStackTrace();
            }
        }

    return null;
    }
    
    
    public String onChangeOnVinInIssue(String dealer_map,String parent_group,String loc_code,String comp_fa,String pmc)
    {
    
    System.out.println("***********************onChangeOnVinInIssue*************************************");
    System.out.println("Dealer Map Code::"+dealer_map+" Parent Group Cd::::"+parent_group+"  LOC COde::"+loc_code+" CompFa::"+comp_fa+" PMC::"+pmc);
    System.out.println("***********************onChangeOnVinInIssue*************************************");

        String lv_model_cd=null,lv_tran_recd=null,lv_area_cd=null;
        //LN_SP_LST     NUMBER;
    //      LN_SP_CST
        BigDecimal ln_sp_lst=null,ln_sp_cst=null;
        ViewObjectImpl voShStock=this.getShStockRO1();
        ViewObjectImpl voGrnDtl=this.getFetchGrnDetailsInIssueRO1();
        ViewObjectImpl voDlrSellPrice=this.getDealerPriceAndSellingPriceRO1();
        ViewObjectImpl voAllotment=this.getCheckAllotmentVehicleRO1();
        ViewObjectImpl voAmLoc=this.getAmDealerLocParamRO1();
        ViewObjectImpl voiIssue=this.getStStktrIssVO1();
        Row rwIssue=voiIssue.getCurrentRow();
        String vin_num=null;
        //StStktrIssVORowImpl issueRw=(StStktrIssVORowImpl)voiIssue.getCurrentRow();    
        System.out.println("Vin Number is::::"+rwIssue.getAttribute("Vin"));
        if(rwIssue.getAttribute("Vin")!=null)
        {
          vin_num=rwIssue.getAttribute("Vin").toString();
            //Start Check Stock in stock table
          System.out.println("comp_fa:::"+comp_fa+" dealer_map:::"+dealer_map+" loc_code:::+"+loc_code+" parent_group:::"+parent_group+" Vin:::"+rwIssue.getAttribute("Vin"));
//            ViewCriteriaManager stockVCM = voShStock.getViewCriteriaManager();
//            ViewCriteria stockVC = stockVCM.getViewCriteria("CheckStockForStockIssueVC");
//            VariableValueManager stockVVM = stockVC.ensureVariableManager();
//            stockVVM.setVariableValue("bindCompFa", comp_fa);
//            stockVVM.setVariableValue("bindDealerMap", dealer_map);
//            stockVVM.setVariableValue("bindLocCode", loc_code);
//            stockVVM.setVariableValue("bindParentGroup", parent_group);
//            stockVVM.setVariableValue("bindVin", rwIssue.getAttribute("Vin"));
//            voShStock.applyViewCriteria(stockVC);
          
            voShStock.setNamedWhereClauseParam("bindDealerMapCd", dealer_map);
            voShStock.setNamedWhereClauseParam("bindParentGroupCd", parent_group);
            voShStock.setNamedWhereClauseParam("bindLocCode", loc_code);
            voShStock.setNamedWhereClauseParam("bindCompFa",comp_fa);
            voShStock.setNamedWhereClauseParam("bindVinNum",rwIssue.getAttribute("Vin"));

            voShStock.executeQuery();
            System.out.println("GET QUERY stockVCM::::"+voShStock.getQuery());
            System.out.println("Get estimated row count::::"+voShStock.getEstimatedRowCount());
            if(voShStock.getEstimatedRowCount()>0)
            {
            Row rwStock=voShStock.first();
            System.out.println("Stock Indent date::::"+rwStock.getAttribute("StkInDate"));
            rwIssue.setAttribute("StkInDateT",rwStock.getAttribute("StkInDate"));
            }
            else
            {
                System.out.println("When codition is not match then set null to VIN");
            rwIssue.setAttribute("Vin",null);
            return "VIN not found "+vin_num;
            }
            //End Check Stock in stock table
            String indent_model=null;
            voGrnDtl.setNamedWhereClauseParam("bindDealerMapCode", dealer_map);
            voGrnDtl.setNamedWhereClauseParam("bindLocCode", loc_code);
            voGrnDtl.setNamedWhereClauseParam("bindVin",rwIssue.getAttribute("Vin"));
            voGrnDtl.executeQuery();
            System.out.println("Get query of voGrnDtl"+voGrnDtl.getQuery());
            System.out.println("Get estimated row count is voGrnDtl:::::"+voGrnDtl.getEstimatedRowCount());
            if(voGrnDtl.getEstimatedRowCount()>0)
            {
                System.out.println("When condtion is match voGrnDtl");
            Row rwGrn=voGrnDtl.first();
            
                rwIssue.setAttribute("ChassisNum",rwGrn.getAttribute("ChassisNum"));
                lv_model_cd=rwGrn.getAttribute("ModelCd")!=null?rwGrn.getAttribute("ModelCd").toString():null;
                rwIssue.setAttribute("VariantCd",rwGrn.getAttribute("VariantCd"));
                rwIssue.setAttribute("EcolorCd",rwGrn.getAttribute("EcolorCd"));
                rwIssue.setAttribute("EngineNum",rwGrn.getAttribute("EngineNum"));
                rwIssue.setAttribute("KeyNum",rwGrn.getAttribute("KeyNum"));
                rwIssue.setAttribute("PoNum",rwGrn.getAttribute("PoNum"));
                rwIssue.setAttribute("LandedCost",rwGrn.getAttribute("LandedCost"));
                rwIssue.setAttribute("InvoiceNum",rwGrn.getAttribute("InvoiceNum"));
                rwIssue.setAttribute("InvoiceDate",rwGrn.getAttribute("InvoiceDate"));
                rwIssue.setAttribute("GrnNum",rwGrn.getAttribute("GrnNum"));
                rwIssue.setAttribute("GrnDate",rwGrn.getAttribute("GrnDate"));
                rwIssue.setAttribute("VehicleStatusT",rwGrn.getAttribute("Damage"));
    
                lv_tran_recd=rwGrn.getAttribute("TranRecd")!=null?rwGrn.getAttribute("TranRecd").toString():"T";
               indent_model=rwIssue.getAttribute("IndentModelT")!=null?rwIssue.getAttribute("IndentModelT").toString():"NA";
               System.out.println("lv_tran_recd:::::"+lv_tran_recd);
               System.out.println("indent_model:::::"+indent_model);
               if(!lv_tran_recd.equalsIgnoreCase("R")) 
               {
                System.out.println("When condition is match lv_tran_recd and indent_model"+lv_tran_recd+" indent_model"+indent_model);
                makeNullInIssueForm();
                return "Vehicle is in transit.Cannot be issued";
               }
               if(!lv_model_cd.equalsIgnoreCase(indent_model))
               {
                   System.out.println("lv_model_cd!=indent_model");
                    makeNullInIssueForm();
                    return "Model does not match with the Indented Vehicle model.Please select a vehcile of the same Model";
                }

            }
            else
            {
                makeNullInIssueForm();     
            return "GRN details not found for the VIN "+vin_num;  
            }
            
            
            
            //FETCH THE SELLING PRICE
            
            if(rwIssue.getAttribute("SellingPrice")==null)
            {
                ViewCriteriaManager amLocVCM = voAmLoc.getViewCriteriaManager();
                ViewCriteria amLocVC = amLocVCM.getViewCriteria("PreAreaCdVC");
                VariableValueManager amLocVVM = amLocVC.ensureVariableManager();
                amLocVVM.setVariableValue("bindDealerMapCd", dealer_map);
                amLocVVM.setVariableValue("bindLocCode", loc_code);
                amLocVVM.setVariableValue("bindParentGroupCd", parent_group);
                voAmLoc.applyViewCriteria(amLocVC);
                voAmLoc.executeQuery(); 
                System.out.println("Get Query of voAmLoc:::::"+voAmLoc.getQuery());
                System.out.println("Get estimated row count is voAmLoc::::"+voAmLoc.getEstimatedRowCount());
                if(voAmLoc.getEstimatedRowCount()>0)
                {
                    Row rwAmLoc=voAmLoc.first();
                    System.out.println("Pre area code::::"+rwAmLoc.getAttribute("PreAreaCd"));
                    if(rwAmLoc.getAttribute("PreAreaCd")!=null)
                    {
                    lv_area_cd=rwAmLoc.getAttribute("PreAreaCd").toString();
                    }
                }
                else
                {
                    System.out.println("If Pre area code not found");
                    lv_area_cd="01";
                }
                
                voDlrSellPrice.setNamedWhereClauseParam("bindDealerMapCode",dealer_map );
                voDlrSellPrice.setNamedWhereClauseParam("bindEcolorCd", rwIssue.getAttribute("EcolorCd"));
                voDlrSellPrice.setNamedWhereClauseParam("bindGlobPmc", pmc);
                voDlrSellPrice.setNamedWhereClauseParam("bindIssueDate", rwIssue.getAttribute("StktrIssDate"));
                voDlrSellPrice.setNamedWhereClauseParam("bindLocCode", loc_code);
                voDlrSellPrice.setNamedWhereClauseParam("bindParentGroupCd", parent_group);
                voDlrSellPrice.setNamedWhereClauseParam("bindVariantCd", rwIssue.getAttribute("VariantCd"));
                voDlrSellPrice.executeQuery();
                System.out.println("Get query voDlrSellPrice:::::"+voDlrSellPrice.getQuery());
                System.out.println("Estimated row count voDlrSellPrice:::::"+voDlrSellPrice.getQuery());
                if(voDlrSellPrice.getEstimatedRowCount()>0)
                {
                
                Row rwDlrSp=voDlrSellPrice.first();
                rwIssue.setAttribute("NetDealerPrice",rwDlrSp.getAttribute("NdPrice"));
                //     LN_SP_LST,LN_SP_CST,:B_ST_STKTR_ISS.NET_DEALER_PRICE
                if(rwIssue.getAttribute("IssueType").toString().equalsIgnoreCase("LST"))
                {
                    rwIssue.setAttribute("SellingPrice",rwDlrSp.getAttribute("SellPriceL"));
                }
                else
                {
                    rwIssue.setAttribute("SellingPrice",rwDlrSp.getAttribute("SellPriceC"));
                }
                
                }
                else
                {
                return "Selling price not found for the variant "+rwIssue.getAttribute("VariantCd");
                }   
                
            }
                                 
            //END FETCH THE SELLING PRICE

            voAllotment.setNamedWhereClauseParam("bindGlobDealerMapCd", dealer_map);
            voAllotment.setNamedWhereClauseParam("bindGlobLocCode", loc_code);
            voAllotment.setNamedWhereClauseParam("bindGlobParentGroupCd", parent_group);
            voAllotment.setNamedWhereClauseParam("bindGlobCompFa", comp_fa);
            voAllotment.setNamedWhereClauseParam("bindVin",rwIssue.getAttribute("Vin"));
            voAllotment.executeQuery();
            if(voAllotment.getEstimatedRowCount()>0)
            {
            Row rwAllot=voAllotment.first();
            makeNullInIssueForm();
            return "VIN "+vin_num+" already alloted with allotment number "+rwAllot.getAttribute("AllotNum")+" on"+rwAllot.getAttribute("AllotDate")+" by "+rwAllot.getAttribute("EmpName");
            
            }

            
        }
        
    return null;
    }


    /**
     * Container's getter for ShStockRO1.
     * @return ShStockRO1
     */
    public ViewObjectImpl getShStockRO1() {
        return (ViewObjectImpl) findViewObject("ShStockRO1");
    }

    /**
     * Container's getter for FetchGrnDetailsInIssueRO1.
     * @return FetchGrnDetailsInIssueRO1
     */
    public ViewObjectImpl getFetchGrnDetailsInIssueRO1() {
        return (ViewObjectImpl) findViewObject("FetchGrnDetailsInIssueRO1");
    }

    /**
     * Container's getter for DealerPriceAndSellingPriceRO1.
     * @return DealerPriceAndSellingPriceRO1
     */
    public ViewObjectImpl getDealerPriceAndSellingPriceRO1() {
        return (ViewObjectImpl) findViewObject("DealerPriceAndSellingPriceRO1");
    }

    /**
     * Container's getter for CheckAllotmentVehicleRO1.
     * @return CheckAllotmentVehicleRO1
     */
    public ViewObjectImpl getCheckAllotmentVehicleRO1() {
        return (ViewObjectImpl) findViewObject("CheckAllotmentVehicleRO1");
    }

    /**
     * Container's getter for VehiclePriceListExcelRO1.
     * @return VehiclePriceListExcelRO1
     */
    public ViewObjectImpl getVehiclePriceListExcelRO1() {
        return (ViewObjectImpl) findViewObject("VehiclePriceListExcelRO1");
    }
    
    /**

     * Container's getter for OrderCancelST1.
     * @return OrderCancelST1
     */
    public ViewObjectImpl getOrderCancelST1() {
        return (ViewObjectImpl) findViewObject("OrderCancelST1");
    
}
    
    public String onSaveStockIssueForm(String parent_group,Integer dealer_map,String comp_fa,String loc_code,String pmc,Integer finYear,String tallyIntegration,String user_code)
    {
        try {
    //          String user_code = "EMP003";
              ViewObjectImpl voiCurrDate=this.getSfGetTimeCurrRO1();
              Row voiCurrRw=voiCurrDate.first();
            System.out.println("parent_group----->" + parent_group + " dealer_map----->" + dealer_map);
            System.out.println("comp_fa----->" + comp_fa + " loc_code----->" + loc_code);
            System.out.println("pmc----->" + pmc + " dealer_map----->" + finYear);
            System.out.println("tallyIntegration---->" + tallyIntegration);

            String dealer_type_value = "STN", dealer_gst = null, to_dealer_gst = null;
            ViewObjectImpl voIssue = this.getStStktrIssVO1();
            StStktrIssVORowImpl rwIssue = (StStktrIssVORowImpl) voIssue.getCurrentRow();
            try {
                dealer_gst = dealerGstStockIssue(dealer_map, loc_code, parent_group);
                System.out.println("Dealer Gst:" + dealer_gst);
                to_dealer_gst =
                    toDealerGstStockIssue(rwIssue.getToDlrCd(), rwIssue.getToLocCd(), rwIssue.getToParentGroup());
                System.out.println("To Dealer Gst:" + to_dealer_gst);
                if (dealer_gst.equalsIgnoreCase(to_dealer_gst)) {
                    dealer_type_value = "STN";
                } else {
                    dealer_type_value = "STI";
                }
                System.out.println("Dealer Type is::::" + dealer_type_value);
            } catch (Exception e) {
                // TODO: Add catch code
                e.printStackTrace();
            }
            CallableStatement st = null;
            DBTransaction trx = (DBTransaction) getTransaction();

            if(rwIssue.getStktrIssNum()==null)
            {
            String num = generateNextNumGlobalMethod(dealer_map, pmc, loc_code, comp_fa, dealer_type_value, finYear);
            System.out.println("Generated number is::::" + num);
            if (!num.equalsIgnoreCase("Error")) {
                rwIssue.setStktrIssNum(num);
            }
            }
            ViewObjectImpl voShStock=this.getShStockVO1();
            
            System.out.println("Vin num in issue save:->"+rwIssue.getVin());
            ViewCriteriaManager ShStockVCM = voShStock.getViewCriteriaManager();
            ViewCriteria ShStockVC = ShStockVCM.getViewCriteria("UpdateStockIssueVC");
            VariableValueManager ShStockVVM = ShStockVC.ensureVariableManager();
            ShStockVVM.setVariableValue("bindDealerMapCode", dealer_map);
            ShStockVVM.setVariableValue("bindLocCode", loc_code);
            ShStockVVM.setVariableValue("bindParentGroup", parent_group);
            ShStockVVM.setVariableValue("bindCompFa", comp_fa);
            ShStockVVM.setVariableValue("bindVin", rwIssue.getVin());
            voShStock.applyViewCriteria(ShStockVC);
            voShStock.executeQuery();   
            System.out.println("voShStockvoShStockvoShStockvoShStock"+voShStock.getQuery());
            System.out.println("voShStock----------------------On save---->"+voShStock.getEstimatedRowCount());
            if(voShStock.getEstimatedRowCount()==1)
            {
            RowSetIterator rsiStk=voShStock.createRowSetIterator(null);
            while(rsiStk.hasNext())
            {
                System.out.println("insidee-------");
                Row rwStk=rsiStk.next();
                rwStk.setAttribute("StkOutDate", new java.sql.Timestamp(System.currentTimeMillis()));
                rwStk.setAttribute("StkOutDocType", "STI");
                rwStk.setAttribute("StkOutDocNum", rwIssue.getStktrIssNum());
                rwStk.setAttribute("ModifiedBy", user_code);
                rwStk.setAttribute("ModifiedDate", voiCurrRw.getAttribute("CurrDate"));
            }
            voShStock.closeRowSetIterator();
            }
            else if(voShStock.getEstimatedRowCount()>1)
            {
            return "More then One Vehicle found in Stock";
            }
            else
            {
            return "Vehicle not found in Stock";
            }
                
            

    //            String update_query =
    //                "UPDATE SH_STOCK SET STK_OUT_DATE     =sysdate,STK_OUT_DOC_TYPE = 'STI',STK_OUT_DOC_NUM  = '" + rwIssue.getStktrIssNum() + "',MODIFIED_BY='" +
    //                user_code + "',MODIFIED_DATE    =  TO_DATE(sf_get_time_curr(" + pmc +
    //                ",'CT'),'DD/MM/YYYY HH24:MI:SS') WHERE AVL_PARENT_GROUP ='" + parent_group +
    //                "' AND AVL_DEALER_MAP_CD ='" + dealer_map + "' AND AVL_LOC_CD ='" + loc_code + "' AND AVL_COMP_FA = '" +
    //                comp_fa + "' AND VIN ='" + rwIssue.getVin() +
    //                "' AND STK_OUT_DATE IS NULL AND STK_OUT_DOC_TYPE IS NULL AND STK_OUT_DOC_NUM IS NULL";
    //            System.out.println("Update query is:" + update_query);
    //            try {
    //                st = trx.createCallableStatement(update_query, 0);
    //                st.executeUpdate();
    //                System.out.println("st.excute reselt set"+st.executeQuery());
    //            } catch (SQLException sqle) {
    //                sqle.printStackTrace();
    //            } finally {
    //                try {
    //                    st.close();
    //                } catch (SQLException sqle) {
    //                    sqle.printStackTrace();
    //                }
    //            }


            try {
                String update_grn = "UPDATE SD_GRN SET STORE_CD=NULL WHERE VIN ='" + rwIssue.getVin() + "'";
                System.out.println("update grn------>"+update_grn);
                try {
                    st = trx.createCallableStatement(update_grn, 0);
                    st.executeUpdate();
                  //  System.out.println("Store code is:::::"+st.executeQuery());
                } catch (SQLException sqle) {
                    sqle.printStackTrace();
                } finally {
                    try {
                        st.close();
                    } catch (SQLException sqle) {
                        sqle.printStackTrace();
                    }
                }
            } catch (Exception e) {
                // TODO: Add catch code
                e.printStackTrace();
            }



        } catch (Exception e) {
            // TODO: Add catch code
            e.printStackTrace();
        }
    return null;
    }


    public String generateNextNumGlobalMethod(int dealerMapCd, String principalMapCd, String locCd, String compFa, String docType,
                                int finYear) {

        DBTransaction trx = (DBTransaction) getTransaction();
        CallableStatement st = null;
        String docNum = null;
        try {
            String stmt = "begin Generate_Next_Num (?,?,?,?,?,?,?,?,?);commit; end;";
            st = trx.createCallableStatement(stmt, 0);
            st.setInt(1, dealerMapCd);
            st.setString(2, principalMapCd);
            st.setString(3, locCd);
            st.setString(4, compFa);
            st.setString(5, docType);
            st.registerOutParameter(6, Types.VARCHAR);
            st.registerOutParameter(7, Types.VARCHAR);
            st.registerOutParameter(8, Types.INTEGER);
            st.setInt(9, finYear);
            st.executeUpdate();
            docNum = st.getString(6);
            String error_msg = st.getString(7);
            int err = st.getInt(8);
            System.out.println("error messgae code"+err);
            System.out.println("error messgae"+error_msg);
            System.out.println("Generated num:"+docNum);
            
        } catch (Exception sqle) {
            // TODO: Add catch code
            sqle.printStackTrace();
        } finally {
            try {
                if (st != null) {
                    st.close();
                }
            } catch (Exception e) {
            }
        }

        return docNum;


    }


    //Fetch the dealer GST
    public String dealerGstStockIssue(Integer dealer_map,String loc_code,String parent_group)
    {
    ViewObjectImpl voAmLoc=this.getAmDealerLocParamRO1();
    ViewCriteriaManager amLocVCM = voAmLoc.getViewCriteriaManager();
    ViewCriteria amLocVC = amLocVCM.getViewCriteria("PreAreaCdVC");
    VariableValueManager amLocVVM = amLocVC.ensureVariableManager();
    amLocVVM.setVariableValue("bindDealerMapCd", dealer_map);
    amLocVVM.setVariableValue("bindLocCode", loc_code);
    amLocVVM.setVariableValue("bindParentGroupCd", parent_group);
    voAmLoc.applyViewCriteria(amLocVC);
    voAmLoc.executeQuery();   
    if(voAmLoc.getEstimatedRowCount()>0)
    {
    Row rwAmLoc=voAmLoc.first();
        if(rwAmLoc.getAttribute("GstNum")!=null)
        {
         return rwAmLoc.getAttribute("GstNum").toString();
        }
    }
    return null;
    }

    public String toDealerGstStockIssue(Integer dealer_map,String loc_code,String parent_group)
    {
        ViewObjectImpl voAmLoc=this.getAmDealerLocParamRO1();
        ViewCriteriaManager amLocVCM = voAmLoc.getViewCriteriaManager();
        ViewCriteria amLocVC = amLocVCM.getViewCriteria("PreAreaCdVC");
        VariableValueManager amLocVVM = amLocVC.ensureVariableManager();
        amLocVVM.setVariableValue("bindDealerMapCd", dealer_map);
        amLocVVM.setVariableValue("bindLocCode", loc_code);
        amLocVVM.setVariableValue("bindParentGroupCd", parent_group);
        voAmLoc.applyViewCriteria(amLocVC);
        voAmLoc.executeQuery();   
        if(voAmLoc.getEstimatedRowCount()>0)
        {
        Row rwAmLoc=voAmLoc.first();
            if(rwAmLoc.getAttribute("GstNum")!=null)
            {
             return rwAmLoc.getAttribute("GstNum").toString();
            }
        }
    return null;
    }


    /**
     * Container's getter for ShOrdBookCanVO1.
     * @return ShOrdBookCanVO1
     */
    public ViewObjectImpl getShOrdBookCanVO1() {
        return (ViewObjectImpl) findViewObject("ShOrdBookCanVO1");
    }
    
    
    public String searchStockIssue(String dealer_map,String parent_group,String loc_code,String compFa,String issue_num,String indent_num)
    {
        

    java.sql.Timestamp timestampFrom=null;
    java.sql.Timestamp timestampTo=null;
    String from_dt=null;
    String to_dt=null;
//    
//    if(fromDate!=null)
//    {
//    timestampFrom = java.sql.Timestamp.valueOf(fromDate+" 00:00:00");
//    }
//    if(toDate!=null)
//    {
//    timestampTo = java.sql.Timestamp.valueOf(toDate+" 23:59:59");
//    }
   
    
    
   
    ViewObjectImpl issueDual=this.getStiSearchDualRO1();
    if(issueDual.getCurrentRow().getAttribute("FromDate")!=null)
    {
        from_dt=issueDual.getCurrentRow().getAttribute("FromDate").toString().substring(0, 10);
        timestampFrom=java.sql.Timestamp.valueOf(from_dt+" 00:00:00");
    }
    if(issueDual.getCurrentRow().getAttribute("ToDate")!=null)
    {
        to_dt=issueDual.getCurrentRow().getAttribute("ToDate").toString().substring(0, 10);
        timestampTo = java.sql.Timestamp.valueOf(to_dt+" 23:59:59");
    }

    System.out.println("Dealer Map Code:"+dealer_map+" Parent Group Cd::"+parent_group+" LOC::"+loc_code+" Comp Fa::"+compFa+" Isuse Number::"+issue_num+" Indent Num::"+indent_num);
    ViewObjectImpl voIssue=this.getStStktrIssVO1();
    ViewCriteriaManager voIssueVCM = voIssue.getViewCriteriaManager();
    ViewCriteria voIssueVC = voIssueVCM.getViewCriteria("StStktrIssVOCriteria");
    VariableValueManager voIssueVVM = voIssueVC.ensureVariableManager();
    voIssueVVM.setVariableValue("bindDealerMapCd", dealer_map);
    voIssueVVM.setVariableValue("bindLocCd", loc_code);
    voIssueVVM.setVariableValue("bindParentGrpCd", parent_group);
    voIssueVVM.setVariableValue("bindCompFa", compFa);
    voIssueVVM.setVariableValue("bindIndentNum", indent_num!=null?indent_num.toUpperCase():indent_num);
    voIssueVVM.setVariableValue("bindIssueNum", issue_num!=null?issue_num.toUpperCase():issue_num);
    
    voIssueVVM.setVariableValue("bindFromDate", timestampFrom);
    voIssueVVM.setVariableValue("bindToDate", timestampTo);
    voIssueVVM.setVariableValue("bindToDealer", issueDual.getCurrentRow().getAttribute("ToDealer"));
    
    
    voIssue.applyViewCriteria(voIssueVC);
    voIssue.executeQuery();   
    System.out.println("Vo get count::"+voIssue.getEstimatedRowCount());
    System.out.println("GET Query::::"+voIssue.getQuery());
    return null;
}

 /**
     * Container's getter for ShOrdBookCanVO2.
     * @return ShOrdBookCanVO2
     */
    public ViewObjectImpl getShOrdBookCanVO2() {
        return (ViewObjectImpl) findViewObject("ShOrdBookCanVO2");
    }

    /**
     * Container's getter for SdOrdReasonsVO1.
     * @return SdOrdReasonsVO1
     */
    public ViewObjectImpl getSdOrdReasonsVO1() {
        return (ViewObjectImpl) findViewObject("SdOrdReasonsVO1");
    }

    /**
     * Container's getter for ShOrdBookToSdOrdReasonVL1.
     * @return ShOrdBookToSdOrdReasonVL1
     */
    public ViewLinkImpl getShOrdBookToSdOrdReasonVL1() {
        return (ViewLinkImpl) findViewLink("ShOrdBookToSdOrdReasonVL1");
    }

	
    /**
     * Container's getter for ShOrdBookAmendmentVO1.
     * @return ShOrdBookAmendmentVO1
     */
    public ShOrdBookAmendmentVOImpl getShOrdBookAmendmentVO1() {
        return (ShOrdBookAmendmentVOImpl) findViewObject("ShOrdBookAmendmentVO1");
    }

    /**
     * Container's getter for OrderAmendmentHeadRO1.
     * @return OrderAmendmentHeadRO1
     */
    public ViewObjectImpl getOrderAmendmentHeadRO1() {
        return (ViewObjectImpl) findViewObject("OrderAmendmentHeadRO1");
    }
    
    public String validateOrder(Integer dealerMapCd, String Loc, String Parent, String CompFa, String Customer,
                             String OrderNum) {
        CallableStatement st = null;
        String stmt = "begin SP_VALIDATE_ORDER(?,?,?,?,?,?,?,?); end;";
        DBTransaction trx = (DBTransaction) getTransaction();
        st = trx.createCallableStatement(stmt, 0);

        String flag = " ";
        Map session = ADFContext.getCurrent().getSessionScope();

        Parent = session.get("parentGroupCd").toString();
        Loc = session.get("locCd").toString();
        CompFa = session.get("compCode").toString();
        Integer i = new Integer(session.get("dealerMapCd").toString());

        try {
            st.setInt(1, i.intValue());
            st.setString(2, Loc);
            st.setString(3, CompFa);
            st.setString(4, Parent);
            st.setString(5, Customer);
            st.setString(6, OrderNum);
            st.registerOutParameter(7, Types.VARCHAR);
            st.registerOutParameter(8, Types.INTEGER);
            st.execute();
            flag = st.getString(7);
            System.out.println("vCLVal--------------------->" + flag);
            return flag;
        } catch (SQLException sqlerr) {
            throw new JboException(sqlerr);
        }finally {
            try {
                if (st != null) {
                    st.close();
                }
            } catch (Exception e) {
            }
        }
    }

    /**
     * Container's getter for ShOrdBookRhEnqRO1.
     * @return ShOrdBookRhEnqRO1
     */
    public ViewObjectImpl getShOrdBookRhEnqRO1() {
        return (ViewObjectImpl) findViewObject("ShOrdBookRhEnqRO1");
    }
    
    public String returnEnqTypeCd(){
        ViewObjectImpl shOrd = this.getShOrdBookRhEnqRO1();
        shOrd.setNamedWhereClauseParam("ORDER_NUM", getShOrdBookAmendmentVO1().getCurrentRow().getAttribute("OrderNum"));
        shOrd.executeQuery();
        if(shOrd.first()!=null)
        return (String)shOrd.first().getAttribute("EtypeCd");
        else
            return null;
    }
    
    public String callOrderBookQuery(Integer dealerMapCd, String Loc, String Customer, Integer principal, String compFa){
        CallableStatement st = null;
        String stmt = "begin SP_GET_ORDER_BOOK_QUERY(?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?); end;";
        DBTransaction trx = (DBTransaction) getTransaction();
        st = trx.createCallableStatement(stmt, 0);
        Row shOrdRw = this.getShOrdBookAmendmentVO1().getCurrentRow();
        Row headRw = this.getOrderAmendmentHeadRO1().getCurrentRow();
        String flag = " ";
        Map session = ADFContext.getCurrent().getSessionScope();

        principal = new Integer(session.get("principalMapCd").toString());
        Loc = session.get("locCd").toString();
        compFa = session.get("compCode").toString();
        Integer i = new Integer(session.get("dealerMapCd").toString());
        try {
            st.setInt(1, i.intValue());
            st.setString(2, Loc);
            st.setObject(3, principal);
            st.setString(4, compFa);
            st.setString(5, Customer);
            st.setObject(6, shOrdRw.getAttribute("VariantCd"));
            st.setObject(7, shOrdRw.getAttribute("FirstEcolorCd"));
            st.setObject(8, shOrdRw.getAttribute("SecondEcolorCd"));
            st.setObject(9, shOrdRw.getAttribute("AreaCd"));
            st.setObject(10, headRw.getAttribute("OrderNum"));
            
            st.registerOutParameter(11, Types.VARCHAR);
            st.registerOutParameter(12, Types.VARCHAR);
            st.registerOutParameter(13, Types.VARCHAR);
            st.registerOutParameter(14, Types.VARCHAR);
            st.registerOutParameter(15, Types.VARCHAR);
            st.registerOutParameter(16, Types.VARCHAR);
            st.registerOutParameter(17, Types.VARCHAR);
            st.registerOutParameter(18, Types.VARCHAR);
            st.registerOutParameter(19, Types.NUMERIC);
            st.registerOutParameter(20, Types.VARCHAR);
            st.registerOutParameter(21, Types.NUMERIC);
            st.execute();
            if(st.getInt(21)>0){
            flag = st.getString(7);
            System.out.println("vCLVal--------------------->" + flag);
            return flag;
            }else{
                headRw.setAttribute("CustName", st.getString(11));
                shOrdRw.setAttribute("ModelCdTrans", st.getString(17));
                shOrdRw.setAttribute("NomineeTrans", st.getString(12));
                shOrdRw.setAttribute("VariantDescTrans", st.getString(13));
                shOrdRw.setAttribute("FEColorDesc", st.getString(14));
                shOrdRw.setAttribute("SEColorDesc", st.getString(15));
                shOrdRw.setAttribute("AreaDesc", st.getString(16));
                shOrdRw.setAttribute("ModelDescTrans", st.getString(18));
                
                Integer count = st.getInt(19);
            }
        } catch (SQLException sqlerr) {
            throw new JboException(sqlerr);
        }finally {
            try {
                if (st != null) {
                    st.close();
                }
            } catch (Exception e) {
            }
        }

        
        return null;
    }
    
    public String callOrderAmndAllow(Integer dealerMapCd, String Loc,String parent, String channelType,Integer principal, String compFa){
        CallableStatement st = null;
        String stmt = "begin SP_ORDAMND_ALLOW(?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?); end;";
        DBTransaction trx = (DBTransaction) getTransaction();
        st = trx.createCallableStatement(stmt, 0);
        Row shOrdRw = this.getShOrdBookAmendmentVO1().getCurrentRow();
        Row headRw = this.getOrderAmendmentHeadRO1().getCurrentRow();
        String flag = "2";
        Map session = ADFContext.getCurrent().getSessionScope();

        principal = new Integer(session.get("principalMapCd").toString());
        Loc = session.get("locCd").toString();
        compFa = session.get("compCode").toString();
        dealerMapCd = new Integer(session.get("dealerMapCd").toString());
        channelType = session.get("channelType").toString();
        
        try {
            st.setObject(1, parent);
            st.setObject(2, dealerMapCd);
            st.setObject(3, Loc);
            st.setObject(4, compFa);
            st.setObject(5, principal);
            st.setObject(6, channelType);
            st.setObject(7, shOrdRw.getAttribute("OrderNum"));
            st.setObject(8, shOrdRw.getAttribute("OrderDate"));
            st.setObject(9, shOrdRw.getAttribute("ModelCdTrans"));
            st.setObject(10, shOrdRw.getAttribute("VariantCd"));
            st.setObject(11, shOrdRw.getAttribute("FirstEcolorCd"));
            st.registerOutParameter(12, Types.VARCHAR);
            st.registerOutParameter(13, Types.VARCHAR);
            st.registerOutParameter(14, Types.VARCHAR);
            st.registerOutParameter(15, Types.VARCHAR);
            st.registerOutParameter(16, Types.NUMERIC);
            st.execute();
            if(st.getInt(16) > 0){
                return 1+st.getString(15);
            }else{
                flag = flag+st.getString(12)+","+st.getString(13)+","+st.getString(14);
                return flag;
            }
        }catch (SQLException sqlerr) {
            sqlerr.printStackTrace();
        }finally {
            try {
                if (st != null) {
                    st.close();
                }
            } catch (Exception e) {
            }
        }
    return null;
    }
    
    public String returnCityForPI(String cityCd) {
//        System.err.println("PMC::::" + pmc);
        Map session = ADFContext.getCurrent().getSessionScope();
        Integer pmc = Integer.parseInt(session.get("principalMapCd").toString());
        String city = null;
        String stmt = "begin SP_GET_CITY_DESC (?,?,?,?,?); end;";
        DBTransaction dbtxn = (DBTransaction) getTransaction();
        CallableStatement cs = dbtxn.createCallableStatement(stmt.toString(), 1);

        try {
            cs.setObject(1, pmc);
            cs.setObject(2, cityCd);
            cs.registerOutParameter(3, OracleTypes.VARCHAR);
            cs.registerOutParameter(4, OracleTypes.VARCHAR);
            cs.registerOutParameter(5, OracleTypes.NUMERIC);
            cs.execute();
            if(cs.getInt(5)==0){
            if (cs.getString(3) != null) {
                city = cs.getString(3);
            }
            }else{
                city = null;
            }
            System.out.println("City Value----" + city);
        } catch (SQLException sqlerr) {
            throw new JboException(sqlerr);
        } finally {
            try {
                if (cs != null) {
                    cs.close();
                }
            } catch (Exception e) {
            }
        }
        return city;
    }
    
    public String returnVariantForPI(String variantCd) {
    //        System.err.println("PMC::::" + pmc);
        Map session = ADFContext.getCurrent().getSessionScope();
        Integer pmc = Integer.parseInt(session.get("principalMapCd").toString());
        String variant = null;
        String stmt = "begin SP_GET_VAR_DESC (?,?,?,?,?); end;";
        DBTransaction dbtxn = (DBTransaction) getTransaction();
        CallableStatement cs = dbtxn.createCallableStatement(stmt.toString(), 1);

        try {
            cs.setObject(1, pmc);
            cs.setObject(2, variantCd);
            cs.registerOutParameter(3, OracleTypes.VARCHAR);
            cs.registerOutParameter(4, OracleTypes.VARCHAR);
            cs.registerOutParameter(5, OracleTypes.NUMERIC);
            cs.execute();
            if(cs.getInt(5)==0){
            if (cs.getString(3) != null) {
                variant = cs.getString(3);
            }
            }else{
                variant = null;
            }
            System.out.println("variant Value----" + variant);
        } catch (SQLException sqlerr) {
            throw new JboException(sqlerr);
        } finally {
            try {
                if (cs != null) {
                    cs.close();
                }
            } catch (Exception e) {
            }
        }
        return variant;
    }
    
    public String returnModelCodeForPI(String variantCd) {
    //        System.err.println("PMC::::" + pmc);
        Map session = ADFContext.getCurrent().getSessionScope();
        Integer pmc = Integer.parseInt(session.get("principalMapCd").toString());
        String model = null;
        String stmt = "begin SP_GET_MODEL_CD (?,?,?,?,?); end;";
        DBTransaction dbtxn = (DBTransaction) getTransaction();
        CallableStatement cs = dbtxn.createCallableStatement(stmt.toString(), 1);

        try {
            cs.setObject(1, pmc);
            cs.setObject(2, variantCd);
            cs.registerOutParameter(3, OracleTypes.VARCHAR);
            cs.registerOutParameter(4, OracleTypes.VARCHAR);
            cs.registerOutParameter(5, OracleTypes.NUMERIC);
            cs.execute();
            if(cs.getInt(5)==0){
            if (cs.getString(3) != null) {
                model = cs.getString(3);
//                Row orderRw = this.getShOrdBookAmendmentVO1().getCurrentRow();
//                orderRw.setAttribute("ModelDescTrans", returnModelForPI(model));
            }
            }else{
                model = null;
            }
            System.out.println("model Value----" + model);
        } catch (SQLException sqlerr) {
            throw new JboException(sqlerr);
        } finally {
            try {
                if (cs != null) {
                    cs.close();
                }
            } catch (Exception e) {
            }
        }
        return model;
    }
    
    public String returnModelForPI(String modelCd) {
    //        System.err.println("PMC::::" + pmc);
        Map session = ADFContext.getCurrent().getSessionScope();
        Integer pmc = Integer.parseInt(session.get("principalMapCd").toString());
        String model = null;
        String stmt = "begin SP_GET_MODEL_DESC (?,?,?,?,?); end;";
        DBTransaction dbtxn = (DBTransaction) getTransaction();
        CallableStatement cs = dbtxn.createCallableStatement(stmt.toString(), 1);

        try {
            cs.setObject(1, pmc);
            cs.setObject(2, modelCd);
            cs.registerOutParameter(3, OracleTypes.VARCHAR);
            cs.registerOutParameter(4, OracleTypes.VARCHAR);
            cs.registerOutParameter(5, OracleTypes.NUMERIC);
            cs.execute();
            if(cs.getInt(5)==0){
            if (cs.getString(3) != null) {
                model = cs.getString(3);
            }
            }else{
                model = null;
            }
            System.out.println("model Value----" + model);
        } catch (SQLException sqlerr) {
            throw new JboException(sqlerr);
        } finally {
            try {
                if (cs != null) {
                    cs.close();
                }
            } catch (Exception e) {
            }
        }
        return model;
    }
    
    public String returnColorDescForPI(String colorCd) {
            System.err.println("PMC:::: ColorCd" + colorCd);
        Map session = ADFContext.getCurrent().getSessionScope();
        Integer pmc = Integer.parseInt(session.get("principalMapCd").toString());
        String color = null;
        String stmt = "begin SP_GET_ECLR_DESC (?,?,?,?,?); end;";
        DBTransaction dbtxn = (DBTransaction) getTransaction();
        CallableStatement cs = dbtxn.createCallableStatement(stmt.toString(), 1);

        try {
            cs.setObject(1, pmc);
            cs.setObject(2, colorCd);
            cs.registerOutParameter(3, OracleTypes.VARCHAR);
            cs.registerOutParameter(4, OracleTypes.VARCHAR);
            cs.registerOutParameter(5, OracleTypes.NUMERIC);
            cs.execute();
            if(cs.getInt(5)==0){
            if (cs.getString(3) != null) {
                color = cs.getString(3);
            }
            }else{
                color = null;
            }
            System.out.println("color Value----" + color);
        } catch (SQLException sqlerr) {
            throw new JboException(sqlerr);
        } finally {
            try {
                if (cs != null) {
                    cs.close();
                }
            } catch (Exception e) {
            }
        }
        return color;
    } 
    
    public String returnListDescForPI(String listCd, String listNm) {
    //        System.err.println("PMC::::" + pmc);
        Map session = ADFContext.getCurrent().getSessionScope();
        Integer pmc = Integer.parseInt(session.get("principalMapCd").toString());
        String listDesc = null;
        String stmt = "begin SP_GET_LIST_DESC (?,?,?,?,?,?); end;";
        DBTransaction dbtxn = (DBTransaction) getTransaction();
        CallableStatement cs = dbtxn.createCallableStatement(stmt.toString(), 1);

        try {
            cs.setObject(1, pmc);
            cs.setObject(2, listNm);
            cs.setObject(3, listCd);
            cs.registerOutParameter(4, OracleTypes.VARCHAR);
            cs.registerOutParameter(5, OracleTypes.VARCHAR);
            cs.registerOutParameter(6, OracleTypes.NUMERIC);
            cs.execute();
            if(cs.getInt(6)==0){
            if (cs.getString(4) != null) {
                listDesc = cs.getString(4);
            }
            }else{
                listDesc = null;
            }
            System.out.println("listDesc Value----" + listDesc);
        } catch (SQLException sqlerr) {
            throw new JboException(sqlerr);
        } finally {
            try {
                if (cs != null) {
                    cs.close();
                }
            } catch (Exception e) {
            }
        }
        return listDesc;
    }
    
    public String returnDseNameForPI(String salesManCd) {
    //        System.err.println("PMC::::" + pmc);
        Map session = ADFContext.getCurrent().getSessionScope();
        Integer dealer = Integer.parseInt(session.get("dealerMapCd").toString());
        String loc = session.get("locCd").toString();
        
        String dseNm = null;
        String stmt = "begin SP_GET_DSE_NAME(?,?,?,?,?,?); end;";
        DBTransaction dbtxn = (DBTransaction) getTransaction();
        CallableStatement cs = dbtxn.createCallableStatement(stmt.toString(), 1);

        try {
            cs.setObject(1, dealer);
            cs.setObject(2, loc);
            cs.setObject(3, salesManCd);
            cs.registerOutParameter(4, OracleTypes.VARCHAR);
            cs.registerOutParameter(5, OracleTypes.VARCHAR);
            cs.registerOutParameter(6, OracleTypes.NUMERIC);
            cs.execute();
            if(cs.getInt(6)==0){
            if (cs.getString(4) != null) {
                dseNm = cs.getString(4);
            }
            }else{
                dseNm = null;
            }
            System.out.println("dseNm Value----" + dseNm);
        } catch (SQLException sqlerr) {
            throw new JboException(sqlerr);
        } finally {
            try {
                if (cs != null) {
                    cs.close();
                }
            } catch (Exception e) {
            }
        }
        return dseNm;
    }
    
    public String returnDsaNameForPI(String salesManCd) {
    //        System.err.println("PMC::::" + pmc);
        Map session = ADFContext.getCurrent().getSessionScope();
        Integer dealer = Integer.parseInt(session.get("dealerMapCd").toString());
        String parent = session.get("parentGroupCd").toString();
        
        String dsaNm = null;
        String stmt = "begin SP_GET_SALES_AGENT_NAME (?,?,?,?,?,?); end;";
        DBTransaction dbtxn = (DBTransaction) getTransaction();
        CallableStatement cs = dbtxn.createCallableStatement(stmt.toString(), 1);

        try {
            cs.setObject(1, dealer);
            cs.setObject(2, parent);
            cs.setObject(3, salesManCd);
            cs.registerOutParameter(4, OracleTypes.VARCHAR);
            cs.registerOutParameter(5, OracleTypes.VARCHAR);
            cs.registerOutParameter(6, OracleTypes.NUMERIC);
            cs.execute();
            if(cs.getInt(6)==0){
            if (cs.getString(4) != null) {
                dsaNm = cs.getString(4);
            }
            }else{
                dsaNm = null;
            }
            System.out.println("dsaNm Value----" + dsaNm);
        } catch (SQLException sqlerr) {
            throw new JboException(sqlerr);
        } finally {
            try {
                if (cs != null) {
                    cs.close();
                }
            } catch (Exception e) {
            }
        }
        return dsaNm;
    }
    
    public String returnPinDescForPI(String pinCd) {
    //        System.err.println("PMC::::" + pmc);
        Map session = ADFContext.getCurrent().getSessionScope();
        Integer pmc = Integer.parseInt(session.get("principalMapCd").toString());
        String pin = null;
        String stmt = "begin SP_GET_PIN_DESC (?,?,?,?,?); end;";
        DBTransaction dbtxn = (DBTransaction) getTransaction();
        CallableStatement cs = dbtxn.createCallableStatement(stmt.toString(), 1);

        try {
            cs.setObject(1, pmc);
            cs.setObject(2, pinCd);
            cs.registerOutParameter(3, OracleTypes.VARCHAR);
            cs.registerOutParameter(4, OracleTypes.VARCHAR);
            cs.registerOutParameter(5, OracleTypes.NUMERIC);
            cs.execute();
            if(cs.getInt(5)==0){
            if (cs.getString(3) != null) {
                pin = cs.getString(3);
            }
            }else{
                pin = null;
            }
            System.out.println("pin Value----" + pin);
        } catch (SQLException sqlerr) {
            throw new JboException(sqlerr);
        } finally {
            try {
                if (cs != null) {
                    cs.close();
                }
            } catch (Exception e) {
            }
        }
        return pin;
    } 
    
    public String returnCustNameDescForPI(String custCd) {
    //        System.err.println("PMC::::" + pmc);
        Map session = ADFContext.getCurrent().getSessionScope();
        Integer pmc = Integer.parseInt(session.get("principalMapCd").toString());
        String cust = null;
        String stmt = "begin sp_get_customer_name (?,?,?,?,?); end;";
        DBTransaction dbtxn = (DBTransaction) getTransaction();
        CallableStatement cs = dbtxn.createCallableStatement(stmt.toString(), 1);

        try {
            cs.setObject(1, pmc);
            cs.setObject(2, custCd);
            cs.registerOutParameter(3, OracleTypes.VARCHAR);
            cs.registerOutParameter(4, OracleTypes.VARCHAR);
            cs.registerOutParameter(5, OracleTypes.NUMERIC);
            cs.execute();
            if(cs.getInt(5)==0){
            if (cs.getString(3) != null) {
                cust = cs.getString(3);
            }
            }else{
                cust = null;
            }
            System.out.println("cust Value----" + cust);
        } catch (SQLException sqlerr) {
            throw new JboException(sqlerr);
        } finally {
            try {
                if (cs != null) {
                    cs.close();
                }
            } catch (Exception e) {
            }
        }
        return cust;
    }

    /**
     * Container's getter for RdEnqRO1.
     * @return RdEnqRO1
     */
    public ViewObjectImpl getRdEnqRO1() {
        return (ViewObjectImpl) findViewObject("RdEnqRO1");
    }

    /**
     * Container's getter for EligibleEmployeeExcelRO1.
     * @return EligibleEmployeeExcelRO1
     */
    public ViewObjectImpl getEligibleEmployeeExcelRO1() {
        return (ViewObjectImpl) findViewObject("EligibleEmployeeExcelRO1");
    }

    /**
     * Container's getter for EligibleEmployeeExcelRO2.
     * @return EligibleEmployeeExcelRO2
     */
    public ViewObjectImpl getEligibleEmployeeExcelRO2() {
        return (ViewObjectImpl) findViewObject("EligibleEmployeeExcelRO2");
    }

//    /**
//     * Container's getter for ShOrdBookCanVO2.
//     * @return ShOrdBookCanVO2
//     */
//    public ViewObjectImpl getShOrdBookCanVO2() {
//        return (ViewObjectImpl) findViewObject("ShOrdBookCanVO2");
//    }

    /**
     * Container's getter for TrainingAttendedSummaryExcelRO1.
     * @return TrainingAttendedSummaryExcelRO1
     */
    public ViewObjectImpl getTrainingAttendedSummaryExcelRO1() {
        return (ViewObjectImpl) findViewObject("TrainingAttendedSummaryExcelRO1");
    }
    
    public String afterSaveOnStockIssueForm(String pmc,String parent_group,String dealer_map,String loc_code,String tallyIntegration,String comp_fa,String user_code)
    {
        
        System.out.println("afterSaveOnStockIssueForm----->pmc------->"+pmc+" parent_group----->"+parent_group+"  dealer_map---->"+dealer_map+" loc_code------>"+loc_code+" tallyIntegration----->"+tallyIntegration+" user_code----->"+user_code);
        
        String ret_val=null;
        ViewObjectImpl voIssue = this.getStStktrIssVO1();
        StStktrIssVORowImpl rwIssue = (StStktrIssVORowImpl) voIssue.getCurrentRow();    
    
        Object valid_dlr_result =callStoredFunction(Types.VARCHAR, "PKG_FDI.SF_VALID_DEALER(?,?,?)",
                               new Object[] { parent_group, dealer_map, loc_code });
        System.out.println("Valid Dealer result is::::" + valid_dlr_result);
        if (valid_dlr_result.toString().equalsIgnoreCase("Y"))
        {
          DBTransaction trx = (DBTransaction) getTransaction();
          CallableStatement st = null;
          String stmt = "begin DMS2_SALES_INS_STO_INTO_FDI(?,?,?,?,?,?,?,?,?,?,?);commit; end;";

            try {
                st = trx.createCallableStatement(stmt, 0);
                st.setObject(1, pmc);
                st.setObject(2, parent_group);
                st.setObject(3, dealer_map);
                st.setObject(4, loc_code);
                st.setObject(5, comp_fa);
                st.setObject(6, rwIssue.getStktrIssNum());
                st.setObject(7, rwIssue.getStkindNum());
                st.setObject(8, rwIssue.getStktrIssDate());
                st.setObject(9, user_code);
                st.registerOutParameter(10, Types.NUMERIC);
                st.registerOutParameter(11, Types.VARCHAR);
                st.executeUpdate();
                System.out.println("DMS2_SALES_INS_STO_INTO_FDI----- Error code is:::::"+st.getInt(10));
                System.out.println("DMS2_SALES_INS_STO_INTO_FDI----- Error message is::::"+st.getString(11));
            } catch (SQLException sqle) {
                sqle.printStackTrace();
            } finally {
                try {
                    st.close();
                } catch (SQLException sqle) {
                    sqle.printStackTrace();
        }

        }
        }
        if (tallyIntegration.equalsIgnoreCase("Y")) {
            try {
                System.out.println("--------------------tallyIntegration------------");
                tallyIntegrationStockTransferIssueSave(pmc, dealer_map, parent_group, loc_code, comp_fa, user_code,
                                                       rwIssue.getStktrIssNum().toString());
            } catch (Exception e) {
                // TODO: Add catch code
                e.printStackTrace();
            }
        }
        try {
            updateIndentAndGrnFromIssue(user_code);
        } catch (Exception e) {
            // TODO: Add catch code
            e.printStackTrace();
        }
        
    return null;
    }


    /**
     * Container's getter for IssueFdiRO1.
     * @return IssueFdiRO1
     */
    public ViewObjectImpl getIssueFdiRO1() {
        return (ViewObjectImpl) findViewObject("IssueFdiRO1");
    }

    /**
     * Container's getter for NdPriceFdiIssueRO1.
     * @return NdPriceFdiIssueRO1
     */
    public ViewObjectImpl getNdPriceFdiIssueRO1() {
        return (ViewObjectImpl) findViewObject("NdPriceFdiIssueRO1");
    }

    /**
     * Container's getter for GstStateCdIssueRO1.
     * @return GstStateCdIssueRO1
     */
    public ViewObjectImpl getGstStateCdIssueRO1() {
        return (ViewObjectImpl) findViewObject("GstStateCdIssueRO1");
    }
    
    public String checkReportStockIssue(String parent_group,String dealer_map,String loc_code,String to_parent_group,String to_dealer_map_code,String to_loc_code)
    {
        System.out.println("****************************checkReportStockIssue*******************************");
        System.out.println("parent_group::::"+parent_group+" dealer_map::::"+dealer_map+" loc_code::::"+loc_code+" to_parent_group:::::"+to_parent_group+" to_dealer_map_code::::"+to_dealer_map_code+" to_loc_code:::::"+to_loc_code);
        String ret_val=null;
    
        Object dlr_gst_result =
            callStoredFunction(Types.VARCHAR, "sf_check_dlr_gstin(?,?,?,?,?,?)",
                               new Object[] { parent_group, dealer_map, loc_code, to_parent_group,
                                              to_dealer_map_code, to_loc_code });
        System.out.println("sf_check_dlr_gstin Dealer GST result::::" + dlr_gst_result);
        if (dlr_gst_result.toString().equalsIgnoreCase("Y")) {
            System.out.println("Inside when y");
            ret_val="sr_stktrn";

        } else {
            System.out.println("inside when not y");
            ret_val="sr_indinv";
}
System.out.println("ret val is:::::"+ret_val);
    return ret_val;    
    }    
    public void searchOrderBookAmndNum(String ordNum, String custCd, String enqNum, String mobile,oracle.jbo.domain.Date fromDate, oracle.jbo.domain.Date toDate){
        Row headRw = this.getOrderAmendmentHeadRO1().getCurrentRow();
        System.out.println("ENQ NUM value "+headRw.getAttribute("EnquiryId"));
        ViewObjectImpl shOrdAmndBook = this.getShOrdBookAmendmentVO1();
        shOrdAmndBook.setNamedWhereClauseParam("bindCustCd", headRw.getAttribute("CustCd"));
        shOrdAmndBook.setNamedWhereClauseParam("bindEnqNum", headRw.getAttribute("EnquiryId"));
        shOrdAmndBook.setNamedWhereClauseParam("bindFromDate", headRw.getAttribute("FromDate"));
        shOrdAmndBook.setNamedWhereClauseParam("bindToDa", headRw.getAttribute("ToDate"));
        shOrdAmndBook.setNamedWhereClauseParam("bindMobile", headRw.getAttribute("MobileNo"));
        shOrdAmndBook.setNamedWhereClauseParam("bindOrderNum", headRw.getAttribute("SrlNo"));
        shOrdAmndBook.executeQuery();
}

    public String returnAreaDescForPI(String areaCd) {
    //        System.err.println("PMC::::" + pmc);
        Map session = ADFContext.getCurrent().getSessionScope();
        Integer dealer = Integer.parseInt(session.get("dealerMapCd").toString());
        String loc = session.get("locCd").toString();
        
        String areaNm = null;
        String stmt = "begin SP_GET_LIST_DESC (?,?,?,?,?,?); end;";
        DBTransaction dbtxn = (DBTransaction) getTransaction();
        CallableStatement cs = dbtxn.createCallableStatement(stmt.toString(), 1);

        try {
            cs.setObject(1, dealer);
            cs.setObject(2, loc);
            cs.setObject(3, areaCd);
            cs.registerOutParameter(4, OracleTypes.VARCHAR);
            cs.registerOutParameter(5, OracleTypes.VARCHAR);
            cs.registerOutParameter(6, OracleTypes.NUMERIC);
            cs.execute();
            if(cs.getInt(6)==0){
            if (cs.getString(4) != null) {
                areaNm = cs.getString(4);
            }
            }else{
                areaNm = null;
            }
            System.out.println("areaNm Value----" + areaNm);
        } catch (SQLException sqlerr) {
            throw new JboException(sqlerr);
        } finally {
            try {
                if (cs != null) {
                    cs.close();
                }
            } catch (Exception e) {
            }
        }
        return areaNm;
    }
    
    public String callSpOrdAmndModelChk(String amndModelCd) {
    //        System.err.println("PMC::::" + pmc);
        Map session = ADFContext.getCurrent().getSessionScope();
        Integer dealer = Integer.parseInt(session.get("dealerMapCd").toString());
        String loc = session.get("locCd").toString();
        Object parent = session.get("parentGroupCd");
        Object compFa = session.get("compCode");
        String areaNm = null;
        String stmt = "begin SP_ORDAMND_MODEL_CHECK(?,?,?,?,?,?,?,?,?); end;";
        DBTransaction dbtxn = (DBTransaction) getTransaction();
        CallableStatement cs = dbtxn.createCallableStatement(stmt.toString(), 1);
        Row ordRw = this.getShOrdBookAmendmentVO1().getCurrentRow();
        try {
            cs.setObject(1, parent);
            cs.setObject(2, dealer);
            cs.setObject(3, loc);
            cs.setObject(4, compFa);
            cs.setObject(5, ordRw.getAttribute("OrderNum"));
            cs.setObject(6, ordRw.getAttribute("OrderDate"));
            cs.setObject(7, amndModelCd);
            cs.registerOutParameter(8, OracleTypes.VARCHAR);
            cs.registerOutParameter(9, OracleTypes.NUMERIC);
            cs.execute();
            if(cs.getInt(9)>0){
                areaNm = cs.getString(8);
            }
            System.out.println("areaNm Value----" + areaNm);
        } catch (SQLException sqlerr) {
            throw new JboException(sqlerr);
        } finally {
            try {
                if (cs != null) {
                    cs.close();
                }
            } catch (Exception e) {
            }
        }
        return areaNm;
    }

    /**
     * Container's getter for GmVarRdEnqRO1.
     * @return GmVarRdEnqRO1
     */
    public ViewObjectImpl getGmVarRdEnqRO1() {
        return (ViewObjectImpl) findViewObject("GmVarRdEnqRO1");
    }

    /**
     * Container's getter for GmEclrRdEnqRO1.
     * @return GmEclrRdEnqRO1
     */
    public ViewObjectImpl getGmEclrRdEnqRO1() {
        return (ViewObjectImpl) findViewObject("GmEclrRdEnqRO1");
    }
    
    public String getEcolorVarDesc(String scndEclrCd){
        Map session = ADFContext.getCurrent().getSessionScope();
        Object pmc = session.get("principalMapCd");
        
        String areaNm = null;
        String stmt = "begin sp_get_ecolor_var_desc(?,?,?,?,?,?); end;";
        DBTransaction dbtxn = (DBTransaction) getTransaction();
        CallableStatement cs = dbtxn.createCallableStatement(stmt.toString(), 1);
        Row ordRw = this.getShOrdBookAmendmentVO1().getCurrentRow();
        try {
            cs.setObject(1, pmc);
            cs.setObject(2, scndEclrCd);
            cs.registerOutParameter(3, OracleTypes.VARCHAR);
            cs.setObject(4, this.getShOrdBookAmendmentVO1().getCurrentRow().getAttribute("AmndVariantCd"));
            cs.registerOutParameter(5, OracleTypes.VARCHAR);
            cs.registerOutParameter(6, OracleTypes.NUMERIC);
            cs.execute();
            if(cs.getInt(6)>0){
                areaNm = cs.getInt(6) + cs.getString(5);
            }else{
                areaNm = cs.getInt(6) + cs.getString(3);
            }
            System.out.println("areaNm Value----" + areaNm);
        } catch (SQLException sqlerr) {
            throw new JboException(sqlerr);
        } finally {
            try {
                if (cs != null) {
                    cs.close();
                }
            } catch (Exception e) {
            }
        }
        return areaNm;
    }

    /**
     * Container's getter for SmBookNameChngAllowRO1.
     * @return SmBookNameChngAllowRO1
     */
    public ViewObjectImpl getSmBookNameChngAllowRO1() {
        return (ViewObjectImpl) findViewObject("SmBookNameChngAllowRO1");
    }

    /**
     * Container's getter for MaxReceiptDate1.
     * @return MaxReceiptDate1
     */
    public ViewObjectImpl getMaxReceiptDate1() {
        return (ViewObjectImpl) findViewObject("MaxReceiptDate1");
    }
	
    public oracle.jbo.domain.Date getMaxReceiptDate(){
        ViewObjectImpl vo = this.getMaxReceiptDate1();
        vo.executeQuery();
        if(vo.first()!=null){
        System.out.println("MAX DATE_______ "+vo.first().getAttribute("MaxRecDate"));
        return (oracle.jbo.domain.Date)vo.first().getAttribute("MaxRecDate");
        }
        return null;
    }

    /**
     * Container's getter for AmDealerLocCompanyMasterRO1.
     * @return AmDealerLocCompanyMasterRO1
     */
    public ViewObjectImpl getAmDealerLocCompanyMasterRO1() {
        return (ViewObjectImpl) findViewObject("AmDealerLocCompanyMasterRO1");
    }
    
    
    public void toCompfaValueOfIndentForm(String do_dealerMap,String to_loc_code,String to_parent_group)
    {
        try {
            ViewObjectImpl voiIndent = this.getStIndentVO1();
            StIndentVORowImpl rwIndnet = (StIndentVORowImpl) voiIndent.getCurrentRow();
            System.out.println("To Dealer::::::" + rwIndnet.getIndToDlr());
            System.out.println("To Parent::::::" + rwIndnet.getToParentGroup());
            System.out.println("To Loc Code::::" + rwIndnet.getIndOnLoc());
            ViewObjectImpl voiAMLC = this.getAmDealerLocCompanyMasterRO1();
            ViewCriteria amlcVC = voiAMLC.getViewCriteriaManager().getViewCriteria("CompFaVC");
            VariableValueManager amlcVVM = amlcVC.ensureVariableManager();
            amlcVVM.setVariableValue("bindToDealerMapCd", rwIndnet.getIndToDlr());
            amlcVVM.setVariableValue("bindToParentGroupCd", rwIndnet.getToParentGroup());
            amlcVVM.setVariableValue("bindToLocCode", rwIndnet.getIndOnLoc());
            voiAMLC.applyViewCriteria(amlcVC);
            voiAMLC.executeQuery();
            if (voiAMLC.getEstimatedRowCount() > 0) {
                Row rw = voiAMLC.first();
                rwIndnet.setToCompFa(rw.getAttribute("CompCode") + "");
            }
        } catch (Exception e) {
            // TODO: Add catch code
            e.printStackTrace();
        }
    }
    
    public String checkValidationOnVinIndent()
    {
        
        String vin_num=null,allot_num=null;
        try {
            ViewObjectImpl voiIndent = this.getStIndentVO1();
            StIndentVORowImpl rwIndnet = (StIndentVORowImpl) voiIndent.getCurrentRow();
            ViewObjectImpl voiSrn = this.getSdGrnRO1();
            ViewCriteria srnVC = voiSrn.getViewCriteriaManager().getViewCriteria("VinInIndentVC");
            VariableValueManager srnVVM = srnVC.ensureVariableManager();
            srnVVM.setVariableValue("bindChassisNum", rwIndnet.getChassisNum());
            srnVVM.setVariableValue("bindModelCd", rwIndnet.getModelCd());
            srnVVM.setVariableValue("bindToCompFa", rwIndnet.getToCompFa());
            srnVVM.setVariableValue("bindToDealer", rwIndnet.getIndToDlr());
            srnVVM.setVariableValue("bindToLocCode", rwIndnet.getIndOnLoc());
            srnVVM.setVariableValue("bindToParentGroup", rwIndnet.getToParentGroup());
            srnVVM.setVariableValue("bindVariantCd", rwIndnet.getVariantCd());
            voiSrn.applyViewCriteria(srnVC);
            voiSrn.executeQuery();
            if (voiSrn.getEstimatedRowCount() > 0) {
                Row rwSrn = voiSrn.first();
                if (rwSrn.getAttribute("AllotNum") != null) {
                    return "This Vin is allready Alloted to Customer Against this " + rwSrn.getAttribute("AllotNum");
                }

            }
        } catch (Exception e) {
            // TODO: Add catch code
            e.printStackTrace();
        }
    
    return null;
    }
    
 public String updateOutstandingAmtGrn(String supCd, BigDecimal invAmt) {
        int errCd =0;
                    Map session = ADFContext.getCurrent().getSessionScope();
                    Timestamp timestamp = new Timestamp(System.currentTimeMillis());
            String errMsg = null;
            DBTransaction trx = (DBTransaction) getTransaction();
            CallableStatement st = null;
            try {
                String stmt = "begin Sp_Update_Outstanding_Amt(?,?,?,?,?,?,?,?,?,?,?,?); end;";
                DBTransaction dbtxn = (DBTransaction) getTransaction();
                st = dbtxn.createCallableStatement(stmt.toString(), 1);
                st.setObject(1, session.get("parentGroupCd"));
                            st.setObject(2, session.get("dealerMapCd"));
                            st.setObject(3, session.get("locCd"));
                            st.setString(4, (String)session.get("compCode"));
                            st.setObject(5, "MU");
                            st.setObject(6, supCd);
                            st.setObject(7, null);
                            st.setObject(8, null);
                            st.setObject(9, invAmt);
                            st.setObject(10, timestamp);
                st.registerOutParameter(11, Types.INTEGER);
                st.registerOutParameter(12, Types.VARCHAR);
                st.executeUpdate();
                errCd=st.getInt(11);
                errMsg = st.getString(12);
            } catch (SQLException sqle) {
                // TODO: Add catch code
                sqle.printStackTrace();
            } finally {
                try {
                    if (st != null) {
                        st.close();
                    }
                } catch (Exception e) {
                }
            }
            return errMsg;
        }
 
 public String getSmBookData(String comb){
        ViewObjectImpl smBookData = this.getSmBookNameChngAllowRO1();
        smBookData.setNamedWhereClauseParam("ORDER_NUM", this.getShOrdBookAmendmentVO1().getCurrentRow().getAttribute("OrderNum"));
        smBookData.executeQuery();
        if(smBookData.first()!=null){
            if(comb.equalsIgnoreCase("COMB")){
                String flag = (String)smBookData.first().getAttribute("Flag");
                String varCd = (String)smBookData.first().getAttribute("VariantChange");
                String colorCd = (String)smBookData.first().getAttribute("ColorChange");
                return flag+","+varCd+","+colorCd;
            }else{
                smBookData.setNamedWhereClauseParam("bindFlag", "Y");
                smBookData.executeQuery();
                Long count = smBookData.getEstimatedRowCount();
                return count.toString();
            }
        }else{
            return null;
        }
    }

    /**
     * Container's getter for ShOrbookAmListRO1.
     * @return ShOrbookAmListRO1
     */
    public ViewObjectImpl getShOrbookAmListRO1() {
        return (ViewObjectImpl) findViewObject("ShOrbookAmListRO1");
    }

    public Long getShOrdBookAmListData(){
        ViewObjectImpl vo = this.getShOrbookAmListRO1();
        vo.setNamedWhereClauseParam("ORDER_NUM", this.getShOrdBookAmendmentVO1().getCurrentRow().getAttribute("OrderNum"));
        vo.executeQuery();
        return vo.getEstimatedRowCount();
    }

    /**
     * Container's getter for CountsmBookClrAlwRO1.
     * @return CountsmBookClrAlwRO1
     */
    public ViewObjectImpl getCountsmBookClrAlwRO1() {
        return (ViewObjectImpl) findViewObject("CountsmBookClrAlwRO1");
    }

    /**
     * Container's getter for CountSmVariantChangeMap1.
     * @return CountSmVariantChangeMap1
     */
    public ViewObjectImpl getCountSmVariantChangeMap1() {
        return (ViewObjectImpl) findViewObject("CountSmVariantChangeMap1");
    }

    /**
     * Container's getter for CountAmListRO1.
     * @return CountAmListRO1
     */
    public ViewObjectImpl getCountAmListRO1() {
        return (ViewObjectImpl) findViewObject("CountAmListRO1");
    }

    /**
     * Container's getter for ShOrdBookLogRO1.
     * @return ShOrdBookLogRO1
     */
    public ViewObjectImpl getShOrdBookLogRO1() {
        return (ViewObjectImpl) findViewObject("ShOrdBookLogRO1");
    }
    
    public String updateSmBookNmChngAlw(){
        Row orderRw = this.getShOrdBookAmendmentVO1().getCurrentRow();
        String ordbook = (String)orderRw.getAttribute("OrderNum");
        DBTransaction trx = (DBTransaction) getTransaction();
        CallableStatement st = null;
        Map session = ADFContext.getCurrent().getSessionScope();
        Integer dealer = Integer.parseInt(session.get("dealerMapCd").toString());
        String loc = session.get("locCd").toString();
        String compCode = String.valueOf(session.get("compCode"));
        String parent = session.get("parentGroupCd").toString();
        String user = (String) session.get("userCode");
        String err =null;
        if(orderRw.getAttribute("NbOrgCustCdTrans")!=null){
            try{
                String updateSql = "UPDATE Sm_book_name_chng_Allow SET flag = 'U' WHERE flag='Y' and dealer_map_cd = " + dealer + " and  LOC_CD = '" + loc + "' AND parent_group = '" + parent +
                "' AND booking_no = '" + ordbook + "'";
                st = trx.createCallableStatement(updateSql, 0);
                st.executeUpdate();       
            }catch(Exception e){
                e.printStackTrace();
                return e.getMessage();
            }finally {
                try {
                    if (st != null) {
                        st.close();
            }
                } catch (Exception e) {
                }
            }
            orderRw.setAttribute("OrgCustCd", orderRw.getAttribute("CustCd"));
            orderRw.setAttribute("CustCd", orderRw.getAttribute("NbOrgCustCdTrans"));
        }
        if(orderRw.getAttribute("AmndVariantCd")!=null){
            try{
                String updateSql = "UPDATE Sm_book_name_chng_Allow SET variant_change = 'U' WHERE variant_change='Y' and dealer_map_cd = " + dealer + " and  LOC_CD = '" + loc + "' AND parent_group = '" + parent +
                "' AND booking_no = '" + ordbook + "'";
                st = trx.createCallableStatement(updateSql, 0);
                st.executeUpdate();       
            }catch(Exception e){
                e.printStackTrace();
                return e.getMessage();
            }finally {
                try {
                    if (st != null) {
                        st.close();
            }
                } catch (Exception e) {
        }
            }
        }
        if(orderRw.getAttribute("AmndFirstClrCd")!=null || orderRw.getAttribute("AmndSndClrCd")!=null){
            try{
                String updateSql = "UPDATE Sm_book_name_chng_Allow SET color_change = 'U' WHERE color_change='Y' and dealer_map_cd = " + dealer + " and  LOC_CD = '" + loc + "' AND parent_group = '" + parent +
                "' AND booking_no = '" + ordbook + "'";
                st = trx.createCallableStatement(updateSql, 0);
                st.executeUpdate();       
            }catch(Exception e){
                e.printStackTrace();
                return e.getMessage();
            }finally {
                try {
                    if (st != null) {
                        st.close();
            }
                } catch (Exception e) {
        }
            }
        }
        Map pageFlow = ADFContext.getCurrent().getPageFlowScope();
        Integer ordModel = (Integer)pageFlow.get("P_ORD_MODEL");
        String oldModel = pageFlow.get("P_OLD_AMD_MODEL")!=null?(String)pageFlow.get("P_OLD_AMD_MODEL"):"x";
        if(orderRw.getAttribute("AmndModelCdTrans")!=null){
            if(oldModel.equalsIgnoreCase((String)orderRw.getAttribute("AmndModelCdTrans"))){
                if(orderRw.getAttribute("NbEnqVarSrl")!=null && !(((Integer)orderRw.getAttribute("NbEnqVarSrl"))==1)){
                    try{
                        String sql = "begin Sp_Ordamnd_Followup(?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?); end;";
                        st = trx.createCallableStatement(sql.toString(), 1);
                        st.setObject(1, orderRw.getAttribute("ParentGroup"));
                        st.setObject(2, orderRw.getAttribute("DealerMapCd"));
                        st.setObject(3, orderRw.getAttribute("LocCd"));
                        st.setObject(4, orderRw.getAttribute("CompFa"));
                        st.setObject(5, orderRw.getAttribute("EnqNum"));
                        st.setObject(6, orderRw.getAttribute("NbEnqVarSrl"));
                        st.setObject(7, orderRw.getAttribute("OrderNum"));
                        st.setObject(8, orderRw.getAttribute("OrderDate"));
                        st.setObject(9, orderRw.getAttribute("SalesManCd"));
                        st.setObject(10, orderRw.getAttribute("VariantCd"));
                        st.setObject(11, orderRw.getAttribute("FirstEcolorCd"));
                        st.setObject(12, orderRw.getAttribute("AmndVariantCd"));
                        st.setObject(13, orderRw.getAttribute("AmndFirstClrCd"));
                        st.setObject(14, user);
                        st.registerOutParameter(15, Types.VARCHAR);
                        st.registerOutParameter(16, Types.NUMERIC);
                        if(st.getInt(16)>0){
                            return st.getString(15);
                        }
                    }catch(Exception e){
                        e.printStackTrace();
                    }finally {
                try {
                    if (st != null) {
                        st.close();
                    }
                } catch (Exception e) {
                }
            }
                }else{
                    orderRw.setAttribute("NbEnqVarSrl", ordModel);
                }
        
                
            }
            else{
                orderRw.setAttribute("NbEnqVarSrl", ordModel);
            }
        }       else{
                    orderRw.setAttribute("NbEnqVarSrl", ordModel);
                }
        
        
        if(!(((Integer)orderRw.getAttribute("NbEnqVarSrl"))==1)){
            try{
            String sql = "UPDATE RD_ENQ SET ENQ_STATUS = 'P' WHERE ENQ_NUM = '" + orderRw.getAttribute("EnqNum") + "'" +
            " and DEALER_MAP_CD = " + dealer + " and  LOC_CD = '" + loc + "' AND PARENT_GROUP = '" + parent +
            "' AND COMP_FA = '" + compCode + "'";                        
            st = trx.createCallableStatement(sql, 0);
            st.executeUpdate();       
            }catch(Exception e){
                e.printStackTrace();
                return e.getMessage();
            }finally {
        try {
            if (st != null) {
                st.close();
            }
        } catch (Exception e) {
        }
        }
        
            try{
                String sql = "UPDATE RD_ENQ SET ENQ_STATUS = 'O'  WHERE ENQ_NUM = '" + orderRw.getAttribute("EnqNum") + "'" +
                " and DEALER_MAP_CD = " + dealer + " and  LOC_CD = '" + loc + "' AND PARENT_GROUP = '" + parent +
                "' AND COMP_FA = '" + compCode + "' and ENQ_VAR_SRL = '"+orderRw.getAttribute("NbEnqVarSrl")+"'";
                st = trx.createCallableStatement(sql, 0);
                st.executeUpdate();       
            }catch(Exception e){
                e.printStackTrace();
                return e.getMessage();
            }finally {
        try {
            if (st != null) {
                st.close();
            }
        } catch (Exception e) {
        }
        }
            String flag = null;
            if(orderRw.getAttribute("AmndVariantCd")!=null){
                flag="Y";
            }else{
                flag="N";
            }
            try{
                String sql = "begin SP_UPDATE_PRIM_MODEL(?,?,?,?,?,?,?,?,?); end;";
                st = trx.createCallableStatement(sql, 0);
                st.setObject(1, parent);
                st.setObject(2, dealer);
                st.setObject(3, loc);
                st.setObject(4, compCode);
                st.setObject(5, orderRw.getAttribute("EnqNum"));
                st.setObject(6, orderRw.getAttribute("NbEnqVarSrl"));
                st.registerOutParameter(7, Types.VARCHAR);
                st.registerOutParameter(8, Types.NUMERIC);
                st.setObject(9, flag);
                st.execute();       
                if(st.getInt(8)>0){
                    return st.getString(7);
                }
            }catch(Exception e){
                e.printStackTrace();
            }finally {
                try {
                    if (st != null) {
                        st.close();
                    }
                } catch (Exception e) {
                }
            } 
        }
            
    
        
    return null;    
    }
    
    public void fdiCallForOrdAmnd(){
        Map session = ADFContext.getCurrent().getSessionScope();
        Integer principalMapCd = Integer.parseInt(session.get("principalMapCd").toString());
        Integer dealerMapCd = Integer.parseInt(session.get("dealerMapCd").toString());
        String locCd = String.valueOf(session.get("locCd"));
        String compCode = String.valueOf(session.get("compCode"));
        String parentGrp = String.valueOf(session.get("parentGroupCd"));
        String userName = String.valueOf(session.get("userName"));
        DBTransaction trx = (DBTransaction) getTransaction();
        CallableStatement cs = null;
        Object result =
            callStoredFunction(Types.VARCHAR, "PKG_FDI.SF_VALID_DEALER(?,?,?)",
                               new Object[] { parentGrp, dealerMapCd, locCd });
        String res = result != null ? result.toString() : "";
        if (res.equalsIgnoreCase("Y")) {
            try{
                
                String sql = "begin MULDMS.PKG_FDI.SP_INS_ORDB_FDI(?,?,?,?,?,?,?,?); end;";
                cs = trx.createCallableStatement(sql.toString(), 1);
                cs.setObject(1, parentGrp);
                cs.setObject(2, dealerMapCd);
                cs.setObject(3, locCd);
                cs.setObject(4, compCode);
                cs.setObject(5, this.getShOrdBookAmendmentVO1().getCurrentRow().getAttribute("OrderNum"));
                cs.setObject(6, "ORDBA");
                cs.registerOutParameter(7, OracleTypes.NUMERIC);
                cs.registerOutParameter(8, OracleTypes.VARCHAR);
                cs.execute();
                this.getDBTransaction().commit();
            }catch(Exception e){
                e.printStackTrace();
            }finally {
                try {
                    if (cs != null) {
                        cs.close();
            }
                } catch (Exception e) {
        }
    }
        }
    }
    public String getSdGRNDetails(String grnNum, String invNum) {
                Map session = ADFContext.getCurrent().getSessionScope();
                Timestamp timestamp = new Timestamp(System.currentTimeMillis());
                Row row = this.getShGrnVO1().getCurrentRow();
                String errmsg = null;
                ViewObjectImpl vo = this.getSdGrnNewRO1();
                ViewObjectImpl sdgrnvo = this.getSdGrnVO2();
                String pmc = (String)session.get("principalMapCd");
                if(grnNum == null && invNum != null) {
                    BigDecimal lndCost = new BigDecimal(0);
                    vo.setNamedWhereClauseParam("bind_fi_cil", row.getAttribute("FinCntNum"));
                    vo.setNamedWhereClauseParam("bind_inv_num", row.getAttribute("InvoiceNum"));
                    vo.setNamedWhereClauseParam("bind_inv_type", row.getAttribute("InvType"));
                    vo.setNamedWhereClauseParam("bind_principal_map_cd", session.get("principalMapCd"));
                    vo.executeQuery();
                    BigDecimal invAmount =(BigDecimal) row.getAttribute("InvoiceAmt");
                    Long cnt = 0L;
                    cnt = (Long) vo.getEstimatedRowCount();
                    if(invAmount != null && cnt != 0) {
                        lndCost = invAmount.divide(new BigDecimal(cnt));
                    }
                    RowSetIterator rs = vo.createRowSetIterator(null);
                    while(rs.hasNext()) {
                        Row row1 = rs.next();
                        Row sdgrnrow = sdgrnvo.createRow();
                        if(pmc == "2") {
                            sdgrnrow.setAttribute("StoreCd", row1.getAttribute("StoreCdParamT"));
                        }
                        BigDecimal amt = (BigDecimal) row1.getAttribute("BasicAmt");
                        sdgrnrow.setAttribute("VariantCd", row1.getAttribute("InvdVariantCd"));
                        sdgrnrow.setAttribute("EcolorCd", row1.getAttribute("InvdVehColor"));
                        sdgrnrow.setAttribute("Vin", row1.getAttribute("InvdVin"));
                        sdgrnrow.setAttribute("KeyNum", row1.getAttribute("InvdKeyNum"));
                        sdgrnrow.setAttribute("ChassisNum", row1.getAttribute("InvdChassisNum"));
                        sdgrnrow.setAttribute("EngineNum", row1.getAttribute("InvdEngNum"));
                        if(pmc == "2" && row1.getAttribute("BasicAmt") != null) {
                            if(row.getAttribute("BasicCostT") == null) {
                                amt = new BigDecimal(0);
                            }
                        } else {
                            BigDecimal basicCost = (BigDecimal) row.getAttribute("BasicCostT");
                            BigDecimal basicamt = basicCost.divide(new BigDecimal(cnt));
                            sdgrnrow.setAttribute("BasicCost", basicamt);
                        }
                        sdgrnrow.setAttribute("MulIndentNum", row1.getAttribute("InvdMulindNum"));
                        sdgrnrow.setAttribute("MulRefNum", row1.getAttribute("InvdMulRefNum"));
                        sdgrnrow.setAttribute("GrnSrl", row1.getAttribute("InvhSrlNum"));
                        
                        if(pmc == "2" && row1.getAttribute("BasicAmt") != null) {
                            BigDecimal landedCost = new BigDecimal(0);
                           BigDecimal basicamount =(BigDecimal)row1.getAttribute("BasicAmt") ;
                           BigDecimal cgstAmt = (BigDecimal)row1.getAttribute("CgstAmt");
                           BigDecimal sgstAmt = (BigDecimal)row1.getAttribute("SgstAmt");
                           BigDecimal igstAmt = (BigDecimal)row1.getAttribute("IgstAmt");
                           BigDecimal cessAmt = (BigDecimal)row1.getAttribute("CessAmt");
                            
                            landedCost = basicamount.add(cgstAmt).add(sgstAmt).add(igstAmt).add(cessAmt);
                            sdgrnrow.setAttribute("LandedCost", landedCost);
                        } else  {
                            sdgrnrow.setAttribute("LandedCost", lndCost);                    
                        }
                        
                        sdgrnrow.setAttribute("MfgDate", row1.getAttribute("InvhMfgDt"));
                        sdgrnrow.setAttribute("EnginePf", row1.getAttribute("InvdEngPrefix"));
                        sdgrnrow.setAttribute("InvdFameFlag", row1.getAttribute("InvdFameFlag"));
                        sdgrnrow.setAttribute("Hsn", row1.getAttribute("Hsn"));
                        sdgrnrow.setAttribute("OctgCode", row1.getAttribute("OctgCode"));
                        
                        ViewObjectImpl rovo = this.getGrnNumRO1();
                        rovo.setNamedWhereClauseParam("invd_vin", row1.getAttribute("InvdVin"));
                        rovo.executeQuery();
                        Row  roRow = rovo.first();
                        String remarks =(String) roRow.getAttribute("LvString");
                        String errormsg = updateSiInv(remarks, (String)row1.getAttribute("InvoiceNum"), (String)row.getAttribute("InvType"), (String)row.getAttribute("FinCntNum"));
                        errmsg = errormsg;
                    }
                    
                }
                return errmsg;
            }
        
        private String updateSiInv(String remarks, String InvNum, String InvType, String fiCtl) {
            Map session = ADFContext.getCurrent().getSessionScope();
            Timestamp timestamp = new Timestamp(System.currentTimeMillis());
            DBTransaction trx = (DBTransaction) getTransaction();
            CallableStatement st = null;
            int errCd =0;
            String errMsg = null;
            try {
                String stmt = "begin SP_UPDATE_SI_INVH(?,?,?,?,?,?,?,?,?); end;";
                DBTransaction dbtxn = (DBTransaction) getTransaction();
                st = dbtxn.createCallableStatement(stmt.toString(), 1);
                            st.setString(1, remarks);
                            st.setString(2, InvNum);
                            st.setString(3, InvType);
                            st.setString(4, fiCtl);
                            st.setString(5, (String)session.get("locCd"));
                            st.setString(6, (String)session.get("dealerMapCd"));
                            st.setString(7, (String)session.get("parentGroupCd"));
                st.registerOutParameter(8, Types.INTEGER);
                st.registerOutParameter(9, Types.VARCHAR);
                st.executeUpdate();
                errCd=st.getInt(8);
                errMsg = st.getString(9);
            } catch (SQLException sqle) {
                // TODO: Add catch code
                sqle.printStackTrace();
            } finally {
                try {
                    if (st != null) {
                        st.close();
                    }
                } catch (Exception e) {
                }
            }
            return errMsg;
        }
        
    public void preInsertSdGrn() {
                Map session = ADFContext.getCurrent().getSessionScope();
                Timestamp timestamp = new Timestamp(System.currentTimeMillis());
                ViewObjectImpl sdvo = this.getSdGrnVO2();
                ViewObjectImpl shVO = this.getShGrnVO1();
                Row shRow = shVO.getCurrentRow();
                ViewObjectImpl cntVo = this.getGmVinCnt1();
                Row cntRow = cntVo.first();
                String invType = (String) shRow.getAttribute("InvType");
                sdvo.setNamedWhereClauseParam("bind_grn_num", shRow.getAttribute("GrnNum")); 
                sdvo.executeQuery();
                RowSetIterator sdrs = sdvo.createRowSetIterator(null);
                while(sdrs.hasNext()) {
                    System.out.println("----test---");
                    Row sdrow = sdrs.next();
                    sdrow.setAttribute("DealerMapCd", (String)session.get("dealerMapCd"));
                    sdrow.setAttribute("AvlDlrCd", (String)session.get("dealerMapCd"));
                    sdrow.setAttribute("AvlParentGroup", (String)session.get("parentGroupCd"));
                    sdrow.setAttribute("AvlLocCd", (String)session.get("locCd"));
                    sdrow.setAttribute("AvlCompFa", (String)session.get("compCode"));
                    sdrow.setAttribute("ParentGroup", (String)session.get("parentGroupCd"));
                    sdrow.setAttribute("LocCd", (String)session.get("locCd"));
                    sdrow.setAttribute("CompFa", (String)session.get("compCode"));
                    sdrow.setAttribute("CreatedDate", timestamp);
                    sdrow.setAttribute("CreatedBy", session.get("userCode"));
                    sdrow.setAttribute("GrnNum", shRow.getAttribute("GrnNum"));
                    sdrow.setAttribute("MasterKeyNumber", sdrow.getAttribute("KeyNum"));
                    sdrow.setAttribute("NetDealerPrice", 0);
                    sdrow.setAttribute("PoSrl", 1);
                    Integer cnt = (Integer) cntRow.getAttribute("LvCnt");
                    if(cnt > 0) {
                        System.out.println("----test2cnt---");
                        sdrow.setAttribute("PdiYn", "Y");
                    } else {
                        System.out.println("----test3cnt---");
                        sdrow.setAttribute("PdiYn", "N");
                    }
                    if("D".equals(invType)) {
                        System.out.println("----test4---");
                        sdrow.setAttribute("AllotNum", shRow.getAttribute("InvoiceNum"));
                        sdrow.setAttribute("AllotDate", shRow.getAttribute("InvoiceDate"));
                        sdrow.setAttribute("InvoiceNum", shRow.getAttribute("InvoiceNum"));
                        sdrow.setAttribute("InvoiceDate", shRow.getAttribute("InvoiceDate"));
                    }
                    
                }
            }
        
    public void UpdateGrnGmVin() {
                Timestamp timestamp = new Timestamp(System.currentTimeMillis());
                ViewObjectImpl sdvo = this.getSdGrnVO2();
                ViewObjectImpl shVO = this.getShGrnVO1();
                Row shRow = shVO.getCurrentRow();
                sdvo.setNamedWhereClauseParam("bind_grn_num", shRow.getAttribute("GrnNum")); 
                sdvo.executeQuery();
                RowSetIterator sdrs = sdvo.createRowSetIterator(null);
                Timestamp grndt = (Timestamp)shRow.getAttribute("GrnDate");
                Timestamp grndtTemp = (Timestamp)shRow.getAttribute("GRNTempDate");
                if(grndt != grndtTemp) {
                ViewObjectImpl vo = this.getGmVinVO1();
                vo.applyViewCriteria(vo.getViewCriteria("GmVinVOCriteria"));
                while(sdrs.hasNext()) {
                    Row sdrow = sdrs.next();
                vo.setNamedWhereClauseParam("bind_vin", sdrow.getAttribute("Vin"));
                vo.executeQuery();
                RowSetIterator vors = vo.createRowSetIterator(null);
                while(vors.hasNext()) {
                Row voRow = vors.next();
                voRow.setAttribute("GrnDate",shRow.getAttribute("GrnDate"));
                voRow.setAttribute("ModifiedBy",sdrow.getAttribute("ModifiedBy"));
                voRow.setAttribute("ModifiedDate",timestamp);
                    }
                }
            }
            }
        
    public String[] saveGrnDetails(String callType, String batchId) {
                    //        DMS2_Sp_Insert_grn_Details
                            Map session = ADFContext.getCurrent().getSessionScope();
                            String dealermapcd = (String) session.get("dealerMapCd").toString();
                            String pmc = (String) session.get("principalMapCd").toString();
                            String finyr = (String) session.get("Year").toString();
                            Integer dealercd = Integer.parseInt(dealermapcd);
                            Integer princplmapcd = Integer.parseInt(pmc);
                            Integer finyear = Integer.parseInt(finyr);
                            
                            String grndual = null;
                            ViewObjectImpl povo = this.getDms2PssPoiTempTableVO1();
                            
                            ViewObjectImpl grnsearchvo= this.getGRNSearchDualRO1();
                            Row dualRow = (Row)grnsearchvo.getCurrentRow();
                            if(dualRow != null) {
                                 grndual = (String)dualRow.getAttribute("GrnNum");
                            }
                            DBTransaction trx = (DBTransaction) getTransaction();
                            CallableStatement st = null;
                            CallableStatement st1 = null;
                            ViewObjectImpl shVO = this.getShGrnVO1();
                            Row shRow = shVO.getCurrentRow();
                            Timestamp timestamp = new Timestamp(System.currentTimeMillis());
                            ViewObjectImpl sdvo = this.getSdGrnVO2();
//                            if(grndual != null) {
//                            sdvo.setNamedWhereClauseParam("bind_grn_num", grndual); 
//                            sdvo.executeQuery();
//                            }
                            RowSetIterator sdrs = sdvo.createRowSetIterator(null);
                            System.out.println(sdvo.getEstimatedRowCount()+"sdvo---");
                            String poNum = null;
                            String grnNum = null;
                            int errCd = 0;
                            String modelCode = null;
                            String mulRefNum = "X";
                            ViewObjectImpl modelVO = this.getModelCodeLOVForGRN1();
                            
                            String errMsg = null;
                            while(sdrs.hasNext()) {
                                Row sdrow = sdrs.next();
                                System.out.println("----EXECUTE DMSPROC---");
                                 mulRefNum = (String)sdrow.getAttribute("MulRefNum");
//                                if(mulRefNum == null || mulRefNum == "") {
//                                    mulRefNum = "X";
//                                }
                                batchId = session.get("dealerMapCd")+""+session.get("principalMapCd")+""+session.get("finYear")+""+session.get("locCd")+""+session.get("parentGroupCd")+""+(String)sdrow.getAttribute("Vin");
                                System.out.println(batchId+"batchId--");
                                modelVO.setNamedWhereClauseParam("p_principal",pmc);
                                modelVO.setNamedWhereClauseParam("p_variant_cd",(String)sdrow.getAttribute("VariantCd"));
                                modelVO.executeQuery();
                                Row modelRow = modelVO.first();
//                                System.out.println("----sop in savegrn---dms2_pss_stk_details_proc----");
//                                System.out.println(modelRow.getAttribute("ModelCd")+"--modelcd---");
//                                System.out.println((String)sdrow.getAttribute("VariantCd")+"--variantcd--");
//    //                                System.out.println(modelRow.getAttribute("EcolorCd")+"--EcolorCd---");
    //                                System.out.println((String)sdrow.getAttribute("Vin")+"--Vin--");
    //                                System.out.println(modelRow.getAttribute("EngineNum")+"--EngineNum---");
    //                                System.out.println((String)sdrow.getAttribute("ChassisNum")+"--ChassisNum--");
    //                                System.out.println(modelRow.getAttribute("Damage")+"--Damage---");
    //                                System.out.println((String)sdrow.getAttribute("InvdFameFlag")+"--InvdFameFlag--");
    //                                System.out.println((String)sdrow.getAttribute("Hsn")+"--Hsn--");
    //                                System.out.println(modelRow.getAttribute("OctgCode")+"--OctgCode---");
    //                                System.out.println((String)sdrow.getAttribute("batchId")+"--batchId--");
    //                                System.out.println(modelRow.getAttribute("callType")+"--callType---");
    //                                System.out.println((String)sdrow.getAttribute("InvdFameFlag")+"--InvdFameFlag--");
                                
                                
                                try {
                                    System.out.println("---in stk proc---");
                                    String stmt = "begin dms2_pss_stk_details_proc(?,?,?,?,?,?,?,?,?,?,?,?,?,?);commit; end;";
                                    DBTransaction dbtxn = (DBTransaction) getDBTransaction();
                                    st = dbtxn.createCallableStatement(stmt.toString(), 1);
                                    st.setString(1, (String)sdrow.getAttribute("ModelCd"));
                                    st.setString(2,  (String)sdrow.getAttribute("VariantCd"));
                                    st.setString(3,  (String)sdrow.getAttribute("EcolorCd"));
                                    st.setString(4, (String)sdrow.getAttribute("Vin"));
                                    st.setString(5, (String)sdrow.getAttribute("EngineNum"));
                                    st.setString(6, (String)sdrow.getAttribute("ChassisNum"));
                                    st.setString(7, (String)sdrow.getAttribute("Damage"));
                                    st.setString(8, (String)sdrow.getAttribute("InvdFameFlag"));
                                    st.setString(9, "N");
                                    st.setString(10, (String)sdrow.getAttribute("Hsn"));
                                    st.setString(11, (String)sdrow.getAttribute("OctgCode"));
                                    st.setString(12, batchId);
                                    st.setString(13, callType);
                                    st.registerOutParameter(14, Types.VARCHAR);
                                    st.executeUpdate();
                                    String errMsg1 = (String)st.getString(14);
                                } catch(Exception e) {
                                    
                                }
                                
                                
//                                System.out.println("----sop in savegrn---dms2_pss_grn_details_proc----");
//                                System.out.println(modelRow.getAttribute("ModelCd")+"--modelcd---");
//                                System.out.println((String)sdrow.getAttribute("VariantCd")+"--variantcd--");
//                                System.out.println(sdrow.getAttribute("EcolorCd")+"--EcolorCd---");
//                                System.out.println((String)sdrow.getAttribute("Vin")+"--Vin--");
//                                System.out.println(sdrow.getAttribute("EngineNum")+"--EngineNum---");
//                                System.out.println(sdrow.getAttribute("ChassisNum")+"--ChassisNum--");
//                                System.out.println(sdrow.getAttribute("MulSrlNum")+"--MulSrlNum---");
//                                System.out.println(sdrow.getAttribute("KeyNum")+"--KeyNum--");
//                                System.out.println(sdrow.getAttribute("MulIndentNum")+"--MulIndentNum--");
    //                                System.out.println(modelRow.getAttribute("OctgCode")+"--OctgCode---");
    //                                System.out.println(mulRefNum+"--mulRefNum--");
    //                                System.out.println(modelRow.getAttribute("callType")+"--callType---");
                                try {
                                    System.out.println("test dms2_pss_grn_details_proc");
                                    String stmt1 = "begin dms2_pss_grn_details_proc(?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?);commit; end;";
                                    System.out.println("test dms2_pss_grn_details_proc1---");
                                    DBTransaction dbtxn1 = (DBTransaction) getDBTransaction();
                                    st1 = dbtxn1.createCallableStatement(stmt1.toString(), 1);
                                    st1.setString(1, (String)modelRow.getAttribute("ModelCd"));
                                    st1.setString(2,  (String)sdrow.getAttribute("VariantCd"));
                                    System.out.println(sdrow.getAttribute("VariantCd"));
                                    st1.setString(3,  (String)sdrow.getAttribute("EcolorCd"));
                                    st1.setString(4, (String)sdrow.getAttribute("Vin"));
                                    st1.setString(5, (String)sdrow.getAttribute("EngineNum"));
                                    st1.setString(6, (String)sdrow.getAttribute("ChassisNum"));
                                    st1.setString(7, (String)sdrow.getAttribute("KeyNum"));
                                    st1.setString(8, (String)sdrow.getAttribute("MulIndentNum"));
                                    st1.setInt(9, (Integer)sdrow.getAttribute("MulSrlNum"));
                                    st1.setString(10, mulRefNum);
                                    st1.setString(11, null);
                                    st1.setString(12, (String)sdrow.getAttribute("Hsn"));
                                    st1.setString(13, (String)sdrow.getAttribute("OctgCode"));
                                    st1.setString(14, batchId);
                                    st1.setString(15, callType);
                                    st1.registerOutParameter(16, Types.VARCHAR);
                                    st1.executeUpdate();
                                    System.out.println(stmt1);
                                    String errMsg1 = (String)st1.getString(16);
                                    System.out.println(errMsg1+"errMsg1---");
                                } catch(Exception e) {
                                    System.out.println("failed to execute dms2_pss_grn_details_proc");
                                    e.printStackTrace();
                                }
                            }
                            sdrs.closeRowSetIterator();                           
    // System.out.println("----sop in savegrn---DMS2_SP_INSERT_GRN_DETAILS----");
    //                            System.out.println((BigDecimal)shRow.getAttribute("InvoiceAmt"));
    //                            System.out.println((Timestamp)shRow.getAttribute("GrnDate")+"--GrnDate--");
    //                            System.out.println( (String)shRow.getAttribute("InvoiceNum")+"--InvoiceNum---");
    //                            System.out.println((Timestamp)shRow.getAttribute("InvoiceDate")+"--InvoiceDate--");
    //                            System.out.println((String)session.get("userCode")+"--userCode---");
    //                            System.out.println(shRow.getAttribute("FinCntNum")+"--FinCntNum--");
    //                            System.out.println(callType+"---callType--");
    //                            System.out.println(dealercd+"--dealercd--");
    //                            System.out.println(princplmapcd+"--princplmapcd--");
    //                            System.out.println(finyear+"--finyear---");
    //                            System.out.println(session.get("locCd")+"--locCd--");
    //                            System.out.println(session.get("parentGroupCd")+"--parentGroupCd---");
    //                            System.out.println((String)session.get("compCode")+"--compCode--");
    //                            System.out.println(grndual+"--grndual---");
    //                            System.out.println((String)session.get("userId")+"--userId---");
                            try {
                                                    System.out.println("---in DMS2_SP_INSERT_GRN_DETAILS proc---");
                                                    String stmt = "begin MULDMS.DMS2_SP_INSERT_GRN_DETAILS(?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?);commit; end;";
                                                    DBTransaction dbtxn = (DBTransaction) getDBTransaction();
                                                    st = dbtxn.createCallableStatement(stmt.toString(), 1);
                                                st.setInt(1, (Integer)dealercd);
                                                st.setInt(2,  (Integer)princplmapcd);
                                                st.setInt(3,  (Integer)finyear);
                                                st.setString(4, (String)session.get("locCd"));
                                                st.setString(5, (String)session.get("parentGroupCd"));
                                                st.setString(6, (String)session.get("compCode"));
                                                st.setString(7, grndual);
                                                st.setString(8, (String)null);
                                                st.registerOutParameter(9, Types.VARCHAR);
                                                st.setBigDecimal(10, (BigDecimal)shRow.getAttribute("InvoiceAmt"));
                                                st.setTimestamp(11, (Timestamp)shRow.getAttribute("GrnDate"));
                                                st.setString(12, (String)shRow.getAttribute("InvoiceNum"));
                                                st.setTimestamp(13, (Timestamp)shRow.getAttribute("InvoiceDate"));
                                                st.setString(14, (String)shRow.getAttribute("InvType"));
                                                st.setString(15, (String)session.get("userCode"));
                                                st.setString(16, (String)shRow.getAttribute("FinCntNum"));
                                                st.registerOutParameter(17, Types.VARCHAR);
                                                st.setString(18, null);
                                                st.setString(19, null);
                                                st.setString(20, null);
                                                st.setString(21, null);
                                                st.setString(22, null);
                                                st.setString(23, null);
                                                st.setString(24, null);
                                                st.setInt(25, 0);
                                                st.setString(26, null);
                                                st.setString(27, null);
                                                st.setString(28, null);
                                                st.setString(29, null);
                                                st.setString(30, null);
                                                st.setString(31, null);
                                                st.setString(32, callType);
                                                st.setString(33, (String)session.get("userId"));
                                                st.setString(34, batchId);
                                                st.setString(35, callType);
                                                st.registerOutParameter(36, Types.VARCHAR);
                                                st.registerOutParameter(37, Types.INTEGER);
                                                System.out.println("---before execute update----");
                                                st.executeUpdate();
                                                System.out.println("--after execute update----");
                                                poNum = st.getString(17);
                                                grnNum = st.getString(9);
                                                errCd=st.getInt(37);
                                                errMsg = st.getString(36);
//                                                shRow.setAttribute("GrnNum",grnNum);
//                                                shRow.setAttribute("GrnNumT",grnNum);
                                                System.out.println(grnNum+"------grnNum----");
                                                System.out.println("---end of wrapper proc---");
                                                povo.executeQuery();
                                                Long pocount = povo.getEstimatedRowCount();
                                                System.out.println(pocount+"pocount----");
                                                    ViewObjectImpl sdvo1 = this.getSdGrnVO2();
                                                    if(grndual != null) {
                                                    sdvo1.setNamedWhereClauseParam("bind_grn_num", grndual); 
                                                    sdvo1.executeQuery();
                                                    }
                                                RowSetIterator sdrs1 = sdvo1.createRowSetIterator(null);
    //                                            RowSetIterator rowpo =  povo.createRowSetIterator(null);
        //                                        System.out.println(rowpo.next().getAttribute("Ponum")+"Ponum---");
                                                    Row[] rs = povo.getAllRowsInRange();
                                                                            System.out.println(rs+"--rows in range---");
                                                                            System.out.println(rs.length);
                                                                            System.out.println(pocount+"--pocount---");
                                                                                            Row poRow = null;
                                                                                            int countpo = 0;
                                                        System.out.println(sdrs1);
                                                                                            while(sdrs1.hasNext()) {
                                                                                                Row sdrow1 = sdrs1.next();
                                                                                                    sdrow1.setAttribute("PoNum",rs[countpo].getAttribute("Ponum"));
                                                                                                    sdrow1.setAttribute("GrnNum",grnNum);
                                                                                                    System.out.println("---ponum---"+rs[0].getAttribute("Ponum"));
                                                                                                    countpo =countpo+1;
                                                    }
                                                    sdrs1.closeRowSetIterator();
                                                    shRow.setAttribute("GrnNum",grnNum);
                                                    shRow.setAttribute("GrnNumT",grnNum);
                                                }
                                                
                                                    catch (SQLException sqle) {
                                                // TODO: Add catch code
                                                sqle.printStackTrace();
                                                } finally {
                                                try {
                                                if (st != null) {
                                                st.close();
                                                }
                                                } catch (Exception e) {
                                                }
                                                }
                            System.out.println(shRow.getAttribute("GrnNumT")+"GrnNumT----");
                            System.out.println(shRow.getAttribute("GrnNum")+"GrnNum----");
                            System.out.println("---grnNum----"+grnNum);
                                System.out.println("end----sdrow");
                            return new String[] { grnNum, poNum, errMsg };
                        }

        /**
         * Container's getter for SdGrnNewRO1.
         * @return SdGrnNewRO1
         */
        public ViewObjectImpl getSdGrnNewRO1() {
            return (ViewObjectImpl) findViewObject("SdGrnNewRO1");
        }

        /**
         * Container's getter for GrnNumRO1.
         * @return GrnNumRO1
         */
        public ViewObjectImpl getGrnNumRO1() {
            return (ViewObjectImpl) findViewObject("GrnNumRO1");
        }

        /**
         * Container's getter for GmVinCnt1.
         * @return GmVinCnt1
         */
        public ViewObjectImpl getGmVinCnt1() {
            return (ViewObjectImpl) findViewObject("GmVinCnt1");
        }
        
            public void initStockTransferReceiptForm()
            {
        try {
            this.getDBTransaction().rollback();
            this.getReceiptEOView1().executeEmptyRowSet();
            this.getReceiptTVO1().executeEmptyRowSet();
            this.getReceiptTVO1().executeQuery();
        } catch (Exception e) {
            // TODO: Add catch code
            e.printStackTrace();
        }
            }

    /**
     * Container's getter for OrderRefundClosedYnRVO1.
     * @return OrderRefundClosedYnRVO1
     */
    public ViewObjectImpl getOrderRefundClosedYnRVO1() {
        return (ViewObjectImpl) findViewObject("OrderRefundClosedYnRVO1");
}


            public String fetchValuesOnVinInStockReceiptForm(String dealer_map,String parent_group,String loc_code,String pmc,String comp_fa)
            {

                ViewObjectImpl voiRec=this.getReceiptEOView1();
                ReceiptEOViewRowImpl rwRec=(ReceiptEOViewRowImpl)voiRec.getCurrentRow();
                System.out.println("Dealer Map Code:::::"+dealer_map+"  Parent Group Code::::::"+parent_group+" Loc Code:::::"+loc_code+" Pmc:::::::"+pmc+" Comp Fa:::::"+comp_fa);
                System.out.println("Ind num::::"+rwRec.getStkindNum()+" Issue Date::::"+rwRec.getStktrIssNum()+" Issue Type:::::"+rwRec.getIssueType());
                System.out.println("Vin  Number is:::::::::"+rwRec.getVin());            
                DBTransaction trx = (DBTransaction) getTransaction();
                CallableStatement st = null;
            try {
                String stmt =
                    "begin SP_GET_INDENT_GRN_DETAILS_STR(?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?); end;";
                st = trx.createCallableStatement(stmt, 0);
                st.setObject(1, dealer_map);
                st.setObject(2, pmc);
                st.setObject(3, loc_code);
                st.setObject(4, comp_fa);
                st.setObject(5, parent_group);
                st.setObject(6, rwRec.getStkindNum());
                st.setObject(7, rwRec.getStktrIssDate());
                st.setObject(8, rwRec.getIssueType());
                st.registerOutParameter(9, Types.VARCHAR); //VIN 
                st.registerOutParameter(10, Types.VARCHAR); //TO LOCATION CODE
                st.registerOutParameter(11, Types.VARCHAR); //TO LOC CODE DESC
                st.registerOutParameter(12, Types.VARCHAR); //INVOICE NUM
                st.registerOutParameter(13, Types.DATE); //INVOICE DATE
                st.registerOutParameter(14, Types.VARCHAR); //PO NUM
                st.registerOutParameter(15, Types.VARCHAR); //GRN NUM
                st.registerOutParameter(16, Types.DATE); //GRN DATE
                st.registerOutParameter(17, Types.VARCHAR); //VARIANT CODE
                st.registerOutParameter(18, Types.VARCHAR); //VARIANT DESC
                st.registerOutParameter(19, Types.VARCHAR); //COLOR CODE
                st.registerOutParameter(20, Types.VARCHAR); //COLOR DESC
                st.registerOutParameter(21, Types.VARCHAR); //ENGINE NUM
                st.registerOutParameter(22, Types.VARCHAR); //KEY NUM
                st.registerOutParameter(23, Types.VARCHAR); //CASSIS NUMM
                st.registerOutParameter(24, Types.NUMERIC); //NET DEALE PRICE
                st.registerOutParameter(25, Types.NUMERIC); //SELLING PRICE
                st.registerOutParameter(26, Types.NUMERIC); //LANDED COST
                st.registerOutParameter(27, Types.VARCHAR); //ERROR MESSAGE
                st.registerOutParameter(28, Types.NUMERIC); //ERROR CD
                st.executeUpdate();
                if(st.getInt(28)>0)
                {
                return st.getString(27);
                }
                else
                {
                    Row curr_rw=voiRec.getCurrentRow();
                    curr_rw.setAttribute("VinT", st.getString(9));
                    curr_rw.setAttribute("ToLocCd", st.getString(10));
                    curr_rw.setAttribute("ToLocDescT", st.getString(11));
                    curr_rw.setAttribute("InvoiceNum",st.getString(12));
                    curr_rw.setAttribute("InvoiceDate",st.getObject(13));
                    curr_rw.setAttribute("PoNum", st.getString(14));
                    curr_rw.setAttribute("GrnNum",st.getString(15));
                    curr_rw.setAttribute("GrnDate",st.getObject(16));
                    curr_rw.setAttribute("VariantCd",st.getString(17));
                    curr_rw.setAttribute("VariantDescT",st.getString(18));
                    curr_rw.setAttribute("EcolorCd", st.getString(19));
                    curr_rw.setAttribute("ColorDescT", st.getString(20));
                    curr_rw.setAttribute("EngineNum",st.getString(21));
                    curr_rw.setAttribute("KeyNum",st.getString(22));
                    curr_rw.setAttribute("ChassisNum",st.getString(23));
                    curr_rw.setAttribute("NetDealerPrice",st.getInt(24));
                    curr_rw.setAttribute("SellingPrice", st.getInt(25));
                    curr_rw.setAttribute("LandedCost",st.getInt(26));
                    curr_rw.setAttribute("LandedCost","Pending");
                }

                System.out.println("Erorr code is::::::::::::::::");
                
                
                
            } catch (SQLException sqle) {
                // TODO: Add catch code
                sqle.printStackTrace();
            }

            
            
            return null;
            }
            

    public String onSaveStockReceiptForm(String parent_group,Integer dealer_map,String comp_fa,String loc_code,String pmc,Integer finYear,String tallyIntegration,String user_code,String user_id)
    {
        System.out.println("parent_group:::::"+parent_group+"  dealer_map:::::"+dealer_map+" comp_fa:::::"+comp_fa+" loc_code:::::"+loc_code+" pmc::::"+pmc+" finYear::::"+finYear+" tallyIntegration:::::"+tallyIntegration+" user_code:::::"+user_code);
        
        
        DBTransaction trx = (DBTransaction) getTransaction();
        CallableStatement st = null;
        
        ViewObjectImpl voiRec= this.getReceiptEOView1();
        String rec_num=null;
        Row rwRec=voiRec.getCurrentRow();
        if(rwRec.getAttribute("StkRecNum")==null)
        {
        rec_num=generateNextNumGlobalMethod(dealer_map, pmc, loc_code, comp_fa, "STC", finYear);
        System.out.println("result is:::::"+rec_num);
        rwRec.setAttribute("StkRecNum", rec_num);

            try {
                
                ViewObjectImpl voiCurrDate = this.getSfGetTimeCurrRO1();
                Row voiCurrRw = voiCurrDate.first();
                rwRec.setAttribute("RecdDate", voiCurrRw.getAttribute("CurrDate"));
                rwRec.setAttribute("ModifiedBy",user_code);
                java.sql.Timestamp datetime = new java.sql.Timestamp(System.currentTimeMillis());
                rwRec.setAttribute("ModifiedDate", datetime);
                
            } catch (Exception e) {
                // TODO: Add catch code
                e.printStackTrace();
        }
        
        
        }
        
        if(rwRec.getAttribute("StkRecNum")!=null)
        {
            System.out.println("When receipt number is not null BLOCK");
            System.out.println("Print passing parameters here");
            System.out.println("comp_fa->"+comp_fa+"dealer_map->"+dealer_map+"parent_group->"+parent_group+"loc_code->"+loc_code+" Vin->"+rwRec.getAttribute("Vin"));
            ViewObjectImpl voiSdShCnt=this.getShGrnSdGrnCntOneReceiptRO1();
            voiSdShCnt.setNamedWhereClauseParam("bindCompFa",comp_fa);
            voiSdShCnt.setNamedWhereClauseParam("bindGlobDealer",dealer_map);
            voiSdShCnt.setNamedWhereClauseParam("bindGlobParentGroup",parent_group);
            voiSdShCnt.setNamedWhereClauseParam("bindLocCode",loc_code);
            voiSdShCnt.setNamedWhereClauseParam("bindVIN",rwRec.getAttribute("Vin"));
            voiSdShCnt.executeQuery();
            System.out.println("After filter ShGrnSdGrnCntOneReceiptRO1 vo query is->"+voiSdShCnt.getQuery());
            Row rwSdShCnt=voiSdShCnt.first();
            Integer lv_cnt=rwSdShCnt.getAttribute("LvCntVal")!=null?(Integer)rwSdShCnt.getAttribute("LvCntVal"):0;
            System.out.println("count value of lv_cnt->"+lv_cnt);
            if(lv_cnt==0)
            {
                System.out.println("When count is 0");
                return "Execution failed while fetching the stock details";
            }
            else
            {
                System.out.println("When count is not 0");
            String grn_parnet_group=null,grn_dealer_mapcd=null,grn_loc_code=null,grn_comp_fa=null; 
            Integer LV_STK_CHK=0,stk_srl_num=0;
            ViewObjectImpl voiSdGrn  = this.getSdGrnRO1();
            ViewCriteria vc=voiSdGrn.getViewCriteria("VinVC");
            voiSdGrn.applyViewCriteria(vc, false);
            voiSdGrn.setNamedWhereClauseParam("bind_vin",rwRec.getAttribute("Vin"));
            voiSdGrn.executeQuery();
             System.out.println("Row count of SdGrnRO->"+voiSdGrn.getQuery());   
            System.out.println("After filter SdGrnRO1 vo query:->"+voiSdGrn.getQuery());
            if(voiSdGrn.getEstimatedRowCount()>0)
            {
            System.out.println("When row count is not 0");
            Row rwSdGrn=voiSdGrn.first();
            grn_parnet_group=rwSdGrn.getAttribute("ParentGroup")!=null?rwSdGrn.getAttribute("ParentGroup").toString():null;
            grn_dealer_mapcd=rwSdGrn.getAttribute("DealerMapCd")!=null?rwSdGrn.getAttribute("DealerMapCd").toString():null;
            grn_loc_code=rwSdGrn.getAttribute("LocCd")!=null?rwSdGrn.getAttribute("LocCd").toString():null;
            grn_comp_fa=rwSdGrn.getAttribute("CompFa")!=null?rwSdGrn.getAttribute("CompFa").toString():null;
            }
            System.out.println("Value of SdGrn filter global value");
            
            System.out.println("grn_parnet_group->"+grn_parnet_group);    
            System.out.println("grn_dealer_mapcd->"+grn_dealer_mapcd);    
            System.out.println("grn_loc_code->"+grn_loc_code);    
            System.out.println("grn_comp_fa->"+grn_comp_fa);    


            ViewObjectImpl voiMax=this.getShStockMaxRO1();
            voiMax.setNamedWhereClauseParam("bindCompFa", grn_comp_fa);
            voiMax.setNamedWhereClauseParam("bindDealerMapCd", grn_dealer_mapcd);
            voiMax.setNamedWhereClauseParam("bindLocCode", grn_loc_code);
            voiMax.setNamedWhereClauseParam("bindParentGroup", grn_parnet_group);
            voiMax.setNamedWhereClauseParam("bindRecNum", rwRec.getAttribute("StkRecNum"));
            voiMax.executeQuery();
                System.out.println("Row count of ShStockMaxRO:->"+voiMax.getQuery());
                System.out.println("Query of ShStockMaxRO filter value:->"+voiMax.getEstimatedRowCount());
             if(voiMax.getEstimatedRowCount()>0)
             {
             Row rwMax=voiMax.first();
             stk_srl_num=(Integer)rwMax.getAttribute("StkSrlNum");
             System.out.println("Value of stk_srl_num:->"+stk_srl_num);
             }
             
            ViewObjectImpl voiCntStk=this.getShStockCntReceiptRO1();
            voiCntStk.setNamedWhereClauseParam("bindCompFa", comp_fa);
            voiCntStk.setNamedWhereClauseParam("bindDealerMapCode", dealer_map);
            voiCntStk.setNamedWhereClauseParam("bindLocCode", loc_code);
            voiCntStk.setNamedWhereClauseParam("bindParentGroup", parent_group);
            voiCntStk.setNamedWhereClauseParam("bindVinNum", rwRec.getAttribute("Vin"));
            voiCntStk.executeQuery();
            System.out.println("After filter count of ShStockCntReceiptRO:->"+voiCntStk.getEstimatedRowCount());
                System.out.println("After filter Query of ShStockCntReceiptRO:->"+voiCntStk.getQuery());
             Row rwCntStk=voiCntStk.first();
                
             Integer LvStkChk=(Integer)rwCntStk.getAttribute("LvStkChk");
                System.out.println("LvStkChk===========>"+LvStkChk);
             if(LvStkChk>0)
             {
                 System.out.println("Vehicle found BLOCK");
             return "Already Vehicle found in stock";   
             }
              else
             {
                 System.out.println("Inside else second");

                 ViewObjectImpl voShGrn=this.getShStockVO1();
                 ViewObjectImpl voshsd=this.getshSdGrnReceiptRO1();
                 voshsd.setNamedWhereClauseParam("bindCompFa", comp_fa);
                 voshsd.setNamedWhereClauseParam("bindDealerMapCode", dealer_map);
                 voshsd.setNamedWhereClauseParam("bindLocCode", loc_code);
                 voshsd.setNamedWhereClauseParam("bindParentGroup", parent_group);
                 voshsd.setNamedWhereClauseParam("bindPmc", pmc);
                 voshsd.setNamedWhereClauseParam("bindVin",rwRec.getAttribute("Vin"));
                 voshsd.executeQuery();
                 System.out.println("Get estimated row count of voshsd is::::::::"+voshsd.getEstimatedRowCount());
                 System.out.println("After filter query is:->"+voshsd.getQuery());
                 if(voshsd.getEstimatedRowCount()>0)
                 {
                     System.out.println("Inside if for insert into SH_SHOCK");
                     ViewObjectImpl voiCurrDate=this.getSfGetTimeCurrRO1();
                     Row voiCurrRw=voiCurrDate.first();
                     Row rwShSd=voshsd.first();
                     Row rwGrn=voShGrn.createRow();
                     rwGrn.setAttribute("ParentGroup", rwShSd.getAttribute("ParentGroup"));
                     rwGrn.setAttribute("DealerMapCd",rwShSd.getAttribute("DealerMapCd"));
                     rwGrn.setAttribute("LocCd", rwShSd.getAttribute("LocCd"));
                     rwGrn.setAttribute("CompFa", rwShSd.getAttribute("CompFa"));
                     rwGrn.setAttribute("StkInDocNum", rwRec.getAttribute("StkRecNum"));
                     rwGrn.setAttribute("StkSrlNum", stk_srl_num);
                     rwGrn.setAttribute("StkInDate", rwRec.getAttribute("RecdDate")); //RecdDate
                     System.out.println("rwShSd.getAttribute(\"Damage\")"+rwShSd.getAttribute("Damage"));
                     String damage=rwShSd.getAttribute("Damage")!=null?rwShSd.getAttribute("Damage").toString():"NOTFOUND";
                     System.out.println("damage::::::::::::::::::::::::"+damage);
                     if(!damage.equalsIgnoreCase("NOTFOUND") || !damage.equalsIgnoreCase("null"))
                     {
                     System.out.println("damage-------------->>>>>>>"+damage);    
                     try {
                                rwGrn.setAttribute("ChassisStatus", rwShSd.getAttribute("Damage"));
                            } catch (Exception e) {
                                // TODO: Add catch code
                                e.printStackTrace();
                            }
                     }
                     rwGrn.setAttribute("ChassisNum", rwShSd.getAttribute("ChassisNum"));
                     rwGrn.setAttribute("EngineNum", rwShSd.getAttribute("EngineNum"));
                     rwGrn.setAttribute("Vin", rwShSd.getAttribute("Vin"));
                     rwGrn.setAttribute("ModelCd", rwShSd.getAttribute("ModelCd"));
                     rwGrn.setAttribute("VariantCd", rwShSd.getAttribute("VariantCd"));
                     
                     
                     rwGrn.setAttribute("ColorCd", rwShSd.getAttribute("EcolorCd"));
                     rwGrn.setAttribute("GrnDate", rwShSd.getAttribute("GrnDate"));
                     rwGrn.setAttribute("StkInDocType", "STC");
                     rwGrn.setAttribute("GrnNum", rwShSd.getAttribute("GrnNum"));
                     rwGrn.setAttribute("AvlParentGroup", parent_group);
                     rwGrn.setAttribute("AvlDealerMapCd", dealer_map);


                     rwGrn.setAttribute("AvlLocCd", loc_code);
                     rwGrn.setAttribute("AvlCompFa", comp_fa);
                     rwGrn.setAttribute("Hsn", "NOHSN");
                     rwGrn.setAttribute("CreatedBy", user_code);
                     rwGrn.setAttribute("CreatedDate", voiCurrRw.getAttribute("CurrDate"));
                     voShGrn.insertRow(rwGrn);
                 }
                
             }
                
            }            
        }
        //Call GRN UPDATE PROCEDURE
        String dlr_str=Integer.toString(dealer_map);
       String grn_update= UpdateGrnAlot(dlr_str, parent_group, comp_fa, loc_code, user_code, rwRec.getAttribute("Vin").toString(),rwRec.getAttribute("StatusT").toString());  
        System.out.println("Grn update value is::::::::::::::"+grn_update);
        if(grn_update!=null)
        {
        return grn_update; 
        }

        ViewObjectImpl voiStInd=this.getStIndentVO1();
        ViewCriteria stIndVC = voiStInd.getViewCriteriaManager().getViewCriteria("ViewCriteraForReceiptVC");
        VariableValueManager stIndVVM = stIndVC.ensureVariableManager();
        stIndVVM.setVariableValue("bindDealerMapCd",dealer_map);
        stIndVVM.setVariableValue("bindCompFa", comp_fa);
        stIndVVM.setVariableValue("bindLocCd", loc_code);
        stIndVVM.setVariableValue("bindParentGroupCd", parent_group);
        stIndVVM.setVariableValue("bindIndentNo", rwRec.getAttribute("StkindNum"));
        stIndVVM.setVariableValue("bindVinNum", rwRec.getAttribute("Vin"));
        voiStInd.applyViewCriteria(stIndVC);
        voiStInd.executeQuery();
        System.out.println("voiStInd::::::::::::::::::::::Estimated row count is:::::"+voiStInd.getEstimatedRowCount());
        RowSetIterator rsiStInd=voiStInd.createRowSetIterator(null);
        while(rsiStInd.hasNext())
        {
        Row rwStInd=rsiStInd.next();
            rwStInd.setAttribute("RecdDate", rwRec.getAttribute("RecdDate"));
            rwStInd.setAttribute("RecdLocCd", loc_code);
        }
        rsiStInd.closeRowSetIterator();
        
        
        return null;
    }
    
    public String afterSaveOnStockReceiptForm(String pmc,String parent_group,String dealer_map,String loc_code,String tallyIntegration,String comp_fa,String user_code,String user_id)
    {
    System.out.println("-----------------afterSaveOnStockReceiptForm--------------------------------");
    System.out.println("pmc:::::::"+pmc+" parent_group::::"+parent_group+" dealer_map::::"+dealer_map+" loc_code::::"+loc_code+" tallyIntegration::::"+tallyIntegration+" comp_fa:::::"+comp_fa+" user_code:::::"+user_code+" ::::user_id"+user_id);
    String ret_val=null;
    ViewObjectImpl voRec = this.getReceiptEOView1();
    ReceiptEOViewRowImpl rwRec = (ReceiptEOViewRowImpl) voRec.getCurrentRow();
    
    Object valid_dlr_result =callStoredFunction(Types.VARCHAR, "PKG_FDI.SF_VALID_DEALER(?,?,?)",
                       new Object[] { parent_group, dealer_map, loc_code });
    System.out.println("Valid Dealer result is::::" + valid_dlr_result);
    DBTransaction trx = (DBTransaction) getTransaction();
    CallableStatement st = null;
    if (valid_dlr_result.toString().equalsIgnoreCase("Y"))
    {
    String stmt = "begin DMS2_SALES_INS_STO_INTO_FDI_RC(?,?,?,?,?,?,?,?,?,?,?);commit; end;";

    try {
        st = trx.createCallableStatement(stmt, 0);
        st.setObject(1, pmc);
        st.setObject(2, parent_group);
        st.setObject(3, dealer_map);
        st.setObject(4, loc_code);
        st.setObject(5, comp_fa);
        st.setObject(6, rwRec.getStktrIssNum());
        st.setObject(7, rwRec.getStkindNum());
        st.setObject(8, rwRec.getStktrIssDate());
        st.setObject(9, user_code);
        st.registerOutParameter(10, Types.NUMERIC);
        st.registerOutParameter(11, Types.VARCHAR);
        st.executeUpdate();
        System.out.println("Result is::::"+st.getString(11));
    } catch (SQLException sqle) {
        sqle.printStackTrace();
    } finally {
        try {
            st.close();
        } catch (SQLException sqle) {
            sqle.printStackTrace();
    }

    }
    }
    if (tallyIntegration.equalsIgnoreCase("Y")) 
    {

    //        tallyIntegrationStockTransferReceiptsSave(pmc, dealer_map, parent_grooup, loc_code, comp_fa, user_name, from_dealerMap, from_parentGroup, from_locCode, from_compFa, rec_num);
    ret_val=tallyIntegrationStockTransferReceiptsSave(pmc, dealer_map, parent_group, loc_code, comp_fa, user_code, rwRec.getDealerMapCd(), rwRec.getParentGroup(), rwRec.getLocCd(), rwRec.getCompFa(), rwRec.getStkRecNum());
    System.out.println("ret_val tally::::::::::::::::::::::::"+ret_val);
    }
    return ret_val;
    }


    /**
     * Container's getter for SfGetTimeCurrRO1.
     * @return SfGetTimeCurrRO1
     */
    public ViewObjectImpl getSfGetTimeCurrRO1() {
        return (ViewObjectImpl) findViewObject("SfGetTimeCurrRO1");
    }
    
    
    
    public String tallyIntegrationStockTransferReceiptsSave(String pmc,String dealer_map,String parent_group,String loc_code,String comp_fa,String user_name,Integer from_dealerMap,String from_parentGroup,String from_locCode,String from_compFa,String rec_num) {
        DBTransaction trx = (DBTransaction) getTransaction();
        ViewObjectImpl voiCurrDate=this.getSfGetTimeCurrRO1();
        Row voiCurrRw=voiCurrDate.first();
        CallableStatement st = null;
        String ret_val=null;
        try {
            String stmt =
                "DECLARE \n" + "status BOOLEAN;  \n" + "result VARCHAR2(13); \n" + "\n" + "BEGIN \n" +
                "status := NULL; \n" + "PK_FINC_TRNS_INTERFACE.STKTRANSFR_RECPT_VEH(?,?,?,?,?,?,?,?,?,?,?,?,?,?,status,?); \n" +
                "BEGIN \n" + "IF status THEN result := 'Yes'; \n" + "ELSIF NOT status THEN result := 'No'; \n" +
                "ELSE result := 'NULL'; \n" + "END IF;\n" + "END; \n" + "? := result;\n" + "COMMIT;\n" + "END ;";
            st = trx.createCallableStatement(stmt, 0);
            st.setObject(1, pmc);
            st.setObject(2, parent_group);
            st.setObject(3, dealer_map);
            st.setObject(4, loc_code);
            st.setObject(5, comp_fa);
            st.setObject(6, from_parentGroup);
            st.setObject(7, from_dealerMap);
            st.setObject(8, from_locCode);
            st.setObject(9, from_compFa);
            st.setObject(10, "Dms Stock In");
            st.setObject(11, rec_num);
            st.setObject(12, user_name);
            st.setObject(13, voiCurrRw.getAttribute("CurrDate"));
            st.setObject(14, "O");
            st.registerOutParameter(15, Types.VARCHAR);
            st.registerOutParameter(16, Types.VARCHAR);
            st.executeUpdate();            
            System.out.println("get result is::::of 15th num param value:"+st.getString(15));
            System.out.println("get result is::::of 15th num param value:"+st.getString(16));
            if(st.getString(16)!=null)
            {
            ret_val="Y";
            }

        } catch (SQLException sqle) {
            // TODO: Add catch code
            sqle.printStackTrace();
        } finally {
            try {
                if (st != null) {
                    st.close();
                }
            } catch (Exception e) {
            }
        } 
        return ret_val;
    }


    /**
     * Container's getter for ShStockVO1.
     * @return ShStockVO1
     */
    public ViewObjectImpl getShStockVO1() {
        return (ViewObjectImpl) findViewObject("ShStockVO1");
    }

    /**
     * Container's getter for shSdGrnReceiptRO1.
     * @return shSdGrnReceiptRO1
     */
    public ViewObjectImpl getshSdGrnReceiptRO1() {
        return (ViewObjectImpl) findViewObject("shSdGrnReceiptRO1");
    }
    
    public String onUpdateSdGrn() {
                        Map session = ADFContext.getCurrent().getSessionScope();
                        DBTransaction trx = (DBTransaction) getTransaction();
                                    java.sql.Timestamp datetime = new java.sql.Timestamp(System.currentTimeMillis());
                        int errCd = 0;
                                    String docNum = "";
                        String errMsg = null;
                        CallableStatement st = null;
                        Timestamp timestamp = new Timestamp(System.currentTimeMillis());
                        ViewObjectImpl sdvo = this.getSdGrnVO2();
                        RowSetIterator sdrs = sdvo.createRowSetIterator(null);
                        while(sdrs.hasNext()) {
                            Row sdrow = sdrs.next();
                           String sdstatus = (String)sdrow.getAttribute("Damage");
                            if("R".equals(sdstatus)) {
                                try {
                                    System.out.println("-----test procedure----");
                                    String stmt = "begin SP_UPDATE_RETURN_VIN_STK(?,?,?,?,?,?,?,?,?,?,?,?,?);commit; end;";
                                    DBTransaction dbtxn = (DBTransaction) getTransaction();
                                    st = dbtxn.createCallableStatement(stmt.toString(), 1);
                                    st.setObject(1, session.get("principalMapCd"));
                                    st.setObject(2, session.get("parentGroupCd"));
                                    st.setObject(3, session.get("dealerMapCd"));
                                    st.setObject(4, session.get("locCd"));
                                    st.setObject(5, session.get("compCode"));
                                    st.setObject(6,  session.get("Year"));
                                                st.setObject(7, sdrow.getAttribute("Vin"));
                                                st.setObject(8, sdrow.getAttribute("ChassisNum"));
                                                st.setObject(9, sdrow.getAttribute("KeyNum"));
                                                st.setObject(10, sdrow.getAttribute("EngineNum"));
                                                st.setObject(11, session.get("userCode"));
                                                st.registerOutParameter(12, Types.INTEGER);
                                                st.registerOutParameter(13, Types.VARCHAR);
                                                st.executeUpdate();
                                    errCd=st.getInt(12);
                                    errMsg = st.getString(13);
                                    System.out.println("on update grn vin "+sdrow.getAttribute("Vin"));
                                } catch (SQLException sqle) {
                                    // TODO: Add catch code
                                    System.out.println("on update grn vin  error");
                                    sqle.printStackTrace();
                                } finally {
                                    try {
                                        if (st != null) {
                                            st.close();
                                        }
                                    } catch (Exception e) {
                                    }
                                }
                                if(errMsg != null) {
                                    return errMsg;
                                }
                                } else if("D".equals(sdstatus) || "O".equals(sdstatus)) {
                                System.out.println("----teston update---");
                                DBTransaction trx1 = (DBTransaction) getTransaction();
                                CallableStatement st1 = null;
                                try{
                                    String sql = "UPDATE SH_STOCK SET CHASSIS_STATUS = '" + sdstatus + "'  WHERE AVL_PARENT_GROUP = '" + session.get("parentGroupCd") + "'" +
                                    " and AVL_DEALER_MAP_CD = " + session.get("dealerMapCd") + " and  AVL_LOC_CD = '" + session.get("locCd") + "' AND AVL_COMP_FA = '" + session.get("compCode") +
                                    "' AND VIN = '" + sdrow.getAttribute("Vin") + "'";
                                    st1 = trx1.createCallableStatement(sql, 0);
                                    st1.executeUpdate();       
                                }catch(Exception e){
                                    e.printStackTrace();
                                }
                            }
                            else if("N".equals(sdstatus)) {
                                            int errCode = 0;
                                            String errmsg = null;
                                try {
                                    String stmt = "begin Generate_Next_Num(?,?,?,?,?,?,?,?,?); end;";
                                    DBTransaction dbtxn = (DBTransaction) getTransaction();
                                    st = dbtxn.createCallableStatement(stmt.toString(), 1);
                                                            st.setInt(1, (Integer)session.get("dealerMapCd"));
                                    st.setInt(2,  (Integer)session.get("principalMapCd"));
                                                            st.setString(3, (String)session.get("locCd"));
                                    st.setString(4, (String)session.get("compCode"));
                                    st.setString(5, "VRT");
                                                            st.registerOutParameter(6, Types.VARCHAR);
                                                            st.registerOutParameter(7, Types.VARCHAR);
                                    st.registerOutParameter(8, Types.INTEGER);
                                    st.setInt(9, (Integer)session.get("Year"));
                                                            st.executeUpdate();
                                                            docNum = st.getString(6);
                                    errmsg = st.getString(7);
                                    
                                                            
                                } catch(Exception e){
                                    e.printStackTrace();
                                }
                                                    
                                                    if(errCode > 0) {
                                                            return errmsg;
                                                    } else {
                                                    DBTransaction trx2 = (DBTransaction) getTransaction();
                                CallableStatement st2 = null;
                                try{
                                    String sql = "UPDATE SH_STOCK SET STK_OUT_DATE = '" + datetime + "',STK_OUT_DOC_TYPE = 'VRT' ,STK_OUT_DOC_NUM = '" +docNum+ ",CHASSIS_STATUS ='N'" + "  WHERE AVL_PARENT_GROUP = '" + session.get("parentGroupCd") + "'" +
                                    " and AVL_DEALER_MAP_CD = " + session.get("dealerMapCd") + " and  AVL_LOC_CD = '" + session.get("locCd") + "' AND AVL_COMP_FA = '" + session.get("compCode") +
                                    "' AND VIN = '" + sdrow.getAttribute("Vin") + "' AND  STK_OUT_DATE IS NULL AND STK_OUT_DOC_TYPE IS NULL AND STK_OUT_DOC_NUM IS NULL";
                                    st2 = trx2.createCallableStatement(sql, 0);
                                    st2.executeUpdate();       
                                }catch(Exception e){
                                    e.printStackTrace();
                                }
                                                    }
                            }
                        }
                        return "";
                         }
    
    public String onSdGrnStatusChange(String status, String grnnum) {
                        Map session = ADFContext.getCurrent().getSessionScope();
                        Long lvCnt = 0L;
                        ViewObjectImpl sdgrnvo = this.getSdGrnAllotRO1();
                        ViewObjectImpl gmvinvo = this.getGMVinNumRO1();
                        ViewObjectImpl rtvo = this.getRtVehicleCountRO1();
                        ViewObjectImpl stkvo = this.getSdShStockRO1();
                        ViewObjectImpl vo = this.getSdGrnVO1();
                        ViewObjectImpl vo1 = this.getSdGrnVO2();
                        Row row = vo1.getCurrentRow();
                        Row shrow = this.getShGrnVO1().getCurrentRow();
                        String statusTemp = getsdGrnStatus(grnnum);
        //                String statusTemp = (String) row.getAttribute("StatusTemp");
                        String sdstatus = (String) row.getAttribute("Damage");
                        vo.applyViewCriteria(vo.getViewCriteria("VinSdGrnVOCriteria1"));
                        vo.setNamedWhereClauseParam("bindCompCd", session.get("compCode"));
                        vo.setNamedWhereClauseParam("bindDlrCd", session.get("dealerMapCd"));
                        vo.setNamedWhereClauseParam("bindLocCode", session.get("locCd"));
                        vo.setNamedWhereClauseParam("bindParentCd", session.get("parentGroupCd"));
                        vo.setNamedWhereClauseParam("bindVin", row.getAttribute("Vin"));
                        vo.setNamedWhereClauseParam("bind_grn_num", shrow.getAttribute("GrnNum"));
                        System.out.println(row.getAttribute("Vin")+"--vin in grn ---");
                        vo.executeQuery();
                        System.out.println(vo.getQuery()+"--vin sdgrn ---query");
                        lvCnt = vo.getEstimatedRowCount();
                        System.out.println(lvCnt+"LVCNT in vehicle status");
                        if(lvCnt == 0) {
                            return "Vehicle is not Belongs to Yours Location";
                        } else {
                            lvCnt = 0L;
                            stkvo.setNamedWhereClauseParam("bind_comp_cd", session.get("compCode"));
                            stkvo.setNamedWhereClauseParam("bind_dealer_cd", session.get("dealerMapCd"));
                            stkvo.setNamedWhereClauseParam("bind_loc_cd", session.get("locCd"));
                            stkvo.setNamedWhereClauseParam("bind_parent_group", session.get("parentGroupCd"));
                            stkvo.setNamedWhereClauseParam("bind_vin", row.getAttribute("Vin"));
                            stkvo.executeQuery();
                            Integer stkcnt = (Integer) stkvo.first().getAttribute("LvCnt");
                            lvCnt = stkvo.getEstimatedRowCount();
                            System.out.println(stkcnt+"---stkcnt-");
                            if(stkcnt == 0) {
                               sdstatus = statusTemp;
                                row.setAttribute("Damage",statusTemp);
                               return "Vehicle is not in Stock";
                            }
                        }
                        if("R".equals(statusTemp)) {
                            System.out.println("VEHICLESTATUS"+sdstatus);
                            sdstatus = "R";
                            row.setAttribute("Damage",statusTemp);
                        } else {
                            if("N".equals(sdstatus)) {
                                lvCnt = 0L;
                                sdgrnvo.setNamedWhereClauseParam("bind_comp_cd", session.get("compCode"));
                                sdgrnvo.setNamedWhereClauseParam("bind_dealer_cd", session.get("dealerMapCd"));
                                sdgrnvo.setNamedWhereClauseParam("bind_grn_num", grnnum);
                                sdgrnvo.setNamedWhereClauseParam("bind_loc_cd", session.get("locCd"));
                                sdgrnvo.setNamedWhereClauseParam("bind_parent_grp", session.get("parentGroupCd"));
                                sdgrnvo.setNamedWhereClauseParam("bind_vin", row.getAttribute("Vin"));
                                sdgrnvo.executeQuery();
                                lvCnt = sdgrnvo.getEstimatedRowCount();
                                Integer cntsdgrn = (Integer)sdgrnvo.first().getAttribute("LvCnt"); 
                                if(cntsdgrn > 0) {
                                 sdstatus = statusTemp;
                                    row.setAttribute("Damage",statusTemp);
                                }
                            }
                            
                             if("N".equals(statusTemp) && "O".equals(sdstatus) || "D".equals(sdstatus)) {
                                rtvo.setNamedWhereClauseParam("bind_dealer_cd", session.get("dealerMapCd"));
                                rtvo.setNamedWhereClauseParam("bind_loc_cd", session.get("parentGroupCd"));
                                rtvo.setNamedWhereClauseParam("bind_vin", row.getAttribute("Vin"));
                                rtvo.executeQuery();
                                Integer countrto = (Integer) rtvo.first().getAttribute("LvCnt");
                                lvCnt = rtvo.getEstimatedRowCount();
                                if(countrto > 0) {
                                    return "Vehicle is still a Test Drive Vehicle";
                                }
                            }  if("R".equals(sdstatus)) {
                                System.out.println("--popup result in amimpl---");
                    return "popup";
                               } else if("R".equals(shrow.getAttribute("TranRecd")) && "R".equals(sdstatus)){
                                   sdstatus = statusTemp;
                                   System.out.println("status in r--");
                                   row.setAttribute("Damage",statusTemp);
                               }
                        }
                        return "";
                    }

    /**
     * Container's getter for SdShStockRO1.
     * @return SdShStockRO1
     */
    public ViewObjectImpl getSdShStockRO1() {
        return (ViewObjectImpl) findViewObject("SdShStockRO1");
    }

    /**
     * Container's getter for SdGrnAllotRO1.
     * @return SdGrnAllotRO1
     */
    public ViewObjectImpl getSdGrnAllotRO1() {
        return (ViewObjectImpl) findViewObject("SdGrnAllotRO1");
    }

    /**
     * Container's getter for RtVehicleCountRO1.
     * @return RtVehicleCountRO1
     */
    public ViewObjectImpl getRtVehicleCountRO1() {
        return (ViewObjectImpl) findViewObject("RtVehicleCountRO1");
    }

    /**
     * Container's getter for GMVinNumRO1.
     * @return GMVinNumRO1
     */
    public ViewObjectImpl getGMVinNumRO1() {
        return (ViewObjectImpl) findViewObject("GMVinNumRO1");
    }

    /**
     * Container's getter for DesgCdParamRO1.
     * @return DesgCdParamRO1
     */
    public ViewObjectImpl getDesgCdParamRO1() {
        return (ViewObjectImpl) findViewObject("DesgCdParamRO1");
    }
    /**
     * Container's getter for StoresCodeLOV1.
     * @return StoresCodeLOV1
     */
    public ViewObjectImpl getStoresCodeLOV1() {
        return (ViewObjectImpl) findViewObject("StoresCodeLOV1");
    }
    public void PkgCallForProgramWiseOverdueExcel(String fromDate, String toDate,
                                                String regionCd, String dealerCd, String locCd, String parentGroup,String program) {
        Map session = ADFContext.getCurrent().getSessionScope();
        Integer principalMapCd = Integer.parseInt(session.get("principalMapCd").toString());
        LOGGER.info("inside PkgCallForProgramWiseOverdueExcel");
        String stmt = "begin Pkg_LMS_REPORTS.Pr_Overdue(?,?,?,?,?,?,?); end;";
        DBTransaction dbtxn = (DBTransaction) getTransaction();
        CallableStatement cs = dbtxn.createCallableStatement(stmt.toString(), 1);
        try {
            cs.setObject(1, fromDate);
            cs.setObject(2, toDate);
            cs.setObject(3, regionCd);
            cs.setObject(4, dealerCd);
            cs.setObject(5, locCd);
            cs.setObject(6, parentGroup);
            cs.setObject(7, program);
            cs.execute();
            LOGGER.info("after execution of pkg  - PkgCallForProgramWiseOverdueExcel" + fromDate + " vvv " + toDate + " vvv " + regionCd + " vvv " +
                               dealerCd + " " + parentGroup + " " + locCd + " " +program);
            ViewObjectImpl vo = this.getPrgWiseOverdueExeExcelRO1();
            vo.executeQuery();
            LOGGER.info("end of the PkgCallForProgramWiseOverdueExcel");
    //            ViewObjectImpl vo = this.getEligibleEmployeeExcelRO1();
    //            vo.setNamedWhereClauseParam("P_PRINCIPAL", principalMapCd);
    //            vo.setNamedWhereClauseParam("p_dealer", dealerCd);
    //            vo.setNamedWhereClauseParam("p_loc", locCd);
    //            vo.setNamedWhereClauseParam("p_parent", parentGroup);
    //            System.out.println("Delayed action excel -> in ampl class , print select query is  " + vo.getQuery());
    //            vo.executeQuery();


        } catch (SQLException sqlerr) {
            throw new JboException(sqlerr);
        } finally {
            try {
                if (cs != null) {
                    cs.close();
    }
            } catch (Exception e) {
            }
        }
    }

    /**
     * Container's getter for Dms2PssGrnTempTableVO1.
     * @return Dms2PssGrnTempTableVO1
     */
    public ViewObjectImpl getDms2PssGrnTempTableVO1() {
        return (ViewObjectImpl) findViewObject("Dms2PssGrnTempTableVO1");
    }

    /**
     * Container's getter for PrgWiseOverdueExeExcelRO1.
     * @return PrgWiseOverdueExeExcelRO1
     */
    public ViewObjectImpl getPrgWiseOverdueExeExcelRO1() {
        return (ViewObjectImpl) findViewObject("PrgWiseOverdueExeExcelRO1");
    }

    /**
     * Container's getter for ShGrnAndSdGrnRO1.
     * @return ShGrnAndSdGrnRO1
     */
    public ViewObjectImpl getShGrnAndSdGrnRO1() {
        return (ViewObjectImpl) findViewObject("ShGrnAndSdGrnRO1");
    }
    
    public String checkVhicleIndent(String pmc,String vin)
    {
        try {
            ViewObjectImpl shSdGrn = this.getShGrnAndSdGrnRO1();
            ViewObjectImpl voiInd = this.getStIndentVO1();
            //CHECK FOR VEHICLE IN TRANSIT
            StIndentVORowImpl indRw = (StIndentVORowImpl) voiInd.getCurrentRow();
            String vin_num = indRw.getVin();

            shSdGrn.setNamedWhereClauseParam("bindToCompFa", indRw.getToCompFa());
            shSdGrn.setNamedWhereClauseParam("bindToDealer", indRw.getIndToDlr());
            shSdGrn.setNamedWhereClauseParam("bindToLocation", indRw.getIndOnLoc());
            shSdGrn.setNamedWhereClauseParam("bindToParentgroup", indRw.getToParentGroup());
            shSdGrn.setNamedWhereClauseParam("bindVin", indRw.getVin());
            shSdGrn.executeQuery();
            if (shSdGrn.getEstimatedRowCount() > 0) {
                String lv_tran_recd = null;
                Row rwShSdGrn = shSdGrn.first();
                lv_tran_recd =
                    rwShSdGrn.getAttribute("LvTranRecd") != null ? rwShSdGrn.getAttribute("LvTranRecd").toString() :
                    "T";
                if (!lv_tran_recd.equalsIgnoreCase("R")) {
                    indRw.setVin(null);
                    indRw.setChassisNum(null);
                    indRw.setEcolorCd(null);
                    return "Vehicle is in transit.Indent cannot raised for it";
                }
            } else {
                indRw.setVin(null);
                indRw.setChassisNum(null);
                indRw.setEcolorCd(null);

                return "Vehicle status not found in GRN for the VIN " + vin_num;
            }
            //END CHECK FOR VEHICLE IN TRANSIT

            //Check Vhicle Location
            ViewObjectImpl voCheckLoc = this.getCheckVhicleLocIndentRO1();
            voCheckLoc.setNamedWhereClauseParam("bindCompFa", indRw.getCompFa());
            voCheckLoc.setNamedWhereClauseParam("bindDealerMapCode", indRw.getDealerMapCd());
            voCheckLoc.setNamedWhereClauseParam("bindLocCode", indRw.getLocCd());
            voCheckLoc.setNamedWhereClauseParam("bindParentGroup", indRw.getParentGroup());
            voCheckLoc.setNamedWhereClauseParam("bindVin", indRw.getVin());
            voCheckLoc.executeQuery();
            if (voCheckLoc.getEstimatedRowCount() > 0) {
                Row rwChkLoc = voCheckLoc.first();
                Integer ln_cnt = rwChkLoc.getAttribute("LnCnt") != null ? (Integer) rwChkLoc.getAttribute("LnCnt") : 0;
                if (ln_cnt == 1) {

                    indRw.setVin(null);
                    indRw.setChassisNum(null);
                    indRw.setEcolorCd(null);

                    return "Vehicle " + vin_num + " already exists in the same location";
                }
            }

            //End Check Vhicle Location
            //check vin for enquired location

            voCheckLoc.setNamedWhereClauseParam("bindCompFa", indRw.getToCompFa());
            voCheckLoc.setNamedWhereClauseParam("bindDealerMapCode", indRw.getIndToDlr());
            voCheckLoc.setNamedWhereClauseParam("bindLocCode", indRw.getIndOnLoc());
            voCheckLoc.setNamedWhereClauseParam("bindParentGroup", indRw.getToParentGroup());
            voCheckLoc.setNamedWhereClauseParam("bindVin", indRw.getVin());
            voCheckLoc.executeQuery();
            if (voCheckLoc.getEstimatedRowCount() > 0) {
                Row rwChkLoc1 = voCheckLoc.first();
                Integer ln_cnt =
                    rwChkLoc1.getAttribute("LnCnt") != null ? (Integer) rwChkLoc1.getAttribute("LnCnt") : 0;
                if (ln_cnt == 0) {
                    indRw.setVin(null);
                    indRw.setChassisNum(null);
                    indRw.setEcolorCd(null);
                    return "Vehicle " + vin_num + "  not available in the selected location";

                }
            }
            //End check vin for enquired location
            ViewObjectImpl voiSdGrn = this.getSdGrnRO1();

            ViewCriteria sdGrnVC = voiSdGrn.getViewCriteriaManager().getViewCriteria("VinVC");
            VariableValueManager sdGrnVVM = sdGrnVC.ensureVariableManager();
            sdGrnVVM.setVariableValue("bind_vin", indRw.getVin());
            voiSdGrn.applyViewCriteria(sdGrnVC);
            voiSdGrn.executeQuery();
            if (voiSdGrn.getEstimatedRowCount() > 0) {
                Row rwSdSrn = voiSdGrn.first();
                if (rwSdSrn.getAttribute("InvNum") != null) {
                    indRw.setVin(null);
                    indRw.setChassisNum(null);
                    indRw.setEcolorCd(null);
                    return "Invoice " + rwSdSrn.getAttribute("InvNum") + " already done for the Vehicle " + vin_num;
                }
            } else {
                indRw.setVin(null);
                indRw.setChassisNum(null);
                indRw.setEcolorCd(null);

                return "VIN " + vin_num + " not found in Vehicle Master";
            }

            //Check for VIN already alloted
            ViewObjectImpl voiChkAllotment = this.getCheckVinAllotementIndentRO1();
            voiChkAllotment.setNamedWhereClauseParam("bindCompFa", indRw.getToCompFa());
            voiChkAllotment.setNamedWhereClauseParam("bindPmc", pmc);
            voiChkAllotment.setNamedWhereClauseParam("bindToDealerMapCd", indRw.getIndToDlr());
            voiChkAllotment.setNamedWhereClauseParam("bindToLocCode", indRw.getIndOnLoc());
            voiChkAllotment.setNamedWhereClauseParam("bindToParentGroup", indRw.getParentGroup());
            voiChkAllotment.setNamedWhereClauseParam("bindVin", indRw.getVin());
            voiChkAllotment.executeQuery();
            if (voiChkAllotment.getEstimatedRowCount() > 0) {
                Row rwChkAlt = voiChkAllotment.first();
                indRw.setVin(null);
                indRw.setChassisNum(null);
                indRw.setEcolorCd(null);
                return "VIN " + vin_num + "  already alloted with allotment number " +
                       rwChkAlt.getAttribute("AllotNum") + " on " + rwChkAlt.getAttribute("AllotDate") + " by " +
                       rwChkAlt.getAttribute("EmpName") + " in " + rwChkAlt.getAttribute("LocDesc");
            }

            //End check for VIN already alloted

            ViewObjectImpl voiChkIndent = this.getCheckIndentForVinRO1();
            voiChkIndent.setNamedWhereClauseParam("bindCompFa", indRw.getCompFa());
            voiChkIndent.setNamedWhereClauseParam("bindParentGroup", indRw.getParentGroup());
            voiChkIndent.setNamedWhereClauseParam("bindToDealer", indRw.getIndToDlr());
            voiChkIndent.setNamedWhereClauseParam("bindToLoc", indRw.getIndOnLoc());
            voiChkIndent.setNamedWhereClauseParam("bindVin", indRw.getVin());
            voiChkIndent.executeQuery();
            if (voiChkIndent.getEstimatedRowCount() > 0) {
                Row rwChkInd = voiChkIndent.first();
                if (rwChkInd.getAttribute("StkindNum") != null) {

                    indRw.setVin(null);
                    indRw.setChassisNum(null);
                    indRw.setEcolorCd(null);
                    return "Indent " + rwChkInd.getAttribute("StkindNum") + " already Raised for VIN " + vin_num;
                }
            }

            //CHECK FOR RECEIPT OF THE VEHICLE
            ViewObjectImpl voiChkReceipt = this.getCheckReceiptIndentRO1();
            voiChkReceipt.setNamedWhereClauseParam("bindCompFa", indRw.getCompFa());
            voiChkReceipt.setNamedWhereClauseParam("bindDealerMapCd", indRw.getDealerMapCd());
            voiChkReceipt.setNamedWhereClauseParam("bindLocCode", indRw.getLocCd());
            voiChkReceipt.setNamedWhereClauseParam("bindParentGroup", indRw.getParentGroup());
            voiChkReceipt.setNamedWhereClauseParam("bindVin", indRw.getVin());
            voiChkReceipt.executeQuery();
            if (voiChkReceipt.getEstimatedRowCount() > 0) {
                Integer lv_rcnt = 0;
                Row rwRec = voiChkReceipt.first();
                lv_rcnt = rwRec.getAttribute("LvRcnt") != null ? (Integer) rwRec.getAttribute("LvRcnt") : 0;
                if (lv_rcnt >= 1) {
                    indRw.setVin(null);
                    indRw.setChassisNum(null);
                    indRw.setEcolorCd(null);
                    return "Receipt is not done for VIN " + vin_num;
                }
            }
            //END CHECK FOR RECEIPT OF THE VEHICLE

        } catch (Exception e) {
            // TODO: Add catch code
            e.printStackTrace();
        }
        
    return null;
    }


    /**
     * Container's getter for CheckVhicleLocIndentRO1.
     * @return CheckVhicleLocIndentRO1
     */
    public ViewObjectImpl getCheckVhicleLocIndentRO1() {
        return (ViewObjectImpl) findViewObject("CheckVhicleLocIndentRO1");
    }

    /**
     * Container's getter for CheckVinAllotementIndentRO1.
     * @return CheckVinAllotementIndentRO1
     */
    public ViewObjectImpl getCheckVinAllotementIndentRO1() {
        return (ViewObjectImpl) findViewObject("CheckVinAllotementIndentRO1");
    }

    /**
     * Container's getter for CheckIndentForVinRO1.
     * @return CheckIndentForVinRO1
     */
    public ViewObjectImpl getCheckIndentForVinRO1() {
        return (ViewObjectImpl) findViewObject("CheckIndentForVinRO1");
    }

    /**
     * Container's getter for CheckReceiptIndentRO1.
     * @return CheckReceiptIndentRO1
     */
    public ViewObjectImpl getCheckReceiptIndentRO1() {
        return (ViewObjectImpl) findViewObject("CheckReceiptIndentRO1");
    }
    
    public void setRemarksValueInIndentForm()
    {
        try {
        ViewObjectImpl voiInd=this.getStIndentVO1();
        StIndentVORowImpl indRw=(StIndentVORowImpl)voiInd.getCurrentRow();
        
            System.out.println("CHASSIS NUM T" + indRw.getChassisNumT());
            System.out.println("VIN NUM T" + indRw.getVinNumT());
            System.out.println("COLOR NUM T" + indRw.getColorCodeT());
            System.out.println("ENGINE NUM T" + indRw.getEngineNumT());
            System.out.println("KEY NUM T" + indRw.getKeyNumT());
        
            System.out.println("Chassis number:::::" + indRw.getChassisNum());
            System.out.println("Vin number:::::" + indRw.getVin());
            System.out.println("Ecolor number:::::" + indRw.getEcolorCd());


            indRw.setChassisNum(indRw.getChassisNumT());
            indRw.setVin(indRw.getVinNumT());
            indRw.setEcolorCd(indRw.getColorCodeT());
            indRw.setEngineNum(indRw.getEngineNumT());
            indRw.setKeyNum(indRw.getKeyNumT());


            System.out.println("GET CHASSIS:::::::::::" + indRw.getChassisNum());
            System.out.println("GET VIN:::::::::::::::" + indRw.getVin());
            System.out.println("GET COLOR:::::::::::::" + indRw.getEcolorCd());
            System.out.println("GET ENGINE::::::::::::" + indRw.getEngineNum());
            System.out.println("GET KEY NUM:::::::::::" + indRw.getKeyNum());


//            if (indRw.getChassisNum() != null && indRw.getRemarks() == null) {
//                System.out.println("inside is");
//                indRw.setRemarks("ISSUE DETAILS : Chassis " + indRw.getChassisNum() + " Model " + indRw.getModelCd());
//            System.out.println("GET REMARKS VALUE:::::::::::::"+indRw.getRemarks());
//            }
        
        } catch (Exception e) {
            // TODO: Add catch code
            e.printStackTrace();
        }
    
    }
    
    
    /**
         * Container's getter for Dms2PssPoiTempTableVO1.
         * @return Dms2PssPoiTempTableVO1
         */
        public ViewObjectImpl getDms2PssPoiTempTableVO1() {
            return (ViewObjectImpl) findViewObject("Dms2PssPoiTempTableVO1");
        }

        /**
         * Container's getter for ModelCodeLOVForGRN1.
         * @return ModelCodeLOVForGRN1
         */
        public ViewObjectImpl getModelCodeLOVForGRN1() {
            return (ViewObjectImpl) findViewObject("ModelCodeLOVForGRN1");
        }
        
    /**
     * Container's getter for ShOrdBookMainToSdMgaBookingVL1.
     * @return ShOrdBookMainToSdMgaBookingVL1
     */
    public ViewLinkImpl getShOrdBookMainToSdMgaBookingVL1() {
        return (ViewLinkImpl) findViewLink("ShOrdBookMainToSdMgaBookingVL1");
    }

    /**
     * Container's getter for ShOrdBookMainToShOrdCommitmentVL1.
     * @return ShOrdBookMainToShOrdCommitmentVL1
     */
    public ViewLinkImpl getShOrdBookMainToShOrdCommitmentVL1() {
        return (ViewLinkImpl) findViewLink("ShOrdBookMainToShOrdCommitmentVL1");
    }
    
    public void nullCheckDealerVehiclePriceList(){
        ViewObjectImpl voImpl = (ViewObjectImpl)this.getVehiclePriceListDealerRO1();
            String deselect_flag = "N";
            System.out.println("deselect_flag value "+deselect_flag);
            RowSetIterator rsii = voImpl.createRowSetIterator(null);
            while (rsii.hasNext()) {
                Row row22 = rsii.next();
                Boolean row_val = (Boolean) row22.getAttribute("SelectBoxDealer");
                System.out.println("row values "+row_val);
                if (row_val != null && row_val) {
                    deselect_flag = "Y";
                    break;
                }
                System.out.println("while loop in the all" + row22);
            }
            rsii.closeRowSetIterator();
            System.out.println("dealr flag ++++ " + deselect_flag);
            if(deselect_flag.equalsIgnoreCase("N")){
            ViewObjectImpl vooImpl = (ViewObjectImpl)this.getVehiclePriceListOutletRO1();
            vooImpl.setNamedWhereClauseParam("bindDealerMapCd", null);
                vooImpl.setNamedWhereClauseParam("bindReset", -1);
            vooImpl.executeQuery();
            }
        
            }
    
    public String tallyIntegrationStockTransferIssueSave(String pmc,String dealer_map,String parent_group,String loc_code,String comp_fa,String user_name,String issue_num) {
        DBTransaction trx = (DBTransaction) getTransaction();
        ViewObjectImpl voiCurrDate=this.getSfGetTimeCurrRO1();
        Row voiCurrRw=voiCurrDate.first();
        CallableStatement st = null;
        String ret_val=null;
        try {
            String stmt =
                "DECLARE \n" + "status BOOLEAN;  \n" + "result VARCHAR2(13); \n" + "\n" + "BEGIN \n" +
                "status := NULL; \n" + "PK_FINC_TRNS_INTERFACE.STKTRANSFR_ISSUE_VEH(?,?,?,?,?,?,?,?,?,?,status,?); \n" +
                "BEGIN \n" + "IF status THEN result := 'Yes'; \n" + "ELSIF NOT status THEN result := 'No'; \n" +
                "ELSE result := 'NULL'; \n" + "END IF;\n" + "END; \n" + "? := result;\n" + "COMMIT;\n" + "END ;";
            st = trx.createCallableStatement(stmt, 0);
            st.setObject(1, pmc);
            st.setObject(2, parent_group);
            st.setObject(3, dealer_map);
            st.setObject(4, loc_code);
            st.setObject(5, comp_fa);
            st.setObject(6, "Dms Journal");
            st.setObject(7, issue_num);
            st.setObject(8, user_name);
            st.setObject(9, voiCurrRw.getAttribute("CurrDate"));
            st.setObject(10, "O");
            st.registerOutParameter(11, Types.VARCHAR);
            st.registerOutParameter(12, Types.VARCHAR);
            st.executeUpdate();            
//            System.out.println("get result is::::of 11th num param value:"+st.getString(11));
//            System.out.println("get result is::::of 12th num param value:"+st.getString(12));
            if(st.getString(11)!=null)
            {
            ret_val="Y";
            }

        } catch (SQLException sqle) {
            // TODO: Add catch code
            sqle.printStackTrace();
        } finally {
            try {
                if (st != null) {
                    st.close();
                }
            } catch (Exception e) {
            }
        } 
        return ret_val;
    }
    public String validateToDealerIssueForm(String toDlr)
    {
    ViewObjectImpl voAmDlr=this.getAmDealerVO1();

    //        ViewCriteria stIndVC = voiStInd.getViewCriteriaManager().getViewCriteria("ViewCriteraForReceiptVC");
    //        VariableValueManager stIndVVM = stIndVC.ensureVariableManager();
    //        stIndVVM.setVariableValue("bindDealerMapCd",dealer_map);
    //        stIndVVM.setVariableValue("bindCompFa", comp_fa);
    //        stIndVVM.setVariableValue("bindLocCd", loc_code);
    //        stIndVVM.setVariableValue("bindParentGroupCd", parent_group);
    //        stIndVVM.setVariableValue("bindIndentNo", rwRec.getAttribute("StkindNum"));
    //        stIndVVM.setVariableValue("bindVinNum", rwRec.getAttribute("Vin"));
    //        voiStInd.applyViewCriteria(stIndVC);
    //        voiStInd.executeQuery();
    
    ViewCriteria vc=voAmDlr.getViewCriteria("AmDealerDealerMapCdVC");
    voAmDlr.applyViewCriteria(vc, false);
    voAmDlr.setNamedWhereClauseParam("AmDealerDealerMapCdVC",toDlr);
    voAmDlr.executeQuery();
    if(voAmDlr.getEstimatedRowCount()<1)
    {
    return "Parent not found for the dealer with code "+toDlr;
    }
    else if(voAmDlr.getEstimatedRowCount()>1)
    {
    return "More than one parent found for the dealer with code "+toDlr;
    }
    
    return null;
    }
    /**
     * Container's getter for LevelWiseOverdueExcelRO1.
     * @return LevelWiseOverdueExcelRO1
     */
    public ViewObjectImpl getLevelWiseOverdueExcelRO1() {
        return (ViewObjectImpl) findViewObject("LevelWiseOverdueExcelRO1");
    }
    public void PkgCallForLevelWiseOverdueExcel(String fromDate, String toDate,
                                                    String regionCd, String dealerCd, String locCd, String parentGroup,String level) {
            Map session = ADFContext.getCurrent().getSessionScope();
            Integer principalMapCd = Integer.parseInt(session.get("principalMapCd").toString());
            LOGGER.info("inside PkgCallForLevelWiseOverdueExcel");
            String stmt = "begin Pkg_LMS_REPORTS.Pr_Overdue_Level(?,?,?,?,?,?,?); end;";
            DBTransaction dbtxn = (DBTransaction) getTransaction();
            CallableStatement cs = dbtxn.createCallableStatement(stmt.toString(), 1);
            try {
                cs.setObject(1, fromDate);
                cs.setObject(2, toDate);
                cs.setObject(3, regionCd);
                cs.setObject(4, dealerCd);
                cs.setObject(5, locCd);
                cs.setObject(6, parentGroup);
                cs.setObject(7, level);
                cs.execute();
                LOGGER.info("after execution of pkg  - PkgCallForLevelWiseOverdueExcel" + fromDate + " vvv " + toDate + " vvv " + regionCd + " vvv " +
                                   dealerCd + " " + parentGroup + " " + locCd + " " +level);
                ViewObjectImpl vo = this.getLevelWiseOverdueExcelRO1();
                vo.executeQuery();
                LOGGER.info("end of the PkgCallForLevelWiseOverdueExcel");
       


            } catch (SQLException sqlerr) {
                throw new JboException(sqlerr);
            } finally {
                try {
                    if (cs != null) {
                        cs.close();
        }
                } catch (Exception e) {
                }
            }
        }


    public void PkgCallForRegionwiseMonthlyCalendarExcel(String fromDate, String toDate,
                                                         String regionCd,String pmc ,String monthYear ,String programStatus){
                                                             Map session = ADFContext.getCurrent().getSessionScope();
                                                             Integer principalMapCd = Integer.parseInt(session.get("principalMapCd").toString());
                                                             System.out.println("inside PkgCallForEligibleEmployeeExcel");
                                                             String stmt = "begin Pkg_Lms_Reports.Pr_reg_mon_cal(?,?,?,?); end;";
                                                             DBTransaction dbtxn = (DBTransaction) getTransaction();
                                                             CallableStatement cs = dbtxn.createCallableStatement(stmt.toString(), 1);
                                                             try {
                                                                 cs.setObject(1, fromDate);
                                                                 cs.setObject(2, toDate);
                                                                 cs.setObject(3, regionCd);
                                                                 cs.setObject(4, pmc);
                                                                  cs.execute();
//                                                                 System.out.println("after execution of pkg  - PkgCallForEligibleEmployeeExcel" + fromDate + " vvv " + toDate + " vvv " + regionCd + " vvv " +
//                                                                                    dealerCd + " " + parentGroup + " " + locCd );

//                                                                 ViewObjectImpl vo = this.getRegionwiseMonthlyCalendarExcelRO1();
//                                                                 vo.setNamedWhereClauseParam("bind_pmc", principalMapCd);
//                                                                 
//                                                                 vo.setNamedWhereClauseParam("P_MONTHYEAR", monthYear);
//                                                                 vo.setNamedWhereClauseParam("P_PROGRAM_STATUS", programStatus);
//                                                                 vo.setNamedWhereClauseParam("P_REGION_CD", regionCd);
//                                                                System.out.println("regionwise calendar excel -> in ampl class , print select query is  " + vo.getQuery());
//                                                                 vo.executeQuery();


                                                             } catch (SQLException sqlerr) {
                                                                 throw new JboException(sqlerr);
                                                             } finally {
                                                                 try {
                                                                     if (cs != null) {
                                                                         cs.close();
                                                             }
                                                                 } catch (Exception e) {
                                                                 }
                                                             }                                                    
                                                         }


    /**
     * Container's getter for InvoiceNumLOV1.
     * @return InvoiceNumLOV1
     */
    public ViewObjectImpl getInvoiceNumLOV1() {
        return (ViewObjectImpl) findViewObject("InvoiceNumLOV1");
    }

    /**
     * Container's getter for SiInvhRO1.
     * @return SiInvhRO1
     */
    public ViewObjectImpl getSiInvhRO1() {
        return (ViewObjectImpl) findViewObject("SiInvhRO1");
    }


     /**
     * Container's getter for SdGrmRO2.
     * @return SdGrmRO2
     */
    public ViewObjectImpl getSdGrmRO2() {
        return (ViewObjectImpl) findViewObject("SdGrmRO2");
    }
     /** Container's getter for EmployeeListExcelRO1.
     * @return EmployeeListExcelRO1
     */
    public ViewObjectImpl getEmployeeListExcelRO1() {
        return (ViewObjectImpl) findViewObject("EmployeeListExcelRO1");
    }
     
      /**
     * Container's getter for OrderBookingSchemeRO1.
     * @return OrderBookingSchemeRO1
     */
    public ViewObjectImpl getOrderBookingSchemeRO1() {
        return (ViewObjectImpl) findViewObject("OrderBookingSchemeRO1");
    }


    public void setValuesIntoTransFieldIndent() {
        try {
            ViewObjectImpl voiInd = this.getStIndentVO1();
            StIndentVORowImpl indRw = (StIndentVORowImpl) voiInd.getCurrentRow();
            System.out.println("Chassis Num" + indRw.getChassisNum());
            System.out.println("Vin" + indRw.getVin());
            System.out.println("Color" + indRw.getEcolorCd());
            System.out.println("KEY NUM" + indRw.getKeyNum());
            System.out.println("Engine Num" + indRw.getEngineNum());

            indRw.setChassisNumT(indRw.getChassisNum());
            indRw.setVinNumT(indRw.getVin());
            indRw.setColorCodeT(indRw.getEcolorCd());
            indRw.setKeyNumT(indRw.getKeyNum());
            indRw.setEngineNumT(indRw.getKeyNum());
        } catch (Exception e) {
            // TODO: Add catch code
            e.printStackTrace();
        }
    }

    
    public void resetFieldOnChangeDealerInIndent(String dealer_value)
    {
    
    ViewObjectImpl voiInd=this.getStIndentVO1();
        StIndentVORowImpl rw=(StIndentVORowImpl)voiInd.getCurrentRow();
      rw.setVariantCd(null);
      rw.setModelCd(null);
      rw.setChassisNum(null);
      rw.setVin(null);
      rw.setEcolorCd(null);
      rw.setRemarks(null);
        
    //voiInd.getCurrentRow().setAttribute("IndToDlr", dealer_value);
    
    }

    /**
     * Container's getter for LmsPrgmIdGenRVO1.
     * @return LmsPrgmIdGenRVO1
     */
    public ViewObjectImpl getLmsPrgmIdGenRVO1() {
        return (ViewObjectImpl) findViewObject("LmsPrgmIdGenRVO1");
    }

    /**
     * Container's getter for RegionwiseMonthlyCalendarExcelRO1.
     * @return RegionwiseMonthlyCalendarExcelRO1
     */
    public ViewObjectImpl getRegionwiseMonthlyCalendarExcelRO1() {
        return (ViewObjectImpl) findViewObject("RegionwiseMonthlyCalendarExcelRO1");
    }
    
    
    public void makeNullInIssueForm()
    {
        try {
            ViewObjectImpl voIs = this.getStStktrIssVO1();
            StStktrIssVORowImpl rwVoIs = (StStktrIssVORowImpl) voIs.getCurrentRow();
            rwVoIs.setVin(null);
            rwVoIs.setVariantCd(null);
            rwVoIs.setVariantDescT(null);
            rwVoIs.setEcolorCd(null);
            rwVoIs.setColorDescT(null);
            rwVoIs.setEngineNum(null);
            rwVoIs.setKeyNum(null);
            rwVoIs.setPoNum(null);
            rwVoIs.setPoDateT(null);
            rwVoIs.setInvoiceNum(null);
            rwVoIs.setInvoiceDate(null);
            rwVoIs.setGrnDate(null);
            rwVoIs.setGrnNum(null);
            rwVoIs.setNetDealerPrice(null);
            rwVoIs.setSellingPrice(null);
            rwVoIs.setLandedCost(null);
        } catch (Exception e) {
            // TODO: Add catch code
            e.printStackTrace();
        }
    }
    
    public void updateIndentAndGrnFromIssue(String user_code)
    {
    
    ViewObjectImpl voIssue=this.getStStktrIssVO1();
    ViewObjectImpl voInd=this.getStIndentIssueVO1();
    StStktrIssVORowImpl rw=(StStktrIssVORowImpl)voIssue.getCurrentRow();
        ViewObjectImpl voiCurrDate=this.getSfGetTimeCurrRO1();
        Row voiCurrRw=voiCurrDate.first();
            
    System.out.println("rw.getCompFa()------------------>"+rw.getCompFa());        
    System.out.println("rw.getToDlrCd()------------------>"+rw.getToDlrCd());        
    System.out.println("rw.getToLocCd()------------------>"+rw.getToLocCd());        
    System.out.println("rw.getParentGroup()------------------>"+rw.getParentGroup());        
    System.out.println("rw.getStkindNum()------------------>"+rw.getStkindNum());
        try {
            
            ViewCriteria vcInd = voInd.getViewCriteria("UpdateFromIssueVC");
            voInd.applyViewCriteria(vcInd, false);
            voInd.setNamedWhereClauseParam("bindCompFa", rw.getCompFa());
            voInd.setNamedWhereClauseParam("bindDealerMapCd", rw.getToDlrCd());
            voInd.setNamedWhereClauseParam("bindLocCd", rw.getToLocCd());
            voInd.setNamedWhereClauseParam("bindParentGroup", rw.getParentGroup());
            voInd.setNamedWhereClauseParam("bindIndentNum", rw.getStkindNum());
            voInd.executeQuery();
            System.out.println("Get estimated row count::::::::::"+voInd.getEstimatedRowCount());
            System.out.println("Get query of indent::::::::" + voInd.getQuery());
            RowSetIterator rsi = voInd.createRowSetIterator(null);
            while (rsi.hasNext()) {
                Row rwInd = rsi.next();
//                String remarks =
//                    "ISSUE DETAILS : Chassis " + rwInd.getAttribute("ChassisNum") + " Model " +
//                    rwInd.getAttribute("ModelCd");
//                String remarks_ind =
//                    rwInd.getAttribute("Remarks") != null ? rwInd.getAttribute("Remarks").toString() : null;
//                if (remarks_ind == null) {
//                    rwInd.setAttribute("Remarks", remarks);
//                } else if (!remarks.equalsIgnoreCase(remarks_ind)) {
//                    rwInd.setAttribute("Remarks", remarks_ind + " " + remarks);
//                }
                String ind_rmk=null;
                String remarks=null;
                if(rwInd.getAttribute("Remarks")!=null)
                {
                ind_rmk=rwInd.getAttribute("Remarks").toString();
                }
                if(ind_rmk!=null)
                {
                    remarks=" ISSUE DETAILS : Chassis "+rw.getChassisNum()+" Model "+rw.getVariantCd();
                }
                else
                {
                remarks=" ISSUE DETAILS : Chassis "+rw.getChassisNum()+" Model "+rw.getVariantCd();
                }
                
                rwInd.setAttribute("Remarks",remarks);
                rwInd.setAttribute("StktrIssNum", rw.getStktrIssNum());
                rwInd.setAttribute("StktrIssDate", rw.getStktrIssDate());
                rwInd.setAttribute("ModifiedDate", voiCurrRw.getAttribute("CurrDate"));
                rwInd.setAttribute("ModifiedBy", user_code);
            }
            rsi.closeRowSetIterator();
        } catch (Exception e) {
            // TODO: Add catch code
            e.printStackTrace();
        }

        try {
            UpdateGrnAlot(rw.getToDlrCd()+"", rw.getToParentGroup(), rw.getToCompFa(), rw.getToLocCd(), user_code,
                          rw.getVin(), rw.getVehicleStatusT());
        } catch (Exception e) {
            // TODO: Add catch code
            e.printStackTrace();
        }    
    }


    /**
     * Container's getter for StIndentIssueVO1.
     * @return StIndentIssueVO1
     */
    public ViewObjectImpl getStIndentIssueVO1() {
        return (ViewObjectImpl) findViewObject("StIndentIssueVO1");
    }
	 /**
     * Container's getter for TrainingScheduleAndNomineeExcelRO1.
     * @return TrainingScheduleAndNomineeExcelRO1
     */
    public ViewObjectImpl getTrainingScheduleAndNomineeExcelRO1() {
        return (ViewObjectImpl) findViewObject("TrainingScheduleAndNomineeExcelRO1");
    }
    public void PkgCallForTrainigScheduleAndNomineeExcel(String fromDate, String toDate,
                                                String regionCd, String dealerCd, String locCd, String parentGroup,String program,String programStatus, String mspinDse) {
        Map session = ADFContext.getCurrent().getSessionScope();
        Integer principalMapCd = Integer.parseInt(session.get("principalMapCd").toString());
        LOGGER.info("inside PkgCallForTrainigScheduleAndNomineeExcel");
        String stmt = "begin Pkg_LMS_REPORTS.Pr_tra_sch_nom(?,?,?,?,?,?,?,?,?); end;";
        DBTransaction dbtxn = (DBTransaction) getTransaction();
        CallableStatement cs = dbtxn.createCallableStatement(stmt.toString(), 1);
        try {
            cs.setObject(1, fromDate);
            cs.setObject(2, toDate);
            cs.setObject(3, regionCd);
            cs.setObject(4, dealerCd);
            cs.setObject(5, locCd);
            cs.setObject(6, parentGroup);
            cs.setObject(7, program);
            cs.setObject(8, programStatus);
            cs.setObject(9, mspinDse);
            cs.execute();
            LOGGER.info("after execution of pkg  - PkgCallForTrainigScheduleAndNomineeExcel" + fromDate + " vvv " + toDate + " vvv " + regionCd + " vvv " +
                               dealerCd + " " + parentGroup + " " + locCd + " " +program+" "+programStatus+" "+mspinDse);
            ViewObjectImpl vo = this.getTrainingScheduleAndNomineeExcelRO1();
            vo.setNamedWhereClauseParam("P_PRINCIPAL", principalMapCd);
            vo.executeQuery();
            LOGGER.info("end of the PkgCallForTrainigScheduleAndNomineeExcel");
   


        } catch (SQLException sqlerr) {
            throw new JboException(sqlerr);
        } finally {
            try {
                if (cs != null) {
                    cs.close();
    }
            } catch (Exception e) {
            }
        }
    }

    /**
     * Container's getter for NominatedUpcomingTrainingExcelRO1.
     * @return NominatedUpcomingTrainingExcelRO1
     */
    public ViewObjectImpl getNominatedUpcomingTrainingExcelRO1() {
        return (ViewObjectImpl) findViewObject("NominatedUpcomingTrainingExcelRO1");
    }
    public void PkgCallForNominatedUpcomingTrainingExcel(String fromDate, String toDate,
                                                   String regionCd, String dealerCd, String locCd, String parentGroup,String program) {
           Map session = ADFContext.getCurrent().getSessionScope();
           Integer principalMapCd = Integer.parseInt(session.get("principalMapCd").toString());
           LOGGER.info("inside PkgCallForNominatedUpcomingTrainingExcel");
           String stmt = "begin Pkg_LMS_REPORTS.Pr_upcom_trn(?,?,?,?,?,?,?); end;";
           DBTransaction dbtxn = (DBTransaction) getTransaction();
           CallableStatement cs = dbtxn.createCallableStatement(stmt.toString(), 1);
           try {
               cs.setObject(1, fromDate);
               cs.setObject(2, toDate);
               cs.setObject(3, regionCd);
               cs.setObject(4, dealerCd);
               cs.setObject(5, locCd);
               cs.setObject(6, parentGroup);
               cs.setObject(7, program);
               cs.execute();
               LOGGER.info("after execution of pkg  - PkgCallForNominatedUpcomingTrainingExcel" + fromDate + " vvv " + toDate + " vvv " + regionCd + " vvv " +
                                  dealerCd + " " + parentGroup + " " + locCd + " " +program);
               ViewObjectImpl vo = this.getNominatedUpcomingTrainingExcelRO1();
               vo.executeQuery();
               LOGGER.info("end of the PkgCallForNominatedUpcomingTrainingExcel");
      


           } catch (SQLException sqlerr) {
               throw new JboException(sqlerr);
           } finally {
               try {
                   if (cs != null) {
                       cs.close();
       }
               } catch (Exception e) {
               }
           }
       }
    
    public String removeGrnDetails(String type) {
        DBTransaction trx = (DBTransaction) getDBTransaction();
        CallableStatement st = null;
        String error = null;
        try {
            String grntempT =
                " DELETE FROM muldms.dms2_pss_grn_temp_table";
            st = trx.createCallableStatement(grntempT, 0);
            st.executeUpdate();
            
            String grndetT =
                " DELETE FROM muldms.dms2_pss_grn_details_table";
            st = trx.createCallableStatement(grndetT, 0);
            st.executeUpdate();
            
            String stktempT =
                " DELETE FROM muldms.dms2_pss_stk_details_table";
            st = trx.createCallableStatement(stktempT, 0);
            st.executeUpdate();
            
            String poiTempT =
                " DELETE FROM muldms.dms2_pss_poi_temp_table";
            st = trx.createCallableStatement(poiTempT, 0);
            st.executeUpdate();
            
            
            
            this.getDBTransaction().commit();
        } catch (Exception e) {
            e.printStackTrace();
            error = "Error in deleting Grn rows";
        }
        finally
        {
            try {
                st.close();
            } catch (SQLException sqle) {
                // TODO: Add catch code
                sqle.printStackTrace();
            }
        }
        return error;
    }

    /**
     * Container's getter for OrderBookingChargesRO1.
     * @return OrderBookingChargesRO1
     */
    public OrderBookingChargesROImpl getOrderBookingChargesRO1() {
        return (OrderBookingChargesROImpl) findViewObject("OrderBookingChargesRO1");
    }

    
    public void initLoyaltyCardReferral(){
        ViewObjectImpl vo = this.getLoyaltyCardRefRO1();
        vo.executeEmptyRowSet();
        ViewObjectImpl searchVo = this.getLoyaltyCardRefTVO1();
        Row r = searchVo.getCurrentRow();
        if(r != null){
            r.setAttribute("InvFromDate", null);
            r.setAttribute("InvToDate", null);
            r.setAttribute("InvNum", null);
        }
    }

    public void PkgCallForFailedParticipantListExcel(String fromDate, String toDate,
                                                String regionCd, String dealerCd, String locCd, String parentGroup, String programCd , String sessionCd , String finYr){
        Map session = ADFContext.getCurrent().getSessionScope();
        System.out.println("inside PkgCallForFailedParticipantListExcel");
        String stmt = "begin Pkg_Lms_Reports.Pr_Fail_Participants(?,?,?,?,?,?,?,?,?); end;";
        DBTransaction dbtxn = (DBTransaction) getTransaction();
        CallableStatement cs = dbtxn.createCallableStatement(stmt.toString(), 1);
        try {
            cs.setObject(1, fromDate);
            cs.setObject(2, toDate);
            cs.setObject(3, regionCd);
            cs.setObject(4, dealerCd);
            cs.setObject(5, locCd);
            cs.setObject(6, parentGroup);
            cs.setObject(7, programCd);
            cs.setObject(8, sessionCd);
            cs.setObject(9, finYr);
            cs.execute();
           
//            ViewObjectImpl vo = this.getEligibleEmployeeExcelRO1();
//            vo.setNamedWhereClauseParam("P_PRINCIPAL", principalMapCd);
//            vo.setNamedWhereClauseParam("p_dealer", dealerCd);
//            vo.setNamedWhereClauseParam("p_loc", locCd);
//            vo.setNamedWhereClauseParam("p_parent", parentGroup);
//            System.out.println("Delayed action excel -> in ampl class , print select query is  " + vo.getQuery());
//            vo.executeQuery();
      } catch (SQLException sqlerr) {
            throw new JboException(sqlerr);
        } finally {
            try {
                if (cs != null) {
                    cs.close();
        }
            } catch (Exception e) {
            }
        }
    }
    /**
     * Container's getter for KCESStateInvRO1.
     * @return KCESStateInvRO1
     */
    public ViewObjectImpl getKCESStateInvRO1() {
        return (ViewObjectImpl) findViewObject("KCESStateInvRO1");
        }
    public void updateDatabaseOrderBooking(String LV_EV_EXPR){
        
    }    

    public String recalculatingFormParamOrderChargers() {
        Row curRow = getOrderBookingChargesRO1().getCurrentRow();
        String chargeSel = null;
        ViewObjectImpl vo = getOrderBookingChargesRO1();
        RowSetIterator rw = vo.createRowSetIterator(null);
        BigDecimal lv_charge_value = new BigDecimal(0), LV_DIVISOR = new BigDecimal(1), lv_divide = new BigDecimal(1);
            String LV_PARAM = null, lv_charge_type = null,lv_charge_ind =null;


            
        while(rw.hasNext()){
            Row row = rw.next();
            chargeSel = (String) row.getAttribute("ChargeSel");
            System.out.println(" row chargeSel "+chargeSel);
            lv_charge_type = (String) row.getAttribute("ChargeType");
            lv_charge_ind = (String) row.getAttribute("ChargeInd");
            System.out.println(lv_charge_type+" lv_charge_type lv_charge_ind "+lv_charge_ind+" Charge Value "+row.getAttribute("ChargeValue")+" Amount "+ row.getAttribute("ChargeAmt"));
            if (chargeSel != null && (chargeSel.equalsIgnoreCase("Y") || chargeSel.equalsIgnoreCase("true"))) {
                lv_charge_type = (String) row.getAttribute("ChargeType");

            if (lv_charge_ind != null && lv_charge_ind.equalsIgnoreCase("P")) {
                LV_DIVISOR = new BigDecimal(100);
                if (row.getAttribute("ChargeValue") != null) {
                    lv_charge_value = (BigDecimal) row.getAttribute("ChargeValue");
                }
            } else {
                lv_charge_value = (BigDecimal) row.getAttribute("ChargeAmt");
                LV_DIVISOR = new BigDecimal(1);
            }

            try {
                lv_divide = lv_charge_value.divide(LV_DIVISOR);
            } catch (Exception e) {
                return "1";
            }

    //            LV_PARAM = LV_PARAM + lv_charge_type + ";" + lv_divide + ";" + lv_charge_ind + ";";
                if(LV_PARAM == null){
            LV_PARAM =  lv_charge_type + ";" + lv_divide + ";" + lv_charge_ind + ";";
                }else{
                    LV_PARAM = LV_PARAM.concat(lv_charge_type + ";" + lv_divide + ";" + lv_charge_ind + ";");
                }
            System.out.println(" formParamOrderChargers "+LV_PARAM);

        } 
//            else {
//                curRow.setAttribute("ChargeAmt", new BigDecimal(0));
//        }

        }
        rw.closeRowSetIterator();
        
       

        return LV_PARAM;
    }
    
    
    public void recalculatingChargesForOrderTCS(){
        ViewObjectImpl vo = getOrderBookingChargesRO1();
        RowSetIterator rwItr = vo.createRowSetIterator(null);
        while(rwItr.hasNext()){
            Row rw = rwItr.next();
            String chargeTyp = (String) rw.getAttribute("ChargeCd") ;
            if(chargeTyp != null && chargeTyp.equalsIgnoreCase("TRTP")){
                
                Row row = getShOrdbookMainVO1().getCurrentRow();
                      BigDecimal sellingPrice =
                          row.getAttribute("DummySellingPrice") ==
                          null ? new BigDecimal(0) : (BigDecimal) row.getAttribute("DummySellingPrice");
                      BigDecimal accessoryPrice =
                          row.getAttribute("NbAccessoryPrice") ==
                          null ? new BigDecimal(0) : (BigDecimal) row.getAttribute("NbAccessoryPrice");
                      BigDecimal ndpPrice =
                          row.getAttribute("NbNdp") ==
                          null ? new BigDecimal(0) : (BigDecimal) row.getAttribute("NbNdp");
                      
                String retVal = recalculatingFormParamOrderChargers();
                String LV_PARAM = null;
                if (retVal == null) {
                    LV_PARAM = "SP;" + sellingPrice + ";A;ACP;" + accessoryPrice + ";A;NDP;" + ndpPrice + ";A;";
                } else {
                    LV_PARAM =
                        "SP;" + sellingPrice + ";A;ACP;" + accessoryPrice + ";A;NDP;" + ndpPrice + ";A;" + retVal;

                }
                        
                        System.out.println("calculateAmountOrderCharges LV_PARAM "+LV_PARAM);
                        
                        String LV_EV_EXPR = null;
                        Map session = ADFContext.getCurrent().getSessionScope();
                        
                        LOGGER.info("inside Evaluate_Expr_PSS");
                        String stmt = "begin Evaluate_Expr_PSS(?,?,?,?,?,?); end;";
                        DBTransaction dbtxn = (DBTransaction) getTransaction();
                        CallableStatement cs = dbtxn.createCallableStatement(stmt.toString(), 1);
                        try {
                            cs.setObject(1, "NVSI");
                            cs.setObject(2, LV_PARAM);
                            cs.setObject(3, Integer.parseInt(session.get("dealerMapCd").toString()));
                            cs.setObject(4, session.get("locCd").toString());
                            cs.registerOutParameter(5, Types.VARCHAR);
                            cs.registerOutParameter(6, Types.VARCHAR);
                            cs.execute();
                            
                             LV_EV_EXPR = cs.getString(5);
                            String LV_EV_VALUE = cs.getString(6);
                            System.out.println(" LV_EV_EXPR "+LV_EV_EXPR);
                            System.out.println(" LV_EV_VALUE "+LV_EV_VALUE);
                            if (LV_EV_VALUE != null) {
                                BigDecimal RecAmt =
                                    row.getAttribute("RecdAmt") == null ? new BigDecimal(0) : (BigDecimal) row.getAttribute("RecdAmt");
                                row.setAttribute("DummyBalanceAmt", (new BigDecimal(LV_EV_VALUE)).subtract(RecAmt));
                            }
                            
                            LOGGER.info("end of the Evaluate_Expr_PSS");
                        


                        } catch (SQLException sqlerr) {
                            throw new JboException(sqlerr);
                        } finally {
                            try {
                                if (cs != null) {
                                    cs.close();
                        }
                            } catch (Exception e) {
                            }
                        }
                        
                        
                      /**  ------------------update_database---------------- **/
                        
                      String lv_token = null;
                             BigDecimal lv_value = BigDecimal.ZERO; 
        ViewObjectImpl chargeParamVO = getChargesParamConcatRO1(); 
                        
                while (LV_EV_EXPR != null) {
                System.out.println("lv_param "+LV_EV_EXPR);
                    try {
                    
                    chargeParamVO.setNamedWhereClauseParam("BindLvParam", LV_EV_EXPR);
                    chargeParamVO.setNamedWhereClauseParam("BindQrySeq", "1");
                        chargeParamVO.executeQuery();
                        Row[] rw1 = chargeParamVO.getAllRowsInRange();
                        if(rw1.length > 0){
                            lv_token = (String) rw1[0].getAttribute("QryParam");
                            
                        }
                        
                        chargeParamVO.setNamedWhereClauseParam("BindLvParam", LV_EV_EXPR);
                        chargeParamVO.setNamedWhereClauseParam("BindQrySeq", "2");
                            chargeParamVO.executeQuery();
                            Row[] rw2 = chargeParamVO.getAllRowsInRange();
                            if(rw2.length > 0){
                                LV_EV_EXPR = (String) rw2[0].getAttribute("QryParam");
                                
                            }
                        
                        chargeParamVO.setNamedWhereClauseParam("BindLvParam", LV_EV_EXPR);
                        chargeParamVO.setNamedWhereClauseParam("BindQrySeq", "3");
                            chargeParamVO.executeQuery();
                            Row[] rw3 = chargeParamVO.getAllRowsInRange();
                            if(rw3.length > 0){
                                lv_value = new BigDecimal(rw3[0].getAttribute("QryParam").toString());
                                
                            }
                        chargeParamVO.setNamedWhereClauseParam("BindLvParam", LV_EV_EXPR);
                        chargeParamVO.setNamedWhereClauseParam("BindQrySeq", "4");
                            chargeParamVO.executeQuery();
                            Row[] rw4 = chargeParamVO.getAllRowsInRange();
                            if(rw4.length > 0){
                                LV_EV_EXPR = (String) rw4[0].getAttribute("QryParam");
                                
                            }
                        


                            System.out.println(rw.getAttribute("ChargeType") + " char type - value " +
                                               rw.getAttribute("ChargeValue")+" ChargeInd "+rw.getAttribute("ChargeInd"));
                            if (rw.getAttribute("ChargeValue") != null &&
                                ((BigDecimal) rw.getAttribute("ChargeValue")).compareTo(new BigDecimal(0)) > 0) {
                                System.out.println("Inside ----------------");
                                if (rw.getAttribute("ChargeType") != null && rw.getAttribute("ChargeType")
                                                                             .toString()
                                                                             .equalsIgnoreCase(lv_token)) {
                                    if (rw.getAttribute("ChargeInd")
                                         .toString()
                                         .equalsIgnoreCase("P")) {
                                        System.out.println(" Inside P "+lv_value);
                                        rw.setAttribute("ChargeAmt", lv_value);
                                        return;
                                    }


                                }
                            }
                        
                    } catch (Exception e) {
                        e.printStackTrace();
                    }
                    
                    


                }
                




            }
        }
        rwItr.closeRowSetIterator();
    }



    public String calculateAmountOrderCharges(String chargeSel) {
        Row row = getShOrdbookMainVO1().getCurrentRow();
        BigDecimal sellingPrice =
            row.getAttribute("DummySellingPrice") ==
            null ? new BigDecimal(0) : (BigDecimal) row.getAttribute("DummySellingPrice");
        BigDecimal accessoryPrice =
            row.getAttribute("NbAccessoryPrice") ==
            null ? new BigDecimal(0) : (BigDecimal) row.getAttribute("NbAccessoryPrice");
        BigDecimal ndpPrice =
            row.getAttribute("NbNdp") ==
            null ? new BigDecimal(0) : (BigDecimal) row.getAttribute("NbNdp");

        
        String retVal = formParamOrderChargers(chargeSel);

        if (retVal != null && retVal.equalsIgnoreCase("1")) {
            return retVal;
        }

        String LV_PARAM = null;
        if(retVal == null){
          LV_PARAM =  "SP;" + sellingPrice + ";A;ACP;" + accessoryPrice + ";A;NDP;" + ndpPrice + ";A;";
        }else{
          LV_PARAM =  "SP;" + sellingPrice + ";A;ACP;" + accessoryPrice + ";A;NDP;" + ndpPrice + ";A;" + retVal;
        
        }
        
        System.out.println("calculateAmountOrderCharges LV_PARAM "+LV_PARAM);
        
        String LV_EV_EXPR = null;
        Map session = ADFContext.getCurrent().getSessionScope();
        
        LOGGER.info("inside Evaluate_Expr_PSS");
        String stmt = "begin Evaluate_Expr_PSS(?,?,?,?,?,?); end;";
        DBTransaction dbtxn = (DBTransaction) getTransaction();
        CallableStatement cs = dbtxn.createCallableStatement(stmt.toString(), 1);
        try {
            cs.setObject(1, "NVSI");
            cs.setObject(2, LV_PARAM);
            cs.setObject(3, Integer.parseInt(session.get("dealerMapCd").toString()));
            cs.setObject(4, session.get("locCd").toString());
            cs.registerOutParameter(5, Types.VARCHAR);
            cs.registerOutParameter(6, Types.VARCHAR);
            cs.execute();
            
             LV_EV_EXPR = cs.getString(5);
            String LV_EV_VALUE = cs.getString(6);
            System.out.println(" LV_EV_EXPR "+LV_EV_EXPR);
            System.out.println(" LV_EV_VALUE "+LV_EV_VALUE);
            if (LV_EV_VALUE != null) {
                BigDecimal RecAmt =
                    row.getAttribute("RecdAmt") == null ? new BigDecimal(0) : (BigDecimal) row.getAttribute("RecdAmt");
                row.setAttribute("DummyBalanceAmt", (new BigDecimal(LV_EV_VALUE)).subtract(RecAmt));
            }
            
            LOGGER.info("end of the Evaluate_Expr_PSS");
            
        

        } catch (SQLException sqlerr) {
            throw new JboException(sqlerr);
        } finally {
            try {
                if (cs != null) {
                    cs.close();
        }
            } catch (Exception e) {
            }
        }
        
        update_database(LV_EV_EXPR);
        
        return retVal;
    }

    public void update_database(String LV_EV_EXPR) {
        System.out.println(" update_database " + LV_EV_EXPR);
        String lv_param = LV_EV_EXPR;
        String lv_token = null;
        BigDecimal lv_value = BigDecimal.ZERO;
        ViewObjectImpl chargeParamVO = getChargesParamConcatRO1();

        while (lv_param != null) {
System.out.println("lv_param "+lv_param);
//            String qry1 = "Select substr('" + lv_param + "', 1, instr('" + lv_param + "', ';', 1, 1) - 1) x from dual";
//            
//
//            System.out.println(" qry1 "+qry1);
            try {
//                ResultSet rs1 = this.getDBTransaction()
//                                    .createStatement(0)
//                                    .executeQuery(qry1);
//                while (rs1.next()) {
//                    lv_token = rs1.getString(1);
//                }    
//                                    rs1.close();

            chargeParamVO.setNamedWhereClauseParam("BindLvParam", lv_param);
            chargeParamVO.setNamedWhereClauseParam("BindQrySeq", "1");
                chargeParamVO.executeQuery();
                Row[] rw1 = chargeParamVO.getAllRowsInRange();
                if(rw1.length > 0){
                    lv_token = (String) rw1[0].getAttribute("QryParam");
            
                }    
                
                chargeParamVO.setNamedWhereClauseParam("BindLvParam", lv_param);
                chargeParamVO.setNamedWhereClauseParam("BindQrySeq", "2");
                    chargeParamVO.executeQuery();
                    Row[] rw2 = chargeParamVO.getAllRowsInRange();
                    if(rw2.length > 0){
                        lv_param = (String) rw2[0].getAttribute("QryParam");
                        
                }
                
                chargeParamVO.setNamedWhereClauseParam("BindLvParam", lv_param);
                chargeParamVO.setNamedWhereClauseParam("BindQrySeq", "3");
                    chargeParamVO.executeQuery();
                    Row[] rw3 = chargeParamVO.getAllRowsInRange();
                    if(rw3.length > 0){
                        lv_value = new BigDecimal(rw3[0].getAttribute("QryParam").toString());
                
                }
                chargeParamVO.setNamedWhereClauseParam("BindLvParam", lv_param);
                chargeParamVO.setNamedWhereClauseParam("BindQrySeq", "4");
                    chargeParamVO.executeQuery();
                    Row[] rw4 = chargeParamVO.getAllRowsInRange();
                    if(rw4.length > 0){
                        lv_param = (String) rw4[0].getAttribute("QryParam");
                
                }
                

//                
//                String qry2 = "Select substr('" + lv_param + "', instr('" + lv_param + "', ';', 1, 1) + 1) x from dual";
//
//                System.out.println(" qry2 "+qry2);
//                ResultSet rs2 = this.getDBTransaction()
//                                    .createStatement(0)
//                                    .executeQuery(qry2);
//                while (rs2.next()) {
//                    lv_param = rs2.getString(1);
//                }
//                    rs2.close();
//                
//                String qry3 =
//                    "Select substr('" + lv_param + "', 1, instr('" + lv_param +
//                    "', ';', 1, 1) - 1) x from dual";
//
//                System.out.println(" qry3 "+qry3);
//                ResultSet rs3 = this.getDBTransaction()
//                                    .createStatement(0)
//                                    .executeQuery(qry3);
//                while (rs3.next()) {
//                    lv_value = new BigDecimal(rs3.getString(1));
//                }
//                    rs3.close();
//                
//                String qry4 = "Select substr('" + lv_param + "', instr('" + lv_param + "', ';', 1, 1) + 1) x from dual";
//                System.out.println(" qry4 "+qry4);
//                ResultSet rs4 = this.getDBTransaction()
//                                    .createStatement(0)
//                                    .executeQuery(qry4);
//                while (rs4.next()) {
//                    lv_param = rs4.getString(1);
//                }
//                    rs4.close();
//                

                ViewObjectImpl vo = getOrderBookingChargesRO1();
                Row r = vo.getCurrentRow();
//                RowSetIterator rw = vo.createRowSetIterator(null);
//                while (rw.hasNext()) {
//                    Row r = rw.next();
                    System.out.println(r.getAttribute("ChargeType") + " char type - value " +
                                       r.getAttribute("ChargeValue")+" ChargeInd "+r.getAttribute("ChargeInd"));
                    if (r.getAttribute("ChargeValue") != null &&
                        ((BigDecimal) r.getAttribute("ChargeValue")).compareTo(new BigDecimal(0)) > 0) {
                        System.out.println("Inside ----------------");
                        if (r.getAttribute("ChargeType") != null && r.getAttribute("ChargeType")
                                                                     .toString()
                                                                     .equalsIgnoreCase(lv_token)) {
                //                            if (lv_token.equalsIgnoreCase("ESD") || lv_token.equalsIgnoreCase("DEP")) {
                //                                //                                :CB_ORD.NB_DEP_AMT := lv_value;
                //
                //                            }
                //                            if (lv_token.equalsIgnoreCase("DIS")) {
                //                                //                                :CB_ORD.NB_DIS_AMT := lv_value;
                //                            }
                            if (r.getAttribute("ChargeInd")
                                 .toString()
                                 .equalsIgnoreCase("P")) {
                                System.out.println(" Inside P "+lv_value);
                                r.setAttribute("ChargeAmt", lv_value);
                                return;
                            }


                        }
                    }

//                }
//                rw.closeRowSetIterator();
                
                
                
                
            } catch (Exception e) {
                e.printStackTrace();
            }




        }
        
        
     
    }
        
    /**
     * Container's getter for FailedParticipantsListExcelRO1.
     * @return FailedParticipantsListExcelRO1
     */
    public ViewObjectImpl getFailedParticipantsListExcelRO1() {
        return (ViewObjectImpl) findViewObject("FailedParticipantsListExcelRO1");
    }
        
    /**
     * Container's getter for SessionIdLOV1.
     * @return SessionIdLOV1
     */
    public ViewObjectImpl getSessionIdLOV1() {
        return (ViewObjectImpl) findViewObject("SessionIdLOV1");
    }
        
    /**
     * Container's getter for SessionCdLOV1.
     * @return SessionCdLOV1
     */
    public ViewObjectImpl getSessionCdLOV1() {
        return (ViewObjectImpl) findViewObject("SessionCdLOV1");
    }

    /**
     * Container's getter for ProgramCodeLOV1.
     * @return ProgramCodeLOV1
     */
    public ViewObjectImpl getProgramCodeLOV1() {
        return (ViewObjectImpl) findViewObject("ProgramCodeLOV1");
    }



    public String formParamOrderChargers(String chargeSel) {
        System.out.println(" formParamOrderChargers "+chargeSel);
        Row curRow = getOrderBookingChargesRO1().getCurrentRow();
        
        ViewObjectImpl vo = getOrderBookingChargesRO1();
        RowSetIterator rw = vo.createRowSetIterator(null);
        BigDecimal lv_charge_value = new BigDecimal(0), LV_DIVISOR = new BigDecimal(1), lv_divide = new BigDecimal(1);
            String LV_PARAM = null, lv_charge_type = (String) curRow.getAttribute("ChargeType"),lv_charge_ind =(String) curRow.getAttribute("ChargeInd");
            
        if (chargeSel != null && chargeSel.equalsIgnoreCase("Y")) {
                   lv_charge_type = (String) curRow.getAttribute("ChargeType");

                   if (lv_charge_ind != null && lv_charge_ind.equalsIgnoreCase("P")) {
                       LV_DIVISOR = new BigDecimal(100);
                       if (curRow.getAttribute("ChargeValue") != null) {
                           lv_charge_value = (BigDecimal) curRow.getAttribute("ChargeValue");
                       }
                   } else {
                       lv_charge_value = (BigDecimal) curRow.getAttribute("ChargeAmt");
                       LV_DIVISOR = new BigDecimal(1);
                   }

                   try {
                       lv_divide = lv_charge_value.divide(LV_DIVISOR);
                   } catch (Exception e) {
                       return "1";
                   }

        //            LV_PARAM = LV_PARAM + lv_charge_type + ";" + lv_divide + ";" + lv_charge_ind + ";";
                   LV_PARAM =  lv_charge_type + ";" + lv_divide + ";" + lv_charge_ind + ";";
                   System.out.println(" formParamOrderChargers "+LV_PARAM);

               }
            
        while(rw.hasNext()){
            Row row = rw.next();
            chargeSel = (String) row.getAttribute("ChargeSel");
            System.out.println(" row chargeSel "+chargeSel);
            lv_charge_type = (String) row.getAttribute("ChargeType");
            lv_charge_ind = (String) row.getAttribute("ChargeInd");
            if (chargeSel != null && (chargeSel.equalsIgnoreCase("Y") || chargeSel.equalsIgnoreCase("true"))) {
                lv_charge_type = (String) row.getAttribute("ChargeType");

            if (lv_charge_ind != null && lv_charge_ind.equalsIgnoreCase("P")) {
                LV_DIVISOR = new BigDecimal(100);
                if (row.getAttribute("ChargeValue") != null) {
                    lv_charge_value = (BigDecimal) row.getAttribute("ChargeValue");
                }
            } else {
                lv_charge_value = (BigDecimal) row.getAttribute("ChargeAmt");
                LV_DIVISOR = new BigDecimal(1);
            }

            try {
                lv_divide = lv_charge_value.divide(LV_DIVISOR);
            } catch (Exception e) {
                return "1";
            }

//            LV_PARAM = LV_PARAM + lv_charge_type + ";" + lv_divide + ";" + lv_charge_ind + ";";
                if(LV_PARAM == null){
            LV_PARAM =  lv_charge_type + ";" + lv_divide + ";" + lv_charge_ind + ";";
                }else{
                    LV_PARAM = LV_PARAM.concat(lv_charge_type + ";" + lv_divide + ";" + lv_charge_ind + ";");
                }
            System.out.println(" formParamOrderChargers "+LV_PARAM);

        } else {
                curRow.setAttribute("ChargeAmt", new BigDecimal(0));
        }

        }
        rw.closeRowSetIterator();
        
       

        return LV_PARAM;
    }
    
    public void ewMiMcpLoyaltyCard(){

        Map session = ADFContext.getCurrent().getSessionScope();
        Row row = getShOrdbookMainVO1().getCurrentRow();
        String preBookNum = (String) row.getAttribute("PreBookingNum");
        Integer pCountAc = row.getAttribute("PCountAc") == null ? 0 : (Integer) row.getAttribute("PCountAc");
        BigDecimal LV_PREM = null;
        DBTransaction dbtxn = (DBTransaction) getTransaction();
        if(preBookNum == null){
            
            if(session.get("channelType").toString().equalsIgnoreCase("EXC") && row.getAttribute("OrderNum") == null){
                
                String stmt = "begin PKG_MI_EW_AUTOCARD.SP_EW(?,?,?,?,?,?,?,?,?,?); end;";
                CallableStatement cs = dbtxn.createCallableStatement(stmt.toString(), 1);
                try{
                    cs.setInt(1, Integer.parseInt(session.get("dealerMapCd").toString()));
                    cs.setString(2, session.get("parentGroupCd").toString());
                    cs.setString(3, session.get("locCd").toString());
                    cs.setString(4, session.get("compCode").toString());
                    cs.setString(5, (String) row.getAttribute("EnqNum"));
                    cs.registerOutParameter(6, Types.VARCHAR);
                    cs.registerOutParameter(7, Types.VARCHAR);
                    cs.registerOutParameter(8, Types.NUMERIC);
                    cs.registerOutParameter(9, Types.NUMERIC);
                    cs.registerOutParameter(10, Types.VARCHAR);
                    cs.execute();
                    
                    row.setAttribute("EwYn", cs.getString(6));
                    row.setAttribute("EwType", cs.getString(7));
                    row.setAttribute("EwBookedAmt", cs.getBigDecimal(8));
                    
                    if(cs.getBigDecimal(9) != null && cs.getBigDecimal(9).compareTo(new BigDecimal(0)) > 0){
                        String stmt1 = "begin PKG_EXTE_WAR.SP_EW_CALC_PREM(?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?); end;";
                        CallableStatement cs1 = dbtxn.createCallableStatement(stmt1.toString(), 1);
                        cs1.setInt(1, Integer.parseInt(session.get("principalMapCd").toString()));
                        cs1.setInt(2, Integer.parseInt(session.get("dealerMapCd").toString()));
                        cs1.setString(3, session.get("locCd").toString());
                        cs1.setString(4, (String) row.getAttribute("VariantCd"));
                        cs1.setString(5, "II");
                        cs1.setDate(6, new java.sql.Date(System.currentTimeMillis()));
                        cs1.setDate(7, new java.sql.Date(System.currentTimeMillis()));
                        cs1.registerOutParameter(8, Types.NUMERIC);
                        cs1.registerOutParameter(9, Types.NUMERIC);
                        cs1.registerOutParameter(10, Types.VARCHAR);
                        cs1.registerOutParameter(11, Types.NUMERIC);
                        cs1.registerOutParameter(12, Types.NUMERIC);
                        cs1.registerOutParameter(13, Types.NUMERIC);
                        cs1.registerOutParameter(14, Types.NUMERIC);
                        cs1.registerOutParameter(15, Types.NUMERIC);
                        cs1.registerOutParameter(16, Types.NUMERIC);
                        cs1.registerOutParameter(17, Types.NUMERIC);
                        cs1.registerOutParameter(18, Types.NUMERIC);
                        cs1.registerOutParameter(19, Types.NUMERIC);
                        cs1.registerOutParameter(20, Types.NUMERIC);
                        cs1.registerOutParameter(21, Types.VARCHAR);
                        cs1.execute();
                        
                        LV_PREM = cs1.getBigDecimal(14).add(cs1.getBigDecimal(15)).add(cs1.getBigDecimal(16)).add(cs1.getBigDecimal(8));
                        
                        if(LV_PREM != null){
                            row.setAttribute("EwYn", "Y");
                            row.setAttribute("EwType", "IT");
                            row.setAttribute("EwBookedAmt", LV_PREM);
                        }
                    }
                    
                    String stmt2 = "begin PKG_MI_EW_AUTOCARD.SP_AC_MI(?,?,?,?,?,?,?,?,?,?,?,?); end;";
                    CallableStatement cs2 = dbtxn.createCallableStatement(stmt2.toString(), 1);
                    
                        cs2.setInt(1, Integer.parseInt(session.get("dealerMapCd").toString()));
                        cs2.setString(2, session.get("parentGroupCd").toString());
                        cs2.setString(3, session.get("locCd").toString());
                        cs2.setString(4, session.get("compCode").toString());
                        cs2.setString(5, (String) row.getAttribute("EnqNum"));
                        cs2.setInt(6, Integer.parseInt(session.get("principalMapCd").toString()));
                        cs2.registerOutParameter(7, Types.VARCHAR);
                        cs2.registerOutParameter(8, Types.NUMERIC);
                        cs2.registerOutParameter(9, Types.NUMERIC);
                        cs2.registerOutParameter(10, Types.VARCHAR);
                        cs2.registerOutParameter(11, Types.NUMERIC);
                        cs2.registerOutParameter(12, Types.VARCHAR);
                        cs2.execute();
                    
                    if (cs2.getBigDecimal(11) == null ||
                        (cs2.getBigDecimal(11) != null && cs2.getBigDecimal(11).compareTo(new BigDecimal(1)) != 0)) {
//                        SET_ITEM_PROPERTY('B_SH_ORDBOOK.EW_TYPE',INSERT_ALLOWED,PROPERTY_TRUE);--divya
//                        SET_ITEM_PROPERTY('B_SH_ORDBOOK.EW_TYPE',UPDATE_ALLOWED,PROPERTY_TRUE);--divya
//                        -- SET_ITEM_PROPERTY('B_SH_ORDBOOK.CARD_TYPE',INSERT_ALLOWED,PROPERTY_FALSE);
//                        -- SET_ITEM_PROPERTY('B_SH_ORDBOOK.CARD_TYPE',UPDATE_ALLOWED,PROPERTY_FALSE);
//                         SET_ITEM_PROPERTY('B_SH_ORDBOOK.INT_AUTOCARD',VISUAL_ATTRIBUTE ,'VA_MANDATORY');
//                         SET_ITEM_PROPERTY('B_SH_ORDBOOK.CARD_TYPE',VISUAL_ATTRIBUTE ,'VA_MANDATORY');
                         

                    }
                        
                        
                    
                    
                }catch(Exception e){
                    e.printStackTrace();
                }               
            }
            if(!session.get("channelType").toString().equalsIgnoreCase("EXC") && row.getAttribute("OrderNum") == null){

                String qry4 =
                    "SELECT int_autocard FROM RH_ENQ where  ENQ_NUM = '" + (String) row.getAttribute("EnqNum") +
                    "' AND DEALER_MAP_CD = " + Integer.parseInt(session.get("dealerMapCd").toString()) +
                    " AND PARENT_GROUP = '" + session.get("parentGroupCd").toString() + "' AND LOC_CD = '" +
                    session.get("locCd").toString() + "' AND COMP_FA = '"+session.get("compCode").toString()+"'";
                System.out.println("qry4 "+qry4);
                
                try{
                ResultSet rs4 = this.getDBTransaction()
                                    .createStatement(0)
                                    .executeQuery(qry4);
                    while (rs4.next()) {
                        row.setAttribute("IntAutocard", rs4.getString(1));
                    }
                    
                }catch(Exception e){
                    e.printStackTrace();
                }
            }
            try{
            System.out.println(" row.getAttribute(\"IntAutocard\") "+row.getAttribute("IntAutocard"));
            if(row.getAttribute("IntAutocard") != null && row.getAttribute("IntAutocard").toString().equalsIgnoreCase("Y")){
                
                String stmt3 = "begin pkg_loyalty.sp_crd_typ_by_mod_var(?,?,?,?,?,?,?,?,?,?,?,?); end;";
                CallableStatement cs3 = dbtxn.createCallableStatement(stmt3.toString(), 1);
                
                    cs3.setString(1, (String)row.getAttribute("DummyModelCd"));
                    cs3.setString(2, (String) row.getAttribute("VariantCd"));
                    cs3.setInt(3, Integer.parseInt(session.get("principalMapCd").toString()));
                    cs3.setString(4, session.get("channelType").toString());
                    cs3.registerOutParameter(5, Types.VARCHAR);
                    cs3.registerOutParameter(6, Types.NUMERIC);
                    cs3.registerOutParameter(7, Types.VARCHAR);
                    cs3.execute();
                row.setAttribute("CardType", cs3.getString(5));    
            }
            }catch(Exception e){
                e.printStackTrace();
            }  
        }
        
        if(row.getAttribute("IntAutocard") != null && row.getAttribute("IntAutocard").toString().equalsIgnoreCase("Y")){
            try{
            String stmt4 = "begin pkg_loyalty.sp_crd_typ_by_mod_var(?,?,?,?,?,?,?,?,?,?,?,?); end;";
            CallableStatement cs4 = dbtxn.createCallableStatement(stmt4.toString(), 1);
            
                cs4.setString(1, (String)row.getAttribute("DummyModelCd"));
                cs4.setString(2, (String) row.getAttribute("VariantCd"));
                cs4.setInt(3, Integer.parseInt(session.get("principalMapCd").toString()));
                cs4.setString(4, session.get("channelType").toString());
                cs4.registerOutParameter(5, Types.VARCHAR);
                cs4.registerOutParameter(6, Types.NUMERIC);
                cs4.registerOutParameter(7, Types.VARCHAR);
                cs4.execute();
                row.setAttribute("CardType", cs4.getString(5));
                if(cs4.getString(7) != null){
                    row.setAttribute("CardType", null);
                }
                
                if(preBookNum != null  && pCountAc != null && pCountAc==0){
                    String qry5 =
                        "Select value_per_point*join_bonus_points FROM gm_loyalty_master WHERE card_type = '" +
                        row.getAttribute("CardType") + "' AND trunc(sysdate) between start_date and nvl(end_date, trunc(sysdate))";
                    System.out.println("qry5 "+qry5);
                    try{
                    ResultSet rs5 = this.getDBTransaction()
                                        .createStatement(0)
                                        .executeQuery(qry5);
                        while (rs5.next()) {
                            row.setAttribute("AutocardBookedAmt", rs5.getString(1));
                        }
                    }catch(Exception e){
                        e.printStackTrace();
                    }
                }
                
                
                
                
            }catch(Exception e){
                e.printStackTrace();
            } 
            
        }
        
        if(preBookNum != null && row.getAttribute("EwYn") != null &&  row.getAttribute("EwYn").toString().equalsIgnoreCase("Y") && pCountAc != null && pCountAc==0){
            
            if(!session.get("channelType").toString().equalsIgnoreCase("EXC")){
                String stmt3 = "begin PKG_EXTE_WAR.SP_EW_CALC_PREM(?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?); end;";
                try{
                CallableStatement cs3 = dbtxn.createCallableStatement(stmt3.toString(), 1);
                cs3.setInt(1, Integer.parseInt(session.get("principalMapCd").toString()));
                cs3.setInt(2, Integer.parseInt(session.get("dealerMapCd").toString()));
                cs3.setString(3, session.get("locCd").toString());
                cs3.setString(4, (String) row.getAttribute("VariantCd"));
                cs3.setString(5, (String) row.getAttribute("EwType"));
                cs3.setDate(6, new java.sql.Date(System.currentTimeMillis()));
                cs3.setDate(7, new java.sql.Date(System.currentTimeMillis()));
                cs3.registerOutParameter(8, Types.NUMERIC);
                cs3.registerOutParameter(9, Types.NUMERIC);
                cs3.registerOutParameter(10, Types.VARCHAR);
                cs3.registerOutParameter(11, Types.NUMERIC);
                cs3.registerOutParameter(12, Types.NUMERIC);
                cs3.registerOutParameter(13, Types.NUMERIC);
                cs3.registerOutParameter(14, Types.NUMERIC);
                cs3.registerOutParameter(15, Types.NUMERIC);
                cs3.registerOutParameter(16, Types.NUMERIC);
                cs3.registerOutParameter(17, Types.NUMERIC);
                cs3.registerOutParameter(18, Types.NUMERIC);
                cs3.registerOutParameter(19, Types.NUMERIC);
                cs3.registerOutParameter(20, Types.NUMERIC);
                cs3.registerOutParameter(21, Types.VARCHAR);
                cs3.execute();
                
            row.setAttribute("EwBookedAmt", cs3.getBigDecimal(14).add(cs3.getBigDecimal(15)).add(cs3.getBigDecimal(16)).add(cs3.getBigDecimal(8)));
                  
                }catch(Exception e){
                    e.printStackTrace();
                }
                
            }else if(session.get("channelType").toString().equalsIgnoreCase("EXC")){
                
                String stmt4 = "begin PKG_EXTE_WAR.SP_EW_CALC_PREM(?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?); end;";
                try{
                CallableStatement cs4 = dbtxn.createCallableStatement(stmt4.toString(), 1);
                cs4.setInt(1, Integer.parseInt(session.get("principalMapCd").toString()));
                cs4.setInt(2, Integer.parseInt(session.get("dealerMapCd").toString()));
                cs4.setString(3, session.get("locCd").toString());
                cs4.setString(4, (String) row.getAttribute("VariantCd"));
                cs4.setString(5, (String) row.getAttribute("EwType"));
                cs4.setDate(6, new java.sql.Date(System.currentTimeMillis()));
                cs4.setDate(7, new java.sql.Date(System.currentTimeMillis()));
                cs4.registerOutParameter(8, Types.NUMERIC);
                cs4.registerOutParameter(9, Types.NUMERIC);
                cs4.registerOutParameter(10, Types.VARCHAR);
                cs4.registerOutParameter(11, Types.NUMERIC);
                cs4.registerOutParameter(12, Types.NUMERIC);
                cs4.registerOutParameter(13, Types.NUMERIC);
                cs4.registerOutParameter(14, Types.NUMERIC);
                cs4.registerOutParameter(15, Types.NUMERIC);
                cs4.registerOutParameter(16, Types.NUMERIC);
                cs4.registerOutParameter(17, Types.NUMERIC);
                cs4.registerOutParameter(18, Types.NUMERIC);
                cs4.registerOutParameter(19, Types.NUMERIC);
                cs4.registerOutParameter(20, Types.NUMERIC);
                cs4.registerOutParameter(21, Types.VARCHAR);
                cs4.execute();
                
                row.setAttribute("EwBookedAmt", cs4.getBigDecimal(14).add(cs4.getBigDecimal(15)).add(cs4.getBigDecimal(16)).add(cs4.getBigDecimal(8)));
                row.setAttribute("EwYn", "Y");  
                }catch(Exception e){
                    e.printStackTrace();
                }
                
            }else{
                row.setAttribute("EwBookedAmt", null);
                row.setAttribute("EwType", null);
            }
            
            
            
        }
        
        if(Integer.parseInt(session.get("principalMapCd").toString()) == 2){
            String qry5 =
                "select line_cd  from gm_mod where principal_map_cd=" +
                Integer.parseInt(session.get("principalMapCd").toString()) + " and model_cd='"+row.getAttribute("DummyModelCd")+"'";

            try{
            ResultSet rs5 = this.getDBTransaction()
                                .createStatement(0)
                                .executeQuery(qry5);
                while (rs5.next()) {
                    if(rs5.getString(1) == null){
//                        Vehicle type not found against the model code '||:B_SH_ORDBOOK.NB_MODEL_CD
                    }else if(rs5.getString(1) != null && (rs5.getString(1).equalsIgnoreCase("M") || rs5.getString(1).equalsIgnoreCase("S"))){
//                        hide_view('CN_STACK');
                        
                        
                    }else{
//                        general.disp_text('Extended warranty allowed only for vehicle type M and S','Info');
                        row.setAttribute("PCountAc", 1);
                    }
                }
                
                
                
                
            }catch(Exception e){
                e.printStackTrace();
            }
        }
        
        if(row.getAttribute("CardType") != null){
            String qry6 =
                "select fees_amt  from gm_loyalty_master  WHERE CARD_TYPE='" +row.getAttribute("CardType") + "' and channel='"+session.get("channelType").toString()+"' AND tier='T1'";

            System.out.println("qry6 "+qry6);
            try{
            ResultSet rs6 = this.getDBTransaction()
                                .createStatement(0)
                                .executeQuery(qry6);
                while (rs6.next()) {
                    row.setAttribute("AutocardBookedAmt", rs6.getString(1));
                }
            }catch(Exception e){
                    row.setAttribute("AutocardBookedAmt", new BigDecimal(0));
                e.printStackTrace();
            }
        }
        
    }

    public void intAutoCard(String autoCard) {
        String p_error_msg = null;
        Map session = ADFContext.getCurrent().getSessionScope();
        Row row = getShOrdbookMainVO1().getCurrentRow();

        if (session.get("channelType")
                   .toString()  
                   .equalsIgnoreCase("EXC") && autoCard != null && autoCard.equalsIgnoreCase("Y")) {
            String stmt = "begin PKG_MI_EW_AUTOCARD.SP_AC_MI(?,?,?,?,?,?,?,?,?,?,?,?); end;";
            DBTransaction dbtxn = (DBTransaction) getTransaction();
            CallableStatement cs = dbtxn.createCallableStatement(stmt.toString(), 1);
            try {
                cs.setString(1, session.get("dealerMapCd").toString());
                cs.setString(2, session.get("parentGroupCd").toString());
                cs.setString(3, session.get("locCd").toString());
                cs.setString(4, session.get("compCode").toString());
                cs.setString(5, (String) row.getAttribute("EnqNum"));
                cs.setInt(6, Integer.parseInt(session.get("principalMapCd").toString()));
                cs.registerOutParameter(7, Types.VARCHAR);
                cs.registerOutParameter(8, Types.NUMERIC);
                cs.registerOutParameter(9, Types.NUMERIC);
                cs.registerOutParameter(10, Types.VARCHAR);
                cs.registerOutParameter(11, Types.NUMERIC);
                cs.registerOutParameter(12, Types.VARCHAR);
                cs.execute();

                row.setAttribute("AutocardBookedAmt", cs.getBigDecimal(8));
                row.setAttribute("MiBookedAmt", cs.getBigDecimal(9));
                row.setAttribute("CardType", cs.getString(10));

                LOGGER.info("end of the PkgCallForNominatedUpcomingTrainingExcel");

                String L_AUTOCARD = cs.getString(7);
                Integer err_cd = cs.getInt(11);
                if (err_cd != null && err_cd == 0 &&
                    (L_AUTOCARD == null || (L_AUTOCARD != null && cs.getString(7).equalsIgnoreCase("N")))) {

                } else if (err_cd != null && err_cd == 1 &&
                           (L_AUTOCARD == null || (L_AUTOCARD != null && cs.getString(7).equalsIgnoreCase("N")))) {

                } else if (err_cd != null && err_cd == 1 &&
                           (L_AUTOCARD == null || (L_AUTOCARD != null && cs.getString(7).equalsIgnoreCase("Y")))) {

                }


            } catch (SQLException sqlerr) {
                throw new JboException(sqlerr);
            } finally {
                try {
                    if (cs != null) {
                        cs.close();
                    }
                } catch (Exception e) {
                }
            }
        } else if (session.get("channelType")
                          .toString()
                          .equalsIgnoreCase("EXC") && autoCard != null && autoCard.equalsIgnoreCase("N")) {

        } else if (!session.get("channelType")
                           .toString()
                           .equalsIgnoreCase("EXC") && autoCard != null && autoCard.equalsIgnoreCase("Y")) {

            row.setAttribute("CardType", null);
            row.setAttribute("AppFormNo", null);
            row.setAttribute("AutocardBookedAmt", null);
        } else {

            row.setAttribute("CardType", null);
            row.setAttribute("AppFormNo", null);
            row.setAttribute("AutocardBookedAmt", null);

        }

        if (autoCard != null && autoCard.equalsIgnoreCase("Y")) {

            String stmt = "begin pkg_loyalty.sp_crd_typ_by_mod_var(?,?,?,?,?,?,?); end;";
            DBTransaction dbtxn = (DBTransaction) getTransaction();
            CallableStatement cs = dbtxn.createCallableStatement(stmt.toString(), 1);
            try {
                cs.setString(1, (String) row.getAttribute("DummyModelCd"));
                cs.setString(2, (String) row.getAttribute("VariantCd"));
                cs.setInt(3, Integer.parseInt(session.get("principalMapCd").toString()));
                cs.setString(4, session.get("channelType").toString());
                cs.setString(5, autoCard);
                cs.registerOutParameter(6, Types.VARCHAR);
                cs.registerOutParameter(7, Types.VARCHAR);
                cs.execute();

                if (cs.getString(7) != null) {
                    row.setAttribute("CardType", null);
                    p_error_msg = cs.getString(7);
                }

                LOGGER.info("end of the pkg_loyalty.sp_crd_typ_by_mod_var");


            } catch (SQLException sqlerr) {
                throw new JboException(sqlerr);
            } finally {
                try {
                    if (cs != null) {
                        cs.close();
                    }
                } catch (Exception e) {
                }
            }


        } else {
            row.setAttribute("CardType", null);
        }

        try {
            String autocardAmt =
                "SELECT fees_amt FROM gm_loyalty_master WHERE CARD_TYPE= '" + autoCard + "' AND channel='" +
                session.get("channelType").toString() + "' AND tier='T1'";
            ResultSet rs = getDBTransaction().createStatement(0).executeQuery(autocardAmt);
            if (rs.next()) {
                row.setAttribute("AutocardBookedAmt", rs.getBigDecimal(1));
            }

        } catch (Exception e) {
            row.setAttribute("AutocardBookedAmt", new BigDecimal(0));
        }

    }
    
    public void initSchemeMasterApproval(){
//        Map session = ADFContext.getCurrent().getSessionScope();
//        
//        session.put("dealerMapCd", "99999");
//        session.put("parentGroupCd", "99999");
//        session.put("locCd", "999");
//        session.put("locName", "MARUTI SUZUKI INDIA LTD");
//        session.put("compCode", "999");
//        session.put("channelType", "NRM");
//        session.put("principalMapCd", "1");
//        session.put("userId", "DMS2TEST");
//        session.put("dealerName", "MARUTI SUZUKI INDIA LTD");
//        session.put("skin", "maruti");
//        session.put("userCode", "195243");
        
        Row curRow = getGmSchemeTVO1().getCurrentRow();
        if(curRow != null){
        curRow.setAttribute("SchemeS", null);
        curRow.setAttribute("SchemeStatusS", null);
        curRow.setAttribute("ChannelS", null);
        curRow.setAttribute("SchemeRegionS", null);
        curRow.setAttribute("SchemeTypeS", null);
        curRow.setAttribute("SchemeEndDateS", null);
        curRow.setAttribute("SchemeStartDateS", null);
        }
        
    }

    /**
     * Container's getter for ExchangeBusineesSummaryExcelRO1.
     * @return ExchangeBusineesSummaryExcelRO1
     */
    public ViewObjectImpl getExchangeBusineesSummaryExcelRO1() {
        return (ViewObjectImpl) findViewObject("ExchangeBusineesSummaryExcelRO1");
    }

    /**
     * Container's getter for ExchangeBusinessAllEvaluatorExcelRO1.
     * @return ExchangeBusinessAllEvaluatorExcelRO1
     */
    public ViewObjectImpl getExchangeBusinessAllEvaluatorExcelRO1() {
        return (ViewObjectImpl) findViewObject("ExchangeBusinessAllEvaluatorExcelRO1");
    }
    
    public void otherChargesInsertOrderBooking(){
        Map session = ADFContext.getCurrent().getSessionScope();
        Row r = getShOrdbookMainVO1().getCurrentRow();
        ViewObjectImpl vo = getShOrdChargesVO1();
        if(r.getAttribute("OrderNum") != null){
            ViewCriteria vc = vo.getViewCriteria("ShOrdChargesVOCriteria");
            vo.applyViewCriteria(vc);
            vo.setNamedWhereClauseParam("pOrderNum", (String) r.getAttribute("OrderNum"));
            vo.executeQuery();
            
            System.out.println(" Order having scheme otherChargesInsertOrderBooking "+vo.getRowCount());
            Row[] rw = vo.getAllRowsInRange();
            for(int i =0; i < rw.length ;i++){
                rw[i].remove();
            }
        }
        
        int chrgCount = 0;
        ViewObjectImpl othrChargesDualVO = getOrderBookingChargesRO1();
        System.out.println(" othrChargesDualVO "+othrChargesDualVO.getRowCount());
        RowSetIterator rw = othrChargesDualVO.createRowSetIterator(null);
        while(rw.hasNext()){
            Row scmRow = rw.next();
            System.out.println(" scmRow.getAttribute(\"ChargeSel\") "+scmRow.getAttribute("ChargeSel"));
            if(scmRow.getAttribute("ChargeSel") != null && (scmRow.getAttribute("ChargeSel").toString().equalsIgnoreCase("Y") || scmRow.getAttribute("ChargeSel").toString().equalsIgnoreCase("true"))){
                chrgCount += 1;
                Row othChargeRow = vo.createRow();
                othChargeRow.setAttribute("DealerMapCd", Integer.parseInt(session.get("dealerMapCd").toString()));
                othChargeRow.setAttribute("LocCd", session.get("locCd").toString());
                othChargeRow.setAttribute("CompFa", session.get("compCode").toString());
                othChargeRow.setAttribute("ParentGroup", session.get("parentGroupCd").toString());
                othChargeRow.setAttribute("OrdNum", (String) r.getAttribute("OrderNum"));
                othChargeRow.setAttribute("ChargeSrl", chrgCount);
                othChargeRow.setAttribute("ChargeCd", (String) scmRow.getAttribute("ChargeCd"));
                othChargeRow.setAttribute("ChargeType", (String) scmRow.getAttribute("ChargeType"));
                othChargeRow.setAttribute("ChargeInd", (String) scmRow.getAttribute("ChargeInd"));
                othChargeRow.setAttribute("ChargeValue", (BigDecimal) scmRow.getAttribute("ChargeValue"));
                othChargeRow.setAttribute("ChargeAmt", (BigDecimal) scmRow.getAttribute("ChargeAmt"));
                othChargeRow.setAttribute("CreatedBy", session.get("userCode").toString());
                
                othChargeRow.setAttribute("CreatedDate", convertToTimestampValue(new Timestamp(System.currentTimeMillis()))); 
                othChargeRow.setAttribute("ModifiedBy", session.get("userCode").toString());
                othChargeRow.setAttribute("ModifiedDate", new Timestamp(System.currentTimeMillis()));     
                vo.insertRow(othChargeRow);   
            } 
        }
        
    }
    
    public Integer spSchemeCheckInsertOrderBooking(){
        Map session = ADFContext.getCurrent().getSessionScope();
        Row r = getShOrdbookMainVO1().getCurrentRow();
        ViewObjectImpl vo = getShOrdInvSchemeVO1();
        if(r.getAttribute("OrderNum") != null){
            ViewCriteria vc = vo.getViewCriteria("ShOrdInvSchemeVOCriteria");
            vo.applyViewCriteria(vc);
            vo.setNamedWhereClauseParam("BindComp", session.get("compCode").toString());
            vo.setNamedWhereClauseParam("BindDealer", Integer.parseInt(session.get("dealerMapCd").toString()));
            vo.setNamedWhereClauseParam("BindLoc", session.get("locCd").toString());
            vo.setNamedWhereClauseParam("BindParent", session.get("parentGroupCd").toString());
            vo.setNamedWhereClauseParam("BindOrdInv", "O");
            vo.setNamedWhereClauseParam("BindOrderNum", (String) r.getAttribute("OrderNum"));
            vo.executeQuery();
            
            System.out.println(" Order having scheme spSchemeCheckInsertOrderBooking "+vo.getRowCount());
            Row[] rw = vo.getAllRowsInRange();
            for(int i =0; i < rw.length ;i++){
                rw[i].remove();
            }
        }
        
        int schmDual = 0,schmInst =0;
        ViewObjectImpl schmDualVO = getOrderBookingSchemeRO1();
        RowSetIterator rw = schmDualVO.createRowSetIterator(null);
        while(rw.hasNext()){
            schmDual += 1;
            Row scmRow = rw.next();
            if(scmRow.getAttribute("SchemeSel") != null && scmRow.getAttribute("SchemeSel").toString().equalsIgnoreCase("Y")){
                schmInst += 1;
                Row schemeRow = vo.createRow();
                schemeRow.setAttribute("DealerMapCd", Integer.parseInt(session.get("dealerMapCd").toString()));
                schemeRow.setAttribute("LocCd", session.get("locCd").toString());
                schemeRow.setAttribute("CompFa", session.get("compCode").toString());
                schemeRow.setAttribute("ParentGroup", session.get("parentGroupCd").toString());
                schemeRow.setAttribute("OrderNum", (String) r.getAttribute("OrderNum"));
                schemeRow.setAttribute("SchemeCd", (String) scmRow.getAttribute("SchemeCd"));
                schemeRow.setAttribute("CreatedBy", session.get("userCode").toString());
                schemeRow.setAttribute("CreatedDate", new Timestamp(System.currentTimeMillis()));
                schemeRow.setAttribute("OrderInv", "O");
                schemeRow.setAttribute("OrdVariantcd", (String) scmRow.getAttribute("OldVariantCd"));       
                vo.insertRow(schemeRow);   
            } 
        }
        
        
        ViewCriteria vcc = vo.getViewCriteria("ShOrdInvSchemeVOCriteria");
        vo.applyViewCriteria(vcc);
        vo.setNamedWhereClauseParam("BindComp", session.get("compCode").toString());
        vo.setNamedWhereClauseParam("BindDealer", Integer.parseInt(session.get("dealerMapCd").toString()));
        vo.setNamedWhereClauseParam("BindLoc", session.get("locCd").toString());
        vo.setNamedWhereClauseParam("BindParent", session.get("parentGroupCd").toString());
        vo.setNamedWhereClauseParam("BindOrdInv", "O");
        vo.setNamedWhereClauseParam("BindOrderNum", (String) r.getAttribute("OrderNum"));
        vo.executeQuery();
        
        System.out.println(" spSchemeCheckInsertOrderBooking vcc "+vo.getRowCount());
        
        if(schmDual != schmInst){
            return 1;
        }
        
        
        
        
      return 0;  
    }

    
    /**
     * Container's getter for LocationAllotLOV2.
     * @return LocationAllotLOV2
     */
    public ViewObjectImpl getLocationAllotLOV2() {
        return (ViewObjectImpl) findViewObject("LocationAllotLOV2");
    }
    public void filterValueOfReceipt()
    {
        ViewObjectImpl voiDual=this.getReceiptTVO1();
        ViewObjectImpl  voiReceipt=this.getReceiptEOView1();
        
        System.out.println("Count is:::::::"+voiReceipt.getEstimatedRowCount());
        System.out.println("Indent Number::::::::::"+voiDual.getCurrentRow().getAttribute("StkIndNumT"));
        System.out.println("Issue Number::::::::::"+voiDual.getCurrentRow().getAttribute("StkIssNumT"));
        System.out.println("Vehicle Id::::::::::"+voiDual.getCurrentRow().getAttribute("VehicleIdT"));
        
        
        ViewCriteria vc=voiReceipt.getViewCriteria("filterReceiptDataVC");
        voiReceipt.applyViewCriteria(vc, false);
        voiReceipt.setNamedWhereClauseParam("bindIndentNumber", voiDual.getCurrentRow().getAttribute("StkIndNumT"));
        voiReceipt.setNamedWhereClauseParam("bindIssueNumber", voiDual.getCurrentRow().getAttribute("StkIssNumT"));
        voiReceipt.setNamedWhereClauseParam("bindVinNumber", voiDual.getCurrentRow().getAttribute("VehicleIdT"));
        voiReceipt.executeQuery();
        System.out.println("After Count is:::::::"+voiReceipt.getEstimatedRowCount());
}


public String searchReceiptNum(String receiptNum,String vinNum)
{
    System.out.println("Receipt Num "+receiptNum);
    System.out.println("Vin Num:::"+vinNum);
    
ViewObjectImpl voiReceipt=this.getReceiptEOView1();
System.out.println("After Before data is:::::"+voiReceipt.getEstimatedRowCount());
ViewCriteria vc=voiReceipt.getViewCriteria("SearchReceiptVC");
voiReceipt.applyViewCriteria(vc, false);
voiReceipt.setNamedWhereClauseParam("bindReceiptNum", receiptNum);
voiReceipt.setNamedWhereClauseParam("bindVinNumber", vinNum);
voiReceipt.executeQuery();
System.out.println("After filter data is:::::"+voiReceipt.getEstimatedRowCount());
if(voiReceipt.getEstimatedRowCount()>0)
{
return "Y";
}

return null;
}

    public String autoCardSalesInv(String autoCard){
        DBTransaction dbtxn = (DBTransaction) getTransaction();
        CallableStatement cs = null;
        Row salesInvRw = this.getSalesInvoiceVO1().getCurrentRow();
            Map session = ADFContext.getCurrent().getSessionScope();
            Integer pmc = new Integer(session.get("principalMapCd").toString());
        
        Map pageFlow = ADFContext.getCurrent().getPageFlowScope();
        if (autoCard!=null && autoCard.equalsIgnoreCase("Y")) {
            String stamt = "begin pkg_loyalty.sp_crd_typ_by_mod_var(?,?,?,?,?,?,?); end;";
            try {
                cs = dbtxn.createCallableStatement(stamt, 0);
                cs.setObject(1, salesInvRw.getAttribute("ModelCd"));
                cs.setObject(2, salesInvRw.getAttribute("VariantCd"));
                cs.setObject(3, pmc);
                cs.setObject(4, pageFlow.get("P_DEALER_CHANNEL"));
                cs.registerOutParameter(5, Types.VARCHAR);
                cs.registerOutParameter(6, Types.NUMERIC);
                cs.registerOutParameter(7, Types.VARCHAR);
                cs.execute();
                if (cs.getString(7) != null) {
                    salesInvRw.setAttribute("CardType",null);
                    return cs.getString(7);
                } else {
                    salesInvRw.setAttribute("CardType", cs.getString(7));
                }
            } catch (SQLException sqle) {
                sqle.printStackTrace();
            } finally {
                try {
                    cs.close();
                } catch (SQLException sqle) {
                    // TODO: Add catch code
                    sqle.printStackTrace();
                }
            }
    }
            /**
             * MI Name logic
             */
        ViewObjectImpl miName = this.getMiNameLOV1();
        miName.setNamedWhereClauseParam("PRINCIPAL", pmc);
        miName.setNamedWhereClauseParam("VIN", salesInvRw.getAttribute("Vin"));
        miName.executeQuery();

        if (miName.first() != null) {
            salesInvRw.setAttribute("MiName", miName.first().getAttribute("MinsCustName"));
            if (miName.first().getAttribute("MinsCustName") != null) {
                Object miMatch =
                    callStoredFunction(Types.VARCHAR, "SF_NAME_MATCH_FLAG(?,?)",
                                       new Object[] { salesInvRw.getAttribute("CustNameMatchTrans"),
                                                      salesInvRw.getAttribute("MiName") });
                if (miMatch != null) {
                    String mi = miMatch.toString();
                    if (mi.equalsIgnoreCase("Y")) {
                        salesInvRw.setAttribute("MiMatchFlag", "RY");
                    } else {
                        salesInvRw.setAttribute("MiMatchFlag", "RN");
                    }
                }
            }
        }
        
    return null;
    }

    public void exchangeFlagSalesInv(Integer dealerMapCd, String parentGrp,String locCd, String compCode, String ordNum){
        Row salesInvRw = this.getSalesInvoiceVO1().getCurrentRow();

        DBTransaction dbtxn = (DBTransaction) getTransaction();
        CallableStatement cs = null;
        String enqPocDtl = "begin PKG_ENQ_POC_DETAIL.SP_POC_ENQ_DTL(?,?,?,?,?,?,?,?,?);end;";
        try {
            cs = dbtxn.createCallableStatement(enqPocDtl, 1);
            cs.setObject(1, dealerMapCd);
            cs.setObject(2, parentGrp);
            cs.setObject(3, locCd);
            cs.setObject(4, compCode);
            cs.setObject(5, ordNum);
            cs.registerOutParameter(6, Types.VARCHAR);
            cs.registerOutParameter(7, Types.VARCHAR);
            cs.registerOutParameter(8, Types.NUMERIC);
            cs.registerOutParameter(9, Types.VARCHAR);
            cs.execute();
            System.out.println("Current Row------> "+getCtrlDualVO1().getCurrentRow());
            System.out.println("LvRegnNum___________________>>>> "+cs.getString(7));
            getCtrlDualVO1().getCurrentRow().setAttribute("LvRegnNum", cs.getString(7));
            if (cs.getString(6) != null) {
                salesInvRw.setAttribute("ExchangeFlag", cs.getString(6));
            } else {
                salesInvRw.setAttribute("ExchangeFlag", "N");
            }
            salesInvRw.setAttribute("LoyalBonusFlag", "N");
        } catch (Exception e) {
            e.printStackTrace();
        } finally {
            try {
                cs.close();
            } catch (SQLException sqle) {
                // TODO: Add catch code
                sqle.printStackTrace();
            }
        }        
    }
    
    public Timestamp convertToTimestampValue(Timestamp value) {
    try {
    DefaultDateFormatter ddf = new DefaultDateFormatter();
    String val = ddf.format("dd-MM-yyyy", value);
    SimpleDateFormat formatter = new SimpleDateFormat("dd-MM-yyyy");
    java.util.Date date = formatter.parse(val);
    // java.sql.Date sqlDate = new java.sql.Date(date.getTime());
    value = new Timestamp(date.getTime());//new oracle.jbo.domain.Date(sqlDate);
    } catch (Exception e) {
    e.printStackTrace();



    }
    return value;
    }


    /**
     * Container's getter for GmEmpRO1.
     * @return GmEmpRO1
     */
    public ViewObjectImpl getGmEmpRO1() {
        return (ViewObjectImpl) findViewObject("GmEmpRO1");
    }
    
    public String getFiDescfromFiCode(String fiCd){
        Map session = ADFContext.getCurrent().getSessionScope();
        Integer dealer = Integer.parseInt(session.get("dealerMapCd").toString());
        String parent = session.get("parentGroupCd").toString();
        
        String fiDesc = null;
        String stmt = "begin SP_GET_PARTY_DESC (?,?,?,?,?,?,?); end;";
        DBTransaction dbtxn = (DBTransaction) getTransaction();
        CallableStatement cs = dbtxn.createCallableStatement(stmt.toString(), 1);

        try {
            cs.setObject(1, dealer);
            cs.setObject(2, parent);
            cs.setObject(3, fiCd);
            cs.setObject(4, "F");
            cs.registerOutParameter(5, OracleTypes.VARCHAR);
            cs.registerOutParameter(6, OracleTypes.VARCHAR);
            cs.registerOutParameter(7, OracleTypes.NUMERIC);
            cs.execute();
            if(cs.getInt(7)==0){
            if (cs.getString(5) != null) {
                fiDesc = cs.getString(5);
            }
            }else{
                fiDesc = null;
            }
            System.out.println("fiDesc Value----" + fiDesc);
        } catch (SQLException sqlerr) {
            throw new JboException(sqlerr);
        } finally {
            try {
                if (cs != null) {
                    cs.close();
                }
            } catch (Exception e) {
            }
        }
        return fiDesc;
    }
    
    public BigDecimal getSellPriceSalesInv(String orderNum, String invType, String billNature){
        Map session = ADFContext.getCurrent().getSessionScope();
        Integer dealer = Integer.parseInt(session.get("dealerMapCd").toString());
        String parent = session.get("parentGroupCd").toString();
        String compFa = session.get("compCode").toString();
        String locCd = session.get("locCd").toString();
        BigDecimal sellPrice = BigDecimal.ZERO;
        String stmt = "begin SP_GET_PARTY_DESC (?,?,?,?,?,?,?); end;";
        DBTransaction dbtxn = (DBTransaction) getTransaction();
        CallableStatement cs = dbtxn.createCallableStatement(stmt.toString(), 1);

        try {
            cs.setObject(1, dealer);
            cs.setObject(2, locCd);
            cs.setObject(3, compFa);
            cs.setObject(4, parent);
            cs.setObject(5, orderNum);
            cs.setObject(6, invType);
            cs.setObject(7, billNature);
            cs.registerOutParameter(8, OracleTypes.NUMERIC);
            cs.registerOutParameter(9, OracleTypes.VARCHAR);
            cs.registerOutParameter(10, OracleTypes.INTEGER);
            cs.execute();
            sellPrice = cs.getBigDecimal(8);
            
        }catch(Exception e){
            e.printStackTrace();
        }
        return sellPrice;
    }
    
    public void calculateInvoice(){
        
    }

    /**
     * Container's getter for ShOrdInvSchemeRO1.
     * @return ShOrdInvSchemeRO1
     */
    public ViewObjectImpl getShOrdInvSchemeRO1() {
        return (ViewObjectImpl) findViewObject("ShOrdInvSchemeRO1");
    }
    
    public Long schemeChkOrderSalesInv(String ordNum){
        Map session = ADFContext.getCurrent().getSessionScope();
        Integer pmc = Integer.parseInt(session.get("principalMapCd").toString());
        ViewObjectImpl shOrd = this.getShOrdbookDataLOV1();
        shOrd.setNamedWhereClauseParam("ORDER_NUM", ordNum);
        shOrd.executeQuery();
        ViewObjectImpl schemCnt = this.getSchemeCntVO1();
        if(shOrd.first()!=null){
            oracle.jbo.domain.Date orderDate = (oracle.jbo.domain.Date)shOrd.first().getAttribute("OrderDate");
            ViewObjectImpl amDealerLocVo = this.getAmDealerLocRO1();
            amDealerLocVo.applyViewCriteria(amDealerLocVo.getViewCriteria("AllGlobalParamsVC"));
            amDealerLocVo.executeQuery();
            String mulDealerCd = null;
            String forCd = null;
            String regionCd = null;
            if(amDealerLocVo.first()!=null){
                 regionCd = (String)amDealerLocVo.first().getAttribute("RegionCd");
                 mulDealerCd= (String)amDealerLocVo.first().getAttribute("MulDealerCd");
                 forCd = (String)amDealerLocVo.first().getAttribute("ForCd");                           
            }
            ViewObjectImpl gmgrophpdVO = this.getGmGropdgmGrophDataVO1();
            gmgrophpdVO.setNamedWhereClauseParam("CORPORATE_CODE", shOrd.first().getAttribute("Corporate"));
            gmgrophpdVO.executeQuery();
            String gropCode = null;
            if(gmgrophpdVO.first()!=null){
                gropCode = (String)gmgrophpdVO.first().getAttribute("GropCode");
                
            }
            
            
            schemCnt.setNamedWhereClauseParam("CORPORATE_CODE", shOrd.first().getAttribute("Corporate"));
            schemCnt.setNamedWhereClauseParam("VARIANT_CD", getSalesInvoiceVO1().getCurrentRow().getAttribute("VariantCd"));
            schemCnt.setNamedWhereClauseParam("V_GROP_CODE", gropCode);
            schemCnt.setNamedWhereClauseParam("V_FOR_CD", forCd);
            schemCnt.setNamedWhereClauseParam("V_MUL_DEALER_CD", mulDealerCd);
            schemCnt.setNamedWhereClauseParam("bindOrderDate", orderDate);
            schemCnt.setNamedWhereClauseParam("V_REGION_CD", regionCd);
            schemCnt.executeQuery();
        }
        return schemCnt.getEstimatedRowCount();
    }

    /**
     * Container's getter for GmGropdgmGrophDataVO1.
     * @return GmGropdgmGrophDataVO1
     */
    public ViewObjectImpl getGmGropdgmGrophDataVO1() {
        return (ViewObjectImpl) findViewObject("GmGropdgmGrophDataVO1");
    }

    /**
     * Container's getter for SchemeCntVO1.
     * @return SchemeCntVO1
     */
    public ViewObjectImpl getSchemeCntVO1() {
        return (ViewObjectImpl) findViewObject("SchemeCntVO1");
    }
    
    public String returnVillageNm(String villageCd){
        String query10 = null;
        ResultSet rs10 = null;
        String village_desc = "NA";
        Map session = ADFContext.getCurrent().getSessionScope();
        Integer pmc = Integer.parseInt(session.get("principalMapCd").toString());
        query10 =
            "   select vl.village_name from gm_village vl where vl.village_Cd ='" + villageCd +
            "' and vl.principal_map_cd = "+pmc;
        try{
        rs10 = getDBTransaction().createStatement(0).executeQuery(query10);
        if (rs10.next()) {
            village_desc = rs10.getString(1);
        }
        }catch (Exception e){
            e.printStackTrace();
        }finally {
            try {
                if (rs10 != null) {
                    rs10.close();
                }
            } catch (Exception e) {
            }
        }
        return village_desc;
    }
    
    public String returnStateNm(String stateCd){
        String query10 = null;
        ResultSet rs10 = null;
        String StateNm = null;
        Map session = ADFContext.getCurrent().getSessionScope();
        Integer pmc = Integer.parseInt(session.get("principalMapCd").toString());
        query10 =
            "SELECT state_desc\n" +  
            "				FROM gm_state\n" + 
            "WHERE PRINCIPAL_MAP_CD ="+pmc+ 
            " AND state_Cd ='"+stateCd+"'";
        try{
        rs10 = getDBTransaction().createStatement(0).executeQuery(query10);
        if (rs10.next()) {
            StateNm = rs10.getString(1);
        }
        }catch (Exception e){
            e.printStackTrace();
        }finally {
            try {
                if (rs10 != null) {
                    rs10.close();
                }
            } catch (Exception e) {
            }
        }
        System.out.println("Return value");
        return StateNm;
    }
    
    public String returnTehsilNm(String tehsilCd){
        String query10 = null;
        ResultSet rs10 = null;
        String tehsil_desc = "NA";
        Map session = ADFContext.getCurrent().getSessionScope();
        Integer pmc = Integer.parseInt(session.get("principalMapCd").toString());
        query10 =
            "   select vl.tehsil_desc from gm_tehsil vl where vl.tehsil_cd ='" + tehsilCd +
            "' and vl.principal_map_cd = "+pmc;
        try{
        rs10 = getDBTransaction().createStatement(0).executeQuery(query10);
        if (rs10.next()) {
            tehsil_desc = rs10.getString(1);
        }
        }catch (Exception e){
            e.printStackTrace();
        }finally {
            try {
                if (rs10 != null) {
                    rs10.close();
                }
            } catch (Exception e) {
            }
        }
        return tehsil_desc;
    }

    /**
     * Container's getter for EwYrDataVO1.
     * @return EwYrDataVO1
     */
    public ViewObjectImpl getEwYrDataVO1() {
        return (ViewObjectImpl) findViewObject("EwYrDataVO1");
    }

    /**
     * Container's getter for SalesInvoiceVO2.
     * @return SalesInvoiceVO2
     */
    public ViewObjectImpl getSalesInvoiceVO2() {
        return (ViewObjectImpl) findViewObject("SalesInvoiceVO2");
    }

    /**
     * Container's getter for SdInvChargesEOView2.
     * @return SdInvChargesEOView2
     */
    public SdInvChargesEOViewImpl getSdInvChargesEOView2() {
        return (SdInvChargesEOViewImpl) findViewObject("SdInvChargesEOView2");
    }

    /**
     * Container's getter for ShInvoiceToSdInvChargesVL.
     * @return ShInvoiceToSdInvChargesVL
     */
    public ViewLinkImpl getShInvoiceToSdInvChargesVL() {
        return (ViewLinkImpl) findViewLink("ShInvoiceToSdInvChargesVL");
    }

    /**
     * Container's getter for SdInvChargesEOView3.
     * @return SdInvChargesEOView3
     */
    public SdInvChargesEOViewImpl getSdInvChargesEOView3() {
        return (SdInvChargesEOViewImpl) findViewObject("SdInvChargesEOView3");
    }

    /**
     * Container's getter for ShInvoiceToSdInvChargesVL1.
     * @return ShInvoiceToSdInvChargesVL1
     */
    public ViewLinkImpl getShInvoiceToSdInvChargesVL1() {
        return (ViewLinkImpl) findViewLink("ShInvoiceToSdInvChargesVL1");
    }

    /**
     * Container's getter for ChargesDetailsVO2.
     * @return ChargesDetailsVO2
     */
    public ChargesDetailsVOImpl getChargesDetailsVO2() {
        return (ChargesDetailsVOImpl) findViewObject("ChargesDetailsVO2");
    }

    /**
     * Container's getter for ShInvoiceToSdInvChargesVL2.
     * @return ShInvoiceToSdInvChargesVL2
     */
    public ViewLinkImpl getShInvoiceToSdInvChargesVL2() {
        return (ViewLinkImpl) findViewLink("ShInvoiceToSdInvChargesVL2");
    }
    
    public void setPageFlowParameters(String elParam, Object value){
        ADFContext adfCtx = ADFContext.getCurrent();
        ELContext elContext = adfCtx.getELContext();
        ValueExpression valueExp =
            adfCtx.getExpressionFactory().createValueExpression(elContext, elParam, Object.class);
        valueExp.setValue(elContext, value);
    }
    
    public String ewFinValidate(){
        Map session = ADFContext.getCurrent().getSessionScope();
        Integer dMpcd = Integer.parseInt(session.get("dealerMapCd").toString());
        String parent = session.get("compCode").toString();
        String loc = session.get("locCd").toString();
        
        String stmt = "begin PKG_EXTE_WAR.SP_EW_FIN_VALIDATE(?,?,?,?,?,?,?,?,?); end;";
        DBTransaction dbtxn = (DBTransaction) getTransaction();
        CallableStatement cs = dbtxn.createCallableStatement(stmt.toString(), 1);
        try{
            cs.setObject(1, parent);
            cs.setObject(2, dMpcd);
            cs.setObject(3, loc);
            cs.registerOutParameter(4, OracleTypes.VARCHAR);
            cs.registerOutParameter(5, OracleTypes.VARCHAR);
            cs.registerOutParameter(6, OracleTypes.VARCHAR);
            cs.registerOutParameter(7, OracleTypes.VARCHAR);
            cs.registerOutParameter(8, OracleTypes.NUMERIC);
            cs.registerOutParameter(9, OracleTypes.VARCHAR);
            cs.execute();
            if(cs.getString(9)!=null){
                return cs.getString(9);
            }else{
                Row salesInvRw = this.getSalesInvoiceVO1().getCurrentRow();
                salesInvRw.setAttribute("FnDlr", cs.getString(4));
                salesInvRw.setAttribute("FnFor", cs.getString(5));
                salesInvRw.setAttribute("FnOut", cs.getString(6));
                salesInvRw.setAttribute("FnFlag", cs.getString(7));
            }
        }catch (Exception e){
            e.printStackTrace();
        }finally {
            try {
                if (cs != null) {
                    cs.close();
                }
            } catch (Exception e) {
            }
        }
        
        return null;
    }
    
    public String setChargeDetailsTcs(Integer dealerMapCd, String parentGroup, String locCd, String compFa, String ordnumb,
                                 Integer principal, String variant, String colour, String areaCd, String CustType,
                                 Date InvDate, String InvType, String BillNature, String pan) {
        System.err.println("SET CHARGE DETAILS TCS&&&&&&&&&&&&&&&&");
        ViewObjectImpl vo = this.getChargesDetailsVO2();
        vo.executeEmptyRowSet();
    //        RowSetIterator chargeRSI = vo.createRowSetIterator(null);
    //        while (chargeRSI.hasNext()) {
    //            Row r = chargeRSI.next();
    //            r.remove();
    //        }
    //        chargeRSI.closeRowSetIterator();
    //        vo.executeQuery();
        //    DBTransaction trx = (DBTransaction) getTransaction();
        CallableStatement cs = null;
        System.out.println("CHARGE DETAILS ESTI<Ated COUNT ------- " + vo.getEstimatedRowCount());
        String stmt = "begin DMS2_SP_GET_INV_CHARG_ORD_TCS (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?);commit; end;";
        DBTransaction txn = (DBTransaction) getTransaction();
        //  CallableStatement cs = dbtxn.createCallableStatement(stmt.toString(), 1);
        cs = txn.createCallableStatement(stmt, 0);
        java.sql.Timestamp datetime = new java.sql.Timestamp(System.currentTimeMillis());
        //   oracle.jbo.domain.Date datetime = new oracle.jbo.domain.Date(datetime);
        String errMsg = null;
        Map session = ADFContext.getCurrent().getSessionScope();
        String user = session.get("userId").toString();
        String batchId = user + datetime + "INV_TCS";
        
        
        
        Map pageFlow = ADFContext.getCurrent().getPageFlowScope();
        String gstState = null;
        ViewObjectImpl invVO = this.getSalesInvoiceVO1();
        Row headRw = invVO.getCurrentRow();
        if(headRw.getAttribute("InvType").toString().equalsIgnoreCase("VSC")){
            gstState = (String)headRw.getAttribute("GstStatecd");
        }else{
            gstState = pageFlow.get("DEALER_GST_CD").toString();
        }
        
        String flag = "INS";
        String ordInv = "FI";
        
        try {
            cs.setObject(1, dealerMapCd); //p_dealer
            cs.setObject(2, parentGroup); //pmc
            cs.setObject(3, locCd); //locd
            cs.setObject(4, compFa); //parntgrp
            cs.setObject(5, ordnumb); // compfa
            cs.setObject(6, principal); //enqnum
            cs.setObject(7, variant); //pareacd
            cs.setObject(8, colour); //psales
            cs.setObject(9, gstState); //lstYN
            cs.setObject(10, CustType); // datetime
            cs.setObject(11, InvDate); //pricelsitfor
            cs.setObject(12, InvType); //price flag
            cs.setObject(13, BillNature); // userId
            cs.setObject(14, ordInv);
            cs.setObject(15, pan);
            cs.setObject(16, null);
            cs.registerOutParameter(17, OracleTypes.NUMBER);
            cs.registerOutParameter(18, OracleTypes.VARCHAR);
            cs.setObject(19, batchId); //p_color
            cs.setObject(20, flag);
            cs.execute();
            // System.out.println("sdfgh"+ cs.execute());
            
            errMsg = cs.getString(18);
            
            ViewObjectImpl voSpValTab = this.getSpInvChargeEOView1();
            System.out.println("voSpValTab  getEstimatedRowCount" + voSpValTab.getEstimatedRowCount());
            if (errMsg == null) {
                //  ViewObjectImpl voSpValTab = this.getSpInvChargeEOView1();
                ViewCriteria vc = voSpValTab.getViewCriteria("SpInvChargeEOViewCriteria");
                voSpValTab.applyViewCriteria(vc);
                voSpValTab.setNamedWhereClauseParam("bind_batchId", batchId);
                voSpValTab.executeQuery();
                System.out.println("estimatedrowcont=========" + voSpValTab.getEstimatedRowCount());
                int count = 1;
                if (voSpValTab.getEstimatedRowCount() > 0) {
                    String itrFlag = headRw.getAttribute("ItrFlag")!=null?headRw.getAttribute("ItrFlag").toString():"Y";
                    String tcsFlag = headRw.getAttribute("TcsFlag")!=null?headRw.getAttribute("TcsFlag").toString():"Y";
                    String kcesState = pageFlow.get("P_KCES_STATE").toString();
                    String custGSTN = (String)headRw.getAttribute("BillGstn");
                    pageFlow.put("#{pageFlowScope.P_COUNT_FOR_GST}", 0);
                    pageFlow.put("#{pageFlowScope.P_COUNT_FOR_KFC}", 0);
                    setPageFlowParameters("#{pageFlowScope.P_COUNT_FOR_GST}",0);
                    setPageFlowParameters("#{pageFlowScope.P_COUNT_FOR_KFC}",0);
                    RowSetIterator rst = voSpValTab.createRowSetIterator(null);
                    while (rst.hasNext()) {
                        Row r = rst.next();
                        System.out.println();
                        if(r.getAttribute("Col2")!=null && r.getAttribute("Col2").toString().equalsIgnoreCase("TRT") &&
                           (itrFlag.equalsIgnoreCase("Y") || tcsFlag.equalsIgnoreCase("N"))){
                                r = rst.next();
                        }else if(kcesState!=null && kcesState.equalsIgnoreCase("Y") && !(custGSTN.equalsIgnoreCase("GSTUNREGISTERED")) 
                        && r.getAttribute("Col2")!=null && r.getAttribute("Col2").toString().equalsIgnoreCase("CE1")){
                            continue;
                        }else if(kcesState!=null && kcesState.equalsIgnoreCase("N") && r.getAttribute("Col2")!=null && r.getAttribute("Col2").toString().equalsIgnoreCase("CE1")){
                            continue;
                        }else{
                            Row row = vo.createRow();
                            System.out.println("***************************************");
                            row.setAttribute("ChargeSrl", count);
                            row.setAttribute("ChargeCd", r.getAttribute("Col1"));
                            row.setAttribute("ChargeType", r.getAttribute("Col2")); //
                            row.setAttribute("ChargeInd", r.getAttribute("Col3"));
                            if (r.getAttribute("Col3") != null && r.getAttribute("Col3")
                                                                   .toString()
                                                                   .equalsIgnoreCase("A")) {
                                row.setAttribute("ChargeIndDesc", "Amount");
                            } else {
                                row.setAttribute("ChargeIndDesc", "Percentage");
                            }
                            
                            if (r.getAttribute("Col4") != null) {
                                row.setAttribute("ChargeValue", new BigDecimal(r.getAttribute("Col4").toString()));
                            } else {
                                row.setAttribute("ChargeValue", BigDecimal.ZERO);
                            }
                            row.setAttribute("CommonInd", r.getAttribute("Col5"));
                            row.setAttribute("ModifyYNT", r.getAttribute("Col5"));
                            row.setAttribute("CheckT", "Y");
                            
                            if (r.getAttribute("Col3") != null && r.getAttribute("Col3")
                                                                   .toString()
                                                                   .equalsIgnoreCase("A")) {
                                if(row.getAttribute("ChargeAmt")==null){
                                    row.setAttribute("ChargeAmt",row.getAttribute("ChargeValue"));
                                }
                            }
                            
                            row.setAttribute("ChargeTypeDesc", r.getAttribute("Col7"));
                            
                            if(row.getAttribute("ChargeType").toString().equalsIgnoreCase("CGS")){
                                pageFlow.put("#{pageFlowScope.p_charge_type}", "CGS");
                                setPageFlowParameters("#{pageFlowScope.p_charge_type}","CGS");
                                System.out.println("CGSSSSSSSSSSS value->" + pageFlow.get("p_charge_type"));
                            }else if(row.getAttribute("ChargeType").toString().equalsIgnoreCase("IGS")){
                                pageFlow.put("#{pageFlowScope.p_charge_type}", "IGS");
                                setPageFlowParameters("#{pageFlowScope.p_charge_type}","IGS");
                                System.out.println("IGSSSSSSSSSSS value->" + pageFlow.get("p_charge_type"));
                            }
                                                        
                            if((row.getAttribute("ChargeType").toString().equalsIgnoreCase("CGS") ||
                               row.getAttribute("ChargeType").toString().equalsIgnoreCase("SGS") ||
                               row.getAttribute("ChargeType").toString().equalsIgnoreCase("SGS")) &&
                               (BillNature.equalsIgnoreCase("V") || BillNature.equalsIgnoreCase("VC"))){
                                   Integer countGST = (Integer)pageFlow.get("P_COUNT_FOR_GST");
                                   countGST = countGST + 1;
                                   pageFlow.put("#{pageFlowScope.P_COUNT_FOR_GST}",countGST);
                                setPageFlowParameters("#{pageFlowScope.P_COUNT_FOR_GST}",countGST);
                            }
                            
                            if(row.getAttribute("ChargeType").toString().equalsIgnoreCase("CE1") &&
                               (BillNature.equalsIgnoreCase("C") || BillNature.equalsIgnoreCase("VC"))){
                                   Integer countKFC = (Integer)pageFlow.get("P_COUNT_FOR_KFC");
                                   countKFC = countKFC + 1;
                                   pageFlow.put("#{pageFlowScope.P_COUNT_FOR_KFC}",countKFC);
                                   setPageFlowParameters("#{pageFlowScope.P_COUNT_FOR_KFC}",countKFC);
                               }
                            vo.insertRow(row);
                            count = count + 1;

                        }
                    }
                    rst.closeRowSetIterator();
                }
                vo.setSortBy("ChargeSrl");
                vo.setQueryMode(ViewObject.QUERY_MODE_SCAN_VIEW_ROWS);
                vo.executeQuery();
    //                calculateChargeAmount();
            }else{
                return errMsg;
            }
        } catch (SQLException sqle) {
            // TODO: Add catch code
            sqle.printStackTrace();
        }finally {
            try {
                if (cs != null) {
                    cs.close();
                }
            } catch (Exception e) {
            }
        }
        return errMsg;
    }
    
    public String setChargeDetailsTcs1H(Integer dealerMapCd, String parentGroup, String locCd, String compFa, String ordnumb,
                                 Integer principal, String variant, String colour, String areaCd, String CustType,
                                 Date InvDate, String InvType, String BillNature, String pan) {
        System.err.println("SET CHARGE DETAILS TCS1H&&&&&&&&&&&&&&&&");
        ViewObjectImpl vo = this.getChargesDetailsVO2();
        vo.executeEmptyRowSet();
            RowSetIterator chargeRSI = vo.createRowSetIterator(null);
            while (chargeRSI.hasNext()) {
                Row r = chargeRSI.next();
                r.remove();
            }
            chargeRSI.closeRowSetIterator();
    //        vo.executeQuery();
        //    DBTransaction trx = (DBTransaction) getTransaction();
        CallableStatement cs = null;
        System.out.println("CHARGE DETAILS ESTI<Ated COUNT ------- " + vo.getEstimatedRowCount());
        String stmt = "begin DMS2_SP_INV_CHARG_ORD_TCS1H (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?);commit; end;";
        DBTransaction txn = (DBTransaction) getTransaction();
        //  CallableStatement cs = dbtxn.createCallableStatement(stmt.toString(), 1);
        cs = txn.createCallableStatement(stmt, 0);
        java.sql.Timestamp datetime = new java.sql.Timestamp(System.currentTimeMillis());
        //   oracle.jbo.domain.Date datetime = new oracle.jbo.domain.Date(datetime);
        String errMsg = null;
        Map session = ADFContext.getCurrent().getSessionScope();
        String user = session.get("userId").toString();
        String batchId = user + datetime + "INV_TCS1H";
        
        
        
        Map pageFlow = ADFContext.getCurrent().getPageFlowScope();
        String gstState = null;
        ViewObjectImpl invVO = this.getSalesInvoiceVO1();
        Row headRw = invVO.getCurrentRow();
        if(headRw.getAttribute("InvType").toString().equalsIgnoreCase("VSC")){
            gstState = (String)headRw.getAttribute("GstStatecd");
        }else{
            gstState = pageFlow.get("DEALER_GST_CD").toString();
        }
        
        String flag = "INS";
        String ordInv = "FI";
        
        try {
            cs.setObject(1, dealerMapCd); //p_dealer
            cs.setObject(2, parentGroup); //pmc
            cs.setObject(3, locCd); //locd
            cs.setObject(4, compFa); //parntgrp
            cs.setObject(5, ordnumb); // compfa
            cs.setObject(6, principal); //enqnum
            cs.setObject(7, variant); //pareacd
            cs.setObject(8, colour); //psales
            cs.setObject(9, gstState); //lstYN
            cs.setObject(10, CustType); // datetime
            cs.setObject(11, InvDate); //pricelsitfor
            cs.setObject(12, InvType); //price flag
            cs.setObject(13, BillNature); // userId
            cs.setObject(14, ordInv);
            cs.setObject(15, pan);
            cs.setObject(16, null);
            cs.registerOutParameter(17, OracleTypes.NUMBER);
            cs.registerOutParameter(18, OracleTypes.VARCHAR);
            cs.setObject(19, batchId); //p_color
            cs.setObject(20, flag);
            cs.execute();
            // System.out.println("sdfgh"+ cs.execute());
            
            errMsg = cs.getString(18);
            
            ViewObjectImpl voSpValTab = this.getSpInvChargeEOView1();
            System.out.println("voSpValTab  getEstimatedRowCount" + voSpValTab.getEstimatedRowCount());
            if (errMsg == null) {
                //  ViewObjectImpl voSpValTab = this.getSpInvChargeEOView1();
                ViewCriteria vc = voSpValTab.getViewCriteria("SpInvChargeEOViewCriteria");
                voSpValTab.applyViewCriteria(vc);
                voSpValTab.setNamedWhereClauseParam("bind_batchId", batchId);
                voSpValTab.executeQuery();
                System.out.println("estimatedrowcont=========" + voSpValTab.getEstimatedRowCount());
                int count = 1;
                if (voSpValTab.getEstimatedRowCount() > 0) {
                    String itrFlag = headRw.getAttribute("ItrFlag")!=null?headRw.getAttribute("ItrFlag").toString():"Y";
                    String tcsFlag = headRw.getAttribute("TcsFlag")!=null?headRw.getAttribute("TcsFlag").toString():"Y";
                    String kcesState = pageFlow.get("P_KCES_STATE").toString();
                    String custGSTN = (String)headRw.getAttribute("BillGstn");
                    pageFlow.put("#{pageFlowScope.P_COUNT_FOR_GST}", 0);
                    pageFlow.put("#{pageFlowScope.P_COUNT_FOR_KFC}", 0);
                    setPageFlowParameters("#{pageFlowScope.P_COUNT_FOR_GST}",0);
                    setPageFlowParameters("#{pageFlowScope.P_COUNT_FOR_KFC}",0);
                    RowSetIterator rst = voSpValTab.createRowSetIterator(null);
                    while (rst.hasNext()) {
                        Row r = rst.next();
                        System.out.println();
                        if(r.getAttribute("Col2")!=null && r.getAttribute("Col2").toString().equalsIgnoreCase("TRT") &&
                           (itrFlag.equalsIgnoreCase("Y") || tcsFlag.equalsIgnoreCase("N"))){
                                r = rst.next();
                        }else if(kcesState!=null && kcesState.equalsIgnoreCase("Y") && !(custGSTN.equalsIgnoreCase("GSTUNREGISTERED")) 
                        && r.getAttribute("Col2")!=null && r.getAttribute("Col2").toString().equalsIgnoreCase("CE1")){
                            continue;
                        }else if(kcesState!=null && kcesState.equalsIgnoreCase("N") && r.getAttribute("Col2")!=null && r.getAttribute("Col2").toString().equalsIgnoreCase("CE1")){
                            continue;
                        }else{
                            Row row = vo.createRow();
                            System.out.println("***************************************");
                            row.setAttribute("ChargeSrl", count);
                            row.setAttribute("ChargeCd", r.getAttribute("Col1"));
                            row.setAttribute("ChargeType", r.getAttribute("Col2")); //
                            row.setAttribute("ChargeInd", r.getAttribute("Col3"));
                            if (r.getAttribute("Col3") != null && r.getAttribute("Col3")
                                                                   .toString()
                                                                   .equalsIgnoreCase("A")) {
                                row.setAttribute("ChargeIndDesc", "Amount");
                            } else {
                                row.setAttribute("ChargeIndDesc", "Percentage");
                            }
                            
                            if (r.getAttribute("Col4") != null) {
                                row.setAttribute("ChargeValue", new BigDecimal(r.getAttribute("Col4").toString()));
                            } else {
                                row.setAttribute("ChargeValue", BigDecimal.ZERO);
                            }
                            row.setAttribute("CommonInd", r.getAttribute("Col5"));
                            row.setAttribute("ModifyYNT", r.getAttribute("Col5"));
                            row.setAttribute("CheckT", "Y");
                            
                            if (r.getAttribute("Col3") != null && r.getAttribute("Col3")
                                                                   .toString()
                                                                   .equalsIgnoreCase("A")) {
                                if(row.getAttribute("ChargeAmt")==null){
                                    row.setAttribute("ChargeAmt",row.getAttribute("ChargeValue"));
                                }
                            }
                            
                            row.setAttribute("ChargeTypeDesc", r.getAttribute("Col7"));
                            
                            if(row.getAttribute("ChargeType").toString().equalsIgnoreCase("CGS")){
                                pageFlow.put("#{pageFlowScope.p_charge_type}", "CGS");
                                setPageFlowParameters("#{pageFlowScope.p_charge_type}","CGS");
                                System.out.println("CGSSSSSSSSSSS value->" + pageFlow.get("p_charge_type"));
                            }else if(row.getAttribute("ChargeType").toString().equalsIgnoreCase("IGS")){
                                pageFlow.put("#{pageFlowScope.p_charge_type}", "IGS");
                                setPageFlowParameters("#{pageFlowScope.p_charge_type}","IGS");
                                System.out.println("IGSSSSSSSSSSS value->" + pageFlow.get("p_charge_type"));
                            }
                                                        
                            if((row.getAttribute("ChargeType").toString().equalsIgnoreCase("CGS") ||
                               row.getAttribute("ChargeType").toString().equalsIgnoreCase("SGS") ||
                               row.getAttribute("ChargeType").toString().equalsIgnoreCase("SGS")) &&
                               (BillNature.equalsIgnoreCase("V") || BillNature.equalsIgnoreCase("VC"))){
                                   Integer countGST = (Integer)pageFlow.get("P_COUNT_FOR_GST");
                                   countGST = countGST + 1;
                                   pageFlow.put("#{pageFlowScope.P_COUNT_FOR_GST}",countGST);
                                setPageFlowParameters("#{pageFlowScope.P_COUNT_FOR_GST}",countGST);
                            }
                            
                            if(row.getAttribute("ChargeType").toString().equalsIgnoreCase("CE1") &&
                               (BillNature.equalsIgnoreCase("C") || BillNature.equalsIgnoreCase("VC"))){
                                   Integer countKFC = (Integer)pageFlow.get("P_COUNT_FOR_KFC");
                                   countKFC = countKFC + 1;
                                   pageFlow.put("#{pageFlowScope.P_COUNT_FOR_KFC}",countKFC);
                                   setPageFlowParameters("#{pageFlowScope.P_COUNT_FOR_KFC}",countKFC);
                               }
                            vo.insertRow(row);
                            count = count + 1;

                        }
                    }
                    rst.closeRowSetIterator();
                }
                vo.setSortBy("ChargeSrl");
                vo.setQueryMode(ViewObject.QUERY_MODE_SCAN_VIEW_ROWS);
                vo.executeQuery();
    //                calculateChargeAmount();
            }else{
                return errMsg;
            }
        } catch (SQLException sqle) {
            // TODO: Add catch code
            sqle.printStackTrace();
        }finally {
            try {
                if (cs != null) {
                    cs.close();
                }
            } catch (Exception e) {
            }
        }
        return errMsg;
    }
	
	
	    /**
     * Container's getter for ShGrnSdGrnCntOneReceiptRO1.
     * @return ShGrnSdGrnCntOneReceiptRO1
     */
    public ViewObjectImpl getShGrnSdGrnCntOneReceiptRO1() {
        return (ViewObjectImpl) findViewObject("ShGrnSdGrnCntOneReceiptRO1");
    }

    /**
     * Container's getter for ShStockMaxRO1.
     * @return ShStockMaxRO1
     */
    public ViewObjectImpl getShStockMaxRO1() {
        return (ViewObjectImpl) findViewObject("ShStockMaxRO1");
    }

    /**
     * Container's getter for ShStockCntReceiptRO1.
     * @return ShStockCntReceiptRO1
     */
    public ViewObjectImpl getShStockCntReceiptRO1() {
        return (ViewObjectImpl) findViewObject("ShStockCntReceiptRO1");
    }

    /**
     * Container's getter for RecptDetailsPopupVO1.
     * @return RecptDetailsPopupVO1
     */
    public ViewObjectImpl getRecptDetailsPopupVO1() {
        return (ViewObjectImpl) findViewObject("RecptDetailsPopupVO1");
    }

    /**
     * Container's getter for ShOrdChargesRO1.
     * @return ShOrdChargesRO1
     */
    public ViewObjectImpl getShOrdChargesRO1() {
        return (ViewObjectImpl) findViewObject("ShOrdChargesRO1");
    }
	
    public String getSchemeDetailsForInv(String type){
        ViewObjectImpl schemeVO = this.getSchemeDetailsPopupVO1();    
        schemeVO.executeEmptyRowSet();
        RowSetIterator schemeRSI = schemeVO.createRowSetIterator(null);
        while (schemeRSI.hasNext()) {
            Row r = schemeRSI.next();
            r.remove();
        }
        schemeRSI.closeRowSetIterator();
        SalesInvoiceVORowImpl salesInvRw = (SalesInvoiceVORowImpl)getSalesInvoiceVO1().getCurrentRow();
        CallableStatement cs = null;
        String stmt = null;
//        String stmt = "begin DMS2_SP_INV_CHARG_ORD_TCS1H (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?);commit; end;";
        DBTransaction txn = (DBTransaction) getTransaction();
        //  CallableStatement cs = dbtxn.createCallableStatement(stmt.toString(), 1);
//        cs = txn.createCallableStatement(stmt, 0);
        java.sql.Timestamp datetime = new java.sql.Timestamp(System.currentTimeMillis());
        String batchId = null;    
        String errMsg = null;
        Map session = ADFContext.getCurrent().getSessionScope();
        Map pageFlow = ADFContext.getCurrent().getPageFlowScope();
        String channel = (String)pageFlow.get("P_DEALER_CHANNEL");
        String user = session.get("userId").toString();
        oracle.jbo.domain.Date invDate = salesInvRw.getInvDate();
        String currentdt = invDate.toString().substring(0, 10);
        System.out.println(currentdt);
        invDate = new oracle.jbo.domain.Date(currentdt);
        if(type.equalsIgnoreCase("NEW")){
            stmt = "begin DMS2_ORD_SCHEME_NEW(?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?); commit; end;";
            cs = txn.createCallableStatement(stmt, 0);
            batchId = user + datetime + "SCH_NEW";
            String flag = "INS";
            try {
                    cs.setObject(1, session.get("dealerMapCd")); //p_dealer
                    cs.setObject(2, session.get("locCd")); //pmc
                    cs.setObject(3, session.get("compCode")); //locd
                    cs.setObject(4, session.get("parentGroupCd")); //parntgrp
                    cs.setObject(5, salesInvRw.getOrderNum()); // compfa
                    cs.setObject(6, invDate); //enqnum
                    cs.setObject(7, salesInvRw.getModelCd()); //pareacd
                    cs.setObject(8, salesInvRw.getVariantCd()); //psales
                    cs.setObject(9, salesInvRw.getCorporateCode()); //lstYN
                    cs.setObject(10, salesInvRw.getVillageTypeTrans()); // datetime
                    cs.setObject(11, salesInvRw.getSalesType()); //pricelsitfor
                    cs.setObject(12, channel); //price flag
                    cs.setObject(13, batchId); // userId
                    cs.setObject(14, flag);
                    cs.registerOutParameter(15, OracleTypes.NUMBER);
                    cs.registerOutParameter(16, OracleTypes.VARCHAR);
                    cs.execute();
                    // System.out.println("sdfgh"+ cs.execute());
                    
                    errMsg = cs.getString(16);
                if(errMsg==null){
                    ViewObjectImpl schemeDataVO = this.getDms2SchInvDetailsVO1();
                    schemeDataVO.applyViewCriteria(schemeDataVO.getViewCriteria("FilterByBatchIDVC"));
                    schemeDataVO.setNamedWhereClauseParam("bindBatchId", batchId);
                    schemeDataVO.executeQuery();
                    RowSetIterator schemeDataRSI = schemeDataVO.createRowSetIterator(null);
                    String lv_scheme_type = null;
                    String lv_sch_vld = "N";
                    while(schemeDataRSI.hasNext()){
                        Row dataRw = schemeDataRSI.next();
                        Row popUpRw = schemeVO.createRow();
                        popUpRw.setAttribute("SchemeCd", dataRw.getAttribute("Col1"));
                        popUpRw.setAttribute("SchemeDesc", dataRw.getAttribute("Col2"));
                        popUpRw.setAttribute("ValidFrom", dataRw.getAttribute("Col3")!=null?new oracle.jbo.domain.Date(dataRw.getAttribute("Col3").toString()):null);
                        popUpRw.setAttribute("ValidTo", dataRw.getAttribute("Col4")!=null?new oracle.jbo.domain.Date(dataRw.getAttribute("Col4").toString()):null);
                        popUpRw.setAttribute("Amount", dataRw.getAttribute("Col5"));
                        popUpRw.setAttribute("SchemeSel", dataRw.getAttribute("Col6"));
                        lv_scheme_type = (String)dataRw.getAttribute("Col7");
                        lv_sch_vld = (String)dataRw.getAttribute("Col8");
                        popUpRw.setAttribute("OrdVariantCd",salesInvRw.getVariantCd());
                        popUpRw.setAttribute("Model",salesInvRw.getModelDesc());
                        popUpRw.setAttribute("SchemeValidity","VALID");
                        
                        ViewObjectImpl gmSchemeRo = this.getGmSchemRO1();
                        gmSchemeRo.applyViewCriteria(gmSchemeRo.getViewCriteria("GmSchemROCriteria"));
                        gmSchemeRo.setNamedWhereClauseParam("binsSchemeCd", popUpRw.getAttribute("SchemeCd"));
                        gmSchemeRo.executeQuery();
                        if(gmSchemeRo.first()!=null){
                            popUpRw.setAttribute("SchemeCostCenter",gmSchemeRo.first().getAttribute("SchemCostCentr"));
                        }

                        String descForPI = returnListDescForPI(lv_scheme_type, "ISL_SCH_TYPE");
                        popUpRw.setAttribute("SchemeType",descForPI);
                        schemeVO.insertRow(popUpRw);
                    }
                    schemeDataRSI.closeRowSetIterator(); 
                }else{
                    return errMsg;
                }
            }catch(Exception e){
                e.printStackTrace();
            }finally {
            try {
                if (cs != null) {
                    cs.close();
                }
            } catch (Exception e) {
            }
            }
        }else{
            stmt = "begin dms2_INV_scheme_new(?,?,?,?,?,?,?,?,?,?,?,?,?,?); commit; end;";
            cs = txn.createCallableStatement(stmt, 0);
            batchId = user + datetime + "SCH_OLD";
            String flag = "INS";
            try {
                    cs.setObject(1, session.get("dealerMapCd")); //p_dealer
                    cs.setObject(2, session.get("locCd")); //pmc
                    cs.setObject(3, session.get("compCode")); //locd
                    cs.setObject(4, session.get("parentGroupCd")); //parntgrp
                    cs.setObject(5, salesInvRw.getInvNum()); // compfa
                    cs.setObject(6, invDate); //enqnum
                    cs.setObject(7, salesInvRw.getModelCd()); //pareacd
                    cs.setObject(8, salesInvRw.getVariantCd()); //psales
                    cs.setObject(9, salesInvRw.getCorporateCode()); //lstYN
                    cs.setObject(10, channel); //price flag
                    cs.setObject(11, batchId); // userId
                    cs.setObject(12, flag);
                    cs.registerOutParameter(13, OracleTypes.NUMBER);
                    cs.registerOutParameter(14, OracleTypes.VARCHAR);
                    cs.execute();
                    // System.out.println("sdfgh"+ cs.execute());
                    
                    errMsg = cs.getString(14);
                    System.out.println(errMsg + "ERROR_____________MSG");
                if(errMsg==null){
                    ViewObjectImpl schemeDataVO = this.getDms2SchInvDetailsVO1();
                    schemeDataVO.applyViewCriteria(schemeDataVO.getViewCriteria("FilterByBatchIDVC"));
                    schemeDataVO.setNamedWhereClauseParam("bindBatchId", batchId);
                    schemeDataVO.executeQuery();
                    System.out.println("Row count------> "+schemeDataVO.getEstimatedRowCount());
                    RowSetIterator schemeDataRSI = schemeDataVO.createRowSetIterator(null);
                    String lv_scheme_type = null;
                    String lv_sch_vld = "N";
                    while(schemeDataRSI.hasNext()){
                        Row dataRw = schemeDataRSI.next();
                        Row popUpRw = schemeVO.createRow();
                        popUpRw.setAttribute("SchemeCd", dataRw.getAttribute("Col1"));
                        popUpRw.setAttribute("SchemeDesc", dataRw.getAttribute("Col2"));
                        popUpRw.setAttribute("ValidFrom", dataRw.getAttribute("Col3")!=null?new oracle.jbo.domain.Date(dataRw.getAttribute("Col3").toString()):null);
                        popUpRw.setAttribute("ValidTo", dataRw.getAttribute("Col4")!=null?new oracle.jbo.domain.Date(dataRw.getAttribute("Col4").toString()):null);
                        popUpRw.setAttribute("Amount", dataRw.getAttribute("Col5"));
                        popUpRw.setAttribute("SchemeSel", dataRw.getAttribute("Col6"));
                        lv_scheme_type = (String)dataRw.getAttribute("Col7");
                        lv_sch_vld = (String)dataRw.getAttribute("Col8");
                        popUpRw.setAttribute("OrdVariantCd",salesInvRw.getVariantCd());
                        popUpRw.setAttribute("Model",salesInvRw.getModelDesc());
                        popUpRw.setAttribute("SchemeValidity","VALID");
                        
                        ViewObjectImpl gmSchemeRo = this.getGmSchemRO1();
                        gmSchemeRo.applyViewCriteria(gmSchemeRo.getViewCriteria("GmSchemROCriteria"));
                        gmSchemeRo.setNamedWhereClauseParam("binsSchemeCd", popUpRw.getAttribute("SchemeCd"));
                        gmSchemeRo.executeQuery();
                        if(gmSchemeRo.first()!=null){
                            popUpRw.setAttribute("SchemeCostCenter",gmSchemeRo.first().getAttribute("SchemCostCentr"));
                        }

                        String descForPI = returnListDescForPI(lv_scheme_type, "ISL_SCH_TYPE");
                        popUpRw.setAttribute("SchemeType",descForPI);
                        schemeVO.insertRow(popUpRw);
                    }
                    schemeDataRSI.closeRowSetIterator(); 
                }else{
                    return errMsg;
                }
            }catch(Exception e){
                e.printStackTrace();
            }finally {
            try {
                if (cs != null) {
                    cs.close();
                }
            } catch (Exception e) {
            }
            }
        }
        
        
        return null;
    }

    /**
     * Container's getter for SchemeDetailsPopupVO1.
     * @return SchemeDetailsPopupVO1
     */
    public ViewObjectImpl getSchemeDetailsPopupVO1() {
        return (ViewObjectImpl) findViewObject("SchemeDetailsPopupVO1");
    }

    /**
     * Container's getter for Dms2SchInvDetailsVO1.
     * @return Dms2SchInvDetailsVO1
     */
    public ViewObjectImpl getDms2SchInvDetailsVO1() {
        return (ViewObjectImpl) findViewObject("Dms2SchInvDetailsVO1");
    }

    /**
     * Container's getter for GmSchemRO1.
     * @return GmSchemRO1
     */
    public ViewObjectImpl getGmSchemRO1() {
        return (ViewObjectImpl) findViewObject("GmSchemRO1");
    }

    /**
     * Container's getter for AmChargeRO2.
     * @return AmChargeRO2
     */
    public ViewObjectImpl getAmChargeRO2() {
        return (ViewObjectImpl) findViewObject("AmChargeRO2");
    }

    /**
     * Container's getter for OldCarDetailsPopUpVO1.
     * @return OldCarDetailsPopUpVO1
     */
    public OldCarDetailsPopUpVOImpl getOldCarDetailsPopUpVO1() {
        return (OldCarDetailsPopUpVOImpl) findViewObject("OldCarDetailsPopUpVO1");
    }
    
    public String callExchDtlFetch(){
        ViewObjectImpl oldCarVO = this.getOldCarDetailsPopUpVO1();    
        oldCarVO.executeEmptyRowSet();
        SalesInvoiceVORowImpl salesInvRw = (SalesInvoiceVORowImpl)getSalesInvoiceVO1().getCurrentRow();
        Row ctrlDualRW = getCtrlDualVO1().getCurrentRow();
        CallableStatement cs = null;
        Map session = ADFContext.getCurrent().getSessionScope();
        String stmt = "begin PKG_ENQ_POC_DETAIL.SP_EXCH_DTL_FETCH(?,?,?,?,?,?,?,?,?,?,?,?); end;";
        DBTransaction txn = (DBTransaction) getTransaction();
        cs = txn.createCallableStatement(stmt, 0);
        System.out.println(" ctrlDualRW.getAttribute(\"LvRegnNum\") -------------------> "+ctrlDualRW.getAttribute("LvRegnNum"));
        if(ctrlDualRW.getAttribute("RegNum")==null){
            ctrlDualRW.setAttribute("RegNum","%");
        }
        if(ctrlDualRW.getAttribute("PocStatus")==null){
            ctrlDualRW.setAttribute("PocStatus","%");
        }
        try{
            cs.setObject(1, session.get("parentGroupCd")); //parentGroupCd
            cs.setObject(2, session.get("dealerMapCd")); //dealerMapCd
            cs.setObject(3, session.get("locCd")); //locCd
            cs.setObject(4, session.get("compCode")); //parntgrp
            cs.setObject(5, salesInvRw.getModelCd());
            cs.setObject(6, ctrlDualRW.getAttribute("RegNum")!=null?ctrlDualRW.getAttribute("RegNum"):"%");
            cs.setObject(7, ctrlDualRW.getAttribute("LvRegnNum"));
            cs.setObject(8, ctrlDualRW.getAttribute("PocStatus")!=null?ctrlDualRW.getAttribute("PocStatus"):"%");
            cs.setObject(9, salesInvRw.getOrderNum());
            cs.registerOutParameter(10, OracleTypes.CURSOR);
            cs.registerOutParameter(11, OracleTypes.NUMERIC);
            cs.registerOutParameter(12, OracleTypes.VARCHAR);
            cs.executeUpdate();
            
            if(cs.getString(12)!=null){
                return cs.getString(12);
            }else{
                ResultSet cursor = cs.getObject(10, ResultSet.class);
                Integer count = 1;
                while (cursor.next()) {
                    System.out.println("Inside loop----->");
                    //Invoice Details
                    Row oldCarRW = oldCarVO.createRow();
                    oldCarRW.setNewRowState(Row.STATUS_INITIALIZED);
                    oldCarRW.setAttribute("PocDealerName", cursor.getString(1));
                    oldCarRW.setAttribute("CustNm", cursor.getString(2));
                    oldCarRW.setAttribute("PocModelCd", cursor.getString(3));
                    oldCarRW.setAttribute("PocRegNum", cursor.getString(4));
                    oldCarRW.setAttribute("PocStatus", cursor.getString(5));
                    oldCarRW.setAttribute("PocBuyDate", cursor.getString(6));
                    oldCarRW.setAttribute("PocBuyId", cursor.getString(7));
                    oldCarRW.setAttribute("SrlNo", 1);//cursor.getString(8)
                    System.out.println("SrlNp%%%%%%%%%%%%%%%%%%%% "+cursor.getString(8));
                    oldCarRW.setAttribute("SrlNum", count);
                    if(oldCarRW.getAttribute("SrlNo")!=null && ((Integer)oldCarRW.getAttribute("SrlNo"))==1){
                        oldCarRW.setAttribute("CheckT","Y");
                    }else{
                        oldCarRW.setAttribute("CheckT","N");
                    }
                    
                    if(salesInvRw.getPocRegNum()!=null && salesInvRw.getPocRegNum().equalsIgnoreCase((String)oldCarRW.getAttribute("PocRegNum"))){
                        oldCarRW.setAttribute("CheckT","Y");
                    }else{
                        oldCarRW.setAttribute("CheckT","N");
                    }
                    count = count + 1;
                    System.err.println("Range index----- "+oldCarVO.getRangeIndexOf(oldCarVO.last()));
                    oldCarVO.insertRowAtRangeIndex((oldCarVO.getRangeIndexOf(oldCarVO.last())+1),oldCarRW);
                }
                cursor.close();
            }
        }catch(Exception e){
                e.printStackTrace();
            }finally {
                try {
                    if (cs != null) {
                        cs.close();
                    }
                } catch (Exception e) {
                }
            }
        
        if(oldCarVO.getEstimatedRowCount()>0){
            oldCarVO.setSortBy("SrlNum");
            oldCarVO.setQueryMode(ViewObject.QUERY_MODE_SCAN_VIEW_ROWS);
            oldCarVO.executeQuery();
        }
        return null;
    }
    
    public String checkRepurStatus(){
        Row ctrlDualRW = getCtrlDualVO1().getCurrentRow();
        CallableStatement cs = null;
        String stmt = "begin sp_check_repur_status(?,?,?); end;";
        DBTransaction txn = (DBTransaction) getTransaction();
        cs = txn.createCallableStatement(stmt, 0);
        try{
            cs.setObject(1, ctrlDualRW.getAttribute("PocBuyId"));
            cs.registerOutParameter(2, OracleTypes.NUMERIC);
            cs.registerOutParameter(3, OracleTypes.VARCHAR);
            cs.execute();
            if(cs.getString(3)!=null){
                return cs.getString(3);
            }
        }catch(Exception e){
            e.printStackTrace();
        }finally {
                try {
                    if (cs != null) {
                        cs.close();
                    }
                } catch (Exception e) {
                }
            }
    return null;
    }

    /**
     * Container's getter for PreferredSRVDealerPopupVO1.
     * @return PreferredSRVDealerPopupVO1
     */
    public ViewObjectImpl getPreferredSRVDealerPopupVO1() {
        return (ViewObjectImpl) findViewObject("PreferredSRVDealerPopupVO1");
    }
    /**
     * Container's getter for HSRPDetailReportTO2.
     * @return HSRPDetailReportTO2
     */
    public ViewObjectImpl getHSRPDetailReportTO2() {
        return (ViewObjectImpl) findViewObject("HSRPDetailReportTO2");
    }


    public String returnNexaEmpCdDesc(){
        CallableStatement cs = null;
        PreferredSRVDealerPopupVORowImpl row = (PreferredSRVDealerPopupVORowImpl)this.getPreferredSRVDealerPopupVO1().getCurrentRow();
        SalesInvoiceVORowImpl invRw = (SalesInvoiceVORowImpl)this.getSalesInvoiceVO1().getCurrentRow();
        String stmt = "begin sp_get_sanexa(?,?,?,?,?,?,?); end;";
        DBTransaction txn = (DBTransaction) getTransaction();
        cs = txn.createCallableStatement(stmt, 0);
        try{
            cs.setObject(1, row.getDealerMapCd());
            cs.setObject(2, row.getLocCd());
            cs.setObject(3, invRw.getVin());
            cs.registerOutParameter(4, OracleTypes.VARCHAR);
            cs.registerOutParameter(5, OracleTypes.VARCHAR);
            cs.registerOutParameter(6, OracleTypes.NUMERIC);
            cs.registerOutParameter(7, OracleTypes.VARCHAR);
            cs.executeUpdate();
            if(cs.getString(7)!=null){
                return cs.getString(7);
            }else{
                row.setSaNexa(cs.getString(5));
                row.setSaNexaCd(cs.getString(4));
            }
        }catch(Exception e){
            e.printStackTrace();
        }finally {
                try {
                    if (cs != null) {
                        cs.close();
                    }
                } catch (Exception e) {
                }
            }
        return null;
    }
    /**
     * Container's getter for HSRPUploadTO1.
     * @return HSRPUploadTO1
     */
    public HSRPUploadTOImpl getHSRPUploadTO1() {
        return (HSRPUploadTOImpl) findViewObject("HSRPUploadTO1");
    }
    

    /**
     * Container's getter for LoyaltyExchPopUpVO1.
     * @return LoyaltyExchPopUpVO1
     */
    public ViewObjectImpl getLoyaltyExchPopUpVO1() {
        return (ViewObjectImpl) findViewObject("LoyaltyExchPopUpVO1");
    }

    /**
     * Container's getter for LoyalExchDataVO1.
     * @return LoyalExchDataVO1
     */
    public ViewObjectImpl getLoyalExchDataVO1() {
        return (ViewObjectImpl) findViewObject("LoyalExchDataVO1");
    }

    /**
     * Container's getter for LoyalExchAmtDataVO1.
     * @return LoyalExchAmtDataVO1
     */
    public ViewObjectImpl getLoyalExchAmtDataVO1() {
        return (ViewObjectImpl) findViewObject("LoyalExchAmtDataVO1");
    }

    /**
     * Container's getter for LoyaltyAcquisitionPopUpAddVO1.
     * @return LoyaltyAcquisitionPopUpAddVO1
     */
    public ViewObjectImpl getLoyaltyAcquisitionPopUpAddVO1() {
        return (ViewObjectImpl) findViewObject("LoyaltyAcquisitionPopUpAddVO1");
    }

    /**
     * Container's getter for MDSSchemePopUpVO1.
     * @return MDSSchemePopUpVO1
     */
    public ViewObjectImpl getMDSSchemePopUpVO1() {
        return (ViewObjectImpl) findViewObject("MDSSchemePopUpVO1");
    }
    
    public String mdsSchemePopulate(){
        SalesInvoiceVORowImpl salesInvRw = (SalesInvoiceVORowImpl)getSalesInvoiceVO1().getCurrentRow();
        CallableStatement cs = null;
        Map session = ADFContext.getCurrent().getSessionScope();
        String stmt = "begin SP_MDS_SCHEM_SELECTION(?,?,?,?,?,?,?,?,?); end;";
        DBTransaction txn = (DBTransaction) getTransaction();
        cs = txn.createCallableStatement(stmt, 0);
        try{
            cs.setObject(1, session.get("dealerMapCd")); //dealerMapCd
            cs.setObject(2, session.get("locCd")); //locCd
            cs.setObject(3, session.get("parentGroupCd"));
            cs.setObject(4, session.get("compCode"));
            cs.setObject(5, salesInvRw.getModelCd());
            cs.setObject(6, salesInvRw.getVariantCd());
            cs.registerOutParameter(7, OracleTypes.CURSOR);
            cs.registerOutParameter(8, OracleTypes.NUMERIC);
            cs.registerOutParameter(9, OracleTypes.VARCHAR);
            cs.executeUpdate();
            if(cs.getString(9)!=null){
                return cs.getString(9);
            }else{
                ResultSet cursor = cs.getObject(7, ResultSet.class);
                while (cursor.next()) {
                    Row mdsRW = getMDSSchemePopUpVO1().createRow();
                    mdsRW.setAttribute("SchemeCd", cursor.getString(1));
                    mdsRW.setAttribute("SchemeDesc", cursor.getString(2));
                    mdsRW.setAttribute("ValidFrom", new oracle.jbo.domain.Date(cursor.getString(3)));
                    mdsRW.setAttribute("ValidTo", new oracle.jbo.domain.Date(cursor.getString(4)));
                    mdsRW.setAttribute("Model", cursor.getString(5));
                    mdsRW.setAttribute("Amount", new BigDecimal(cursor.getString(6)));
                    getMDSSchemePopUpVO1().insertRow(mdsRW);
                }
            }
        }catch(Exception e){
            e.printStackTrace();
        }finally {
                try {
                    if (cs != null) {
                        cs.close();
                    }
                } catch (Exception e) {
                }
            }
        return null;
    }

    /**
     * Container's getter for ChgFlagDataVO1.
     * @return ChgFlagDataVO1
     */
    public ViewObjectImpl getChgFlagDataVO1() {
        return (ViewObjectImpl) findViewObject("ChgFlagDataVO1");
    }

    /**
     * Container's getter for ShOrdBookGmCinRO1.
     * @return ShOrdBookGmCinRO1
     */
    public ViewObjectImpl getShOrdBookGmCinRO1() {
        return (ViewObjectImpl) findViewObject("ShOrdBookGmCinRO1");
    }
    
    public void getCustomerShipDetailsPreInvoice(String ordNum){
        Row r = getShPreInvoiceVO1().getCurrentRow();
        Map session = ADFContext.getCurrent().getSessionScope();
        String loc = session.get("locCd").toString();
        String parent = session.get("parentGroupCd").toString();
        String comp = session.get("compCode").toString();
        Integer pmc = Integer.parseInt(session.get("principalMapCd").toString());
        Integer dealer = Integer.parseInt(session.get("dealerMapCd").toString());

        String query11 =
            "select SHIP_ADDRESS1,SHIP_ADDRESS2,SHIP_ADDRESS3,SHIP_CITY_CD,SHIP_PIN,SHIP_DISTRICT, SHIP_TEHSIL,SHIP_VILLAGE,SHIP_STATE,SHIP_PAN,SHIP_FULL_NAME  FROM sh_ordbook   WHERE parent_group='" +
            parent + "'  AND dealer_map_cd= " + dealer + "    AND loc_cd='" + loc + "'   AND comp_fa='" + comp +
            "'   AND order_num='"+ordNum+"'";
        
        try{
        ResultSet rs11 = getDBTransaction().createStatement(0).executeQuery(query11);
                          while (rs11.next()) {
                               r.setAttribute("ShipAddress1T", rs11.getString("SHIP_ADDRESS1"));
                               r.setAttribute("ShipAddress2T", rs11.getString("SHIP_ADDRESS2"));
                               r.setAttribute("ShipAddress3T", rs11.getString("SHIP_ADDRESS3"));
                               r.setAttribute("ShipPinT", rs11.getString("SHIP_PIN"));
                               r.setAttribute("ShipCityCdT", rs11.getString("SHIP_CITY_CD"));
                               r.setAttribute("ShipDistrictT", rs11.getString("SHIP_DISTRICT"));
                               r.setAttribute("ShipPanT", rs11.getString("SHIP_PAN"));
                              System.out.println(" rs11.getString(\"SHIP_FULL_NAME\") "+rs11.getString("SHIP_FULL_NAME"));
                               r.setAttribute("ShipFullNameT", rs11.getString("SHIP_FULL_NAME"));
                              
                               if (null != rs11.getString("SHIP_STATE")) {
                                  String query12 =
                                       "       SELECT state_desc FROM gm_state WHERE PRINCIPAL_MAP_CD ="+pmc+"  AND state_Cd ='" +
                                       rs11.getString("SHIP_STATE") + "'";

                                   ResultSet rs12 = getDBTransaction().createStatement(0).executeQuery(query12);
                                   if (rs12.next()) {
                                       r.setAttribute("ShipStateNameT", rs12.getString(1));
                                   }
                               }

System.out.println("rs11.getString(\"SHIP_CITY_CD\") "+rs11.getString("SHIP_CITY_CD"));
                               if (null != rs11.getString("SHIP_CITY_CD")) {
                                   String query13 =
                                       " select t.city_desc from gm_city t where t.principal_map_cd="+pmc+" and t.city_cd='" +
                                       rs11.getString("SHIP_CITY_CD") + "'";
System.out.println("query13 "+query13);
                                   ResultSet rs13 = getDBTransaction().createStatement(0).executeQuery(query13);
                                   if (rs13.next()) {
                                       r.setAttribute("ShipCityNameT", rs13.getString(1));
                                   }
                               }
System.out.println(" rs11.getString(\"SHIP_TEHSIL\") "+rs11.getString("SHIP_TEHSIL"));
                               if (null != rs11.getString("SHIP_TEHSIL")) {
                                    String query14 =
                                       "SELECT tehsil_desc FROM gm_tehsil      WHERE PRINCIPAL_MAP_CD = "+pmc+" AND tehsil_cd = '" +
                                       rs11.getString("SHIP_TEHSIL") + "'";
                                   System.out.println("query14 "+query14);
                                    ResultSet rs14 = getDBTransaction().createStatement(0).executeQuery(query14);
                                   if (rs14.next()) {
                                       r.setAttribute("ShipTehsilT", rs14.getString(1));
                                   }else{
                                       r.setAttribute("ShipTehsilT", "NA");
                                   }
                               }
System.out.println("rs11.getString(\"SHIP_VILLAGE\") "+rs11.getString("SHIP_VILLAGE"));
                               if (null != rs11.getString("SHIP_VILLAGE")) {
                                   String query15 =
                                       "       SELECT village_name FROM gm_village WHERE PRINCIPAL_MAP_CD = "+pmc+" AND village_Cd = '" +
                                       rs11.getString("SHIP_VILLAGE") + "'";
                                   System.out.println("query15 "+query15);
                                   ResultSet rs15 = getDBTransaction().createStatement(0).executeQuery(query15);
                                   if (rs15.next()) {
                                       r.setAttribute("ShipVillageT", rs15.getString(1));
                                   }else{
                                       r.setAttribute("ShipVillageT", "NA");
                                   }
                               }
                              
                           }
                   }catch(Exception e){
                e.printStackTrace();
            }
        
    }
    
    public String autoCardSalesInvoiceVCL(){
        DBTransaction dbtxn = (DBTransaction) getTransaction();
        CallableStatement cs = null;
        Row salesInvRw = this.getSalesInvoiceVO1().getCurrentRow();
            Map session = ADFContext.getCurrent().getSessionScope();
            Integer pmc = new Integer(session.get("principalMapCd").toString());
        
        Map pageFlow = ADFContext.getCurrent().getPageFlowScope();
            String stamt = "begin pkg_loyalty.sp_crd_typ_by_mod_var(?,?,?,?,?,?,?); end;";
            try {
                cs = dbtxn.createCallableStatement(stamt, 0);
                cs.setObject(1, salesInvRw.getAttribute("ModelCd"));
                cs.setObject(2, salesInvRw.getAttribute("VariantCd"));
                cs.setObject(3, pmc);
                cs.setObject(4, pageFlow.get("P_DEALER_CHANNEL"));
                cs.registerOutParameter(5, Types.VARCHAR);
                cs.registerOutParameter(6, Types.NUMERIC);
                cs.registerOutParameter(7, Types.VARCHAR);
                cs.execute();
                if (cs.getString(7) != null) {
                    salesInvRw.setAttribute("CardType",null);
                    return cs.getString(7);
                } else {
                    salesInvRw.setAttribute("CardType", cs.getString(7));
                }
            } catch (SQLException sqle) {
                sqle.printStackTrace();
            } finally {
                try {
                    cs.close();
                } catch (SQLException sqle) {
                    // TODO: Add catch code
                    sqle.printStackTrace();
                }
            }
        
        return null;
    }
    
    public String callSpChargeType(){
        SalesInvoiceVORowImpl salesInvRw = (SalesInvoiceVORowImpl)getSalesInvoiceVO1().getCurrentRow();
        ViewObjectImpl gmEclrRO = this.getGmEclrRO1();
        gmEclrRO.applyViewCriteria(gmEclrRO.getViewCriteria("GmEclrROCriteria"));
        gmEclrRO.setNamedWhereClauseParam("bind_colorCd", salesInvRw.getEcolorCd());
        gmEclrRO.executeQuery();
        String colorCODE = null;
        if(gmEclrRO.first()!=null){
            colorCODE = (String)gmEclrRO.first().getAttribute("CtypeCd");
        }
        
        CallableStatement cs = null;
        Map session = ADFContext.getCurrent().getSessionScope();
        String stmt = "begin sp_chk_charge_type(?,?,?,?,?,?,?); end;";
        DBTransaction txn = (DBTransaction) getTransaction();
        cs = txn.createCallableStatement(stmt, 0);
        try{
            cs.setObject(1, session.get("dealerMapCd")); //dealerMapCd
            cs.setObject(2, session.get("locCd")); //locCd
            cs.setObject(3, salesInvRw.getSalesType());
            cs.setObject(4, colorCODE);
            cs.setObject(5, salesInvRw.getVariantCd());
            cs.registerOutParameter(6, OracleTypes.VARCHAR);
            cs.registerOutParameter(7, OracleTypes.NUMERIC);

            cs.execute();
            
            if(cs.getString(6)!=null){
                return cs.getString(6);
            }
        }catch(Exception e){
            e.printStackTrace();
        }finally {
                try {
                    if (cs != null) {
                        cs.close();
                    }
                } catch (Exception e) {
                }
            }
        return null;
    }

    /**
     * Container's getter for VehicleDetailsPopUpVO1.
     * @return VehicleDetailsPopUpVO1
     */
    public ViewObjectImpl getVehicleDetailsPopUpVO1() {
        return (ViewObjectImpl) findViewObject("VehicleDetailsPopUpVO1");
    }
    
        
    public Integer orderLoyaltyRedemptionFetchData(){
        System.out.println("orderLoyaltyRedemptionFetchData ");
        ViewObjectImpl ordVo = getShOrdbookMainVO1();
        String sales_type =  (String) ordVo.getCurrentRow().getAttribute("SalesType");
        String mobile_No = (String) ordVo.getCurrentRow().getAttribute("Mobile");
        String order_num = (String) ordVo.getCurrentRow().getAttribute("OrderNum");
        System.out.println(" sales_type "+sales_type);
        
        if(sales_type != null && sales_type.equalsIgnoreCase("IND")){
            if(order_num == null){
            String lv_card_type = null;
            if(mobile_No != null){
                if(exeFncVerifyMobile(mobile_No).equalsIgnoreCase("0")){
                    return 2;
                }

                String loylCard_Enroll = "SELECT  count(1) FROM gd_loyalty_enrol WHERE reg_mobile='" + mobile_No + "'";
                
                try {
                    ResultSet rs1 = getDBTransaction().createStatement(0).executeQuery(loylCard_Enroll);
                    if (rs1.next()) {
                       int flag1 = rs1.getInt(1);
                       System.out.println("orderLoyaltyRedemptionFetchData  flag1 "+flag1);
                       if(flag1 < 1){
                           return 3;
                       }else if (flag1 == 1){
                            String loylCard_data =
                                "SELECT  card_type,card_num,list_desc FROM gd_loyalty_enrol x, am_List y WHERE reg_mobile='" +
                                mobile_No + "' AND y.list_name='LOYL_TIER_TYPE' AND y.list_code=x.tier AND y.principal_map_cd=1";
                            System.out.println(" loylCard_data "+loylCard_data);
                           ResultSet rs2 = getDBTransaction().createStatement(0).executeQuery(loylCard_data);
                           if (rs2.next()) {
                               String card_type = rs2.getString(1);
                               String card_num = rs2.getString(2);
                               String list_desc = rs2.getString(3);
                               
                               ordVo.getCurrentRow().setAttribute("RefCardType",card_type);
                               ordVo.getCurrentRow().setAttribute("dummyCardNo",card_num);
                               ordVo.getCurrentRow().setAttribute("DummyTier",list_desc);
                               
                               lv_card_type = card_type;
                               
                               Object val = callStoredFunction(Types.VARCHAR, "pkg_loyalty.sf_get_bal_points(?)", new Object[] { (String) ordVo.getCurrentRow().getAttribute("dummyCardNo") });
                               if (val != null) {
                                   BigDecimal BAL_PTS = new BigDecimal(val.toString());
                                   
                                   System.out.println(" BAL_PTS "+BAL_PTS);
                                   ordVo.getCurrentRow().setAttribute("DummyBalancePt",BAL_PTS);
                               }
                               
//                               String stmt = "begin pkg_loyalty.sf_get_bal_points(?); end;";
//                               DBTransaction dbtxn = (DBTransaction) getTransaction();
//                               CallableStatement cs = dbtxn.createCallableStatement(stmt.toString(), 1);
//                               cs.setString(1, card_num);
//                               cs.registerOutParameter(2, Types.NUMERIC);
//                               cs.executeUpdate();
//                               BigDecimal BAL_PTS = cs.getBigDecimal(2);
//                               System.out.println(" BAL_PTS "+BAL_PTS);
//                               ordVo.getCurrentRow().setAttribute("DummyBalancePt",BAL_PTS);
                               
                               
                           }   
                       }
                    }
                } catch (Exception e) {
                    e.printStackTrace();
                }   
            }
            }
        }else{
            return 1;
        }
        
        
        return 0;
    }
    
    public String orderLoyaltyRedemptionRefCardType(){
        System.out.println(" orderLoyaltyRedemptionRefCardType ");
        ViewObjectImpl ordVo = getShOrdbookMainVO1();
        String mobile_No = (String) ordVo.getCurrentRow().getAttribute("Mobile");
        String order_num = (String) ordVo.getCurrentRow().getAttribute("OrderNum");
        
        if( order_num == null && ordVo.getCurrentRow().getAttribute("RefCardType")== null){
            String stmt = "begin pkg_loyalty.sp_card_type(?,?,?,?); end;";
            DBTransaction dbtxn = (DBTransaction) getTransaction();
            try{
            CallableStatement cs = dbtxn.createCallableStatement(stmt.toString(), 1);
            cs.setString(1, mobile_No);
            cs.registerOutParameter(2, Types.VARCHAR);
            cs.registerOutParameter(3, Types.NUMERIC);
            cs.registerOutParameter(4, Types.VARCHAR);
            cs.executeUpdate();
                
                if(cs.getString(4) != null){  
        System.out.println(" orderLoyaltyRedemptionRefCardType cs.getString(4)  "+cs.getString(4) );                       
                    ordVo.getCurrentRow().setAttribute("RefCardType",null);   
                    return cs.getString(4);
                }else{
        System.out.println(" orderLoyaltyRedemptionRefCardType cs.getString(2)  "+cs.getString(2) );   
                    ordVo.getCurrentRow().setAttribute("RefCardType",cs.getString(2)); 
                    
                    String loylCard_data =
                        "SELECT  card_type,card_num,list_desc FROM gd_loyalty_enrol x, am_List y WHERE reg_mobile='" +
                        mobile_No +
                        "' AND y.list_name='LOYL_TIER_TYPE' AND y.list_code=x.tier AND y.principal_map_cd=1 AND card_type='" +
                        cs.getString(2) + "'";
                    System.out.println(" loylCard_data "+loylCard_data);
                    ResultSet rs2 = getDBTransaction().createStatement(0).executeQuery(loylCard_data);
                    if (rs2.next()) {
                        String card_type = rs2.getString(1);
                        String card_num = rs2.getString(2);
                        String list_desc = rs2.getString(3);
                        
                        ordVo.getCurrentRow().setAttribute("RefCardType",card_type);
                        ordVo.getCurrentRow().setAttribute("dummyCardNo",card_num);
                        ordVo.getCurrentRow().setAttribute("DummyTier",list_desc);
                        
                    }
                    
                    if(ordVo.getCurrentRow().getAttribute("DummyBalancePt") == null){
                        
                        Object val = callStoredFunction(Types.VARCHAR, "pkg_loyalty.sf_get_bal_points(?)", new Object[] { (String) ordVo.getCurrentRow().getAttribute("dummyCardNo") });
                        if (val != null) {
                            BigDecimal BAL_PTS = new BigDecimal(val.toString());
                            
                            System.out.println(" BAL_PTS "+BAL_PTS);
                            ordVo.getCurrentRow().setAttribute("DummyBalancePt",BAL_PTS);
                        }
                        
//                        String stmt1 = "begin pkg_loyalty.sf_get_bal_points(?); end;";
//                        DBTransaction dbtxn1 = (DBTransaction) getTransaction();
//                        CallableStatement cs1 = dbtxn1.createCallableStatement(stmt1.toString(), 1);
//                        cs1.setString(1, (String) ordVo.getCurrentRow().getAttribute("dummyCardNo"));
//                        cs1.registerOutParameter(2, Types.NUMERIC);
//                        cs1.executeUpdate();
//                        
//                        BigDecimal BAL_PTS = cs1.getBigDecimal(2);
//                        ordVo.getCurrentRow().setAttribute("DummyBalancePt",BAL_PTS);
                        
                    }
                    
                    
                    
                }
            }catch(Exception e){
                e.printStackTrace();
            }
        }
        
        return null;
    }
    
    public void orderLoyaltyRedemptionFetchDataForSearch(){
        System.out.println("orderLoyaltyRedemptionFetchDataForSearch ");
        ViewObjectImpl ordVo = getShOrdbookMainVO1();
        String mobile_No = (String) ordVo.getCurrentRow().getAttribute("Mobile");
        String order_num = (String) ordVo.getCurrentRow().getAttribute("OrderNum");
        String ref_card_type = (String) ordVo.getCurrentRow().getAttribute("RefCardType");
        System.out.println(mobile_No+" "+order_num+" "+ref_card_type);
        
        if(order_num != null){
            String loylCard_data =
                "SELECT  card_type,card_num,list_desc FROM gd_loyalty_enrol x, am_List y WHERE reg_mobile='" +
                mobile_No +
                "' AND y.list_name='LOYL_TIER_TYPE' AND y.list_code=x.tier AND y.principal_map_cd=1 AND card_type='" +
                ref_card_type + "'";
            System.out.println(" loylCard_data "+loylCard_data);
            
            try{
            ResultSet rs2 = getDBTransaction().createStatement(0).executeQuery(loylCard_data);
            if (rs2.next()) {
                String card_type = rs2.getString(1);
                String card_num = rs2.getString(2);
                String list_desc = rs2.getString(3);
                
                ordVo.getCurrentRow().setAttribute("RefCardType",card_type);
                ordVo.getCurrentRow().setAttribute("dummyCardNo",card_num);
                ordVo.getCurrentRow().setAttribute("DummyTier",list_desc);
                
            }
            
            if(ordVo.getCurrentRow().getAttribute("DummyBalancePt") == null){
                
//                String stmt1 = "begin pkg_loyalty.sf_get_bal_points(?); end;";
//                DBTransaction dbtxn1 = (DBTransaction) getTransaction();
//                CallableStatement cs1 = dbtxn1.createCallableStatement(stmt1.toString(), 1);
//                cs1.setString(1, (String) ordVo.getCurrentRow().getAttribute("dummyCardNo"));
//                cs1.registerOutParameter(2, Types.NUMERIC);
//                cs1.executeUpdate();
                
                Object val = callStoredFunction(Types.VARCHAR, "pkg_loyalty.sf_get_bal_points(?)", new Object[] { (String) ordVo.getCurrentRow().getAttribute("dummyCardNo") });
                if (val != null) {
                    BigDecimal BAL_PTS = new BigDecimal(val.toString());
                    
                    System.out.println(" BAL_PTS "+BAL_PTS);
                    ordVo.getCurrentRow().setAttribute("DummyBalancePt",BAL_PTS);
                }       
            }
            }catch(Exception e){
                e.printStackTrace();
            }
        }   
    }
    
    public String spSendSmsRedeemOtp(String cardNumber, String transType, BigDecimal redeemPts) {
        DBTransaction trx = (DBTransaction) getTransaction();
        CallableStatement st = null;
        String errMsg = null;
        //   System.out.println("inside exeSpSendOTP");
        String stmt = "begin pkg_loyalty.sp_send_sms (?,?,?,?,?,?);  commit; end;";
        try {
            st = trx.createCallableStatement(stmt, 0);
            st.setString(1, transType);
            st.setString(2, cardNumber);
            st.setInt(3, 0);
            st.setBigDecimal(4, redeemPts);
            st.registerOutParameter(5, Types.INTEGER);
            st.registerOutParameter(6, Types.VARCHAR);
            st.executeUpdate();
            errMsg = st.getString(6);
        } catch (SQLException sqle) {
            // TODO: Add catch code
            sqle.printStackTrace();
            return "";
        } finally {
            try {
                if (st != null) {
                    st.close();
                }
            } catch (Exception e) {
            }
        }
//        this.getDBTransaction().postChanges();
        
        return errMsg;
    }
    
    public BigDecimal getBalPntsOfCard(String cardno){
        Object val = callStoredFunction(Types.VARCHAR, "pkg_loyalty.sf_get_bal_points(?)", new Object[] { cardno });
        if (val != null) {
           return  new BigDecimal(val.toString());
        }   
        return BigDecimal.ZERO;      
    }

    public String getLoyConfirmOtp(String mobile, String cardno, String tanstype) {
        String getOtpQry =
            "SELECT otp FROM gd_loy_otp_log WHERE reg_mobile='" + mobile + "' and card_num='" + cardno +
            "' AND sysdate BETWEEN SENT_DATE_TIME AND VALID_UPTO_DATE_TIME AND trans_type='" + tanstype + "'";
        System.out.println(" loylCard_data " + getOtpQry);
        try {
            ResultSet rs = getDBTransaction().createStatement(0).executeQuery(getOtpQry);
            if (rs.next()) {
                return rs.getString(1);
            }else{
                return null;
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
        return null;
    }
    
    /**
         * Container's getter for SiInvhStatusRO1.
         * @return SiInvhStatusRO1
         */
        public ViewObjectImpl getSiInvhStatusRO1() {
            return (ViewObjectImpl) findViewObject("SiInvhStatusRO1");
        }
        
        public String getgrnSiInvhStatus(String finNum, String invNum, String invType,String grnNum) {
            Map session = ADFContext.getCurrent().getSessionScope();
            ViewObjectImpl vo = this.getShGrnVO1();
            String grnStatus = null;
    //        ShGrnVOCriteria
                    ResultSet rs;
                    String q1 = null;
                            q1 = "select tran_recd from sh_grn where grn_num = '"+grnNum+
                                "' and invoice_num = '"+invNum+ "' and fin_cnt_num ='"+finNum+ "' and comp_fa ='"+session.get("compCode")+"' and dealer_map_cd = '"+session.get("dealerMapCd")+"' and parent_group = '"+session.get("parentGroupCd")+"' and loc_cd ='"+session.get("locCd")+"'";  
                     try {  
                            rs = getDBTransaction().createStatement(0).executeQuery(q1);
           
                if (rs.next()) {
                    grnStatus = rs.getString(1).toString();
                }
            } catch (SQLException e) {
                e.printStackTrace();
            }
                    return grnStatus;

        }
    //        ViewCriteria vc = vo.getViewCriteria("ShGrnVOCriteria");
    //            vo.applyViewCriteria(vc);
    //            vo.setNamedWhereClauseParam("bindGrnNum", grnNum);
    //            vo.setNamedWhereClauseParam("bindInvoiceNum", invNum);
    //            vo.setNamedWhereClauseParam("bindFinCntrlNum", finNum);
    //            vo.executeQuery();
    //            Row row = vo.first();
    //        String status = (String)row.getAttribute("TranRecd");


    /**
     * Container's getter for ClaimDocumentLoadingStatusReportTO1.
     * @return ClaimDocumentLoadingStatusReportTO1
     */
    public ViewObjectImpl getClaimDocumentLoadingStatusReportTO1() {
        return (ViewObjectImpl) findViewObject("ClaimDocumentLoadingStatusReportTO1");
    }

    /**
     * Container's getter for HSRPDetailReportTO1.
     * @return HSRPDetailReportTO1
     */
    public ViewObjectImpl getHSRPDetailReportTO1() {
        return (ViewObjectImpl) findViewObject("HSRPDetailReportTO1");
    }

    /**
     * Container's getter for HSRPUploadRO1.
     * @return HSRPUploadRO1
     */
    public ViewObjectImpl getHSRPUploadRO1() {
        return (ViewObjectImpl) findViewObject("HSRPUploadRO1");
    }
    public void filterReport(Date fromDate,Date toDate,String invNum,String vin){
                Map session = ADFContext.getCurrent().getSessionScope();
                Integer principalMapCd = new Integer(session.get("principalMapCd").toString());
                Integer dealerMapCd = new Integer(session.get("dealerMapCd").toString());
                String loc = session.get("locCd").toString();
                String parent = session.get("parentGroupCd").toString();
                ViewObjectImpl vo = this.getHSRPUploadRO1();
                vo.setNamedWhereClauseParam("bindPRINCIPAL", principalMapCd);
                vo.setNamedWhereClauseParam("bindDEALER", dealerMapCd);
                vo.setNamedWhereClauseParam("bindLOC_CD", loc);
                vo.setNamedWhereClauseParam("bindPARENT_GROUP", parent);
                vo.setNamedWhereClauseParam("bindINV_FROM_DT", fromDate);
                vo.setNamedWhereClauseParam("bindINV_TO_DT", toDate);
                vo.setNamedWhereClauseParam("bindINV_NUM", invNum);
                vo.setNamedWhereClauseParam("bindVIN", vin);
                System.out.println("HSRP Upload excel -> in ampl class , print select query is  " + vo.getQuery());
                vo.executeQuery();
            }
    
    
    public String getPreInvoiceDataProcedure(String Principal, String Dealer, String Loca, String Compa,
                                                        String Parent, String OrderNum, String AllotNum, String Variant,
                                                        String FiCd) {
        System.out.println("proc call");
        String stmt = "begin SP_GET_INV_DET(?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?); end;";
        DBTransaction dbtxn = (DBTransaction) getTransaction();
        CallableStatement cs = dbtxn.createCallableStatement(stmt.toString(), 1);
        String flag = "";
        try {
            System.out.println("proc call try");
            cs.setObject(1, Principal);
            cs.setObject(2, Dealer);
            cs.setObject(3, Loca);
            cs.setObject(4, Compa);
            cs.setObject(5, Parent);
            cs.setObject(6, OrderNum);
            cs.setObject(7, AllotNum);
            cs.setObject(8, Variant);
            cs.setObject(9, FiCd);
            cs.registerOutParameter(10, OracleTypes.VARCHAR);
            cs.registerOutParameter(11, OracleTypes.VARCHAR);
            cs.registerOutParameter(12, OracleTypes.VARCHAR);
            cs.registerOutParameter(13, OracleTypes.VARCHAR);
            cs.registerOutParameter(14, OracleTypes.VARCHAR);
            cs.registerOutParameter(15, OracleTypes.VARCHAR);
            cs.registerOutParameter(16, OracleTypes.VARCHAR);
            cs.registerOutParameter(17, OracleTypes.DATE);
            cs.registerOutParameter(18, OracleTypes.VARCHAR);
            cs.registerOutParameter(19, OracleTypes.VARCHAR);
            cs.registerOutParameter(20, OracleTypes.VARCHAR);
            cs.execute();
            flag = cs.getString(18);
            System.out.println("proc call exec");
            ViewObjectImpl vo = this.getShPreInvoiceVO1();
            Row r = vo.getCurrentRow();
    //            r.setAttribute("BillingAddress1", cs.getString(10));
    //            r.setAttribute("BillingAddress2", cs.getString(11));
    //            r.setAttribute("BillingAddress3", cs.getString(12));
    //            r.setAttribute("City", cs.getString(13));
    //            r.setAttribute("CityDesc", cs.getString(14));
    //            r.setAttribute("PinCode", cs.getString(15));
    //            r.setAttribute("ModelCode", cs.getString(16));
            r.setAttribute("AllotDateT", new oracle.jbo.domain.Date(cs.getString(17)));
    //            r.setAttribute("CancelTcsFlag", "N");

            //System.out.println("vCLVal--------------------->" + flag);
            return flag;

        } catch (SQLException sqlerr) {
            throw new JboException(sqlerr);
        } finally {
            try {
                if (cs != null) {
                    cs.close();
                }
            } catch (Exception e) {
            }
        }
    }
    
     public String callVehDetailsSrch(){
        Row ctrlDUalRW = this.getCtrlDualVO1().getCurrentRow();
        CallableStatement cs = null;
        Map session = ADFContext.getCurrent().getSessionScope();
        String stmt = "begin PKG_ENQ_POC_DETAIL.SP_VEH_DETAILS_SEARCH(?,?,?,?,?,?,?,?,?); end;";
        DBTransaction txn = (DBTransaction) getTransaction();
        cs = txn.createCallableStatement(stmt, 0);
        try{
            cs.setObject(1, session.get("principalMapCd"));
            cs.setObject(2, ctrlDUalRW.getAttribute("Vin"));
            cs.setObject(3, ctrlDUalRW.getAttribute("RegNo"));
            cs.setObject(4, ctrlDUalRW.getAttribute("Model"));
            cs.setObject(5, ctrlDUalRW.getAttribute("Chasis"));
            cs.registerOutParameter(6, OracleTypes.CURSOR);
            cs.registerOutParameter(7, OracleTypes.CURSOR);
            cs.registerOutParameter(8, OracleTypes.NUMBER);
            cs.registerOutParameter(9, OracleTypes.VARCHAR);
            cs.executeUpdate();
            
            if(cs.getString(9)!=null){
                return cs.getString(9);
            }else{
                ResultSet cursor = cs.getObject(6, ResultSet.class);
                
                while (cursor.next()) {
                    Row mdsRW = getVehicleDetailsPopUpVO1().createRow();
                    mdsRW.setAttribute("ModelCd", cursor.getString(1));
                    mdsRW.setAttribute("Model", cursor.getString(2));
                    mdsRW.setAttribute("SubModelCd", cursor.getString(3));
                    mdsRW.setAttribute("SubModel", cursor.getString(4));
                    mdsRW.setAttribute("Chassis", cursor.getString(5));
                    mdsRW.setAttribute("Engine", cursor.getString(6));
                    mdsRW.setAttribute("Vin", cursor.getString(7));
                    mdsRW.setAttribute("SrlNum", cursor.getString(8));
                    mdsRW.setAttribute("Yom", cursor.getString(9));
                    mdsRW.setAttribute("MakeCd", cursor.getString(10));
                    mdsRW.setAttribute("Make", cursor.getString(11));
                    mdsRW.setAttribute("RegNo", cursor.getString(12));
                    mdsRW.setAttribute("Color", cursor.getString(13));
                    mdsRW.setAttribute("ColorDesc", cursor.getString(14));
                    mdsRW.setAttribute("FuelTypeCd", cursor.getString(15));
                    mdsRW.setAttribute("FuelType", cursor.getString(16));
                    mdsRW.setAttribute("EwValidUpto", cursor.getString(17));
                    mdsRW.setAttribute("TvWarrantyValidUpto", cursor.getString(18));
                    getVehicleDetailsPopUpVO1().insertRow(mdsRW);
                }
                if(getVehicleDetailsPopUpVO1().getEstimatedRowCount()==0){
                    ResultSet cursor1 = cs.getObject(6, ResultSet.class);
                    
                    while (cursor1.next()) {
                        Row mdsRW = getVehicleDetailsPopUpVO1().createRow();
                        mdsRW.setAttribute("ModelCd", cursor1.getString(1));
                        mdsRW.setAttribute("Model", cursor1.getString(2));
                        mdsRW.setAttribute("SubModelCd", cursor1.getString(3));
                        mdsRW.setAttribute("SubModel", cursor1.getString(4));
                        mdsRW.setAttribute("Chassis", cursor1.getString(5));
                        mdsRW.setAttribute("Engine", cursor1.getString(6));
                        mdsRW.setAttribute("Vin", cursor1.getString(7));
                        mdsRW.setAttribute("SrlNum", cursor1.getString(8));
                        mdsRW.setAttribute("Yom", cursor1.getString(9));
                        mdsRW.setAttribute("MakeCd", cursor1.getString(10));
                        mdsRW.setAttribute("Make", cursor1.getString(11));
                        mdsRW.setAttribute("RegNo", cursor1.getString(12));
                        mdsRW.setAttribute("Color", cursor1.getString(13));
                        mdsRW.setAttribute("ColorDesc", cursor1.getString(14));
                        mdsRW.setAttribute("FuelTypeCd", cursor1.getString(15));
                        mdsRW.setAttribute("FuelType", cursor1.getString(16));
                        mdsRW.setAttribute("EwValidUpto", cursor1.getString(17));
                        mdsRW.setAttribute("TvWarrantyValidUpto", cursor1.getString(18));
                        getVehicleDetailsPopUpVO1().insertRow(mdsRW);
                    }   
                }
            }
            
        }catch(Exception e){
            e.printStackTrace();
        }finally {
                try {
                    if (cs != null) {
                        cs.close();
                    }
                } catch (Exception e) {
                }
            }
    return null;
    }
    
    public Long schemeChkSalesINV(){
        ViewObjectImpl amDealerLocVo = this.getAmDealerLocRO1();
        SalesInvoiceVORowImpl salesInvRw = (SalesInvoiceVORowImpl)getSalesInvoiceVO1().getCurrentRow();
        amDealerLocVo.applyViewCriteria(amDealerLocVo.getViewCriteria("AllGlobalParamsVC"));
        amDealerLocVo.executeQuery();
        String mulDealerCd = null;
        String forCd = null;
        String regionCd = null;
        if(amDealerLocVo.first()!=null){
             regionCd = (String)amDealerLocVo.first().getAttribute("RegionCd");
             mulDealerCd= (String)amDealerLocVo.first().getAttribute("MulDealerCd");
             forCd = (String)amDealerLocVo.first().getAttribute("ForCd");                           
        }
        
        ViewObjectImpl gmgrophpdVO = this.getGmGropdgmGrophDataVO1();
        gmgrophpdVO.setNamedWhereClauseParam("CORPORATE_CODE", salesInvRw.getCorporateCode());
        gmgrophpdVO.executeQuery();
        String gropCode = null;
        if(gmgrophpdVO.first()!=null){
            gropCode = (String)gmgrophpdVO.first().getAttribute("GropCode");
            
        }
        
        ViewObjectImpl schemCnt = this.getSchemeCntVO1();
        
        schemCnt.setNamedWhereClauseParam("CORPORATE_CODE", salesInvRw.getCorporateCode());
        schemCnt.setNamedWhereClauseParam("VARIANT_CD", salesInvRw.getVariantCd());
        schemCnt.setNamedWhereClauseParam("V_GROP_CODE", gropCode);
        schemCnt.setNamedWhereClauseParam("V_FOR_CD", forCd);
        schemCnt.setNamedWhereClauseParam("V_MUL_DEALER_CD", mulDealerCd);
        schemCnt.setNamedWhereClauseParam("bindOrderDate", salesInvRw.getInvDate());
        schemCnt.setNamedWhereClauseParam("V_REGION_CD", regionCd);
        schemCnt.executeQuery();
        
        return schemCnt.getEstimatedRowCount();
    }
    
    public Long schemechkOtherInV(){
        ViewObjectImpl amDealerLocVo = this.getAmDealerLocRO1();
        SalesInvoiceVORowImpl salesInvRw = (SalesInvoiceVORowImpl)getSalesInvoiceVO1().getCurrentRow();
        amDealerLocVo.applyViewCriteria(amDealerLocVo.getViewCriteria("AllGlobalParamsVC"));
        amDealerLocVo.executeQuery();
        String mulDealerCd = null;
        String forCd = null;
        String regionCd = null;
        if(amDealerLocVo.first()!=null){
             regionCd = (String)amDealerLocVo.first().getAttribute("RegionCd");
             mulDealerCd= (String)amDealerLocVo.first().getAttribute("MulDealerCd");
             forCd = (String)amDealerLocVo.first().getAttribute("ForCd");                           
        }
        
        ViewObjectImpl gmgrophpdVO = this.getGmGropdgmGrophDataVO1();
        gmgrophpdVO.setNamedWhereClauseParam("CORPORATE_CODE", salesInvRw.getCorporateCode());
        gmgrophpdVO.executeQuery();
        String gropCode = null;
        if(gmgrophpdVO.first()!=null){
            gropCode = (String)gmgrophpdVO.first().getAttribute("GropCode");
            
        }
        
        ViewObjectImpl shOrd = this.getShOrdbookDataLOV1();
        shOrd.setNamedWhereClauseParam("ORDER_NUM", salesInvRw.getOrderNum());
        shOrd.executeQuery();
        
        String L_VILLAGE_TYPE = null;
        if(shOrd.first()!=null){
            L_VILLAGE_TYPE= (String)shOrd.first().getAttribute("VillageType");
        }
        
        ViewObjectImpl cpNoVO = getCpNumberData1();
        cpNoVO.setNamedWhereClauseParam("bindL_VILLAGE_TYPE", L_VILLAGE_TYPE);
        cpNoVO.executeQuery();
        String cpNo = null;
        if(cpNoVO.first()!=null){
            cpNo = (String)cpNoVO.first().getAttribute("CpNumber");
        }
        
        ViewObjectImpl schemeCntOtherVO = this.getSchemeCntOtherVO1();
        schemeCntOtherVO.setNamedWhereClauseParam("INV_DATE", salesInvRw.getInvDate());
        schemeCntOtherVO.setNamedWhereClauseParam("V_MUL_DEALER_CD", mulDealerCd);
        schemeCntOtherVO.setNamedWhereClauseParam("V_FOR_CD", forCd);
        schemeCntOtherVO.setNamedWhereClauseParam("V_REGION_CD", regionCd);
        schemeCntOtherVO.setNamedWhereClauseParam("bindCORPORATE_CODE", salesInvRw.getCorporateCode());
        schemeCntOtherVO.setNamedWhereClauseParam("bindCRP_CD_RMK", cpNo);
        schemeCntOtherVO.setNamedWhereClauseParam("bindGROP_CODE", gropCode);
        schemeCntOtherVO.setNamedWhereClauseParam("bindVARIANT_CD", salesInvRw.getVariantCd());
        schemeCntOtherVO.executeQuery();
        
        return schemeCntOtherVO.getEstimatedRowCount();
    }

    /**
     * Container's getter for CpNumberData1.
     * @return CpNumberData1
     */
    public ViewObjectImpl getCpNumberData1() {
        return (ViewObjectImpl) findViewObject("CpNumberData1");
    }

    /**
     * Container's getter for SchemeCntOtherVO1.
     * @return SchemeCntOtherVO1
     */
    public ViewObjectImpl getSchemeCntOtherVO1() {
        return (ViewObjectImpl) findViewObject("SchemeCntOtherVO1");
    }

    /**
     * Container's getter for AmListRangeCountVO1.
     * @return AmListRangeCountVO1
     */
    public ViewObjectImpl getAmListRangeCountVO1() {
        return (ViewObjectImpl) findViewObject("AmListRangeCountVO1");
    }

    /**
     * Container's getter for StAllotRO1.
     * @return StAllotRO1
     */
    public ViewObjectImpl getStAllotRO1() {
        return (ViewObjectImpl) findViewObject("StAllotRO1");
    }
    
    public String exeSpLoylSendOTP(String cardNumber, String transType) {
        DBTransaction trx = (DBTransaction) getTransaction();
        CallableStatement st = null;
        String errMsg = null;
        //   System.out.println("inside exeSpSendOTP");
        String stmt = "begin pkg_loyalty.sp_send_sms (?,?,?,?,?,?); end;";
        try {
            st = trx.createCallableStatement(stmt, 0);
            st.setString(1, transType);
            st.setString(2, cardNumber);
            st.setObject(3, null);
            st.setObject(4, null);
            st.registerOutParameter(5, Types.INTEGER);
            st.registerOutParameter(6, Types.VARCHAR);
            st.executeUpdate();
            errMsg = st.getString(6);
        } catch (SQLException sqle) {
            // TODO: Add catch code
            sqle.printStackTrace();
        } finally {
            try {
                if (st != null) {
                    st.close();
                }
            } catch (Exception e) {
            }
        }
        return errMsg;
    }
    
    public String exeupdateNexadtl(){
        SalesInvoiceVORowImpl salesInvrw = (SalesInvoiceVORowImpl)getSalesInvoiceVO1().getCurrentRow();
        PreferredSRVDealerPopupVORowImpl prefRw = (PreferredSRVDealerPopupVORowImpl)getPreferredSRVDealerPopupVO1().getCurrentRow();
        DBTransaction trx = (DBTransaction) getTransaction();
        CallableStatement st = null;
        Map session = ADFContext.getCurrent().getSessionScope();
        String errMsg = null;
        //   System.out.println("inside exeSpSendOTP");
        String stmt = "begin sp_update_nexa_dtl(?,?,?,?,?,?,?,?,?,?,?,?,?); end;";
        try {
            st = trx.createCallableStatement(stmt, 0);
            st.setObject(1, salesInvrw.getVin());
            st.setObject(2, prefRw.getSaNexaCd());
            st.setObject(3, prefRw.getParentGroup());
            st.setObject(4, prefRw.getDealerMapCd());
            st.setObject(5, prefRw.getLocCd());
            st.setObject(6, salesInvrw.getSalesmanCd());
            st.setObject(7, session.get("parentGroupCd"));
            st.setObject(8, session.get("dealerMapCd"));
            st.setObject(9, session.get("locCd"));
            st.setObject(10,"I");
            st.setObject(11, salesInvrw.getCustomerNo());
            st.registerOutParameter(12, Types.INTEGER);
            st.registerOutParameter(13, Types.VARCHAR);
            st.executeUpdate();
            errMsg = st.getString(13);
        } catch (SQLException sqle) {
            // TODO: Add catch code
            sqle.printStackTrace();
        } finally {
            try {
                if (st != null) {
                    st.close();
                }
            } catch (Exception e) {
            }
        }
        return errMsg;
        
    }
    
    public String exeInsertCustCredit(){
        SalesInvoiceVORowImpl salesInvrw = (SalesInvoiceVORowImpl)getSalesInvoiceVO1().getCurrentRow();
        DBTransaction trx = (DBTransaction) getTransaction();
        CallableStatement st = null;
        Map session = ADFContext.getCurrent().getSessionScope();
        String errMsg = null;
        //   System.out.println("inside exeSpSendOTP");
        String stmt = "begin SP_INSERT_CUST_CREDIT(?,?,?,?,?,?,?,?); end;";
        try {
            st = trx.createCallableStatement(stmt, 0);
            st.setObject(1, session.get("dealerMapCd"));
            st.setObject(2, session.get("locCd"));
            st.setObject(3, session.get("parentGroupCd"));
            st.setObject(4, salesInvrw.getCustomerNo());
            st.setObject(5, "CU");
            st.setObject(6, session.get("userName"));
            st.registerOutParameter(7, Types.VARCHAR);
            st.registerOutParameter(8, Types.INTEGER);
            st.executeUpdate();
            errMsg = st.getString(7);
        } catch (SQLException sqle) {
            // TODO: Add catch code
            sqle.printStackTrace();
        } finally {
            try {
                if (st != null) {
                    st.close();
                }
            } catch (Exception e) {
            }
        }
        return errMsg;
        
    }
    
    public void exeInvMissing(String errMsg){
        SalesInvoiceVORowImpl salesInvrw = (SalesInvoiceVORowImpl)getSalesInvoiceVO1().getCurrentRow();
        DBTransaction trx = (DBTransaction) getTransaction();
        CallableStatement st = null;
        String stmt = "begin SP_CHECK_INV_MISSING(?,?); end;";
        try {
            st = trx.createCallableStatement(stmt, 0);
            st.setObject(1, salesInvrw.getVin());
            st.setObject(2, errMsg);
            st.executeUpdate();
        } catch (SQLException sqle) {
            // TODO: Add catch code
            sqle.printStackTrace();
        } finally {
            try {
                if (st != null) {
                    st.close();
                }
            } catch (Exception e) {
            }
        }
        
    }
    
    public String exeInsertInvRips(){
        SalesInvoiceVORowImpl salesInvrw = (SalesInvoiceVORowImpl)getSalesInvoiceVO1().getCurrentRow();
        DBTransaction trx = (DBTransaction) getTransaction();
        CallableStatement st = null;
        Map session = ADFContext.getCurrent().getSessionScope();
        String errMsg = null;
        //   System.out.println("inside exeSpSendOTP");
        String stmt = "begin SP_INSERT_INV_RIPS(?,?,?,?,?,?,?,?); end;";
        try {
            st = trx.createCallableStatement(stmt, 0);
            st.setObject(1, session.get("dealerMapCd"));
            st.setObject(2, session.get("parentGroupCd"));
            st.setObject(3, session.get("locCd"));
            st.setObject(4, session.get("compCode"));
            st.setObject(5, salesInvrw.getInvNum());
            st.setObject(6, salesInvrw.getInvType());
            st.registerOutParameter(7, Types.VARCHAR);
            st.registerOutParameter(8, Types.INTEGER);
            st.executeUpdate();
            errMsg = st.getString(7);
        } catch (SQLException sqle) {
            // TODO: Add catch code
            sqle.printStackTrace();
        } finally {
            try {
                if (st != null) {
                    st.close();
                }
            } catch (Exception e) {
            }
        }
        return errMsg;
        
    }
    
    public String exeUpdVehTargets(){
        SalesInvoiceVORowImpl salesInvrw = (SalesInvoiceVORowImpl)getSalesInvoiceVO1().getCurrentRow();
        DBTransaction trx = (DBTransaction) getTransaction();
        CallableStatement st = null;
        Map session = ADFContext.getCurrent().getSessionScope();
        String errMsg = null;
        //   System.out.println("inside exeSpSendOTP");
        String stmt = "begin SP_UPD_VEH_TARGETS(?,?,?,?,?,?,?,?,?,?); end;";
        try {
            st = trx.createCallableStatement(stmt, 0);
            st.setObject(1, session.get("parentGroupCd"));
            st.setObject(2, session.get("compCode"));
            st.setObject(3, session.get("dealerMapCd"));
            st.setObject(4, session.get("locCd"));
            st.setObject(5, salesInvrw.getInvDate());
            st.setObject(6, salesInvrw.getSalesmanCd());
            st.setObject(7, "I");
            st.setObject(8, session.get("userName"));
            st.registerOutParameter(9, Types.VARCHAR);
            st.registerOutParameter(10, Types.INTEGER);
            st.executeUpdate();
            errMsg = st.getString(9);
        } catch (SQLException sqle) {
            // TODO: Add catch code
            sqle.printStackTrace();
        } finally {
            try {
                if (st != null) {
                    st.close();
                }
            } catch (Exception e) {
            }
        }
        return errMsg;
        
    }
    
    
    public void calculate_preInvoice(){
        Row row = getShPreInvoiceVO1().getCurrentRow();
              BigDecimal sellingPrice =
                  row.getAttribute("SellPrice") ==
                  null ? new BigDecimal(0) : (BigDecimal) row.getAttribute("SellPrice");
              BigDecimal accessoryPrice =
                  row.getAttribute("AccessoryPrice") ==
                  null ? new BigDecimal(0) : (BigDecimal) row.getAttribute("AccessoryPrice");
              BigDecimal ndpPrice =
                  row.getAttribute("NdpT") ==
                  null ? new BigDecimal(0) : (BigDecimal) row.getAttribute("NdpT");
              
        String retVal = formParamPreInvoiceChargers();
        String LV_PARAM = null;
                if(retVal == null){
                  LV_PARAM =  "SP;" + sellingPrice + ";A;ACP;" + accessoryPrice + ";A;NDP;" + ndpPrice + ";A;";
                }else{
                  LV_PARAM =  "SP;" + sellingPrice + ";A;ACP;" + accessoryPrice + ";A;NDP;" + ndpPrice + ";A;" + retVal;
                
                }
                
        System.out.println("calculateAmountOrderCharges LV_PARAM "+LV_PARAM);
                String LV_TYPE = null;
        if(row.getAttribute("TaxCalStatus") != null && row.getAttribute("TaxCalStatus").toString().equalsIgnoreCase("B")){
            LV_TYPE = "NVSI";
        }else{
            LV_TYPE = "NVSIA";
        }
                
                String LV_EV_EXPR = null;
                Map session = ADFContext.getCurrent().getSessionScope();
                
                LOGGER.info("inside Evaluate_Expr_PSS");
                String stmt = "begin Evaluate_Expr_PSS(?,?,?,?,?,?); end;";
                DBTransaction dbtxn = (DBTransaction) getTransaction();
                CallableStatement cs = dbtxn.createCallableStatement(stmt.toString(), 1);
                try {
                    cs.setObject(1, LV_TYPE);
                    cs.setObject(2, LV_PARAM);
                    cs.setObject(3, Integer.parseInt(session.get("dealerMapCd").toString()));
                    cs.setObject(4, session.get("locCd").toString());
                    cs.registerOutParameter(5, Types.VARCHAR);
                    cs.registerOutParameter(6, Types.VARCHAR);
                    cs.execute();
                    
                     LV_EV_EXPR = cs.getString(5);
                    String LV_EV_VALUE = cs.getString(6);
                    System.out.println(" LV_EV_EXPR "+LV_EV_EXPR);
                    System.out.println(" LV_EV_VALUE "+LV_EV_VALUE);
    //                    if (LV_EV_VALUE != null) {
    //                        BigDecimal RecAmt =
    //                            row.getAttribute("RecdAmt") == null ? new BigDecimal(0) : (BigDecimal) row.getAttribute("RecdAmt");
    //                        row.setAttribute("DummyBalanceAmt", (new BigDecimal(LV_EV_VALUE)).subtract(RecAmt));
    //                    }
                    
                    updateDatabasePreInvoice(LV_EV_EXPR);
                    
                    LOGGER.info("end of the PkgCallForNominatedUpcomingTrainingExcel");
                


                } catch (SQLException sqlerr) {
                    throw new JboException(sqlerr);
                } finally {
                    try {
                        if (cs != null) {
                            cs.close();
                }
                    } catch (Exception e) {
                    }
                }
        
    }
    
    
    public String formParamPreInvoiceChargers() {
        System.out.println(" formParamOrderChargers ");
        Row curRow = getOrderBookingChargesRO1().getCurrentRow();
        
        ViewObjectImpl vo = getSdPreInvChargesVO1();
        RowSetIterator rw = vo.createRowSetIterator(null);
        BigDecimal lv_charge_value = new BigDecimal(0), LV_DIVISOR = new BigDecimal(1), lv_divide = new BigDecimal(1);
            String LV_PARAM = null, lv_charge_type = null,lv_charge_ind =null;
    //
    //        if (chargeSel != null && chargeSel.equalsIgnoreCase("Y")) {
    //                   lv_charge_type = (String) curRow.getAttribute("ChargeType");
    //
    //                   if (lv_charge_ind != null && lv_charge_ind.equalsIgnoreCase("P")) {
    //                       LV_DIVISOR = new BigDecimal(100);
    //                       if (curRow.getAttribute("ChargeValue") != null) {
    //                           lv_charge_value = (BigDecimal) curRow.getAttribute("ChargeValue");
    //                       }
    //                   } else {
    //                       lv_charge_value = (BigDecimal) curRow.getAttribute("ChargeAmt");
    //                       LV_DIVISOR = new BigDecimal(1);
    //                   }
    //
    //                   try {
    //                       lv_divide = lv_charge_value.divide(LV_DIVISOR);
    //                   } catch (Exception e) {
    //                       return "1";
    //                   }
    //
    //        //            LV_PARAM = LV_PARAM + lv_charge_type + ";" + lv_divide + ";" + lv_charge_ind + ";";
    //                   LV_PARAM =  lv_charge_type + ";" + lv_divide + ";" + lv_charge_ind + ";";
    //                   System.out.println(" formParamOrderChargers "+LV_PARAM);
    //
    //               }
            
        while(rw.hasNext()){
            Row row = rw.next();
            String chargeSel = (String) row.getAttribute("CheckBoxT");
            System.out.println(" row chargeSel "+chargeSel);
            lv_charge_type = (String) row.getAttribute("ChargeType");
            lv_charge_ind = (String) row.getAttribute("ChargeInd");
            if (chargeSel != null && (chargeSel.equalsIgnoreCase("Y") || chargeSel.equalsIgnoreCase("true"))) {
                lv_charge_type = (String) row.getAttribute("ChargeType");

            if (lv_charge_ind != null && lv_charge_ind.equalsIgnoreCase("P")) {
                LV_DIVISOR = new BigDecimal(100);
                if (row.getAttribute("ChargeValue") != null) {
                    lv_charge_value = (BigDecimal) row.getAttribute("ChargeValue");
                }
            } else {
                lv_charge_value = (BigDecimal) row.getAttribute("ChargeAmt");
                LV_DIVISOR = new BigDecimal(1);
            }

            try {
                lv_divide = lv_charge_value.divide(LV_DIVISOR);
            } catch (Exception e) {
                return "1";
            }

    //            LV_PARAM = LV_PARAM + lv_charge_type + ";" + lv_divide + ";" + lv_charge_ind + ";";
                if (LV_PARAM == null) {
                    LV_PARAM = lv_charge_type + ";" + lv_divide + ";" + lv_charge_ind + ";";
                } else {
                    LV_PARAM = LV_PARAM.concat(lv_charge_type + ";" + lv_divide + ";" + lv_charge_ind + ";");
                }
            System.out.println(" formParamOrderChargers "+LV_PARAM);

        } else {
                curRow.setAttribute("ChargeAmt", new BigDecimal(0));
        }

        }
        rw.closeRowSetIterator();
        
       

        return LV_PARAM;
    }

    public BigDecimal updateDatabasePreInvoice(String LV_EV_EXPR) {
        System.out.println(" update_database " + LV_EV_EXPR);
        String lv_param = LV_EV_EXPR;
        String lv_token = null;
        BigDecimal lv_value = null;

        while (lv_param != null) {

            String qry1 = "Select substr('" + lv_param + "', 1, instr('" + lv_param + "', ';', 1, 1) - 1) x from dual";

            try {
                ResultSet rs1 = this.getDBTransaction()
                                    .createStatement(0)
                                    .executeQuery(qry1);
                while (rs1.next()) {
                    lv_token = rs1.getString(1);
                }
                rs1.close();

                String qry2 = "Select substr('" + lv_param + "', instr('" + lv_param + "', ';', 1, 1) + 1) x from dual";
                ResultSet rs2 = this.getDBTransaction()
                                    .createStatement(0)
                                    .executeQuery(qry2);
                while (rs2.next()) {
                    lv_param = rs2.getString(1);
                }
                rs2.close();

                String qry3 =
                    "Select to_number(substr('" + lv_param + "', 1, instr('" + lv_param +
                    "', ';', 1, 1) - 1)) x from dual";

                ResultSet rs3 = this.getDBTransaction()
                                    .createStatement(0)
                                    .executeQuery(qry3);
                while (rs3.next()) {
                    lv_value = rs3.getBigDecimal(1);
                }
                rs3.close();
                
                String qry4 = "Select substr('" + lv_param + "', instr('" + lv_param + "', ';', 1, 1) + 1) x from dual";
                ResultSet rs4 = this.getDBTransaction()
                                    .createStatement(0)
                                    .executeQuery(qry4);
                while (rs4.next()) {
                    lv_param = rs4.getString(1);
                }
                rs4.close();


                ViewObjectImpl vo = getSdPreInvChargesVO1();
                Row r = vo.getCurrentRow();
                //                RowSetIterator rw = vo.createRowSetIterator(null);
                //                while (rw.hasNext()) {
                //                    Row r = rw.next();
                System.out.println(r.getAttribute("ChargeType") + " char type - value " +
                                   r.getAttribute("ChargeValue") + " ChargeInd " + r.getAttribute("ChargeInd"));
                if (r.getAttribute("ChargeValue") != null &&
                    ((BigDecimal) r.getAttribute("ChargeValue")).compareTo(new BigDecimal(0)) > 0) {
                    System.out.println("Inside ----------------");
                    if (r.getAttribute("ChargeType") != null && r.getAttribute("ChargeType")
                                                                 .toString()
                                                                 .equalsIgnoreCase(lv_token)) {
                        if (lv_token.equalsIgnoreCase("ESD") || lv_token.equalsIgnoreCase("DEP")) {
                            //                                :CB_ORD.NB_DEP_AMT := lv_value;


                        }
                        if (lv_token.equalsIgnoreCase("DIS")) {
                            //                                :CB_ORD.NB_DIS_AMT := lv_value;
                        }
                        if (r.getAttribute("ChargeInd")
                             .toString()
                             .equalsIgnoreCase("P")) {
                            System.out.println(" Inside P " + lv_value);
                            r.setAttribute("ChargeAmt", lv_value);
                            return lv_value;
                        }
                    }
                }
            } catch (Exception e) {
                e.printStackTrace();
            }
        }
            return BigDecimal.ZERO;
    }
    
    
    
    
    public String updateOutstandingAmtSI(String supCd, BigDecimal invAmt) {
           int errCd =0;
                       Map session = ADFContext.getCurrent().getSessionScope();
                       Timestamp timestamp = new Timestamp(System.currentTimeMillis());
               String errMsg = null;
               CallableStatement st = null;
               try {
                   String stmt = "begin Sp_Update_Outstanding_Amt(?,?,?,?,?,?,?,?,?,?,?,?); end;";
                   DBTransaction dbtxn = (DBTransaction) getTransaction();
                   st = dbtxn.createCallableStatement(stmt.toString(), 1);
                   st.setObject(1, session.get("parentGroupCd"));
                               st.setObject(2, session.get("dealerMapCd"));
                               st.setObject(3, session.get("locCd"));
                               st.setString(4, (String)session.get("compCode"));
                               st.setObject(5, "CU");
                               st.setObject(6, null);
                               st.setObject(7, null);
                               st.setObject(8, supCd);
                               st.setObject(9, invAmt);
                               st.setObject(10, timestamp);
                   st.registerOutParameter(11, Types.INTEGER);
                   st.registerOutParameter(12, Types.VARCHAR);
                   st.executeUpdate();
                   errCd=st.getInt(11);
                   errMsg = st.getString(12);
               } catch (SQLException sqle) {
                   // TODO: Add catch code
                   sqle.printStackTrace();
               } finally {
                   try {
                       if (st != null) {
                           st.close();
                       }
                   } catch (Exception e) {
                   }
               }
               return errMsg;
           }

    /**
     * Container's getter for AmListDelNoteDataVO1.
     * @return AmListDelNoteDataVO1
     */
    public ViewObjectImpl getAmListDelNoteDataVO1() {
        return (ViewObjectImpl) findViewObject("AmListDelNoteDataVO1");
    }
    
    public String exeinsertPsfSmrDel(){
        SalesInvoiceVORowImpl salesInvrw = (SalesInvoiceVORowImpl)getSalesInvoiceVO1().getCurrentRow();
        Map session = ADFContext.getCurrent().getSessionScope();
        Timestamp timestamp = new Timestamp(System.currentTimeMillis());
        String errMsg = null;
        CallableStatement st = null;
        
        try {
        String stmt = "begin sp_insert_psf_smr_del(?,?,?,?,?,?,?,?,?,?,?,?,?,?,?); end;";
        DBTransaction dbtxn = (DBTransaction) getTransaction();
        st = dbtxn.createCallableStatement(stmt.toString(), 1);
                st.setObject(1, session.get("principalMapCd"));
                st.setObject(2, session.get("dealerMapCd"));
                st.setObject(3, session.get("parentGroupCd"));
                st.setObject(4, session.get("locCd"));
                st.setString(5, (String)session.get("compCode"));
                st.setObject(6, salesInvrw.getVin());
                st.setObject(7, salesInvrw.getVariantCd());
                st.setObject(8, null);
                st.setObject(9, salesInvrw.getCustomerNo());
                st.setObject(10, salesInvrw.getInvNum());
                st.setObject(11, salesInvrw.getInvDate());
                st.setObject(12, timestamp);
            st.setObject(13, session.get("userName"));
        st.registerOutParameter(14, Types.VARCHAR);
        st.registerOutParameter(15, Types.INTEGER);
        st.executeUpdate();
        errMsg = st.getString(14);
        } catch (SQLException sqle) {
        // TODO: Add catch code
        sqle.printStackTrace();
        } finally {
        try {
        if (st != null) {
            st.close();
        }
        } catch (Exception e) {
        }
        }
        return errMsg;
    }
    
    public void fdiCallforSI(){
    SalesInvoiceVORowImpl salesInvrw = (SalesInvoiceVORowImpl)getSalesInvoiceVO1().getCurrentRow();
    Map session = ADFContext.getCurrent().getSessionScope();
    Integer dealerMapCd = Integer.parseInt(session.get("dealerMapCd").toString());
    String locCd = String.valueOf(session.get("locCd"));
    String compCode = String.valueOf(session.get("compCode"));
    String parentGrp = String.valueOf(session.get("parentGroupCd"));
    String userName = String.valueOf(session.get("userName"));
        Object result =
            callStoredFunction(Types.VARCHAR, "PKG_FDI.SF_VALID_DEALER(?,?,?)",
                               new Object[] { parentGrp, dealerMapCd, locCd });
        String res = result != null ? result.toString() : "";
        if (res.equalsIgnoreCase("Y")) {
        DBTransaction dbtxn = (DBTransaction) getTransaction();
            String st = "begin PKG_FDI.SP_INS_INV_FDI(?,?,?,?,?,?,?); end;";
            CallableStatement cstmt = dbtxn.createCallableStatement(st, 1);
            try {
                cstmt.setString(1, parentGrp);
                cstmt.setInt(2, dealerMapCd);
                cstmt.setString(3, locCd);
                cstmt.setString(4, compCode);
                cstmt.setString(5, salesInvrw.getInvNum());
                cstmt.registerOutParameter(6, OracleTypes.NUMBER);
                cstmt.registerOutParameter(7, OracleTypes.VARCHAR);
                cstmt.execute();
            } catch (SQLException sqlerr) {
                sqlerr.printStackTrace();
                throw new JboException(sqlerr);
            } finally {
                try {
                    if (cstmt != null) {
                        cstmt.close();
                    }
                } catch (Exception e) {
                }
            }
        }
    }
    
    public String exeEXCHINVENQUPD(String buyId){
        SalesInvoiceVORowImpl salesInvrw = (SalesInvoiceVORowImpl)getSalesInvoiceVO1().getCurrentRow();
        Map session = ADFContext.getCurrent().getSessionScope();
        Timestamp timestamp = new Timestamp(System.currentTimeMillis());
        String errMsg = null;
        CallableStatement st = null;
        
        try {
        String stmt = "begin PKG_ENQ_POC_DETAIL.SP_EXCH_INV_ENQ_UPD(?,?,?,?,?,?,?,?,?); end;";
        DBTransaction dbtxn = (DBTransaction) getTransaction();
        st = dbtxn.createCallableStatement(stmt.toString(), 1);
                st.setObject(1, session.get("parentGroupCd"));
                st.setObject(2, session.get("dealerMapCd"));
                st.setObject(3, session.get("locCd"));
                st.setObject(4, session.get("compCode"));
                st.setString(5, salesInvrw.getOrderNum());
                st.setObject(6, salesInvrw.getInvNum());
                st.setObject(7, buyId);
        st.registerOutParameter(8, Types.NUMERIC);
        st.registerOutParameter(9, Types.VARCHAR);
        st.executeUpdate();
        errMsg = st.getString(14);
        } catch (SQLException sqle) {
        // TODO: Add catch code
        sqle.printStackTrace();
        } finally {
        try {
        if (st != null) {
            st.close();
        }
        } catch (Exception e) {
        }
        }
        return errMsg;
    }
    
    public String insertB2CFlag(){
    SalesInvoiceVORowImpl salesInvrw = (SalesInvoiceVORowImpl)getSalesInvoiceVO1().getCurrentRow();
    Map session = ADFContext.getCurrent().getSessionScope();
    Integer dealerMapCd = Integer.parseInt(session.get("dealerMapCd").toString());
    String locCd = String.valueOf(session.get("locCd"));
    String compCode = String.valueOf(session.get("compCode"));
    String parentGrp = String.valueOf(session.get("parentGroupCd"));
    String userName = String.valueOf(session.get("userName"));
         DBTransaction dbtxn = (DBTransaction) getTransaction();
            String st = "begin PKG_EINV.SP_INSERT_B2C(?,?,?,?,?,?,?,?,?); end;";
            CallableStatement cstmt = dbtxn.createCallableStatement(st, 1);
            try {
                cstmt.setString(1, "SL");
                cstmt.setString(2, "NCS");
                cstmt.setString(3, parentGrp);
                cstmt.setObject(4, dealerMapCd);
                cstmt.setString(5, locCd);
                cstmt.setString(6, salesInvrw.getInvNum());
                cstmt.setString(7, userName);
                cstmt.registerOutParameter(8, OracleTypes.NUMBER);
                cstmt.registerOutParameter(9, OracleTypes.VARCHAR);
                cstmt.execute();
                if(cstmt.getString(9)!=null){
                    return cstmt.getString(9);
                }
            } catch (SQLException sqlerr) {
                sqlerr.printStackTrace();
                throw new JboException(sqlerr);
            } finally {
                try {
                    if (cstmt != null) {
                        cstmt.close();
                    }
                } catch (Exception e) {
                }
            }
        return null;
    }
    
    public String gETeINVsTATUS(String LV_GST_NUM){
    SalesInvoiceVORowImpl salesInvrw = (SalesInvoiceVORowImpl)getSalesInvoiceVO1().getCurrentRow();
    Map session = ADFContext.getCurrent().getSessionScope();
    Integer dealerMapCd = Integer.parseInt(session.get("dealerMapCd").toString());
    Integer pmc = Integer.parseInt(session.get("principalMapCd").toString());
    String locCd = String.valueOf(session.get("locCd"));
    String parentGrp = String.valueOf(session.get("parentGroupCd"));
         DBTransaction dbtxn = (DBTransaction) getTransaction();
            String st = "begin PKG_EINV.SP_GET_EINV_STATUS(?,?,?,?,?,?,?,?,?); end;";
            CallableStatement cstmt = dbtxn.createCallableStatement(st, 1);
            try {
                cstmt.setObject(1, pmc);
                cstmt.setString(2, parentGrp);
                cstmt.setObject(3, dealerMapCd);
                cstmt.setObject(4, locCd);
                cstmt.setString(5, salesInvrw.getInvNum());
                cstmt.setString(6, "NCS");
                cstmt.setString(7, LV_GST_NUM);
                cstmt.registerOutParameter(8, OracleTypes.NUMBER);
                cstmt.registerOutParameter(9, OracleTypes.VARCHAR);
                cstmt.execute();
                if(cstmt.getString(9)!=null){
                    return cstmt.getString(9);
                }
            } catch (SQLException sqlerr) {
                sqlerr.printStackTrace();
                throw new JboException(sqlerr);
            } finally {
                try {
                    if (cstmt != null) {
                        cstmt.close();
                    }
                } catch (Exception e) {
                }
            }
        return null;
    }
    
    public void tallYintegrationSI(){
        Map session = ADFContext.getCurrent().getSessionScope();
        
        if (null != session.get("tallyIntegration") &&
            ((String) session.get("tallyIntegration")).equalsIgnoreCase("Y")) {
            SalesInvoiceVORowImpl salesInvrw = (SalesInvoiceVORowImpl)getSalesInvoiceVO1().getCurrentRow();
            Integer pmc = Integer.parseInt(session.get("principalMapCd").toString());
            Integer dealerMapCd = Integer.parseInt(session.get("dealerMapCd").toString());
            String locCd = String.valueOf(session.get("locCd"));
            String compCode = String.valueOf(session.get("compCode"));
            String parentGrp = String.valueOf(session.get("parentGroupCd"));
            String userName = String.valueOf(session.get("userName"));
            DBTransaction dbtxn = (DBTransaction) getTransaction();
            String stmt ="DECLARE \n" + "status BOOLEAN;  \n" + "result VARCHAR2(13); \n" + "\n" + "BEGIN \n" +
                "status := NULL; \n" + "PK_FINC_TRNS_INTERFACE.SALS_INVC(?,?,?,?,?,?,?,?,?,?,status,?); \n" +
                "BEGIN \n" + "IF status THEN result := 'Yes'; \n" + "ELSIF NOT status THEN result := 'No'; \n" +
                "ELSE result := 'NULL'; \n" + "END IF;\n" + "END; \n" + "? := result;\n" + "COMMIT;\n" + "END ;";
            CallableStatement st = dbtxn.createCallableStatement(stmt, 1);
            try {
//                st = trx.createCallableStatement(stmt, 0);
                st.setObject(1, pmc);
                st.setObject(2, parentGrp);
                st.setObject(3, dealerMapCd);
                st.setObject(4, locCd);
                st.setObject(5, compCode);
                st.setObject(6, "Dms Sales");
                st.setObject(7, salesInvrw.getInvNum());
                st.setObject(8, userName);
                st.setObject(9, salesInvrw.getInvDate());
                st.setObject(10, "O");
                st.registerOutParameter(11, Types.VARCHAR);
                st.registerOutParameter(12, Types.VARCHAR);
                st.executeUpdate();            
            } catch (SQLException e) {
            }

        }
    }
    
    
    
    public String callGETINVDET(){
    SalesInvoiceVORowImpl salesInvrw = (SalesInvoiceVORowImpl)getSalesInvoiceVO1().getCurrentRow();
    Map session = ADFContext.getCurrent().getSessionScope();
    Integer dealerMapCd = Integer.parseInt(session.get("dealerMapCd").toString());
    Integer pmc = Integer.parseInt(session.get("principalMapCd").toString());
    String locCd = String.valueOf(session.get("locCd"));
        String compFa = String.valueOf(session.get("compCode"));
    String parentGrp = String.valueOf(session.get("parentGroupCd"));
         DBTransaction dbtxn = (DBTransaction) getTransaction();
            String st = "begin SP_GET_INV_DET(?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?); end;";
            CallableStatement cstmt = dbtxn.createCallableStatement(st, 1);
            try {
                cstmt.setObject(1, pmc);
                cstmt.setObject(2, dealerMapCd);
                cstmt.setObject(3, locCd);
                cstmt.setObject(4, compFa);
                cstmt.setString(5, parentGrp);
                cstmt.setString(6, salesInvrw.getOrderNum());
                cstmt.setString(7, salesInvrw.getAllotNum());
                cstmt.setObject(8, salesInvrw.getVariantCd());
                cstmt.setObject(9, salesInvrw.getFiCd());
                cstmt.registerOutParameter(10, OracleTypes.VARCHAR);
                cstmt.registerOutParameter(11, OracleTypes.VARCHAR);
                cstmt.registerOutParameter(12, OracleTypes.VARCHAR);
                cstmt.registerOutParameter(13, OracleTypes.VARCHAR);
                cstmt.registerOutParameter(14, OracleTypes.VARCHAR);
                cstmt.registerOutParameter(15, OracleTypes.VARCHAR);
                cstmt.registerOutParameter(16, OracleTypes.VARCHAR);
                cstmt.registerOutParameter(17, OracleTypes.DATE);
                cstmt.registerOutParameter(18, OracleTypes.VARCHAR);
                cstmt.registerOutParameter(19, OracleTypes.VARCHAR);
                cstmt.registerOutParameter(20, OracleTypes.NUMBER);
                cstmt.execute();
                
                if(cstmt.getString(19)!=null){
                    return cstmt.getString(19);
                }else{
                    salesInvrw.setEnqRAddress1(cstmt.getString(10));
                    salesInvrw.setEnqRAddress2(cstmt.getString(11));
                    salesInvrw.setEnqRAddress3(cstmt.getString(12));
                    salesInvrw.setEnqRCityCd(cstmt.getString(13));
                    salesInvrw.setEnqRPinCd(cstmt.getString(15));
                    salesInvrw.setModelCd(cstmt.getString(16));
                    salesInvrw.setAllotDate(new oracle.jbo.domain.Date(cstmt.getObject(17)));
                    salesInvrw.setFiCdDesc(cstmt.getString(18));
                }
            } catch (SQLException sqlerr) {
                sqlerr.printStackTrace();
                throw new JboException(sqlerr);
            } finally {
                try {
                    if (cstmt != null) {
                        cstmt.close();
                    }
                } catch (Exception e) {
                }
            }
        return null;
    }

    public void filterHSRPExcelReport(oracle.jbo.domain.Date fromDate, oracle.jbo.domain.Date toDate){
                Map session = ADFContext.getCurrent().getSessionScope();
                Integer principalMapCd = new Integer(session.get("principalMapCd").toString());
                String dealerMapCd = session.get("dealerMapCd").toString();
                String loc = session.get("locCd").toString();
                String parent = session.get("parentGroupCd").toString();
				System.out.println("pmc"+principalMapCd+"dealer"+dealerMapCd+"loc"+loc+"parent"+parent+"from date"+fromDate+"to date"+toDate);
                ViewObjectImpl vo = this.getHSRPDetailReportExcelRO1();
                vo.setNamedWhereClauseParam("bindPRINCIPAL", principalMapCd);
                vo.setNamedWhereClauseParam("bindDEALER", dealerMapCd);
                vo.setNamedWhereClauseParam("bindLOC_CD", loc);
                vo.setNamedWhereClauseParam("bindPARENT_GROUP", parent);
                vo.setNamedWhereClauseParam("bindFROM_DATE", fromDate);
                vo.setNamedWhereClauseParam("bindTO_DATE", toDate);
                System.out.println("HSRP Detail Report excel -> in ampl class , print select query is " + vo.getQuery());
                vo.executeQuery();
            }
               


            
    /**
     * Container's getter for ShipDataForSearchVO1.
     * @return ShipDataForSearchVO1
     */
    public ViewObjectImpl getShipDataForSearchVO1() {
        return (ViewObjectImpl) findViewObject("ShipDataForSearchVO1");
    }
    

    public String getChargeDesc(String chargeType) {
        Map session = ADFContext.getCurrent().getSessionScope();
        String locCd = session.get("locCd").toString();
        Integer dealerMp = new Integer(session.get("dealerMapCd").toString());
        String stmt = "begin sp_get_chargetype_desc(?,?,?,?,?,?); end;";
        DBTransaction dbtxn = (DBTransaction) getTransaction();
        CallableStatement cs = dbtxn.createCallableStatement(stmt.toString(), 1);
        try {
            cs.setObject(1, dealerMp);
            cs.setObject(2, locCd);
            cs.setObject(3, chargeType);
            cs.registerOutParameter(4, OracleTypes.VARCHAR);
            cs.registerOutParameter(5, OracleTypes.VARCHAR);
            cs.registerOutParameter(6, OracleTypes.NUMERIC);
            cs.execute();
            Integer errCd = cs.getInt(6);
            if (errCd < 1) {
                return cs.getString(4);
            }
        } catch (SQLException sqlerr) {
            throw new JboException(sqlerr);
        } finally {
            try {
                if (cs != null) {
                    cs.close();
                }
            } catch (Exception e) {
            }
        }
        return null;
    }
    
    
    public String callCalcPremGst() {
        SalesInvoiceVORowImpl salesInvrw = (SalesInvoiceVORowImpl)getSalesInvoiceVO1().getCurrentRow();
        Map session = ADFContext.getCurrent().getSessionScope();
        String locCd = session.get("locCd").toString();
        Integer dealerMp = new Integer(session.get("dealerMapCd").toString());
        Integer pmc = new Integer(session.get("principalMapCd").toString());
        String stmt = "begin pkg_exte_war.ew_calc_prem_gst(?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?); end;";
        DBTransaction dbtxn = (DBTransaction) getTransaction();
        CallableStatement cs = dbtxn.createCallableStatement(stmt.toString(), 1);
        oracle.jbo.domain.Date sysdate = new oracle.jbo.domain.Date(Date.getCurrentDate());
        try {
            cs.setObject(1, pmc);
            cs.setObject(2, dealerMp);
            cs.setObject(3, locCd);
            cs.setObject(4, sysdate);
            cs.setObject(5, sysdate);
            cs.setObject(6, salesInvrw.getVin());
            cs.setObject(7, salesInvrw.getEwYrTrans());
            cs.registerOutParameter(8, OracleTypes.VARCHAR);
            cs.registerOutParameter(9, OracleTypes.NUMERIC);
            cs.registerOutParameter(10, OracleTypes.NUMERIC);
            cs.registerOutParameter(11, OracleTypes.NUMERIC);
            cs.registerOutParameter(12, OracleTypes.NUMERIC);
            cs.registerOutParameter(13, OracleTypes.NUMERIC);
            cs.registerOutParameter(14, OracleTypes.NUMERIC);
            cs.registerOutParameter(15, OracleTypes.NUMERIC);
            cs.registerOutParameter(16, OracleTypes.NUMERIC);
            cs.registerOutParameter(17, OracleTypes.NUMERIC);
            cs.registerOutParameter(18, OracleTypes.NUMERIC);
            cs.registerOutParameter(19, OracleTypes.NUMERIC);
            cs.registerOutParameter(20, OracleTypes.NUMERIC);
            cs.registerOutParameter(21, OracleTypes.NUMERIC);
            cs.registerOutParameter(22, OracleTypes.NUMERIC);
            cs.registerOutParameter(23, OracleTypes.NUMERIC);
            cs.registerOutParameter(24, OracleTypes.VARCHAR);
            cs.execute();
            
            if (cs.getString(24)!=null) {
                return cs.getString(24);
            }else{
                salesInvrw.setGstType(cs.getString(8));
                salesInvrw.setPremAmt(cs.getBigDecimal(9));
                salesInvrw.setPremCgstRate(cs.getBigDecimal(10));
                salesInvrw.setPremSgstRate(cs.getBigDecimal(11));
                salesInvrw.setPremIgstRate(cs.getBigDecimal(12));
                salesInvrw.setPremCgstAmt(cs.getBigDecimal(13));
                salesInvrw.setPremSgstAmt(cs.getBigDecimal(14));
                salesInvrw.setPremIgstAmt(cs.getBigDecimal(15));
                salesInvrw.setCommAmt(cs.getBigDecimal(16));
                salesInvrw.setCommCgstRate(cs.getBigDecimal(17));
                salesInvrw.setCommSgstRate(cs.getBigDecimal(18));
                salesInvrw.setCommIgstRate(cs.getBigDecimal(19));
                salesInvrw.setCommCgstAmt(cs.getBigDecimal(20));
                salesInvrw.setCommSgstAmt(cs.getBigDecimal(21));
                salesInvrw.setCommIgstAmt(cs.getBigDecimal(22));
            }
        } catch (SQLException sqlerr) {
            throw new JboException(sqlerr);
        } finally {
            try {
                if (cs != null) {
                    cs.close();
                }
            } catch (Exception e) {
            }
        }
        return null;
    }
    
    
    public String callEwSaleInvoice(Integer check) {
        SalesInvoiceVORowImpl salesInvrw = (SalesInvoiceVORowImpl)getSalesInvoiceVO1().getCurrentRow();
        Map session = ADFContext.getCurrent().getSessionScope();
        String locCd = session.get("locCd").toString();
        String compFa = session.get("compCode").toString();
        String parentG = session.get("parentGroupCd").toString();
        String userId = session.get("userId").toString();
        Integer dealerMp = new Integer(session.get("dealerMapCd").toString());
        Integer pmc = new Integer(session.get("principalMapCd").toString());
        String stmt = "begin pkg_exte_war.SP_EW_SALE_INVOICE(?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?); end;";
        DBTransaction dbtxn = (DBTransaction) getTransaction();
        CallableStatement cs = dbtxn.createCallableStatement(stmt.toString(), 1);
        oracle.jbo.domain.Date sysdate = new oracle.jbo.domain.Date(Date.getCurrentDate());
        if(check ==1){
        try {
            cs.setObject(1, pmc);
            cs.setObject(2, salesInvrw.getModelCd());
            cs.setObject(3, salesInvrw.getChassisNum());
            cs.setObject(4, salesInvrw.getEngineNum());
            cs.setObject(5, salesInvrw.getEwYrTrans());
            cs.setObject(6, BigDecimal.ZERO);
            cs.setObject(7, salesInvrw.getPartyNameTrans());
            cs.setObject(8, salesInvrw.getEnqRAddress1());
            cs.setObject(9, salesInvrw.getEnqRAddress2());
            cs.setObject(10, salesInvrw.getEnqRAddress3());
            cs.setObject(11, salesInvrw.getEnqRCityCd());
            cs.setObject(12, salesInvrw.getFnFlag());
            cs.setObject(13, salesInvrw.getVin());
            cs.setObject(14, salesInvrw.getVariantCd());
            cs.setObject(15, parentG);
            cs.setObject(16, dealerMp);
            cs.setObject(17, locCd);
            cs.setObject(18, compFa);
            cs.setObject(19, salesInvrw.getCustomerNo());
            cs.setObject(20, userId);
            cs.setObject(21, salesInvrw.getFnDlr());
            cs.setObject(22, salesInvrw.getFnFor());
            cs.setObject(23, salesInvrw.getFnOut());
            cs.setObject(24, BigDecimal.ZERO);
            cs.setObject(25, salesInvrw.getGstType());
            cs.setObject(26, BigDecimal.ZERO);
            cs.setObject(27, BigDecimal.ZERO);
            cs.setObject(28, BigDecimal.ZERO);
            cs.setObject(29, BigDecimal.ZERO);
            cs.setObject(30, BigDecimal.ZERO);
            cs.setObject(31, BigDecimal.ZERO);
            cs.setObject(32, BigDecimal.ZERO);
            cs.setObject(33, BigDecimal.ZERO);
            cs.setObject(34, BigDecimal.ZERO);
            cs.setObject(35, BigDecimal.ZERO);
            cs.setObject(36, BigDecimal.ZERO);
            cs.setObject(37, BigDecimal.ZERO);
            cs.registerOutParameter(38, OracleTypes.VARCHAR);
            cs.registerOutParameter(39, OracleTypes.NUMERIC);
            cs.registerOutParameter(40, OracleTypes.VARCHAR);
            cs.execute();
            
            if (cs.getString(40)!=null) {
                return cs.getString(40);
            }else{
                salesInvrw.setPolicyNum(cs.getString(38));            }
        } catch (SQLException sqlerr) {
            throw new JboException(sqlerr);
        } finally {
            try {
                if (cs != null) {
                    cs.close();
                }
            } catch (Exception e) {
            }
        }
        }else{
            try {
                cs.setObject(1, pmc);
                cs.setObject(2, salesInvrw.getModelCd());
                cs.setObject(3, salesInvrw.getChassisNum());
                cs.setObject(4, salesInvrw.getEngineNum());
                cs.setObject(5, salesInvrw.getEwYrTrans());
                cs.setObject(6, salesInvrw.getPremAmt());
                cs.setObject(7, salesInvrw.getPartyNameTrans());
                cs.setObject(8, salesInvrw.getEnqRAddress1());
                cs.setObject(9, salesInvrw.getEnqRAddress2());
                cs.setObject(10, salesInvrw.getEnqRAddress3());
                cs.setObject(11, salesInvrw.getEnqRCityCd());
                cs.setObject(12, salesInvrw.getFnFlag());
                cs.setObject(13, salesInvrw.getVin());
                cs.setObject(14, salesInvrw.getVariantCd());
                cs.setObject(15, parentG);
                cs.setObject(16, dealerMp);
                cs.setObject(17, locCd);
                cs.setObject(18, compFa);
                cs.setObject(19, salesInvrw.getCustomerNo());
                cs.setObject(20, userId);
                cs.setObject(21, salesInvrw.getFnDlr());
                cs.setObject(22, salesInvrw.getFnFor());
                cs.setObject(23, salesInvrw.getFnOut());
                cs.setObject(24, salesInvrw.getCommAmt());
                cs.setObject(25, salesInvrw.getGstType());
                cs.setObject(26, salesInvrw.getPremCgstRate());
                cs.setObject(27, salesInvrw.getPremSgstRate());
                cs.setObject(28, salesInvrw.getPremIgstRate());
                cs.setObject(29, salesInvrw.getPremCgstAmt());
                cs.setObject(30, salesInvrw.getPremSgstAmt());
                cs.setObject(31, salesInvrw.getPremIgstAmt());
                cs.setObject(32, salesInvrw.getCommCgstRate());
                cs.setObject(33, salesInvrw.getCommSgstRate());
                cs.setObject(34, salesInvrw.getCommIgstRate());
                cs.setObject(35, salesInvrw.getCommCgstAmt());
                cs.setObject(36, salesInvrw.getCommSgstAmt());
                cs.setObject(37, salesInvrw.getCommIgstAmt());
                cs.registerOutParameter(38, OracleTypes.VARCHAR);
                cs.registerOutParameter(39, OracleTypes.NUMERIC);
                cs.registerOutParameter(40, OracleTypes.VARCHAR);
                cs.execute();
                
                if (cs.getString(40)!=null) {
                    return cs.getString(40);
                }else{
                    salesInvrw.setPolicyNum(cs.getString(38));            }
            } catch (SQLException sqlerr) {
                throw new JboException(sqlerr);
            } finally {
                try {
                    if (cs != null) {
                        cs.close();
                    }
                } catch (Exception e) {
                }
            }
        }
        return null;
    }

    /**
     * Container's getter for UploadCodeMaster1.
     * @return UploadCodeMaster1
     */
    public ViewObjectImpl getUploadCodeMaster1() {
        return (ViewObjectImpl) findViewObject("UploadCodeMaster1");
    }

    /**
     * Container's getter for CorporateMasterUploadDataVO1.
     * @return CorporateMasterUploadDataVO1
     */
    public ViewObjectImpl getCorporateMasterUploadDataVO1() {
        return (ViewObjectImpl) findViewObject("CorporateMasterUploadDataVO1");
    }
    /**

     * Container's getter for HSRPDetailReportExcelRO1.
     * @return HSRPDetailReportExcelRO1
     */
    public ViewObjectImpl getHSRPDetailReportExcelRO1() {
        return (ViewObjectImpl) findViewObject("HSRPDetailReportExcelRO1");
}
    /**
     * Container's getter for HSRPDetailReportStaffTO1.
     * @return HSRPDetailReportStaffTO1
     */
    public ViewObjectImpl getHSRPDetailReportStaffTO1() {
        return (ViewObjectImpl) findViewObject("HSRPDetailReportStaffTO1");

    }

    /**
     * Container's getter for StateCusLOV1.
     * @return StateCusLOV1
     */
    public ViewObjectImpl getStateCusLOV1() {
        return (ViewObjectImpl) findViewObject("StateCusLOV1");
    }

    /**
     * Container's getter for StateCusLOV2.
     * @return StateCusLOV2
     */
    public ViewObjectImpl getStateCusLOV2() {
        return (ViewObjectImpl) findViewObject("StateCusLOV2");
    }

    /**
     * Container's getter for HSRPDetailReportStaffRO1.
     * @return HSRPDetailReportStaffRO1
     */
    public ViewObjectImpl getHSRPDetailReportStaffRO1() {
        return (ViewObjectImpl) findViewObject("HSRPDetailReportStaffRO1");
    }
    public void filterHSRPReportStaff(Date fromDate,Date toDate){
                    Map session = ADFContext.getCurrent().getSessionScope();
                    Integer principalMapCd = new Integer(session.get("principalMapCd").toString());
                    ViewObjectImpl vo = this.getHSRPDetailReportStaffRO1();
                    vo.setNamedWhereClauseParam("bindPRINCIPAL", principalMapCd);
                    vo.setNamedWhereClauseParam("bindFROM_DATE", fromDate);
                    vo.setNamedWhereClauseParam("bindTO_DATE", toDate);
                    System.out.println("HSRP Detail Report Staff excel -> in ampl class , print select query is  " + vo.getQuery());
                    vo.executeQuery();
                }

    /**
     * Container's getter for ClaimDocumentLoadingStatusReportExcelRO1.
     * @return ClaimDocumentLoadingStatusReportExcelRO1
     */
    public ViewObjectImpl getClaimDocumentLoadingStatusReportExcelRO1() {
        return (ViewObjectImpl) findViewObject("ClaimDocumentLoadingStatusReportExcelRO1");
    }  
    public void filterCDLSReport(String compFA, Date invFromDateT,Date toDateT,String claimIdT,String vinT){
                    Map session = ADFContext.getCurrent().getSessionScope();
                    Integer principalMapCd = new Integer(session.get("principalMapCd").toString());
                    Integer dealerMapCd = new Integer(session.get("dealerMapCd").toString());
                    String loc = session.get("locCd").toString();
                    String parent = session.get("parentGroupCd").toString();
                    ViewObjectImpl vo = this.getClaimDocumentLoadingStatusReportExcelRO1();
                    vo.setNamedWhereClauseParam("bindP_dealer_MAP_CD", dealerMapCd);
                    vo.setNamedWhereClauseParam("bindP_loc_cd", loc);
                    vo.setNamedWhereClauseParam("bindP_parent_group", parent);
                                    
                                    
                                    
                                    vo.setNamedWhereClauseParam("bindP_COMP_FA", compFA);
                    vo.setNamedWhereClauseParam("bindP_FROMDT", invFromDateT);
                    vo.setNamedWhereClauseParam("bindP_TODT", toDateT);
                    vo.setNamedWhereClauseParam("P_CLAIM_ID", claimIdT);
                    vo.setNamedWhereClauseParam("P_INV_VIN", vinT);
                    System.out.println("HSRP Upload excel -> in ampl class , print select query is  " + vo.getQuery());
                    vo.executeQuery();
                }


    /**
     * Container's getter for ClaimDocumentLoadingStatusReportExcelElseRO1.
     * @return ClaimDocumentLoadingStatusReportExcelElseRO1
     */
    public ViewObjectImpl getClaimDocumentLoadingStatusReportExcelElseRO1() {
        return (ViewObjectImpl) findViewObject("ClaimDocumentLoadingStatusReportExcelElseRO1");
    }

    /**
     * Container's getter for ClaimDocumentLoadingStatusReportNVLCheckRO1.
     * @return ClaimDocumentLoadingStatusReportNVLCheckRO1
     */
    public ClaimDocumentLoadingStatusReportNVLCheckROImpl getClaimDocumentLoadingStatusReportNVLCheckRO1() {
        return (ClaimDocumentLoadingStatusReportNVLCheckROImpl) findViewObject("ClaimDocumentLoadingStatusReportNVLCheckRO1");
    }
    
    public String grnpopStatus(String status) {
                ViewObjectImpl gmvinvo = this.getGMVinNumRO1();
                ViewObjectImpl vo1 = this.getSdGrnVO2();
                Row row = vo1.getCurrentRow();
                String statusTemp = (String) row.getAttribute("StatusTemp");
                String sdstatus = (String) row.getAttribute("Damage");
                if("Y".equals(status)) {
                    System.out.println(row.getAttribute("Vin")+"--vin in popup yes--");
                gmvinvo.setNamedWhereClauseParam("bind_vin", row.getAttribute("Vin"));
                                    gmvinvo.executeQuery();
                                    Row vinrow = gmvinvo.first();
                                    if(vinrow != null) {
                                    String invNum = (String) vinrow.getAttribute("InvNum");
                                    String allotNum = (String) vinrow.getAttribute("AllotedNum");
                                    if(invNum != null) {
                                        sdstatus = statusTemp ;
                                        row.setAttribute("Damage", statusTemp);
                                        return "Invoice" +invNum+ "and Allotment" +allotNum+ "should be cancelled";
                                    } else if(allotNum != null) {
                                        return "Allotment" +allotNum+ "should be cancelled";
                                    }
                } 
                }                 else {
                    sdstatus = statusTemp ;
                    row.setAttribute("Damage", statusTemp);
                }
                                    return "";
            }
        
        public String getsdGrnStatus(String grnNum) {
            Map session = ADFContext.getCurrent().getSessionScope();
            ViewObjectImpl vo = this.getShGrnVO1();
            String grnStatus = null;
                    ResultSet rs;
                    String q1 = null;
                            q1 = "select damage from sd_grn where grn_num = '"+grnNum+
                                "' and comp_fa ='"+session.get("compCode")+"' and dealer_map_cd = '"+session.get("dealerMapCd")+"' and parent_group = '"+session.get("parentGroupCd")+"' and loc_cd ='"+session.get("locCd")+"'";  
                     try {  
                            rs = getDBTransaction().createStatement(0).executeQuery(q1);
           
                if (rs.next()) {
                    grnStatus = rs.getString(1).toString();
                }
            } catch (SQLException e) {
                e.printStackTrace();
            }
                    return grnStatus;

        }

    /**
     * Container's getter for AmDealerAmDealerLocLOV1.
     * @return AmDealerAmDealerLocLOV1
     */
    public ViewObjectImpl getAmDealerAmDealerLocLOV1() {
        return (ViewObjectImpl) findViewObject("AmDealerAmDealerLocLOV1");
    }

    /**
     * Container's getter for HSRPSummaryReportTO1.
     * @return HSRPSummaryReportTO1
     */
    public HSRPSummaryReportTOImpl getHSRPSummaryReportTO1() {
        return (HSRPSummaryReportTOImpl) findViewObject("HSRPSummaryReportTO1");
    }
    public String genEinvQRCode(){
            SalesInvoiceVORowImpl salesInvrw = (SalesInvoiceVORowImpl)getSalesInvoiceVO1().getCurrentRow();
            Map session = ADFContext.getCurrent().getSessionScope();
            String locCd = session.get("locCd").toString();
            String parentG = session.get("parentGroupCd").toString();
            String userId = session.get("userId").toString();
            Integer dealerMp = new Integer(session.get("dealerMapCd").toString());
            String stmt = "begin PKG_SERV_PROCESS_DATA.val_ins_invoices_B2C_EW(?,?,?,?,?,?,?,?,?,?); end;";
            DBTransaction dbtxn = (DBTransaction) getTransaction();
            CallableStatement cs = dbtxn.createCallableStatement(stmt.toString(), 1);
            
            try {
                cs.setObject(1, "EWS");
                cs.setObject(2, "EWS");
                cs.setObject(3, parentG);
                cs.setObject(4, dealerMp);
                cs.setObject(5, locCd);
                cs.setObject(6, salesInvrw.getPolicyNum());
                cs.setObject(7, userId);
                cs.setObject(8, "S");
                cs.registerOutParameter(9, OracleTypes.NUMERIC);
                cs.registerOutParameter(10, OracleTypes.VARCHAR);
                cs.execute();
                
                if (cs.getString(10)!=null) {
                    return cs.getString(10);
                }
            } catch (SQLException sqlerr) {
                throw new JboException(sqlerr);
            } finally {
                try {
                    if (cs != null) {
                        cs.close();
                    }
                } catch (Exception e) {
                }
            }
            return null;
    }

    /**
     * Container's getter for HSRPSummaryReportRO1.
     * @return HSRPSummaryReportRO1
     */
    public ViewObjectImpl getHSRPSummaryReportRO1() {
        return (ViewObjectImpl) findViewObject("HSRPSummaryReportRO1");
    }
    public void filterHSRPSummaryReport(Date fromDate,Date toDate){
                Map session = ADFContext.getCurrent().getSessionScope();
                Integer principalMapCd = new Integer(session.get("principalMapCd").toString());
                Integer dealerMapCd = new Integer(session.get("dealerMapCd").toString());
                String loc = session.get("locCd").toString();
                String parent = session.get("parentGroupCd").toString();
                ViewObjectImpl vo = this.getHSRPSummaryReportRO1();
                vo.setNamedWhereClauseParam("bindprincipal", principalMapCd);
                vo.setNamedWhereClauseParam("bindDEALER", dealerMapCd);
                vo.setNamedWhereClauseParam("bindLOC_CD", loc);
                vo.setNamedWhereClauseParam("bindPARENT_GROUP", parent);
                vo.setNamedWhereClauseParam("bindFROM_DATE", fromDate);
                vo.setNamedWhereClauseParam("bindTO_DATE", toDate);
                System.out.println("HSRP Summary excel -> in ampl class , print select query is  " + vo.getQuery());
                vo.executeQuery();
            }

    /**
     * Container's getter for HSRPSummaryReportStaffTO1.
     * @return HSRPSummaryReportStaffTO1
     */
    public HSRPSummaryReportStaffTOImpl getHSRPSummaryReportStaffTO1() {
        return (HSRPSummaryReportStaffTOImpl) findViewObject("HSRPSummaryReportStaffTO1");
    }

    /**
     * Container's getter for HSRPSummaryReportStaffRO1.
     * @return HSRPSummaryReportStaffRO1
     */
    public ViewObjectImpl getHSRPSummaryReportStaffRO1() {
        return (ViewObjectImpl) findViewObject("HSRPSummaryReportStaffRO1");
    }
    public void filterHSRPSummaryReportStaff(Date fromDate,Date toDate){
                    Map session = ADFContext.getCurrent().getSessionScope();
                    Integer principalMapCd = new Integer(session.get("principalMapCd").toString());
                    ViewObjectImpl vo = this.getHSRPSummaryReportStaffRO1();
                    vo.setNamedWhereClauseParam("bindprincipal", principalMapCd);
                    vo.setNamedWhereClauseParam("bindFROM_DATE", fromDate);
                    vo.setNamedWhereClauseParam("bindTO_DATE", toDate);
                    System.out.println("HSRP Summary Report Staff excel -> in ampl class , print select query is  " + vo.getQuery());
                    vo.executeQuery();
                }

    /**
     * Container's getter for AllIndiaSchemeDetailsExcRO1.
     * @return AllIndiaSchemeDetailsExcRO1
     */
    public ViewObjectImpl getAllIndiaSchemeDetailsExcRO1() {
        return (ViewObjectImpl) findViewObject("AllIndiaSchemeDetailsExcRO1");
    }

    /**
     * Container's getter for AllIndiaSchemeDetailsPDFRO1.
     * @return AllIndiaSchemeDetailsPDFRO1
     */
    public ViewObjectImpl getAllIndiaSchemeDetailsPDFRO1() {
        return (ViewObjectImpl) findViewObject("AllIndiaSchemeDetailsPDFRO1");
    }

    /**
     * Container's getter for AllIndiaSchemeDetailsTO1.
     * @return AllIndiaSchemeDetailsTO1
     */
    public ViewObjectImpl getAllIndiaSchemeDetailsTO1() {
        return (ViewObjectImpl) findViewObject("AllIndiaSchemeDetailsTO1");
    }

    /**
     * Container's getter for ChargesParamConcatRO1.
     * @return ChargesParamConcatRO1
     */
    public ViewObjectImpl getChargesParamConcatRO1() {
        return (ViewObjectImpl) findViewObject("ChargesParamConcatRO1");
    }

    /**
     * Container's getter for AmDealerListPreInvoiceLOV1.
     * @return AmDealerListPreInvoiceLOV1
     */
    public ViewObjectImpl getAmDealerListPreInvoiceLOV1() {
        return (ViewObjectImpl) findViewObject("AmDealerListPreInvoiceLOV1");
    }
    
    public String grnFdiInsert() {
            ViewObjectImpl shvo = this.getShGrnVO1();
            Row shrow = shvo.getCurrentRow();
            ViewObjectImpl sdvo = this.getSdGrnVO2();
            Row sdrow = sdvo.getCurrentRow();
            String error = null;
            Map session = ADFContext.getCurrent().getSessionScope();
            String locCd = session.get("locCd").toString();
            String compFa = session.get("compCode").toString();
            String parentG = session.get("parentGroupCd").toString();
            String userId = session.get("userId").toString();
            String dealermapcd = session.get("dealerMapCd").toString();
            Integer dealerMp = new Integer(session.get("dealerMapCd").toString());
            Integer pmc = new Integer(session.get("principalMapCd").toString());
            String tallyInt = session.get("tallyIntegration").toString();
            DBTransaction dbtxn = (DBTransaction) getTransaction();
            oracle.jbo.domain.Date sysdate = new oracle.jbo.domain.Date(Date.getCurrentDate());
           
            if("R".equals(shrow.getAttribute("TranRecd"))) {
                Object status = callStoredFunction(Types.VARCHAR, "PKG_FDI.SF_VALID_DEALER(?,?,?)", new Object[] { parentG,dealerMp,locCd  });
                if (status != null) {
                    status = status.toString();
                }
                if("Y".equals(status)) {
                    if(pmc == 2) {
                        try {
                            String stmt = "begin PKG_FDI.SP_INS_GRN_INTO_FDI_SMIL(?,?,?,?,?,?);commit; end;";
                            CallableStatement cs = dbtxn.createCallableStatement(stmt.toString(), 1);
                            cs.setObject(1, parentG);
                            cs.setObject(2, dealermapcd);
                            cs.setObject(3, locCd);
                            cs.setObject(4, shrow.getAttribute("GrnNum"));
                            cs.registerOutParameter(5, OracleTypes.VARCHAR);
                            cs.registerOutParameter(6, OracleTypes.VARCHAR);
                            cs.execute();
                            if (cs.getString(6)!=null) {
                                return cs.getString(6);
                            }
                        }catch(Exception e) {
                            e.printStackTrace();
                        }
                    } else {
                        try {
                            String stmt = "begin PKG_FDI.SP_INS_GRN_INTO_FDI(?,?,?,?,?,?);commit; end;";
                            CallableStatement cs = dbtxn.createCallableStatement(stmt.toString(), 1);
                            cs.setObject(1, parentG);
                            cs.setObject(2, dealermapcd);
                            cs.setObject(3, locCd);
                            cs.setObject(4, shrow.getAttribute("GrnNum"));
                            cs.registerOutParameter(5, OracleTypes.VARCHAR);
                            cs.registerOutParameter(6, OracleTypes.VARCHAR);
                            cs.execute();
                            if (cs.getString(6)!=null) {
                                return cs.getString(6);
                            }
                        }catch(Exception e) {
                            e.printStackTrace();
                        }
                    }
                }
            }
            if(shrow.getAttribute("GrnNumT") != null && "R".equals(shrow.getAttribute("TranRecd"))) {
                       try {
                        String stmt = "begin pss_int_data_population(?,?,?,?,?,?,?,?);commit; end;";
                        CallableStatement cs = dbtxn.createCallableStatement(stmt.toString(), 1);
                        cs.setObject(1, parentG);
                        cs.setObject(2, dealermapcd);
                        cs.setObject(3, locCd);
                        cs.setObject(4, compFa);
                        cs.setObject(5, "GRN");
                        cs.setObject(6, shrow.getAttribute("GrnNum"));
                        cs.setObject(7, null);
                        cs.registerOutParameter(8, OracleTypes.VARCHAR);
                        cs.execute();
                        if (cs.getString(8)!=null) {
                            return cs.getString(8);
                        }
                        }catch(Exception e) {
                        e.printStackTrace();
                        }
            }
                
                if("Y".equals(tallyInt)) {
                    if(shrow.getAttribute("GrnNumT") == null) {
                        try {
                        String stmt = "begin PK_FINC_TRNS_INTERFACE.SALS_GRN_trnst(?,?,?,?,?,?,?,?,?,?,?);commit; end;";
                        CallableStatement cs = dbtxn.createCallableStatement(stmt.toString(), 1);
                        cs.setObject(1, parentG);
                        cs.setObject(2, dealermapcd);
                        cs.setObject(3, locCd);
                        cs.setObject(4, compFa);
                        cs.setObject(5, "Dms Purchase");
                        cs.setObject(6, shrow.getAttribute("GrnNum"));
                        cs.setObject(7, userId);
                        cs.setObject(8,sysdate);
                        cs.setObject(9, "O");
                        cs.registerOutParameter(10, OracleTypes.VARCHAR);
                        cs.registerOutParameter(11, OracleTypes.VARCHAR);
                        cs.execute();
                        if (cs.getString(11)!=null) {
                            return cs.getString(11);
                        }
                        }catch(Exception e) {
                        e.printStackTrace();
                        }
                    } else if(shrow.getAttribute("GrnNumT") != null && "R".equals(shrow.getAttribute("TranRecd"))) {
                        try {
                        String stmt = "begin PK_FINC_TRNS_INTERFACE.SALS_GRN(?,?,?,?,?,?,?,?,?,?,?);commit; end;";
                        CallableStatement cs = dbtxn.createCallableStatement(stmt.toString(), 1);
                        cs.setObject(1, parentG);
                        cs.setObject(2, dealermapcd);
                        cs.setObject(3, locCd);
                        cs.setObject(4, compFa);
                        cs.setObject(5, "Dms Purchase");
                        cs.setObject(6, shrow.getAttribute("GrnNum"));
                        cs.setObject(7, userId);
                        cs.setObject(8,sysdate);
                        cs.setObject(9, "O");
                        cs.registerOutParameter(10, OracleTypes.VARCHAR);
                        cs.registerOutParameter(11, OracleTypes.VARCHAR);
                        cs.execute();
                        if (cs.getString(11)!=null) {
                            return cs.getString(11);
                        }
                        }catch(Exception e) {
                        e.printStackTrace();
                        }
                    }
                }
            
            return "";
        }

    /**
     * Container's getter for AllIndiaSchemeYtdTO1.
     * @return AllIndiaSchemeYtdTO1
     */
    public ViewObjectImpl getAllIndiaSchemeYtdTO1() {
        return (ViewObjectImpl) findViewObject("AllIndiaSchemeYtdTO1");
    }
     public void PkgCallForAllIndiaSchemeDetailsPDF(String zone, String region, String forDesc, String fromDate, String toDate) {
        
        
        LOGGER.info("inside PkgCallForAllIndiaSchemeDetailsPDF");
        String stmt = "begin Pkg_Pss_Scheme_Reports.SP_PSS_SCHEME_DETAILS(?,?,?,?,?); end;";
        DBTransaction dbtxn = (DBTransaction) getTransaction();
        CallableStatement cs = dbtxn.createCallableStatement(stmt.toString(), 1);
        try {
            cs.setObject(1, zone);
            cs.setObject(2, region);
            cs.setObject(3, forDesc);
            cs.setObject(4, fromDate);
            cs.setObject(5, toDate);
        
            cs.execute();
            LOGGER.info("after execution of pkg  - PkgCallForAllIndiaSchemeDetailsPDF" + fromDate + " vvv " + toDate + " vvv " + region + " vvv " +
                               zone + " " + forDesc);
        
            LOGGER.info("end of the PkgCallForAllIndiaSchemeDetailsPDF");
    


        } catch (SQLException sqlerr) {
            throw new JboException(sqlerr);
        } finally {
            try {
                if (cs != null) {
                    cs.close();
    }
            } catch (Exception e) {
            }
        }
    }


    /**
     * Container's getter for NEXAMISReportTO1.
     * @return NEXAMISReportTO1
     */
    public ViewObjectImpl getNEXAMISReportTO1() {
        return (ViewObjectImpl) findViewObject("NEXAMISReportTO1");
    }

    /**
     * Container's getter for NEXAMISDealerLOV1.
     * @return NEXAMISDealerLOV1
     */
    public ViewObjectImpl getNEXAMISDealerLOV1() {
        return (ViewObjectImpl) findViewObject("NEXAMISDealerLOV1");
    }

    /**
     * Container's getter for NEXAMISRegionLOV1.
     * @return NEXAMISRegionLOV1
     */
    public ViewObjectImpl getNEXAMISRegionLOV1() {
        return (ViewObjectImpl) findViewObject("NEXAMISRegionLOV1");
    }

    /**
     * Container's getter for NexaMISReportExcelRO1.
     * @return NexaMISReportExcelRO1
     */
    public ViewObjectImpl getNexaMISReportExcelRO1() {
        return (ViewObjectImpl) findViewObject("NexaMISReportExcelRO1");
    }
}

